build/server-phar.php: * @phpstan-param array<string, mixed> $metadata
build/server-phar.php:	$phar->setMetadata($metadata);
build/server-phar.php:	$phar->setStub($stub);
build/server-phar.php:	$phar->setSignatureAlgorithm($signatureAlgo);
build/server-phar.php:	$phar->startBuffering();
build/server-phar.php:	$count = count($phar->buildFromIterator($regexIterator, $basePath));
build/server-phar.php:		$phar->compressFiles($compression);
build/server-phar.php:	$phar->stopBuffering();
build/server-phar.php:	yield "Done in " . round(microtime(true) - $start, 3) . "s";
build/server-phar.php:		echo "Set phar.readonly to 0 with -dphar.readonly=0" . PHP_EOL;
build/server-phar.php:		echo "Remove Composer dev dependencies before building (composer install --no-dev)" . PHP_EOL;
build/server-phar.php:		$opts["out"] ?? getcwd() . DIRECTORY_SEPARATOR . "PocketMine-MP.phar",
build/preprocessor/README.md:Scripts used to optimise PocketMine-MP before building phars.
build/preprocessor/README.md:These scripts are used by Jenkins to optimize PocketMine-MP source code in production phars.
build/preprocessor/README.md:This script uses the C preprocessor to pre-process PocketMine-MP source code before it is packaged into a phar. The headers in the `rules/` directory define C macros which are used to preprocess the code and optimize it for use in production.
build/preprocessor/README.md:- `path`: Path to the PocketMine-MP source code to optimize.
build/preprocessor/PreProcessor.php:	echo "Provide a path to process using --path" . PHP_EOL;
build/preprocessor/PreProcessor.php:		$extra .= "-D $k=$v ";
build/preprocessor/PreProcessor.php:	$process = proc_open("cpp -traditional-cpp -nostdinc -include '" . THIS_PATH . "/processed/rules/PocketMine.h' -I '" . THIS_PATH . "/processed' " . $extra . " -E -C -P -D FULL - -o -", $descriptor, $pipes);
build/preprocessor/PreProcessor.php:	if(substr($file, -2) !== ".h"){
build/preprocessor/PreProcessor.php:		$line = str_replace(["::", "->", '$'], ["__STATIC_CALL__", "__METHOD_CALL__", "__VARIABLE_DOLLAR__"], $line);
build/preprocessor/PreProcessor.php:	if(substr($path, -4) !== ".php"){
build/preprocessor/PreProcessor.php:	$code = str_replace(["__STATIC_CALL__", "__METHOD_CALL__", "__VARIABLE_DOLLAR__", "__STARTING_COMMENT_BADLINE__"], ["::", "->", '$', " * |  _ \\ ___   ___| | _____| |_|  \\/  (_)_ __   ___      |  \\/  |  _ \\"],
build/preprocessor/PreProcessor.php:		process(str_replace(["::", "->", '$', " * |  _ \\ ___   ___| | _____| |_|  \\/  (_)_ __   ___      |  \\/  |  _ \\"], ["__STATIC_CALL__", "__METHOD_CALL__", "__VARIABLE_DOLLAR__", "__STARTING_COMMENT_BADLINE__"], $oldCode))
build/preprocessor/rules/Binary.h:#define Binary::writeLTriad(data) (\substr(\pack("V", data), 0, -1))
build/preprocessor/rules/BinaryIO.h:#define $this->put(data) ($this->buffer .= data)
build/preprocessor/rules/BinaryIO.h:#define $this->putBool(data) ($this->buffer .= Binary::writeBool(data))
build/preprocessor/rules/BinaryIO.h:#define $this->getBool() (Binary::readBool($this->get(1)))
build/preprocessor/rules/BinaryIO.h:#define $this->getByte() (\ord($this->get(1)))
build/preprocessor/rules/BinaryIO.h:#define $this->putByte(data) ($this->buffer .= \chr(data))
build/preprocessor/rules/BinaryIO.h:#define $this->getShort() (Binary::readShort($this->get(2)))
build/preprocessor/rules/BinaryIO.h:#define $this->getSignedShort() (Binary::readSignedShort($this->get(2)))
build/preprocessor/rules/BinaryIO.h:#define $this->getLShort() (Binary::readLShort($this->get(2)))
build/preprocessor/rules/BinaryIO.h:#define $this->getSignedLShort() (Binary::readSignedLShort($this->get(2)))
build/preprocessor/rules/BinaryIO.h:#define $this->putShort(data) ($this->buffer .= Binary::writeShort(data))
build/preprocessor/rules/BinaryIO.h:#define $this->putLShort(data) ($this->buffer .= Binary::writeLShort(data))
build/preprocessor/rules/BinaryIO.h:#define $this->getTriad() (Binary::readTriad($this->get(3)))
build/preprocessor/rules/BinaryIO.h:#define $this->getLTriad() (Binary::readLTriad($this->get(3)))
build/preprocessor/rules/BinaryIO.h:#define $this->putTriad(data) ($this->buffer .= Binary::writeTriad(data))
build/preprocessor/rules/BinaryIO.h:#define $this->putLTriad(data) ($this->buffer .= Binary::writeLTriad(data))
build/preprocessor/rules/BinaryIO.h:#define $this->getInt() (Binary::readInt($this->get(4)))
build/preprocessor/rules/BinaryIO.h:#define $this->getLInt() (Binary::readLInt($this->get(4)))
build/preprocessor/rules/BinaryIO.h:#define $this->putInt(data) ($this->buffer .= Binary::writeInt(data))
build/preprocessor/rules/BinaryIO.h:#define $this->putLInt(data) ($this->buffer .= Binary::writeLInt(data))
build/preprocessor/rules/BinaryIO.h:#define $this->getLong() (Binary::readLong($this->get(8)))
build/preprocessor/rules/BinaryIO.h:#define $this->getLLong() (Binary::readLLong($this->get(8)))
build/preprocessor/rules/BinaryIO.h:#define $this->putLong(data) ($this->buffer .= Binary::writeLong(data))
build/preprocessor/rules/BinaryIO.h:#define $this->putLLong(data) ($this->buffer .= Binary::writeLLong(data))
build/preprocessor/rules/BinaryIO.h:#define $this->getFloat() (Binary::readFloat($this->get(4)))
build/preprocessor/rules/BinaryIO.h:#define $this->getRoundedFloat(accuracy) (Binary::readRoundedFloat($this->get(4), accuracy))
build/preprocessor/rules/BinaryIO.h:#define $this->getLFloat() (Binary::readLFloat($this->get(4)))
build/preprocessor/rules/BinaryIO.h:#define $this->getRoundedLFloat(accuracy) (Binary::readRoundedLFloat($this->get(4), accuracy))
build/preprocessor/rules/BinaryIO.h:#define $this->putFloat(data) ($this->buffer .= Binary::writeFloat(data))
build/preprocessor/rules/BinaryIO.h:#define $this->putLFloat(data) ($this->buffer .= Binary::writeLFloat(data))
build/preprocessor/rules/NBT.h:#define $nbt->put(data) ($nbt->buffer .= data)
build/preprocessor/rules/NBT.h:#define $nbt->getByte() (\ord($nbt->get(1)))
build/preprocessor/rules/NBT.h:#define $nbt->putByte(data) ($nbt->buffer .= \chr(data))
build/preprocessor/rules/NBT.h:#define $this->put(data) ($this->buffer .= data)
build/preprocessor/rules/NBT.h:#define $this->getByte() (\ord($this->get(1)))
build/preprocessor/rules/NBT.h:#define $this->putByte(data) ($this->buffer .= \chr(data))
build/preprocessor/rules/Level.h:#define $this->getChunkEntities(chunkX, chunkZ) (($______chunk = $this->getChunk(chunkX, chunkZ)) !== null ? $______chunk->getEntities() : [])
build/preprocessor/rules/Level.h:#define $this->isChunkLoaded(chunkX, chunkZ) (isset($this->chunks[Level::chunkHash(chunkX, chunkZ)]))
build/preprocessor/rules/Level.h:#define $this->getBlockIdAt(x, y, z) ($this->getChunk(x >> 4, z >> 4, true)->getBlockId(x & 0x0f, y, z & 0x0f))
build/preprocessor/rules/Level.h:#define $this->getBlockDataAt(x, y, z) ($this->getChunk(x >> 4, z >> 4, true)->getBlockData(x & 0x0f, y, z & 0x0f))
build/preprocessor/rules/Level.h:#define $this->getBlockLightAt(x, y, z) ($this->getChunk(x >> 4, z >> 4, true)->getBlockLight(x & 0x0f, y, z & 0x0f))
build/preprocessor/rules/Level.h:#define $this->getBlockSkyLightAt(x, y, z) ($this->getChunk(x >> 4, z >> 4, true)->getBlockSkyLight(x & 0x0f, y, z & 0x0f))
build/php/README.md:# Custom PHP build scripts for PocketMine-MP
build/php/README.md:[![Build Status](https://dev.azure.com/pocketmine/PHP-Builds/_apis/build/status/pmmp.php-build-scripts)](https://dev.azure.com/pocketmine/PHP-Builds/_build?definitionId=3&_a=summary&view=branches)
build/php/README.md:## Looking for prebuilt binaries? Head over to our [Jenkins build server](https://jenkins.pmmp.io/job/PHP-7.3-Aggregate)
build/php/README.md:Bash script used to compile PHP on MacOS and Linux platforms. Make sure you have ``make autoconf automake libtool m4 wget getconf gzip bzip2 bison g++ git cmake pkg-config re2c``.
build/php/README.md:- Most dependencies can be installed using Homebrew
build/php/README.md:- You will additionally need `glibtool` (GNU libtool, xcode libtool won't work)
build/php/README.md:- You also MUST specify target as `mac` or `mac64` if building for Mac, on Mac.
build/php/README.md:#### Android 64-bit (cross-compile)
build/php/README.md:- Only aarch64 targets are supported for Android cross-compile.
build/php/README.md:- The `aarch64-linux-musl` toolchain is required. You can compile and install it using https://github.com/pmmp/musl-cross-make (PMMP fork includes musl-libc patches for DNS resolver config path and increasing stack size limit for LevelDB)
build/php/README.md:- It is strongly recommended that you enable abusive optimizations for Android targets (`-f` flag) for best performance.
build/php/README.md:| ------------ | ------------------------------------------------------------------------------------- |
build/php/README.md:| -d           | Will compile with debug and the xdebug PHP extension                                  |
build/php/README.md:| -f           | Enabling abusive optimizations...                                                     |
build/php/README.md:| -g           | Will compile GD2                                                                      |
build/php/README.md:| -j           | Set make threads to #                                                                 |
build/php/README.md:| -l           | Will compile with LevelDB support (experimental with PHP7)                            |
build/php/README.md:| -n           | Don't remove sources after completing compilation                                     |
build/php/README.md:| -r           | Will compile Readline                                                                 |
build/php/README.md:| -s           | Will compile everything statically                                                    |
build/php/README.md:| -t           | Set target                                                                            |
build/php/README.md:| -u           | Will compile PocketMine-ChunkUtils C extension (recommended if using PC Anvil worlds) |
build/php/README.md:| -v           | Enable Valgrind support in PHP                                                        |
build/php/README.md:| -x           | Specifies we are doing cross-compile                                                  |
build/php/README.md:| --------------- | -------------------------------- |
build/php/README.md:| linux64         | ``-t linux64 -l -j4 -f x86_64``  |
build/php/README.md:| mac64           | ``-t mac64 -l -j4 -f``           |
build/php/README.md:| android-aarch64 | ``-t android-aarch64 -x -j4 -f`` |
build/php/README.md:- If used, the `-t` option (target) MUST be specified BEFORE the `-f` option (optimizations)
build/php/README.md:- Avoid using the script in directory trees containing spaces. Some libraries don't like trying to be built in directory trees containing spaces, e.g. `/home/user/my folder/pocketmine-mp/` might experience problems.
build/php/README.md:Script to install PocketMine-MP and PHP binaries on Unix platforms.
build/php/README.md:| ------ | ----------------------------------- |
build/php/README.md:| -u     | Update PocketMine-MP                |
build/php/README.md:| -d     | Install directory                   |
build/php/README.md:| -v     | Channel (stable or development)     |
build/php/README.md:## windows-compile-vs.bat
build/php/README.md:Prebuilt binaries can be downloaded from our [AppVeyor build job](https://ci.appveyor.com/project/pmmp/php-build-scripts/build/artifacts).
build/php/azure-pipelines.yml:- job: Linux
build/php/azure-pipelines.yml:    vmImage: 'ubuntu-16.04'
build/php/azure-pipelines.yml:  - bash: |
build/php/azure-pipelines.yml:      sudo apt-get update
build/php/azure-pipelines.yml:      sudo apt-get install make autoconf automake libtool libtool-bin m4 wget libc-bin gzip bzip2 bison g++ git re2c
build/php/azure-pipelines.yml:  - bash: |
build/php/azure-pipelines.yml:      # Used "set -ex" instead of hashbang since script isn't executed with hashbang
build/php/azure-pipelines.yml:      set -ex
build/php/azure-pipelines.yml:      echo | ./compile.sh -t linux64 -j 4 -f -u -g -l
build/php/azure-pipelines.yml:      tar -czf ./PHP_Linux-x86_64.tar.gz bin
build/php/azure-pipelines.yml:  - bash: |
build/php/azure-pipelines.yml:      cp PHP_Linux-x86_64.tar.gz $BUILD_ARTIFACTSTAGINGDIRECTORY
build/php/azure-pipelines.yml:  - task: PublishBuildArtifacts@1
build/php/azure-pipelines.yml:- job: Windows
build/php/azure-pipelines.yml:    vmImage: 'vs2017-win2016'
build/php/azure-pipelines.yml:  - script: |
build/php/azure-pipelines.yml:      choco install wget --no-progress
build/php/azure-pipelines.yml:  - script: |
build/php/azure-pipelines.yml:      windows-compile-vs.bat
build/php/azure-pipelines.yml:      SOURCES_PATH: $(Build.SourcesDirectory)\pocketmine-php-sdk
build/php/azure-pipelines.yml:  - script: |
build/php/azure-pipelines.yml:      cp php-*.zip %BUILD_ARTIFACTSTAGINGDIRECTORY%
build/php/azure-pipelines.yml:  - script: type compile.log
build/php/azure-pipelines.yml:  - task: PublishBuildArtifacts@1
build/php/azure-pipelines.yml:- job: MacOS
build/php/azure-pipelines.yml:    vmImage: 'macOS-10.14'
build/php/azure-pipelines.yml:  - bash: |
build/php/azure-pipelines.yml:      brew install libtool autoconf automake pkg-config bison re2c
build/php/azure-pipelines.yml:  - bash: |
build/php/azure-pipelines.yml:      set -ex
build/php/azure-pipelines.yml:      ./compile.sh -t mac64 -j4 -f -u -g -l
build/php/azure-pipelines.yml:      tar -czf ./PHP_MacOS-x86_64.tar.gz bin
build/php/azure-pipelines.yml:  - bash: |
build/php/azure-pipelines.yml:      cp PHP_MacOS-x86_64.tar.gz $BUILD_ARTIFACTSTAGINGDIRECTORY
build/php/azure-pipelines.yml:  - task: PublishBuildArtifacts@1
build/php/windows-compile-vs.bat:set PATH=C:\Program Files\7-Zip;C:\Program Files (x86)\GnuWin32\bin;%PATH%
build/php/windows-compile-vs.bat:where git >nul 2>nul || (call :pm-echo-error "git is required" & exit 1)
build/php/windows-compile-vs.bat:where cmake >nul 2>nul || (call :pm-echo-error "cmake is required" & exit 1)
build/php/windows-compile-vs.bat:where 7z >nul 2>nul || (call :pm-echo-error "7z is required" & exit 1)
build/php/windows-compile-vs.bat:where wget >nul 2>nul || (call :pm-echo-error "wget is required" & exit 1)
build/php/windows-compile-vs.bat:call :pm-echo "PHP Windows compiler"
build/php/windows-compile-vs.bat:call :pm-echo "Setting up environment..."
build/php/windows-compile-vs.bat:	set PHP_HAVE_DEBUG=enable-debug-pack
build/php/windows-compile-vs.bat:	call :pm-echo "Building release binaries with debug symbols"
build/php/windows-compile-vs.bat:	set PHP_HAVE_DEBUG=enable-debug
build/php/windows-compile-vs.bat:	call :pm-echo "Building debug binaries"
build/php/windows-compile-vs.bat:	set SOURCES_PATH=C:\pocketmine-php-sdk
build/php/windows-compile-vs.bat:call :pm-echo "Using path %SOURCES_PATH% for build sources"
build/php/windows-compile-vs.bat:call :check-vs-exists 2017 15 || call :check-vs-exists 2019 16 || call :pm-fatal-error "Please install Visual Studio 2017 or 2019"
build/php/windows-compile-vs.bat:call "C:\Program Files (x86)\Microsoft Visual Studio\%VS_YEAR%\%VS_EDITION%\VC\Auxiliary\Build\vcvarsall.bat" %ARCH% -vcvars_ver=14.16 >>"%log_file%" 2>&1 || call :pm-fatal-error "Error initializing Visual Studio environment"
build/php/windows-compile-vs.bat::batchfiles-are-stupid
build/php/windows-compile-vs.bat:move "%log_file%" "%log_file%" >nul 2>nul || goto :batchfiles-are-stupid
build/php/windows-compile-vs.bat:	call :pm-echo "Deleting old binary folder..."
build/php/windows-compile-vs.bat:	rmdir /s /q bin >>"%log_file%" 2>&1 || call :pm-fatal-error "Failed to delete old binary folder"
build/php/windows-compile-vs.bat:	call :pm-echo "Deleting old workspace..."
build/php/windows-compile-vs.bat:	rmdir /s /q "%SOURCES_PATH%" >>"%log_file%" 2>&1 || call :pm-fatal-error "Failed to delete old workspace"
build/php/windows-compile-vs.bat:call :pm-echo "Getting SDK..."
build/php/windows-compile-vs.bat:git clone https://github.com/OSTC/php-sdk-binary-tools.git -b php-sdk-%PHP_SDK_VER% --depth=1 -q "%SOURCES_PATH%" >>"%log_file%" 2>&1 || call :pm-fatal-error "Failed to download SDK"
build/php/windows-compile-vs.bat:call :pm-echo "Downloading PHP source version %PHP_VER%..."
build/php/windows-compile-vs.bat:	git clone https://github.com/php/php-src -b php-%PHP_VER% --depth=1 -q php-src >>"%log_file%" 2>&1 || exit 1
build/php/windows-compile-vs.bat:	call :get-zip http://windows.php.net/downloads/releases/php-%PHP_VER%-src.zip >>"%log_file%" 2>&1 || call :pm-fatal-error "Failed to download PHP source"
build/php/windows-compile-vs.bat:	move php-%PHP_VER%-src php-src >>"%log_file%" 2>&1 || call :pm-fatal-error "Failed to move PHP source to target directory"
build/php/windows-compile-vs.bat:call :pm-echo "Downloading PHP dependencies into %DEPS_DIR%..."
build/php/windows-compile-vs.bat:call bin\phpsdk_deps.bat -u -t %VC_VER% -b %PHP_MAJOR_VER% -a %ARCH% -f -d %DEPS_DIR_NAME% >>"%log_file%" 2>&1 || exit 1
build/php/windows-compile-vs.bat:call :pm-echo "Getting additional dependencies..."
build/php/windows-compile-vs.bat:call :pm-echo "Downloading LibYAML version %LIBYAML_VER%..."
build/php/windows-compile-vs.bat:call :get-zip https://github.com/yaml/libyaml/archive/%LIBYAML_VER%.zip || exit 1
build/php/windows-compile-vs.bat:move libyaml-%LIBYAML_VER% libyaml >>"%log_file%" 2>&1
build/php/windows-compile-vs.bat:call :pm-echo "Generating build configuration..."
build/php/windows-compile-vs.bat:cmake -G "%CMAKE_TARGET%" -A "%ARCH%"^
build/php/windows-compile-vs.bat: -DCMAKE_PREFIX_PATH="%DEPS_DIR%"^
build/php/windows-compile-vs.bat: -DCMAKE_INSTALL_PREFIX="%DEPS_DIR%"^
build/php/windows-compile-vs.bat: -DBUILD_SHARED_LIBS=ON^
build/php/windows-compile-vs.bat:call :pm-echo "Compiling..."
build/php/windows-compile-vs.bat:call :pm-echo "Installing files..."
build/php/windows-compile-vs.bat:call :pm-echo "Downloading pthread-w32 version %PTHREAD_W32_VER%..."
build/php/windows-compile-vs.bat:mkdir pthread-w32
build/php/windows-compile-vs.bat:cd /D pthread-w32
build/php/windows-compile-vs.bat:call :get-zip https://netcologne.dl.sourceforge.net/project/pthreads4w/pthreads4w-code-v%PTHREAD_W32_VER%.zip || exit 1
build/php/windows-compile-vs.bat:move pthreads4w-code-* pthreads4w-code >>"%log_file%" 2>&1
build/php/windows-compile-vs.bat:cd /D pthreads4w-code
build/php/windows-compile-vs.bat:call :pm-echo "Compiling..."
build/php/windows-compile-vs.bat:call :pm-echo "Copying files..."
build/php/windows-compile-vs.bat:call :pm-echo "Downloading pmmp/leveldb version %LEVELDB_MCPE_VER%..."
build/php/windows-compile-vs.bat:call :get-zip https://github.com/pmmp/leveldb/archive/%LEVELDB_MCPE_VER%.zip || exit 1
build/php/windows-compile-vs.bat:move leveldb-%LEVELDB_MCPE_VER% leveldb >>"%log_file%" 2>&1
build/php/windows-compile-vs.bat:call :pm-echo "Generating build configuration..."
build/php/windows-compile-vs.bat:cmake -G "%CMAKE_TARGET%" -A "%ARCH%"^
build/php/windows-compile-vs.bat: -DCMAKE_PREFIX_PATH="%DEPS_DIR%"^
build/php/windows-compile-vs.bat: -DCMAKE_INSTALL_PREFIX="%DEPS_DIR%"^
build/php/windows-compile-vs.bat: -DBUILD_SHARED_LIBS=ON^
build/php/windows-compile-vs.bat: -DLEVELDB_BUILD_BENCHMARKS=OFF^
build/php/windows-compile-vs.bat: -DLEVELDB_BUILD_TESTS=OFF^
build/php/windows-compile-vs.bat: -DZLIB_LIBRARY="%DEPS_DIR%\lib\zlib_a.lib"^
build/php/windows-compile-vs.bat:call :pm-echo "Compiling"
build/php/windows-compile-vs.bat:call :pm-echo "Installing files..."
build/php/windows-compile-vs.bat:call :pm-echo "Getting additional PHP extensions..."
build/php/windows-compile-vs.bat:cd /D php-src\ext
build/php/windows-compile-vs.bat:call :get-extension-zip-from-github "pthreads"              "%PHP_PTHREADS_VER%"              "pmmp"     "pthreads"                || exit 1
build/php/windows-compile-vs.bat:call :get-extension-zip-from-github "yaml"                  "%PHP_YAML_VER%"                  "php"      "pecl-file_formats-yaml"  || exit 1
build/php/windows-compile-vs.bat:call :get-extension-zip-from-github "pocketmine_chunkutils" "%PHP_POCKETMINE_CHUNKUTILS_VER%" "dktapps"  "PocketMine-C-ChunkUtils" || exit 1
build/php/windows-compile-vs.bat:call :get-extension-zip-from-github "igbinary"              "%PHP_IGBINARY_VER%"              "igbinary" "igbinary"                || exit 1
build/php/windows-compile-vs.bat:call :get-extension-zip-from-github "ds"                    "%PHP_DS_VER%"                    "php-ds"   "ext-ds"                  || exit 1
build/php/windows-compile-vs.bat:call :get-extension-zip-from-github "leveldb"               "%PHP_LEVELDB_VER%"               "pmmp"     "php-leveldb"             || exit 1
build/php/windows-compile-vs.bat:call :get-extension-zip-from-github "recursionguard"        "%PHP_RECURSIONGUARD_VER%"        "pmmp"     "ext-recursionguard"      || exit 1
build/php/windows-compile-vs.bat:call :pm-echo " - crypto: downloading %PHP_CRYPTO_VER%..."
build/php/windows-compile-vs.bat:git clone https://github.com/bukka/php-crypto.git crypto >>"%log_file%" 2>&1 || exit 1
build/php/windows-compile-vs.bat:git submodule update --init --recursive >>"%log_file%" 2>&1 || exit 1
build/php/windows-compile-vs.bat:cd /D php-src
build/php/windows-compile-vs.bat:call :pm-echo "Configuring PHP..."
build/php/windows-compile-vs.bat: --with-mp=auto^
build/php/windows-compile-vs.bat: --with-prefix=pocketmine-php-bin^
build/php/windows-compile-vs.bat: --%PHP_HAVE_DEBUG%^
build/php/windows-compile-vs.bat: --disable-all^
build/php/windows-compile-vs.bat: --disable-cgi^
build/php/windows-compile-vs.bat: --enable-cli^
build/php/windows-compile-vs.bat: --enable-zts^
build/php/windows-compile-vs.bat: --enable-pdo^
build/php/windows-compile-vs.bat: --enable-bcmath^
build/php/windows-compile-vs.bat: --enable-calendar^
build/php/windows-compile-vs.bat: --enable-com-dotnet^
build/php/windows-compile-vs.bat: --enable-ctype^
build/php/windows-compile-vs.bat: --enable-ds=shared^
build/php/windows-compile-vs.bat: --enable-filter^
build/php/windows-compile-vs.bat: --enable-hash^
build/php/windows-compile-vs.bat: --enable-igbinary=shared^
build/php/windows-compile-vs.bat: --enable-json^
build/php/windows-compile-vs.bat: --enable-mbstring^
build/php/windows-compile-vs.bat: --enable-opcache^
build/php/windows-compile-vs.bat: --enable-phar^
build/php/windows-compile-vs.bat: --enable-pocketmine-chunkutils=shared^
build/php/windows-compile-vs.bat: --enable-recursionguard=shared^
build/php/windows-compile-vs.bat: --enable-sockets^
build/php/windows-compile-vs.bat: --enable-tokenizer^
build/php/windows-compile-vs.bat: --enable-xmlreader^
build/php/windows-compile-vs.bat: --enable-xmlwriter^
build/php/windows-compile-vs.bat: --enable-zip^
build/php/windows-compile-vs.bat: --enable-zlib^
build/php/windows-compile-vs.bat: --with-bz2=shared^
build/php/windows-compile-vs.bat: --with-crypto=shared^
build/php/windows-compile-vs.bat: --with-curl^
build/php/windows-compile-vs.bat: --with-dom^
build/php/windows-compile-vs.bat: --with-gd=shared^
build/php/windows-compile-vs.bat: --with-gmp^
build/php/windows-compile-vs.bat: --with-iconv^
build/php/windows-compile-vs.bat: --with-leveldb=shared^
build/php/windows-compile-vs.bat: --with-libxml^
build/php/windows-compile-vs.bat: --with-mysqli=shared^
build/php/windows-compile-vs.bat: --with-mysqlnd^
build/php/windows-compile-vs.bat: --with-openssl^
build/php/windows-compile-vs.bat: --with-pcre-jit^
build/php/windows-compile-vs.bat: --with-pthreads=shared^
build/php/windows-compile-vs.bat: --with-simplexml^
build/php/windows-compile-vs.bat: --with-sodium^
build/php/windows-compile-vs.bat: --with-sqlite3=shared^
build/php/windows-compile-vs.bat: --with-xml^
build/php/windows-compile-vs.bat: --with-yaml^
build/php/windows-compile-vs.bat: --with-pdo-mysql^
build/php/windows-compile-vs.bat: --with-pdo-sqlite^
build/php/windows-compile-vs.bat: --without-readline >>"%log_file%" 2>&1 || call :pm-fatal-error "Error configuring PHP"
build/php/windows-compile-vs.bat:call :pm-echo "Compiling PHP..."
build/php/windows-compile-vs.bat:nmake >>"%log_file%" 2>&1 || call :pm-fatal-error "Error compiling PHP"
build/php/windows-compile-vs.bat:call :pm-echo "Assembling artifacts..."
build/php/windows-compile-vs.bat:nmake snap >>"%log_file%" 2>&1 || call :pm-fatal-error "Error assembling artifacts"
build/php/windows-compile-vs.bat:call :pm-echo "Removing unneeded dependency DLLs..."
build/php/windows-compile-vs.bat:REM remove ICU DLLs copied unnecessarily by nmake snap - this needs to be removed if we ever have ext/intl as a dependency
build/php/windows-compile-vs.bat:del /q "%SOURCES_PATH%\php-src\%ARCH%\Release_TS\php-%PHP_VER%\icu*.dll" 2>&1
build/php/windows-compile-vs.bat:REM remove enchant dependencies which are unnecessarily copied - this needs to be removed if we ever have ext/enchant as a dependency
build/php/windows-compile-vs.bat:del /q "%SOURCES_PATH%\php-src\%ARCH%\Release_TS\php-%PHP_VER%\glib-*.dll" 2>&1
build/php/windows-compile-vs.bat:del /q "%SOURCES_PATH%\php-src\%ARCH%\Release_TS\php-%PHP_VER%\gmodule-*.dll" 2>&1
build/php/windows-compile-vs.bat:rmdir /s /q "%SOURCES_PATH%\php-src\%ARCH%\Release_TS\php-%PHP_VER%\lib\enchant\" 2>&1
build/php/windows-compile-vs.bat:call :pm-echo "Copying artifacts..."
build/php/windows-compile-vs.bat:move "%SOURCES_PATH%\php-src\%ARCH%\%OUT_PATH_REL%_TS\php-%PHP_VER%" bin\php
build/php/windows-compile-vs.bat:call :pm-echo "Generating php.ini..."
build/php/windows-compile-vs.bat:(echo ;Custom PocketMine-MP php.ini file)>"%php_ini%"
build/php/windows-compile-vs.bat:(echo error_reporting=-1)>>"%php_ini%"
build/php/windows-compile-vs.bat:(echo zend.assertions=-1)>>"%php_ini%"
build/php/windows-compile-vs.bat:call :pm-echo "Downloading Microsoft Visual C++ Redistributable 2015-2019"
build/php/windows-compile-vs.bat:wget https://aka.ms/vs/16/release/vc_redist.x64.exe --no-check-certificate -q -O vc_redist.x64.exe || exit 1
build/php/windows-compile-vs.bat:call :pm-echo "Checking PHP build works..."
build/php/windows-compile-vs.bat:bin\php\php.exe --version >>"%log_file%" 2>&1 || call :pm-fatal-error "PHP build isn't working"
build/php/windows-compile-vs.bat:bin\php\php.exe -m >>"%log_file%" 2>&1
build/php/windows-compile-vs.bat:call :pm-echo "Packaging build..."
build/php/windows-compile-vs.bat:set package_filename=php-%PHP_VER%-%VC_VER%-%ARCH%.zip
build/php/windows-compile-vs.bat:7z a -bd %package_filename% bin vc_redist.x64.exe >nul || call :pm-fatal-error "Failed to package the build"
build/php/windows-compile-vs.bat:call :pm-echo "Created build package %package_filename%"
build/php/windows-compile-vs.bat:call :pm-echo "Moving debugging symbols to output directory..."
build/php/windows-compile-vs.bat:move "%SOURCES_PATH%\php-src\%ARCH%\%OUT_PATH_REL%_TS\php-debug-pack*.zip" .
build/php/windows-compile-vs.bat:call :pm-echo "Done?"
build/php/windows-compile-vs.bat::check-vs-exists
build/php/windows-compile-vs.bat:    call :pm-echo "Found Visual Studio %~1"
build/php/windows-compile-vs.bat:    call :pm-echo "DID NOT FIND VS %~1"
build/php/windows-compile-vs.bat::get-extension-zip-from-github:
build/php/windows-compile-vs.bat:call :pm-echo " - %~1: downloading %~2..."
build/php/windows-compile-vs.bat:call :get-zip https://github.com/%~3/%~4/archive/%~2.zip || exit /B 1
build/php/windows-compile-vs.bat:move %~4-%~2 %~1 >>"%log_file%" 2>&1 || exit /B 1
build/php/windows-compile-vs.bat::get-zip
build/php/windows-compile-vs.bat:wget %~1 --no-check-certificate -q -O temp.zip || exit /B 1
build/php/windows-compile-vs.bat:7z x -y temp.zip >nul || exit /B 1
build/php/windows-compile-vs.bat::pm-fatal-error
build/php/windows-compile-vs.bat:call :pm-echo-error "%~1 - check compile.log for details"
build/php/windows-compile-vs.bat::pm-echo-error
build/php/windows-compile-vs.bat:call :pm-echo "[ERROR] %~1"
build/php/windows-compile-vs.bat::pm-echo
build/php/tests/generic/pthreads.sh:OUTPUT=$("$PHP_BINARIES" -r 'class MyThread extends Thread{ public function run(){ echo 1; }} $t = new MyThread; $t->start(); $t->join(); echo "1";')
build/php/tests/generic/curl-ssl.sh:cat > curl-ssl.php <<'EOF'
build/php/tests/generic/curl-ssl.sh:curl_setopt($ch, CURLOPT_HTTPHEADER, array("User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20100101 Firefox/12.0 PocketMine-MP", "Content-Type: application/json"));
build/php/tests/generic/curl-ssl.sh:OUTPUT=$("$PHP_BINARIES" curl-ssl.php)
build/php/tests/generic/curl-ssl.sh:rm curl-ssl.php
build/php/tests/generic/run.sh:OUTPUT=$("$PHP_BINARIES" -r 'echo 1;')
build/php/tests/test.sh:DIR="$(cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
build/php/tests/test.sh:	echo -n "[$INCREMENT/$TEST_NUMBER] $f ... "
build/php/tests/android/static.sh:OUTPUT=$(readelf -d "$PHP_BINARIES/bin/php")
build/php/appveyor.yml:version: php-7.3-appveyor{build}
build/php/appveyor.yml:clone_folder: c:\pmmp\windows-php
build/php/appveyor.yml:  - cinst wget
build/php/appveyor.yml:- ps: >-
build/php/appveyor.yml:    .\windows-compile-vs.bat
build/php/appveyor.yml:    Push-AppveyorArtifact 'compile.log'
build/php/appveyor.yml:    rm -r -Force bin
build/php/appveyor.yml:- path: '*php-*.zip'
build/php/appveyor.yml:- path: 'compile.log'
build/php/installer.sh:NAME="PocketMine-MP"
build/php/installer.sh:			echo "Invalid option: -$OPTARG" >&2
build/php/installer.sh:	echo "[ERROR] PocketMine-MP is no longer supported on 32-bit systems."
build/php/installer.sh:shopt -s expand_aliases
build/php/installer.sh:if [ $? -eq 0 ]; then
build/php/installer.sh:		alias download_file="wget --no-check-certificate -q -O -"
build/php/installer.sh:		alias download_file="wget -q -O -"
build/php/installer.sh:	if [ $? -eq 0 ]; then
build/php/installer.sh:			alias download_file="curl --insecure --silent --show-error --location --globoff"
build/php/installer.sh:			alias download_file="curl --silent --show-error --location --globoff"
build/php/installer.sh:	if [ "$(id -u)" == "0" ]; then
build/php/installer.sh:		echo "If you want to run it as root, add the -r flag."
build/php/installer.sh:	NAME="PocketMine-Soft"
build/php/installer.sh:PUBLICKEY_LONGID="${PUBLICKEY_FINGERPRINT: -16}"
build/php/installer.sh:	"$GPG_BIN" --keyserver "$GPG_KEYSERVER" --keyserver-options auto-key-retrieve=1 --trusted-key $PUBLICKEY_LONGID --verify "$1.sig" "$1"
build/php/installer.sh:	if [ $? -eq 0 ]; then
build/php/installer.sh:		"$GPG_BIN" --refresh-keys > /dev/null 2>&1
build/php/installer.sh:	echo "$1" | grep "\"$2\"" | cut -d ':' -f2- | tr -d ' ",'
build/php/installer.sh:		if [ "$(uname -s)" == "Darwin" ]; then
build/php/installer.sh:			VERSION_DATE_STRING=$(date -r $VERSION_DATE)
build/php/installer.sh:			VERSION_DATE_STRING=$(date --date="@$VERSION_DATE")
build/php/installer.sh:			if [ $? -eq 0 ]; then
build/php/installer.sh:				if [ $? -eq 0 ]; then
build/php/installer.sh:				gpg --fingerprint $PUBLICKEY_FINGERPRINT > /dev/null 2>&1
build/php/installer.sh:				if [ $? -ne 0 ]; then
build/php/installer.sh:					download_file $PUBLICKEY_URL | gpg --trusted-key $PUBLICKEY_LONGID --import
build/php/installer.sh:					gpg --fingerprint $PUBLICKEY_FINGERPRINT > /dev/null 2>&1
build/php/installer.sh:					if [ $? -ne 0 ]; then
build/php/installer.sh:						gpg --trusted-key $PUBLICKEY_LONGID --keyserver "$GPG_KEYSERVER" --recv-key $PUBLICKEY_FINGERPRINT
build/php/installer.sh:		echo "[-] This channel should have a signature, none found"
build/php/installer.sh:mkdir -m 0777 "$INSTALL_DIRECTORY" 2> /dev/null
build/php/installer.sh:rm -f "$NAME.phar"
build/php/installer.sh:rm -f README.md
build/php/installer.sh:rm -f CONTRIBUTING.md
build/php/installer.sh:rm -f LICENSE
build/php/installer.sh:rm -f start.sh
build/php/installer.sh:rm -f start.bat
build/php/installer.sh:rm -f PocketMine-MP.php
build/php/installer.sh:rm -r -f src/
build/php/installer.sh:echo -n "[2/3] Downloading $NAME phar..."
build/php/installer.sh:if ! [ -s "$NAME.phar" ] || [ "$(head -n 1 $NAME.phar)" == '<!DOCTYPE html>' ]; then
build/php/installer.sh:		download_file "https://raw.githubusercontent.com/PocketMine/PocketMine-Soft/${BRANCH}/resources/start.sh" > start.sh
build/php/installer.sh:		download_file "https://raw.githubusercontent.com/pmmp/PocketMine-MP/${BRANCH}/start.sh" > start.sh
build/php/installer.sh:	download_file "https://raw.githubusercontent.com/pmmp/PocketMine-MP/${BRANCH}/LICENSE" > LICENSE
build/php/installer.sh:	download_file "https://raw.githubusercontent.com/pmmp/PocketMine-MP/${BRANCH}/README.md" > README.md
build/php/installer.sh:	download_file "https://raw.githubusercontent.com/pmmp/PocketMine-MP/${BRANCH}/CONTRIBUTING.md" > CONTRIBUTING.md
build/php/installer.sh:	download_file "https://raw.githubusercontent.com/pmmp/php-build-scripts/${BRANCH}/compile.sh" > compile.sh
build/php/installer.sh:	echo -n "[3/3] Obtaining PHP: detecting if build is available..."
build/php/installer.sh:		rm -r -f bin/ >> /dev/null 2>&1
build/php/installer.sh:		if [ "$(uname -s)" == "Darwin" ]; then
build/php/installer.sh:			PLATFORM="MacOS-x86_64"
build/php/installer.sh:			echo -n " MacOS PHP build available"
build/php/installer.sh:		elif [ "$(uname -s)" == "Linux" ]; then
build/php/installer.sh:			#if [[ "$(cat /etc/redhat-release 2>/dev/null)" == *CentOS* ]]; then
build/php/installer.sh:			#echo -n " CentOS PHP build available, downloading $CENTOS_BUILD.tar.gz..."
build/php/installer.sh:			#download_file "https://dl.bintray.com/pocketmine/PocketMine/$CENTOS_BUILD.tar.gz" | tar -zx > /dev/null 2>&1
build/php/installer.sh:			PLATFORM="Linux-x86_64"
build/php/installer.sh:			echo -n " Linux PHP build available"
build/php/installer.sh:		echo -n "... downloading $PHP_VERSION ..."
build/php/installer.sh:		download_file "https://jenkins.pmmp.io/job/PHP-$PHP_VERSION-Aggregate/lastSuccessfulBuild/artifact/PHP-$PHP_VERSION-$PLATFORM.tar.gz" | tar -zx > /dev/null 2>&1
build/php/installer.sh:		if [ -f ./bin/composer ]; then
build/php/installer.sh:		echo -n " updating php.ini..."
build/php/installer.sh:		sed -i'.bak' "s/date.timezone=.*/date.timezone=$(date +%Z)/" bin/php7/bin/php.ini
build/php/installer.sh:		EXTENSION_DIR=$(find "$(pwd)/bin" -name *debug-zts*) #make sure this only captures from `bin` in case the user renamed their old binary folder
build/php/installer.sh:		grep -q '^extension_dir' bin/php7/bin/php.ini && sed -i'bak' "s{^extension_dir=.*{extension_dir=\"$EXTENSION_DIR\"{" bin/php7/bin/php.ini || sed -i'bak' "1s{^{extension_dir=\"$EXTENSION_DIR\"\\$LF{" bin/php7/bin/php.ini
build/php/installer.sh:		echo -n " checking..."
build/php/installer.sh:		if [ "$(./bin/php7/bin/php -r 'echo 1;' 2>/dev/null)" == "1" ]; then
build/php/installer.sh:		set -e
build/php/compile.sh:[ -z "$PHP_VERSION" ] && PHP_VERSION="7.4.13"
build/php/compile.sh:CURL_VERSION="curl-7_71_1"
build/php/compile.sh:#libtool and autoconf have a "feature" where it looks for install.sh/install-sh in ./ ../ and ../../
build/php/compile.sh:uname -a >> "$DIR/install.log" 2>&1
build/php/compile.sh:COMPILE_SH_DEPENDENCIES=( make autoconf automake m4 getconf gzip bzip2 bison g++ git cmake pkg-config re2c)
build/php/compile.sh:if [ "$(uname -s)" == "Darwin" ]; then
build/php/compile.sh:	type libtool >> "$DIR/install.log" 2>&1 || { echo >&2 "[ERROR] Please install \"libtool\" or \"libtool-bin\""; ((ERRORS++)); }
build/php/compile.sh:if [ $ERRORS -ne 0 ]; then
build/php/compile.sh:shopt -s expand_aliases
build/php/compile.sh:if [ $? -eq 0 ]; then
build/php/compile.sh:	alias _download_file="wget --no-check-certificate -nv -O -"
build/php/compile.sh:	if [ $? -eq 0 ]; then
build/php/compile.sh:		alias _download_file="curl --insecure --silent --show-error --location --globoff"
build/php/compile.sh:#if type llvm-gcc >/dev/null 2>&1; then
build/php/compile.sh:#	export CC="llvm-gcc"
build/php/compile.sh:#	export CXX="llvm-g++"
build/php/compile.sh:#	export AR="llvm-ar"
build/php/compile.sh:#	export AS="llvm-as"
build/php/compile.sh:#	export RANLIB=llvm-ranlib
build/php/compile.sh:	#export AR="gcc-ar"
build/php/compile.sh:HAVE_MYSQLI="--enable-mysqlnd --with-mysqli=mysqlnd"
build/php/compile.sh:HAVE_VALGRIND="--without-valgrind"
build/php/compile.sh:			CFLAGS="$CFLAGS -g"
build/php/compile.sh:			CXXFLAGS="$CXXFLAGS -g"
build/php/compile.sh:			echo "[opt] Doing cross-compile"
build/php/compile.sh:			CFLAGS="$CFLAGS -static"
build/php/compile.sh:			echo "[opt] Will compile with PocketMine-ChunkUtils C extension for Anvil"
build/php/compile.sh:			HAVE_VALGRIND="--with-valgrind"
build/php/compile.sh:			echo "[opt] Will pass -fsanitize=$OPTARG to compilers and linkers"
build/php/compile.sh:			echo "Invalid option: -$OPTION$OPTARG" >&2
build/php/compile.sh:		TOOLCHAIN_PREFIX="x86_64-w64-mingw32"
build/php/compile.sh:		[ -z "$march" ] && march=x86_64;
build/php/compile.sh:		[ -z "$mtune" ] && mtune=nocona;
build/php/compile.sh:		CFLAGS="$CFLAGS -mconsole"
build/php/compile.sh:		CONFIGURE_FLAGS="--host=$TOOLCHAIN_PREFIX --target=$TOOLCHAIN_PREFIX --build=$TOOLCHAIN_PREFIX"
build/php/compile.sh:		echo "[INFO] Cross-compiling for Windows 64-bit"
build/php/compile.sh:		[ -z "$march" ] && march=prescott;
build/php/compile.sh:		[ -z "$mtune" ] && mtune=generic;
build/php/compile.sh:		CFLAGS="$CFLAGS -fomit-frame-pointer";
build/php/compile.sh:		TOOLCHAIN_PREFIX="i686-apple-darwin10"
build/php/compile.sh:		CONFIGURE_FLAGS="--host=$TOOLCHAIN_PREFIX"
build/php/compile.sh:		RANLIB=$TOOLCHAIN_PREFIX-ranlib
build/php/compile.sh:		CFLAGS="$CFLAGS -Qunused-arguments -Wno-error=unused-command-line-argument-hard-error-in-future"
build/php/compile.sh:		ARCHFLAGS="-Wno-error=unused-command-line-argument-hard-error-in-future"
build/php/compile.sh:		OPENSSL_TARGET="darwin64-x86_64-cc"
build/php/compile.sh:		echo "[INFO] Cross-compiling for Intel MacOS"
build/php/compile.sh:	elif [ "$COMPILE_TARGET" == "android-aarch64" ]; then
build/php/compile.sh:		[ -z "$march" ] && march="armv8-a";
build/php/compile.sh:		[ -z "$mtune" ] && mtune=generic;
build/php/compile.sh:		TOOLCHAIN_PREFIX="aarch64-linux-musl"
build/php/compile.sh:		CONFIGURE_FLAGS="--host=$TOOLCHAIN_PREFIX"
build/php/compile.sh:		CFLAGS="-static $CFLAGS"
build/php/compile.sh:		CXXFLAGS="-static $CXXFLAGS"
build/php/compile.sh:		LDFLAGS="-static -static-libgcc -Wl,-static"
build/php/compile.sh:		OPENSSL_TARGET="linux-aarch64"
build/php/compile.sh:		echo "[INFO] Cross-compiling for Android ARMv8 (aarch64)"
build/php/compile.sh:	#TODO: add cross-compile for aarch64 platforms (ios, rpi)
build/php/compile.sh:		echo "Please supply a proper platform [mac win win64 android-aarch64] to cross-compile"
build/php/compile.sh:	if [[ "$COMPILE_TARGET" == "" ]] && [[ "$(uname -s)" == "Darwin" ]]; then
build/php/compile.sh:		[ -z "$march" ] && march=x86-64;
build/php/compile.sh:		[ -z "$mtune" ] && mtune=nocona;
build/php/compile.sh:		CFLAGS="$CFLAGS -m64"
build/php/compile.sh:		OPENSSL_TARGET="linux-x86_64"
build/php/compile.sh:		[ -z "$march" ] && march=core2;
build/php/compile.sh:		[ -z "$mtune" ] && mtune=generic;
build/php/compile.sh:		[ -z "$MACOSX_DEPLOYMENT_TARGET" ] && export MACOSX_DEPLOYMENT_TARGET=10.9;
build/php/compile.sh:		CFLAGS="$CFLAGS -m64 -arch x86_64 -fomit-frame-pointer -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET"
build/php/compile.sh:		LDFLAGS="$LDFLAGS -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET"
build/php/compile.sh:			LDFLAGS="$LDFLAGS -Wl,-rpath,@loader_path/../lib";
build/php/compile.sh:		CFLAGS="$CFLAGS -Qunused-arguments -Wno-error=unused-command-line-argument-hard-error-in-future"
build/php/compile.sh:		ARCHFLAGS="-Wno-error=unused-command-line-argument-hard-error-in-future"
build/php/compile.sh:		OPENSSL_TARGET="darwin64-x86_64-cc"
build/php/compile.sh:	elif [ -z "$CFLAGS" ]; then
build/php/compile.sh:			echo "[INFO] Compiling for current machine using 64-bit"
build/php/compile.sh:			if [ "$(uname -m)" != "aarch64" ]; then
build/php/compile.sh:				CFLAGS="-m64 $CFLAGS"
build/php/compile.sh:			echo "[ERROR] PocketMine-MP is no longer supported on 32-bit systems"
build/php/compile.sh:	#FLAGS_LTO="-fvisibility=hidden -flto"
build/php/compile.sh:	CFLAGS="$CFLAGS -O2 -ffast-math -ftree-vectorize -fomit-frame-pointer -funswitch-loops -fivopts"
build/php/compile.sh:		CFLAGS="$CFLAGS -funsafe-loop-optimizations -fpredictive-commoning -ftracer -ftree-loop-im -frename-registers -fcx-limited-range"
build/php/compile.sh:		CFLAGS="$CFLAGS -mfpu=vfp"
build/php/compile.sh:		CFLAGS="$CFLAGS -mmmx -msse -msse2 -msse3 -mfpmath=sse -free -msahf -ftree-parallelize-loops=4"
build/php/compile.sh:		CFLAGS="$CFLAGS -mmmx -msse -msse2 -mfpmath=sse -m128bit-long-double -malign-double -ftree-parallelize-loops=4"
build/php/compile.sh:		export CC="$TOOLCHAIN_PREFIX-gcc"
build/php/compile.sh:		export CXX="$TOOLCHAIN_PREFIX-g++"
build/php/compile.sh:		export AR="$TOOLCHAIN_PREFIX-ar"
build/php/compile.sh:		export RANLIB="$TOOLCHAIN_PREFIX-ranlib"
build/php/compile.sh:		export CPP="$TOOLCHAIN_PREFIX-cpp"
build/php/compile.sh:		export LD="$TOOLCHAIN_PREFIX-ld"
build/php/compile.sh:[ -z "$THREADS" ] && THREADS=1;
build/php/compile.sh:[ -z "$march" ] && march=native;
build/php/compile.sh:[ -z "$mtune" ] && mtune=native;
build/php/compile.sh:[ -z "$CFLAGS" ] && CFLAGS="";
build/php/compile.sh:	[ -z "$LDFLAGS" ] && LDFLAGS="-Wl,-rpath='\$\$ORIGIN/../lib' -Wl,-rpath-link='\$\$ORIGIN/../lib'";
build/php/compile.sh:[ -z "$CONFIGURE_FLAGS" ] && CONFIGURE_FLAGS="";
build/php/compile.sh:	$CC -march=$march -mtune=$mtune $CFLAGS -o test test.c >> "$DIR/install.log" 2>&1
build/php/compile.sh:	if [ $? -eq 0 ]; then
build/php/compile.sh:		CFLAGS="-march=$march -mtune=$mtune -fno-gcse $CFLAGS"
build/php/compile.sh:	$CC -march=$march $CFLAGS -o test test.c >> "$DIR/install.log" 2>&1
build/php/compile.sh:	if [ $? -eq 0 ]; then
build/php/compile.sh:		CFLAGS="-march=$march -fno-gcse $CFLAGS"
build/php/compile.sh:	CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" $CC -fsanitize=$FSANITIZE_OPTIONS -o asan-test test.c >> "$DIR/install.log" 2>&1 && \
build/php/compile.sh:		chmod +x asan-test >> "$DIR/install.log" 2>&1 && \
build/php/compile.sh:		./asan-test >> "$DIR/install.log" 2>&1 && \
build/php/compile.sh:		rm asan-test >> "$DIR/install.log" 2>&1
build/php/compile.sh:	if [ $? -ne 0 ]; then
build/php/compile.sh:export CFLAGS="-O2 -fPIC $CFLAGS"
build/php/compile.sh:#some stuff (like curl) makes assumptions about library paths that break due to different behaviour in pkgconf vs pkg-config
build/php/compile.sh:rm -r -f "$BASE_BUILD_DIR" >> "$DIR/install.log" 2>&1
build/php/compile.sh:rm -r -f bin/ >> "$DIR/install.log" 2>&1
build/php/compile.sh:mkdir -m 0755 "$BASE_BUILD_DIR" >> "$DIR/install.log" 2>&1
build/php/compile.sh:mkdir -m 0755 "$BUILD_DIR" >> "$DIR/install.log" 2>&1
build/php/compile.sh:mkdir -m 0755 bin >> "$DIR/install.log" 2>&1
build/php/compile.sh:mkdir -m 0755 bin/php7 >> "$DIR/install.log" 2>&1
build/php/compile.sh:set -e
build/php/compile.sh:echo -n "[PHP] downloading $PHP_VERSION..."
build/php/compile.sh:download_file "https://github.com/php/php-src/archive/php-$PHP_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:mv php-src-php-$PHP_VERSION php
build/php/compile.sh:		EXTRA_FLAGS="--enable-shared=no --enable-static=yes"
build/php/compile.sh:		EXTRA_FLAGS="--enable-shared=yes --enable-static=no"
build/php/compile.sh:	echo -n "[readline] downloading $READLINE_VERSION..."
build/php/compile.sh:	download_file "http://ftp.gnu.org/gnu/readline/readline-$READLINE_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv readline-$READLINE_VERSION readline
build/php/compile.sh:	echo -n " checking..."
build/php/compile.sh:	./configure --prefix="$DIR/bin/php7" \
build/php/compile.sh:	--with-curses="$DIR/bin/php7" \
build/php/compile.sh:	--enable-multibyte \
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	if make -j $THREADS >> "$DIR/install.log" 2>&1; then
build/php/compile.sh:		echo -n " installing..."
build/php/compile.sh:		HAVE_READLINE="--with-readline=$DIR/bin/php7"
build/php/compile.sh:		echo -n " disabling..."
build/php/compile.sh:		HAVE_READLINE="--without-readline"
build/php/compile.sh:	set -e
build/php/compile.sh:		local EXTRA_FLAGS="--static"
build/php/compile.sh:		local EXTRA_FLAGS="--shared"
build/php/compile.sh:	echo -n "[zlib] downloading $ZLIB_VERSION..."
build/php/compile.sh:	download_file "https://github.com/madler/zlib/archive/v$ZLIB_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv zlib-$ZLIB_VERSION zlib
build/php/compile.sh:	echo -n " checking..."
build/php/compile.sh:	RANLIB=$RANLIB ./configure --prefix="$DIR/bin/php7" \
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	make -j $THREADS >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " installing..."
build/php/compile.sh:			rm -f "$DIR/bin/php7/lib/libz.a"
build/php/compile.sh:		local EXTRA_FLAGS="--disable-assembly"
build/php/compile.sh:	echo -n "[GMP] downloading $GMP_VERSION..."
build/php/compile.sh:	download_file "https://gmplib.org/download/gmp/gmp-$GMP_VERSION.tar.bz2" | tar -jx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv gmp-$GMP_VERSION gmp
build/php/compile.sh:	echo -n " checking..."
build/php/compile.sh:	RANLIB=$RANLIB ./configure --prefix="$DIR/bin/php7" \
build/php/compile.sh:	--disable-posix-threads \
build/php/compile.sh:	--enable-static \
build/php/compile.sh:	--disable-shared \
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	make -j $THREADS >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " installing..."
build/php/compile.sh:		local EXTRA_FLAGS="no-shared"
build/php/compile.sh:	WITH_OPENSSL="--with-openssl=$DIR/bin/php7"
build/php/compile.sh:	echo -n "[OpenSSL] downloading $OPENSSL_VERSION..."
build/php/compile.sh:	download_file "http://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv openssl-$OPENSSL_VERSION openssl
build/php/compile.sh:	echo -n " checking..."
build/php/compile.sh:	--prefix="$DIR/bin/php7" \
build/php/compile.sh:	--openssldir="$DIR/bin/php7" \
build/php/compile.sh:	no-asm \
build/php/compile.sh:	no-hw \
build/php/compile.sh:	no-engine \
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	make -j $THREADS >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " installing..."
build/php/compile.sh:		local EXTRA_FLAGS="--enable-static --disable-shared"
build/php/compile.sh:		local EXTRA_FLAGS="--disable-static --enable-shared"
build/php/compile.sh:	echo -n "[cURL] downloading $CURL_VERSION..."
build/php/compile.sh:	download_file "https://github.com/curl/curl/archive/$CURL_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv curl-$CURL_VERSION curl
build/php/compile.sh:	echo -n " checking..."
build/php/compile.sh:	./buildconf --force >> "$DIR/install.log" 2>&1
build/php/compile.sh:	RANLIB=$RANLIB ./configure --disable-dependency-tracking \
build/php/compile.sh:	--enable-ipv6 \
build/php/compile.sh:	--enable-optimize \
build/php/compile.sh:	--enable-http \
build/php/compile.sh:	--enable-ftp \
build/php/compile.sh:	--disable-dict \
build/php/compile.sh:	--enable-file \
build/php/compile.sh:	--without-librtmp \
build/php/compile.sh:	--disable-gopher \
build/php/compile.sh:	--disable-imap \
build/php/compile.sh:	--disable-pop3 \
build/php/compile.sh:	--disable-rtsp \
build/php/compile.sh:	--disable-smtp \
build/php/compile.sh:	--disable-telnet \
build/php/compile.sh:	--disable-tftp \
build/php/compile.sh:	--disable-ldap \
build/php/compile.sh:	--disable-ldaps \
build/php/compile.sh:	--without-libidn \
build/php/compile.sh:	--without-libidn2 \
build/php/compile.sh:	--without-brotli \
build/php/compile.sh:	--without-nghttp2 \
build/php/compile.sh:	--with-zlib="$DIR/bin/php7" \
build/php/compile.sh:	--with-ssl="$DIR/bin/php7" \
build/php/compile.sh:	--enable-threaded-resolver \
build/php/compile.sh:	--prefix="$DIR/bin/php7" \
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	make -j $THREADS >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " installing..."
build/php/compile.sh:		local EXTRA_FLAGS="--disable-shared --enable-static"
build/php/compile.sh:		local EXTRA_FLAGS="--enable-shared --disable-static"
build/php/compile.sh:	echo -n "[YAML] downloading $YAML_VERSION..."
build/php/compile.sh:	download_file "https://github.com/yaml/libyaml/archive/$YAML_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv libyaml-$YAML_VERSION yaml
build/php/compile.sh:	echo -n " checking..."
build/php/compile.sh:	--prefix="$DIR/bin/php7" \
build/php/compile.sh:	sed -i=".backup" 's/ tests win32/ win32/g' Makefile
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	make -j $THREADS all >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " installing..."
build/php/compile.sh:	echo -n "[LevelDB] downloading $LEVELDB_VERSION..."
build/php/compile.sh:	download_file "https://github.com/pmmp/leveldb/archive/$LEVELDB_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	#download_file "https://github.com/Mojang/leveldb-mcpe/archive/$LEVELDB_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv leveldb-$LEVELDB_VERSION leveldb
build/php/compile.sh:	echo -n " checking..."
build/php/compile.sh:		local EXTRA_FLAGS="-DBUILD_SHARED_LIBS=ON"
build/php/compile.sh:		-DCMAKE_INSTALL_PREFIX="$DIR/bin/php7" \
build/php/compile.sh:		-DCMAKE_PREFIX_PATH="$DIR/bin/php7" \
build/php/compile.sh:		-DCMAKE_INSTALL_LIBDIR=lib \
build/php/compile.sh:		-DLEVELDB_BUILD_TESTS=OFF \
build/php/compile.sh:		-DLEVELDB_BUILD_BENCHMARKS=OFF \
build/php/compile.sh:		-DLEVELDB_SNAPPY=OFF \
build/php/compile.sh:		-DLEVELDB_ZSTD=OFF \
build/php/compile.sh:		-DLEVELDB_TCMALLOC=OFF \
build/php/compile.sh:		-DCMAKE_BUILD_TYPE=Release \
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	make -j $THREADS >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " installing..."
build/php/compile.sh:		local EXTRA_FLAGS="--enable-shared=no --enable-static=yes"
build/php/compile.sh:		local EXTRA_FLAGS="--enable-shared=yes --enable-static=no"
build/php/compile.sh:	echo -n "[libpng] downloading $LIBPNG_VERSION..."
build/php/compile.sh:	download_file "https://sourceforge.net/projects/libpng/files/libpng16/$LIBPNG_VERSION/libpng-$LIBPNG_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv libpng-$LIBPNG_VERSION libpng
build/php/compile.sh:	echo -n " checking..."
build/php/compile.sh:	LDFLAGS="$LDFLAGS -L${DIR}/bin/php7/lib" CPPFLAGS="$CPPFLAGS -I${DIR}/bin/php7/include" RANLIB=$RANLIB ./configure \
build/php/compile.sh:	--prefix="$DIR/bin/php7" \
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	make -j $THREADS >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " installing..."
build/php/compile.sh:		local EXTRA_FLAGS="--enable-shared=no --enable-static=yes"
build/php/compile.sh:		local EXTRA_FLAGS="--enable-shared=yes --enable-static=no"
build/php/compile.sh:	echo -n "[libjpeg] downloading $LIBJPEG_VERSION..."
build/php/compile.sh:	download_file "http://ijg.org/files/jpegsrc.v$LIBJPEG_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv jpeg-$LIBJPEG_VERSION libjpeg
build/php/compile.sh:	echo -n " checking..."
build/php/compile.sh:	LDFLAGS="$LDFLAGS -L${DIR}/bin/php7/lib" CPPFLAGS="$CPPFLAGS -I${DIR}/bin/php7/include" RANLIB=$RANLIB ./configure \
build/php/compile.sh:	--prefix="$DIR/bin/php7" \
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	make -j $THREADS >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " installing..."
build/php/compile.sh:	echo -n "[libxml] downloading $LIBXML_VERSION... "
build/php/compile.sh:	download_file "https://gitlab.gnome.org/GNOME/libxml2/-/archive/v$LIBXML_VERSION/libxml2-v$LIBXML_VERSION.tar.gz" | tar -xz >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv libxml2-v$LIBXML_VERSION libxml2
build/php/compile.sh:	echo -n "checking... "
build/php/compile.sh:		local EXTRA_FLAGS="--enable-shared=no --enable-static=yes"
build/php/compile.sh:		local EXTRA_FLAGS="--enable-shared=yes --enable-static=no"
build/php/compile.sh:	sed -i.bak 's{libtoolize --version{"$LIBTOOLIZE" --version{' autogen.sh #needed for glibtool on macos
build/php/compile.sh:	./autogen.sh --prefix="$DIR/bin/php7" \
build/php/compile.sh:		--without-iconv \
build/php/compile.sh:		--without-python \
build/php/compile.sh:		--without-lzma \
build/php/compile.sh:		--with-zlib="$DIR/bin/php7" \
build/php/compile.sh:		--config-cache \
build/php/compile.sh:	echo -n "compiling... "
build/php/compile.sh:	make -j $THREADS >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n "installing... "
build/php/compile.sh:		local CMAKE_LIBZIP_EXTRA_FLAGS="-DBUILD_SHARED_LIBS=OFF"
build/php/compile.sh:	echo -n "[libzip] downloading $LIBZIP_VERSION..."
build/php/compile.sh:	download_file "https://libzip.org/download/libzip-$LIBZIP_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv libzip-$LIBZIP_VERSION libzip >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " checking..."
build/php/compile.sh:		-DCMAKE_PREFIX_PATH="$DIR/bin/php7" \
build/php/compile.sh:		-DCMAKE_INSTALL_PREFIX="$DIR/bin/php7" \
build/php/compile.sh:		-DCMAKE_INSTALL_LIBDIR=lib \
build/php/compile.sh:		-DBUILD_TOOLS=OFF \
build/php/compile.sh:		-DBUILD_REGRESS=OFF \
build/php/compile.sh:		-DBUILD_EXAMPLES=OFF \
build/php/compile.sh:		-DBUILD_DOC=OFF \
build/php/compile.sh:		-DENABLE_BZIP2=OFF \
build/php/compile.sh:		-DENABLE_COMMONCRYPTO=OFF \
build/php/compile.sh:		-DENABLE_GNUTLS=OFF \
build/php/compile.sh:		-DENABLE_MBEDTLS=OFF \
build/php/compile.sh:		-DENABLE_LZMA=OFF \
build/php/compile.sh:		-DENABLE_ZSTD=OFF >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	make -j $THREADS >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " installing..."
build/php/compile.sh:		local EXTRA_FLAGS="--enable-static=yes --enable-shared=no"
build/php/compile.sh:		local EXTRA_FLAGS="--enable-static=no --enable-shared=yes"
build/php/compile.sh:	echo -n "[sqlite3] downloading $SQLITE3_VERSION..."
build/php/compile.sh:	download_file "https://www.sqlite.org/2020/sqlite-autoconf-$SQLITE3_VERSION.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	mv sqlite-autoconf-$SQLITE3_VERSION sqlite3 >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " checking..."
build/php/compile.sh:	LDFLAGS="$LDFLAGS -L${DIR}/bin/php7/lib" CPPFLAGS="$CPPFLAGS -I${DIR}/bin/php7/include" RANLIB=$RANLIB ./configure \
build/php/compile.sh:	--prefix="$DIR/bin/php7" \
build/php/compile.sh:	--disable-dependency-tracking \
build/php/compile.sh:	--enable-static-shell=no \
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	make -j $THREADS >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " installing..."
build/php/compile.sh:	HAVE_READLINE="--without-readline"
build/php/compile.sh:	HAS_GD="--enable-gd"
build/php/compile.sh:	HAS_LIBJPEG="--with-jpeg"
build/php/compile.sh:	echo -n "  $1: downloading $2..."
build/php/compile.sh:	download_file "$3" | tar -zx >> "$DIR/install.log" 2>&1
build/php/compile.sh:	get_extension_tar_gz "$1" "$2" "https://github.com/$3/$4/archive/$5$2.tar.gz" "$4-$2"
build/php/compile.sh:	get_extension_tar_gz "$1" "$2" "http://pecl.php.net/get/$1-$2.tgz" "$1-$2"
build/php/compile.sh:#	HAS_PROFILER="--enable-profiler --with-profiler-max-frames=1000"
build/php/compile.sh:get_github_extension "yaml" "$EXT_YAML_VERSION" "php" "pecl-file_formats-yaml"
build/php/compile.sh:get_github_extension "ds" "$EXT_DS_VERSION" "php-ds" "ext-ds"
build/php/compile.sh:get_github_extension "recursionguard" "$EXT_RECURSIONGUARD_VERSION" "pmmp" "ext-recursionguard"
build/php/compile.sh:echo -n "  crypto: downloading $EXT_CRYPTO_VERSION..."
build/php/compile.sh:git clone https://github.com/bukka/php-crypto.git "$BUILD_DIR/php/ext/crypto" >> "$DIR/install.log" 2>&1
build/php/compile.sh:git submodule update --init --recursive >> "$DIR/install.log" 2>&1
build/php/compile.sh:	get_github_extension "leveldb" "$EXT_LEVELDB_VERSION" "pmmp" "php-leveldb"
build/php/compile.sh:	HAS_LEVELDB=--with-leveldb="$DIR/bin/php7"
build/php/compile.sh:	get_github_extension "pocketmine-chunkutils" "$EXT_POCKETMINE_CHUNKUTILS_VERSION" "dktapps" "PocketMine-C-ChunkUtils"
build/php/compile.sh:	HAS_POCKETMINE_CHUNKUTILS=--enable-pocketmine-chunkutils
build/php/compile.sh:echo -n "[PHP]"
build/php/compile.sh:	echo -n " enabling optimizations..."
build/php/compile.sh:	PHP_OPTIMIZATION="--enable-inline-optimization "
build/php/compile.sh:	PHP_OPTIMIZATION="--disable-inline-optimization "
build/php/compile.sh:echo -n " checking..."
build/php/compile.sh:rm -f ./aclocal.m4 >> "$DIR/install.log" 2>&1
build/php/compile.sh:rm -rf ./autom4te.cache/ >> "$DIR/install.log" 2>&1
build/php/compile.sh:rm -f ./configure >> "$DIR/install.log" 2>&1
build/php/compile.sh:./buildconf --force >> "$DIR/install.log" 2>&1
build/php/compile.sh:#hack for curl with pkg-config (ext/curl doesn't give --static to pkg-config on static builds)
build/php/compile.sh:	if [ -z "$PKG_CONFIG" ]; then
build/php/compile.sh:		PKG_CONFIG="$(which pkg-config)" || true
build/php/compile.sh:	if [ ! -z "$PKG_CONFIG" ]; then
build/php/compile.sh:		#only export this if pkg-config exists, otherwise leave it (it'll fall back to curl-config)
build/php/compile.sh:		echo '#!/bin/sh' > "$BUILD_DIR/pkg-config-wrapper"
build/php/compile.sh:		echo 'exec '$PKG_CONFIG' "$@" --static' >> "$BUILD_DIR/pkg-config-wrapper"
build/php/compile.sh:		chmod +x "$BUILD_DIR/pkg-config-wrapper"
build/php/compile.sh:		export PKG_CONFIG="$BUILD_DIR/pkg-config-wrapper"
build/php/compile.sh:	sed -i=".backup" 's/pthreads_working=no/pthreads_working=yes/' ./configure
build/php/compile.sh:			export LIBS="$LIBS -lpthread -ldl -lresolv"
build/php/compile.sh:			export LIBS="$LIBS -lpthread -lresolv"
build/php/compile.sh:		export LIBS="$LIBS -lpthread"
build/php/compile.sh:	sed  -i=".backup" "s{ext/mysqlnd/php_mysqlnd_config.h{config.h{" ext/mysqlnd/mysqlnd_portability.h
build/php/compile.sh:	export LIBS="$LIBS -ldl"
build/php/compile.sh:	HAVE_PCNTL="--enable-pcntl"
build/php/compile.sh:	HAVE_PCNTL="--disable-pcntl"
build/php/compile.sh:	cp -f ./win32/build/config.* ./main >> "$DIR/install.log" 2>&1
build/php/compile.sh:if [[ "$(uname -s)" == "Darwin" ]] && [[ "$IS_CROSSCOMPILE" != "yes" ]]; then
build/php/compile.sh:	sed -i=".backup" 's/flock_type=unknown/flock_type=bsd/' ./configure
build/php/compile.sh:	export EXTRA_CFLAGS=-lresolv
build/php/compile.sh:	HAS_DEBUG="--enable-debug"
build/php/compile.sh:	HAS_DEBUG="--disable-debug"
build/php/compile.sh:	CFLAGS="$CFLAGS -fsanitize=$FSANITIZE_OPTIONS -fno-omit-frame-pointer"
build/php/compile.sh:	CXXFLAGS="$CXXFLAGS -fsanitize=$FSANITIZE_OPTIONS -fno-omit-frame-pointer"
build/php/compile.sh:	LDFLAGS="-fsanitize=$FSANITIZE_OPTIONS $LDFLAGS"
build/php/compile.sh:RANLIB=$RANLIB CFLAGS="$CFLAGS $FLAGS_LTO" CXXFLAGS="$CXXFLAGS $FLAGS_LTO" LDFLAGS="$LDFLAGS $FLAGS_LTO" ./configure $PHP_OPTIMIZATION --prefix="$DIR/bin/php7" \
build/php/compile.sh:--exec-prefix="$DIR/bin/php7" \
build/php/compile.sh:--with-curl \
build/php/compile.sh:--with-zlib \
build/php/compile.sh:--with-zlib \
build/php/compile.sh:--with-gmp \
build/php/compile.sh:--with-yaml \
build/php/compile.sh:--with-openssl \
build/php/compile.sh:--with-zip \
build/php/compile.sh:--enable-mbstring \
build/php/compile.sh:--disable-mbregex \
build/php/compile.sh:--enable-calendar \
build/php/compile.sh:--enable-pthreads \
build/php/compile.sh:--disable-fileinfo \
build/php/compile.sh:--with-libxml \
build/php/compile.sh:--enable-xml \
build/php/compile.sh:--enable-dom \
build/php/compile.sh:--enable-simplexml \
build/php/compile.sh:--enable-xmlreader \
build/php/compile.sh:--enable-xmlwriter \
build/php/compile.sh:--disable-cgi \
build/php/compile.sh:--disable-phpdbg \
build/php/compile.sh:--disable-session \
build/php/compile.sh:--without-pear \
build/php/compile.sh:--without-iconv \
build/php/compile.sh:--with-pdo-sqlite \
build/php/compile.sh:--with-pdo-mysql \
build/php/compile.sh:--with-pic \
build/php/compile.sh:--enable-phar \
build/php/compile.sh:--enable-ctype \
build/php/compile.sh:--enable-sockets \
build/php/compile.sh:--enable-shared=no \
build/php/compile.sh:--enable-static=yes \
build/php/compile.sh:--enable-shmop \
build/php/compile.sh:--enable-maintainer-zts \
build/php/compile.sh:--disable-short-tags \
build/php/compile.sh:--enable-bcmath \
build/php/compile.sh:--enable-cli \
build/php/compile.sh:--enable-ftp \
build/php/compile.sh:--enable-opcache=$HAVE_OPCACHE \
build/php/compile.sh:--enable-igbinary \
build/php/compile.sh:--enable-ds \
build/php/compile.sh:--with-crypto \
build/php/compile.sh:--enable-recursionguard \
build/php/compile.sh:echo -n " compiling..."
build/php/compile.sh:	sed -i=".backup" 's/-export-dynamic/-all-static/g' Makefile
build/php/compile.sh:sed -i=".backup" 's/PHP_BINARIES. pharcmd$/PHP_BINARIES)/g' Makefile
build/php/compile.sh:sed -i=".backup" 's/install-programs install-pharcmd$/install-programs/g' Makefile
build/php/compile.sh:	sed -i=".backup" 's/--mode=link $(CC)/--mode=link $(CXX)/g' Makefile
build/php/compile.sh:make -j $THREADS >> "$DIR/install.log" 2>&1
build/php/compile.sh:echo -n " installing..."
build/php/compile.sh:	IFS=$'\n' OTOOL_OUTPUT=($(otool -L "$1"))
build/php/compile.sh:			install_name_tool -change "$CURRENT_DYLIB_NAME" "$NEW_DYLIB_NAME" "$1" >> "$DIR/install.log" 2>&1
build/php/compile.sh:			echo "[ERROR] Detected linkage to non-local non-system library $CURRENT_DYLIB_NAME by $1"
build/php/compile.sh:	set -e
build/php/compile.sh:if [[ "$(uname -s)" == "Darwin" ]] && [[ "$IS_CROSSCOMPILE" != "yes" ]]; then
build/php/compile.sh:	install_name_tool -delete_rpath "$DIR/bin/php7/lib" "$DIR/bin/php7/bin/php" >> "$DIR/install.log" 2>&1
build/php/compile.sh:	set -e
build/php/compile.sh:echo -n " generating php.ini..."
build/php/compile.sh:trap - DEBUG
build/php/compile.sh:	echo "zend.assertions=-1" >> "$DIR/bin/php7/bin/php.ini"
build/php/compile.sh:echo "error_reporting=-1" >> "$DIR/bin/php7/bin/php.ini"
build/php/compile.sh:	echo "opcache.optimization_level=0x7FFEBFFF ;https://github.com/php/php-src/blob/53c1b485741f31a17b24f4db2b39afeb9f4c8aba/ext/opcache/Optimizer/zend_optimizer.h" >> "$DIR/bin/php7/bin/php.ini"
build/php/compile.sh:	echo -n "[xdebug] checking..."
build/php/compile.sh:	./configure --with-php-config="$DIR/bin/php7/bin/php-config" >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " compiling..."
build/php/compile.sh:	make -j4 >> "$DIR/install.log" 2>&1
build/php/compile.sh:	echo -n " installing..."
build/php/compile.sh:	echo -n "[INFO] Cleaning up..."
build/php/compile.sh:	rm -r -f "$BUILD_DIR" >> "$DIR/install.log" 2>&1
build/php/compile.sh:	rm -f bin/php7/bin/curl* >> "$DIR/install.log" 2>&1
build/php/compile.sh:	rm -f bin/php7/bin/curl-config* >> "$DIR/install.log" 2>&1
build/php/compile.sh:	rm -f bin/php7/bin/c_rehash* >> "$DIR/install.log" 2>&1
build/php/compile.sh:	rm -f bin/php7/bin/openssl* >> "$DIR/install.log" 2>&1
build/php/compile.sh:	rm -r -f bin/php7/man >> "$DIR/install.log" 2>&1
build/php/compile.sh:	rm -r -f bin/php7/share/man >> "$DIR/install.log" 2>&1
build/php/compile.sh:	rm -r -f bin/php7/php >> "$DIR/install.log" 2>&1
build/php/compile.sh:	rm -r -f bin/php7/misc >> "$DIR/install.log" 2>&1
build/php/compile.sh:	rm -r -f bin/php7/lib/*.a >> "$DIR/install.log" 2>&1
build/php/compile.sh:	rm -r -f bin/php7/lib/*.la >> "$DIR/install.log" 2>&1
build/php/compile.sh:	rm -r -f bin/php7/include >> "$DIR/install.log" 2>&1
build/make-release.php:		$pattern = '/^const BASE_VERSION = "(\d+)\.(\d+)\.(\d+)(?:-(.*))?";$/m',
build/make-release.php: * @phpstan-param list<string> $argv
build/make-release.php:		$currentVer->getMajor(),
build/make-release.php:		$currentVer->getMinor(),
build/make-release.php:		$currentVer->getPatch() + 1
build/make-release.php:	replaceVersion($versionInfoPath, $currentVer->getBaseVersion(), false);
build/make-release.php:	system('git commit -m "Release ' . $currentVer->getBaseVersion() . '" --include "' . $versionInfoPath . '"');
build/make-release.php:	system('git tag ' . $currentVer->getBaseVersion());
build/make-release.php:	replaceVersion($versionInfoPath, $nextVer->getBaseVersion(), true);
build/make-release.php:	system('git commit -m "' . $nextVer->getBaseVersion() . ' is next" --include "' . $versionInfoPath . '"');
build/make-release.php:	system('git push origin HEAD ' . $currentVer->getBaseVersion());
BUILDING.md:## Pre-requisites
BUILDING.md:- A bash shell (git bash is sufficient for Windows)
BUILDING.md:- [`git`](https://git-scm.com) available in your shell
BUILDING.md:- PHP 7.3 or newer available in your shell
BUILDING.md:- [`composer`](https://getcomposer.org) available in your shell
BUILDING.md:Because PocketMine-MP requires several non-standard PHP extensions and configuration, PMMP provides scripts to build custom binaries for running PocketMine-MP, as well as prebuilt binaries.
BUILDING.md:- [Prebuilt binaries](https://jenkins.pmmp.io/job/PHP-7.3-Aggregate)
BUILDING.md:- [Compile scripts](https://github.com/pmmp/php-build-scripts) are provided as a submodule in the path `build/php`
BUILDING.md:1. `git clone --recursive https://github.com/pmmp/PocketMine-MP.git`
BUILDING.md:2. `git submodule update --init`
BUILDING.md:3. Re-run `composer install` to synchronize dependencies.
BUILDING.md:1. Add the flags `--no-dev --classmap-authoritative` to your `composer install` command. This will reduce build size and improve autoloading speed.
BUILDING.md:## Building `PocketMine-MP.phar`
BUILDING.md:Run `composer make-server` using your preferred PHP binary. It'll drop a `PocketMine-MP.phar` into the current working directory.
BUILDING.md:You can also use the `--out` option to change the output filename.
BUILDING.md:Fatal error: Uncaught BadMethodCallException: unable to create temporary file in PocketMine-MP/build/server-phar.php:119
BUILDING.md:You can work around it by setting `ulimit -n` to some bigger number, e.g. `8192`, or by updating your PHP version to at least 7.4.16 or 8.0.3.
BUILDING.md:## Running PocketMine-MP from source code
build.sh:ulimit -n 4096
build.sh:echo "---Composing---"
build.sh:composer install --ignore-platform-reqs --no-dev --classmap-authoritative --quiet
build.sh:echo "---Building---"
build.sh:php build/server-phar.php
changelogs/3.0-alpha.md:# 3.0.0-ALPHA1
changelogs/3.0-alpha.md:**DISCLAIMER: THIS IS AN _ALPHA_ SNAPSHOT. THIS BUILD IS NOT FEATURE-COMPLETE AND IS LIKELY TO BE HIGHLY UNSTABLE. WE ARE NOT RESPONSIBLE FOR NUCLEAR WAR, EXPLOSIONS OR CORRUPTION OF DATA RESULTING FROM USE OF THIS BUILD.**
changelogs/3.0-alpha.md:This build has breaking API changes, so the API has been bumped to 3.0.0-ALPHA1. These changes are NOT yet complete.
changelogs/3.0-alpha.md:- New generic in-memory chunk format for universal chunk handling and future conversion implementation.
changelogs/3.0-alpha.md:- Supported 256-height worlds
changelogs/3.0-alpha.md:- Standard chunk interface changed from FullChunk to Chunk (see above)
changelogs/3.0-alpha.md:- Removed biome color support and all related biome color API methods (no longer supported by MCPE client)
changelogs/3.0-alpha.md:- Fixed Win10 throws away their held item when the inventory is closed (https://github.com/pmmp/PocketMine-MP/commit/3b3abab3ad51dcc9b25e89612773ba4da172c7d4)
changelogs/3.0-alpha.md:- Fixed MobHead bounding box and properties (https://github.com/pmmp/PocketMine-MP/commit/c79077cbed2e47653f11306e4dfba66cac9da010)
changelogs/3.0-alpha.md:- Fixed server ignoring head rotation (https://github.com/pmmp/PocketMine-MP/commit/fa5624f87e937a518edd5790583ab4631f2100e6)
changelogs/3.0-alpha.md:- Fixed gamemode switching to adventure/spectator for op players (https://github.com/pmmp/PocketMine-MP/commit/43a36dba40abdc8969a404665de8df4d619fed4c)
changelogs/3.0-alpha.md:- Fixed clicking on fire to extinguish it (#132)
changelogs/3.0-alpha.md:- Fixed players always respawning at the server spawn when the folder name is different to the world name (#150)
changelogs/3.0-alpha.md:# 3.0.0-ALPHA2
changelogs/3.0-alpha.md:**DISCLAIMER: THIS IS AN _ALPHA_ SNAPSHOT. THIS BUILD IS NOT FEATURE-COMPLETE AND IS LIKELY TO BE HIGHLY UNSTABLE. WE ARE NOT RESPONSIBLE FOR NUCLEAR WAR, EXPLOSIONS OR CORRUPTION OF DATA RESULTING FROM USE OF THIS BUILD.**
changelogs/3.0-alpha.md:This build has breaking API changes, so the API has been bumped to 3.0.0-ALPHA2. These changes are NOT yet complete.
changelogs/3.0-alpha.md:- Re-added support for async network chunk serialization
changelogs/3.0-alpha.md:- Refactored level\format namespace (see files for changes)
changelogs/3.0-alpha.md:- Added new world format PMAnvil (based on Anvil with some alterations)
changelogs/3.0-alpha.md:- Added Item Frames
changelogs/3.0-alpha.md:- Added some 0.16 blocks and items.
changelogs/3.0-alpha.md:- Updated creative inventory and crafting recipes for 1.0.0.16
changelogs/3.0-alpha.md:- Refactored Server::broadcastPacket() to be non-static, use available server references.
changelogs/3.0-alpha.md:- Type declarations and strict types for most things in the level\format namespace.
changelogs/3.0-alpha.md:- Refactor Level::chunkBlockHash() -> Chunk::chunkBlockHash()
changelogs/3.0-alpha.md:- GenericChunk::fastSerialize() is no longer static.
changelogs/3.0-alpha.md:- Refactored format\generic\GenericChunk -> format\Chunk. You should already have been using the format\Chunk interface, if not you may need to make alterations.
changelogs/3.0-alpha.md:- Removed unused Entity stub classes in preparation for Entity API rewrite.
changelogs/3.0-alpha.md:- Fixed unable to teleport over Y = 128
changelogs/3.0-alpha.md:- Fix some mob head rotation bugs
changelogs/3.0-alpha.md:- Fixed some issues with Flower Pot items vanishing and not saving correctly
changelogs/3.0-alpha.md:- Fixed Win10 Edition default hotbar mapping
changelogs/3.0-alpha.md:- Fixed issues crafting with items with NBT (5443b10, 77b3cd7)
changelogs/3.0-alpha.md:- Fixed a crash in Item->deepEquals() where only one item had a tag
changelogs/3.0-alpha.md:- Fixed issues with the title bar and /status reporting incorrect CPU and tick usage statistics (8bdfe0d)
changelogs/3.0-alpha.md:- Fixed an age-old corruption bug due to use of IntTag for Time in PC worlds (3dcfa7b)
changelogs/3.0-alpha.md:- Fixed negative effect amplifier crash (#191)
changelogs/3.0-alpha.md:- Fixed some bugs with some blocks having to be broken twice (obsidian, netherrack) (wrong hardness values)
changelogs/3.0-alpha.md:- Fixed Head drops
changelogs/3.0-alpha.md:- Fixed dropped items disappearing after a server restart
changelogs/3.0-alpha.md:# 3.0.0-ALPHA3
changelogs/3.0-alpha.md:API changes relating to closing Levels and anti-cheat, along with many bug fixes.
changelogs/3.0-alpha.md:**DISCLAIMER: THIS IS AN _ALPHA_ SNAPSHOT. THIS BUILD IS NOT FEATURE-COMPLETE AND IS LIKELY TO BE HIGHLY UNSTABLE. WE ARE NOT RESPONSIBLE FOR NUCLEAR WAR, EXPLOSIONS OR CORRUPTION OF DATA RESULTING FROM USE OF THIS BUILD.**
changelogs/3.0-alpha.md:This build has breaking API changes, so the API has been bumped to 3.0.0-ALPHA3. These changes are NOT yet complete.
changelogs/3.0-alpha.md:- Added a hack to workaround client-side text duplication (TODO REVERT 52748fc)
changelogs/3.0-alpha.md:- Crashdumps are now created in the `crashdumps` folder instead of being dumped into your server root directory.
changelogs/3.0-alpha.md:- Some tweaks for Anvil I/O for more performance in some circumstances (won't make much difference in heavily-built up worlds)
changelogs/3.0-alpha.md:- Movement-checks and instabreak anti-cheats can now be disabled in pocketmine.yml (#287)
changelogs/3.0-alpha.md:- **EXPERIMENTAL** LevelDB support is back, with support for MCPE 1.0 worlds. NOTE that LevelDB can be HIGHLY UNSTABLE and will segfault a lot. See #254 for progress.
changelogs/3.0-alpha.md:- Added crafting data cache to reduce on-join lag spikes. (9c36e0c)
changelogs/3.0-alpha.md:- Assertion behaviour is now configurable: the server will by default warn on startup if assertions are enabled, and assertion exception throws are now disabled by default. This can be configured under the `debug` section in pocketmine.yml.
changelogs/3.0-alpha.md:- API version suffix for plugins is now non-case-sensitive.
changelogs/3.0-alpha.md:- Type-hints have been added to Item::get() and some Item API methods. This is in an effort to combat some peculiar issues which arose from using null or wrong types.
changelogs/3.0-alpha.md:- Added API to allow customising randomly-ticked blocks in Level.
changelogs/3.0-alpha.md:- Added method `Level->isClosed()` to allow checking if a Level is still usable before trying to do stuff with it.
changelogs/3.0-alpha.md:- `Position->getLevel()` will now verify that the Level is usable before returning it, and if it is not will destroy the reference and return null. This is to help identify leaks with unloaded Levels.
changelogs/3.0-alpha.md:- Added API methods to allow controlling anti-cheat configuration per-player (#287) and added PlayerIllegalMoveEvent to allow plugins to cancel movement anti-cheat positives.
changelogs/3.0-alpha.md:- Removed deprecated `Utils::getRandomBytes()` (use php7 random_bytes() instead) (085d1a1)
changelogs/3.0-alpha.md:- Moved LevelException, PluginException and ChunkException into more relevant namespaces (946d301)
changelogs/3.0-alpha.md:- Fixed CommandReader hanging on shutdown on Windows (#171)
changelogs/3.0-alpha.md:- Fixed vanilla McRegion worlds getting corrupted (8902992)
changelogs/3.0-alpha.md:- Fixed total server freeze when teleporting long distances
changelogs/3.0-alpha.md:- Fixed anti-cheat false-positives when climbing ladders and a wide variety of other movement issues (8ea0352)
changelogs/3.0-alpha.md:- Fixed shutdown memory leaks related to double chests (e4aa3d7)
changelogs/3.0-alpha.md:- Fixed eating golden apples with full hunger
changelogs/3.0-alpha.md:- Fixed long-string NBT encoding (longer than 127 bytes, length is a uvarint not a byte), fixed corrupted sign issues, fixed issues with unicode sign text
changelogs/3.0-alpha.md:- Fixed players appearing under the world when sleeping.
changelogs/3.0-alpha.md:- Fixed players continuing to burn in creative mode.
changelogs/3.0-alpha.md:- Fixed players sometimes not dying properly after taking lethal damage due to food regeneration (441961b)
changelogs/3.0-alpha.md:- Fixed a logic error in the basic generator preventing swamp biomes from generating (b566c4e)
changelogs/3.0-alpha.md:- Fixed setting item custom name doesn't update player (0584681)
changelogs/3.0-alpha.md:- Fixed bad lighting issues when importing a PocketMine-MP world back to vanilla Minecraft (946d301)
changelogs/3.0-alpha.md:# 3.0.0-ALPHA4
changelogs/3.0-alpha.md:**DISCLAIMER: THIS IS AN _ALPHA_ SNAPSHOT. THIS BUILD IS NOT FEATURE-COMPLETE AND IS LIKELY TO BE HIGHLY UNSTABLE. WE ARE NOT RESPONSIBLE FOR NUCLEAR WAR, EXPLOSIONS OR CORRUPTION OF DATA RESULTING FROM USE OF THIS BUILD.**
changelogs/3.0-alpha.md:This build has breaking API changes, so the API has been bumped to 3.0.0-ALPHA4. These changes are NOT yet complete.
changelogs/3.0-alpha.md:- Removed SQLite3 hard dependency as it is no longer used by the core code.
changelogs/3.0-alpha.md:- Translation system has been reworked for better synchronization and consistency. Please head over to http://translate.pocketmine.net if you would like to help.
changelogs/3.0-alpha.md:- Enchanted Golden Apples now give the eater Absorption 4
changelogs/3.0-alpha.md:- Removed chunk/provider/level/tile/entity entanglement. This is a very breaking change, see c21197ef176166b1c2c19b091cf84664aa878c00 for details.
changelogs/3.0-alpha.md:- Removed some sound classes
changelogs/3.0-alpha.md:- Removed deprecated version constants from PocketMine.php
changelogs/3.0-alpha.md:- Added UnknownBlock class
changelogs/3.0-alpha.md:- Added some API methods for changing entity scale (6dc6e3265666eb700305bdf4f484ce3f17c01650)
changelogs/3.0-alpha.md:- Fixed a CPU leak that occurred when movement checks were disabled (this was the same underlying issue causing `player moved too fast, reverting movement`) (ccef045)
changelogs/3.0-alpha.md:- Fixed a CrashDump bug causing all crashdumps to report an issue creating the crashdump directory (09a6776)
changelogs/3.0-alpha.md:- Fixed incorrect git commit hash parsing when running a server from source code (#299)
changelogs/3.0-alpha.md:- Fixed some issues with command sending
changelogs/3.0-alpha.md:- Fixed Sea Lantern lighting issues
changelogs/3.0-alpha.md:- Fixed half-trees in freshly-generated worlds
changelogs/3.0-alpha.md:- Fixed DestroyBlockParticle
changelogs/3.0-alpha.md:- Fixed some issues with removing items from item frames
changelogs/3.0-alpha.md:- Fixed movement-checking bugs due to bad anti-spam check in MovePlayerPacket handler
changelogs/3.0-alpha.md:- Fixed lots of improperly-implemented blocks causing suffocation
changelogs/3.0-alpha.md:- Fixed issues breaking some improperly-implemented blocks
changelogs/3.0-alpha.md:- Fixed heightmap-related crashes in McRegion worlds
changelogs/3.0-alpha.md:# 3.0.0-ALPHA5
changelogs/3.0-alpha.md:**DISCLAIMER: THIS IS AN ALPHA SNAPSHOT. THIS BUILD IS NOT FEATURE-COMPLETE AND IS LIKELY TO BE HIGHLY UNSTABLE. WE ARE NOT RESPONSIBLE FOR NUCLEAR WAR, EXPLOSIONS OR CORRUPTION OF DATA RESULTING FROM USE OF THIS BUILD.**
changelogs/3.0-alpha.md:This build has breaking API changes, so the API has been bumped to 3.0.0-ALPHA5. These changes are NOT yet complete.
changelogs/3.0-alpha.md:- World format implementations using Regions will now be more thoroughly checked for validity before the core attempts to use them. (#393)
changelogs/3.0-alpha.md:- Fixed a crash that would prevent a world from being at all usable if a Human was created with an invalid skin.
changelogs/3.0-alpha.md:- Fixed chunk object memory leak when chunks are replaced by the generator.
changelogs/3.0-alpha.md:- Tile and Entity NBT trees are now destroyed when their close() methods are called to combat memory leaks.
changelogs/3.0-alpha.md:- Fixed tile and entity object memory leaks and crashes when replacing chunks
changelogs/3.0-alpha.md:- Chunk->addTile(Tile) and Chunk->addEntity(Entity) will now throw exceptions if something attempts to add a closed tile or entity to them.
changelogs/3.0-alpha.md:- Fixed squid health attribute errors
changelogs/3.0-alpha.md:- Fixed server crash when taking damage after dying when the Health Boost effect was applied before death.
changelogs/3.0-alpha.md:- Fixed crashes when using xdebug and breaking very tall cacti or sugarcane (recursive block updates)
changelogs/3.0-alpha.md:- Fixed some packets being sent with reliability level 0, may improve connections randomly being dropped
changelogs/3.0-alpha.md:- Fixed memory leak related to persistent entities when lots of players join and quit a server in the same area
changelogs/3.0-alpha.md:- Fixed possible item NBT duplication where items were holding references to the same NBT trees when cloned.
changelogs/3.0-alpha.md:- Fixed usage always being reported even when disabled in pocketmine.yml
changelogs/3.0-alpha.md:- Fixed stack traces in the logger sometimes missing the top stack frame.
changelogs/3.0-alpha.md:- Fixed Entity object memory leak in EntityDamageByEntityEvent
changelogs/3.0-alpha.md:- Fixed Player object memory leak when players subscribed to the administrative broadcast permission quit the server
changelogs/3.0-alpha.md:- Non-generated chunks will no longer be saved to disk, fixes big dirty holes in some maps due to chunks being saved before being generated
changelogs/3.0-alpha.md:- Rewritten the chunk sending algorithm, much better chunk sending (will now actually reach the horizon)
changelogs/3.0-alpha.md:- Fixed a major memory leak when a W10 player set a very high render distance due to the server not enforcing radius limits. This has been corrected,. A player's render distance will now be set to the minimum of the spawn radius, the player's radius, or the server default render distance.
changelogs/3.0-alpha.md:- The settings `chunk-sending.max-chunks` has been removed from pocketmine.yml in favour of a more vanilla `view-distance` setting in server.properties (values match MCPE render distance settings) and `chunk-sending.spawn-threshold` has been replaced with `chunk-sending.spawn-radius` (again, same values as MCPE).
changelogs/3.0-alpha.md:- Fixed CPU waste of batched packets sometimes being encoded twice.
changelogs/3.0-alpha.md:- Auto-updater checks are now done with an AsyncTask to prevent slowdown on server start.
changelogs/3.0-alpha.md:- Added debug output for lots of network- and protocol-related things.
changelogs/3.0-alpha.md:- Massive refactor of the network namespace. All packets have moved from network\protocol to network\mcpe\protocol, and Info has been renamed to ProtocolInfo. This is to make space for future changes. **Note that these changes are far from complete and more will follow.**
changelogs/3.0-alpha.md:- Added API methods to Player to allow transferring them to other servers, and to allow sending titles.
changelogs/3.0-alpha.md:- Added Entity API for setting entity scale.
changelogs/3.0-alpha.md:- Added support for commands with spaces in their names for future command implementation.
changelogs/3.0-alpha.md:- Item->deepEquals() has been deprecated and its functionality added to Item->equals().
changelogs/3.0-alpha.md:- Added the Color class to the utils namespace. This was primarily added for use when reversing the encoding of the ClientboundMapItemDataPacket.
changelogs/3.0-alpha.md:- Player->hasPermission() will now throw an exception if the player has been closed.
changelogs/3.0-alpha.md:- Commands no longer all have the same hints if you modify one command's data.
changelogs/3.0-alpha.md:- API methods Player::isValidSkin() and Player::isValidName() have been added.
changelogs/3.0-alpha.md:- The API for Utils internet access has been improved, added BulkCurlTask for batch-executing cURL operations. See #834 for details.
changelogs/3.0-alpha.md:- Fixed sounds not working after 1.0.4
changelogs/3.0-alpha.md:- Added resource packs support. This support is currently very basic and will be improved in the future. Currently only resource packs in the .zip format are supported. See the resource packs configuration for details (will be created in the resource_packs/ directory after you run the server).
changelogs/3.0-alpha.md:- Hunger now works!
changelogs/3.0-alpha.md:- Implemented Absorption effect
changelogs/3.0-alpha.md:- Fixed bows can't be fired after starting or stopping sprint.
changelogs/3.0-alpha.md:- Fixed solid blocks filtering their own light, fixes light saving for lit furnace, pumpkins and glowing obsidian.
changelogs/3.0-alpha.md:- Fixed unlit furnaces glowing in the dark.
changelogs/3.0-alpha.md:- Fixed lighting issues due to light changes in subchunks which were not being saved to disk.
changelogs/3.0-alpha.md:- Block light is now correctly updated when removing obstructions.
changelogs/3.0-alpha.md:- Fixed potion bubbles not working.
changelogs/3.0-alpha.md:- Added support for copying tile NBT onto items by ctrl+middle-clicking on Windows 10 Edition.
changelogs/3.0-alpha.md:- Fixed blocks sometimes glitching and reappearing when broken due to timing issues.
changelogs/3.0-alpha.md:- Fixed slowness being removed when trying to sprint
changelogs/3.0-alpha.md:- Fixed lots of issues with the hotbar, armor equipment and item equipment in creative (and caused some creative transaction bugs)
changelogs/3.0-alpha.md:- Fixed Cake recipe not showing up due to having multiple result items
changelogs/3.0-alpha.md:- Fence-gates now work properly
changelogs/3.0-alpha.md:- Spectator-mode players cannot break blocks anymore if the AdventureSettings flags were not set correctly.
changelogs/3.0-alpha.md:- Fixed some issues with entity spawn rotation due to a silly mistake in AddEntityPacket.
changelogs/3.0-alpha.md:# 3.0.0-ALPHA6
changelogs/3.0-alpha.md:**DISCLAIMER: THIS IS AN ALPHA SNAPSHOT. THIS BUILD IS NOT FEATURE-COMPLETE AND IS LIKELY TO BE HIGHLY UNSTABLE. WE ARE NOT RESPONSIBLE FOR NUCLEAR WAR, EXPLOSIONS OR CORRUPTION OF DATA RESULTING FROM USE OF THIS BUILD.**
changelogs/3.0-alpha.md:This build has breaking API changes, so the API has been bumped to 3.0.0-ALPHA6. These changes are NOT yet complete.
changelogs/3.0-alpha.md:- 32-bit support has been removed for consistency and performance reasons. (#984)
changelogs/3.0-alpha.md:- The `Binary` class now has strict types and type-hinting for safety reasons when writing data to network.
changelogs/3.0-alpha.md:- Fixed incorrect PC world format versions causing Mojang's official McRegion -> Anvil converter to reject PocketMine-MP-generated McRegion worlds.
changelogs/3.0-alpha.md:- Fixed ServerKiller does not work correctly on single-core machines.
changelogs/3.0-alpha.md:- AsyncTasks no longer leak memory after completion. (#922)
changelogs/3.0-alpha.md:- Fixed masses of console spam when a crash occurs and an NBT tag or EncapsulatedPacket was an argument somewhere in the call stack.
changelogs/3.0-alpha.md:- NBT ListTags now default to TAG_End if no tag type is specified instead of null.
changelogs/3.0-alpha.md:- Fixed /particle command crash when creating TerrainParticle or ItemBreakParticle
changelogs/3.0-alpha.md:- Player `XpSeed` is now restricted to the bounds of an int32 on all platform (since it is supposed to be saved as an IntTag, which is bounded to the range of an int32).
changelogs/3.0-alpha.md:- Player->close() now does its best to catch thrown exceptions and clean up after itself to avoid possible leaks and issues during the quit process.
changelogs/3.0-alpha.md:- Fixed AutoUpdater crashing the server when invalid data is returned by the updater host.
changelogs/3.0-alpha.md:- Changed updater host to https://update.pmmp.io
changelogs/3.0-alpha.md:- Changed crash-archive host to https://crash.pmmp.io
changelogs/3.0-alpha.md:- Fixed some issues with static properties not being included in memory dumps.
changelogs/3.0-alpha.md:- Fixed server crashing when crashing while creating a CrashDump.
changelogs/3.0-alpha.md:- Fixed silenced errors being reported in CrashDumps when a plugin uses `exit()` or `die()`.
changelogs/3.0-alpha.md:- Fixed lots of bugs exposed by strict types.
changelogs/3.0-alpha.md:- Chunk serialization and compression is now always done asynchronously to improve performance.
changelogs/3.0-alpha.md:- Level area-broadcasted packets and block updates are now sent in batches instead of individual packets to improve performance.
changelogs/3.0-alpha.md:- Workaround for packets sent with immediate priority being ignored by the client (#1026)
changelogs/3.0-alpha.md:- Fixed UUID encoding (players will no longer see themselves twice in the player list)
changelogs/3.0-alpha.md:- ResourcePackDataInfoPacket will now report the correct number of resource pack chunks.
changelogs/3.0-alpha.md:- Dropped items no longer bounce on partial blocks such as slabs.
changelogs/3.0-alpha.md:- Fixed hunger decreasing too fast.
changelogs/3.0-alpha.md:- Fixed server crash when vines are placed on some block faces.
changelogs/3.0-alpha.md:- Falling sand is no longer destroyed by grass and no longer destroys slabs.
changelogs/3.0-alpha.md:- Falling into water 1 block deep no longer causes fall damage.
changelogs/3.0-alpha.md:- Removed eye-height offsets causing spawned entities to appear in wrong positions on the client-side.
changelogs/3.0-alpha.md:- Arrows will now fly correctly towards targets and no longer spin round and fall flat when hitting a surface.
changelogs/3.0-alpha.md:- Implemented basic sky-light population on chunk generation and sky-light updating when blocks are changed in the world. This will be needed for proper farming.
changelogs/3.0-alpha.md:- Improved player movement (smoother, much less stuttery) and fixed several client-sided positioning bugs.
changelogs/3.0-alpha.md:- Fixed other players don't see teleport movement when teleporting to nearby locations.
changelogs/3.0-alpha.md:- Fixed player spawn points set using /spawnpoint not working.
changelogs/3.0-alpha.md:- Strict types are now enabled throughout the core code. See #969 and #993 for details.
changelogs/3.0-alpha.md:- Plugins can now specify the `extensions` attribute in plugin.yml to specify PHP extensions required for the plugin to function correctly. This may be useful where plugins require extensions which are not supplied by default with PMMP-supplied PHP binaries. (#903)
changelogs/3.0-alpha.md:- Added `Vector3->asVector3()`, `Position->asPosition()`, `Location->asLocation()` (#973). This is intended to provide an easy way to convert a descendent of one of these classes (such as an `Entity`) into an explicit Vector3, Position or Location.
changelogs/3.0-alpha.md:- Added the following events:
changelogs/3.0-alpha.md:  - PlayerDataSaveEvent, which is called when a player's NBT data is about to be saved to disk. (#920)
changelogs/3.0-alpha.md:  - UpdateNotifyEvent, which is called when the AutoUpdater receives information that a new PocketMine-MP version is available.
changelogs/3.0-alpha.md:- PlayerInteractEvent is now called with the left-click action when a player attempts to remove an item from an item frame.
changelogs/3.0-alpha.md:- NBT classes now have more strict type-checking in the constructors, `Tag->getValue()` and `Tag->setValue()`. ByteTags, ShortTags and IntTags will now throw an exception if the supplied value is outside of the range they can store.
changelogs/3.0-alpha.md:- Block constructors will now always retain the meta values passed in the constructor, fixes issues with crafting with recipes that required any-damage ingredients.
changelogs/3.0-alpha.md:- Added API methods `Block->canClimb()`, `Entity->canClimb()`, `Entity->setCanClimb(bool)`, `Entity->canClimbWalls()` and `Entity->setCanClimbWalls(bool)` along with corresponding entity metadata flags.
changelogs/3.0-alpha.md:- Added API methods `Block->getLightFilter()` and `Block->diffusesSkyLight()` (used in sky light population).
changelogs/3.0-alpha.md:- Added `/title` command and API for resetting title durations.
changelogs/3.0-alpha.md:- Refactored some JSON-parsing-specific NBT code into its own class.
changelogs/3.0-alpha.md:- Added `Server->broadcastTitle()`.
changelogs/3.0-alpha.md:- `Item->setLore()` is now fluent.
changelogs/3.0-alpha.md:# 3.0.0-ALPHA7
changelogs/3.0-alpha.md:This build has breaking API changes, so the API has been bumped to 3.0.0-ALPHA7. These changes are NOT yet complete.
changelogs/3.0-alpha.md:- Backtraces no longer incorrectly show a `boolean` parameter when a function call in the stack trace had no parameters.
changelogs/3.0-alpha.md:- Configs will now save correctly when the type was auto-detected due to being unspecified.
changelogs/3.0-alpha.md:- Fixed RakLibInterface crashing when exceptions are raised during packet handling, after the player was closed.
changelogs/3.0-alpha.md:- Fixed UUIDs becoming corrupted when converted to strings
changelogs/3.0-alpha.md:- Fixed crashes caused by NBT TAG_Short being written as signed but read as unsigned.
changelogs/3.0-alpha.md:- Plugin load error messages such as "incompatible API version" and "Unknown dependency" are now more verbose
changelogs/3.0-alpha.md:- Significant performance enhancements to entity ticking and to explosions
changelogs/3.0-alpha.md:- The server will no longer crash when players join if the spawn radius is set to 0.
changelogs/3.0-alpha.md:A large number of API methods and interfaces have prototype changes - addition of scalar typehints throughout the code. The most breaking of these for plugins are the following:
changelogs/3.0-alpha.md:  - `CommandExecutor->onCommand()`:
changelogs/3.0-alpha.md:    - before: `onCommand(CommandSender $sender, Command $command, $label, $args)`
changelogs/3.0-alpha.md:    - after: `onCommand(CommandSender $sender, Command $command, string $label, $args) : bool`
changelogs/3.0-alpha.md:  - `Task->onRun()`:
changelogs/3.0-alpha.md:    - before: `onRun($currentTick)`
changelogs/3.0-alpha.md:    - after: `onRun(int $currentTick)`
changelogs/3.0-alpha.md:- Added `InvalidCommandSyntaxException`. Throwing this exception in a Command's execution function will cause its usage to be displayed. This is used to reduce repeated code in the built-in commands and has not been tested from a `CommandExecutor` perspective (yet).
changelogs/3.0-alpha.md:- Plugins can now register their own custom blocks and/or override existing implementations. Refer to `BlockFactory` for documentation.
changelogs/3.0-alpha.md:- Block ID constants are now generated automatically from vanilla. In the mix, many old aliases which didn't make sense have been removed.
changelogs/3.0-alpha.md:- Several Block classes have been removed due to excess duplication. Blocks are now instantiated by creating clones of pre-initialized objects registered in BlockFactory.
changelogs/3.0-alpha.md:- `Block->canBeActivated()` and `Item->canBeActivated()` have been removed due to extra confusion they caused in the implementation of new gameplay features.
changelogs/3.0-alpha.md:- `Block->getDrops()` now returns `Item[]` instead of `int[][]`. Plugins which use this method will need alterations.
changelogs/3.0-alpha.md:- `Block::get()` now redirects to `BlockFactory::get()`. This is backwards compatible with existing implementations.
changelogs/3.0-alpha.md:- `Block::get()` will now throw exceptions when out-of-bounds block IDs or block meta values are given.
changelogs/3.0-alpha.md:- `new Block()` should now **only** be used for constructing **block types**. `Block::get()` or `BlockFactory::get()` should be used instead for getting block instances to set into the world.
changelogs/3.0-alpha.md:- `Block->getResistance()` has been deprecated, superseded by `Block->getBlastResistance()`.
changelogs/3.0-alpha.md:- Added API method `Block->ticksRandomly() : bool` (used for level random block ticking registration, see below)
changelogs/3.0-alpha.md:- Obsolete first parameters have been removed from `Entity->attack()` and `Entity->heal()`.
changelogs/3.0-alpha.md:- `Entity->getHealth()` now returns a float, and `Entity->setHealth()` now accepts floats.
changelogs/3.0-alpha.md:- Redundant public property `Entity->length` has been removed.
changelogs/3.0-alpha.md:- `Entity->closed` is now protected, use `Entity->isClosed()` instead. (eebc52e00ba6ad38bf1c249a6f0e9415c81d5072)
changelogs/3.0-alpha.md:- Added the following events:
changelogs/3.0-alpha.md:  - NetworkInterfaceCrashEvent
changelogs/3.0-alpha.md:  - NetworkInterfaceRegisterEvent
changelogs/3.0-alpha.md:  - NetworkInterfaceUnregisterEvent
changelogs/3.0-alpha.md:  - PlayerJumpEvent
changelogs/3.0-alpha.md:- Fixed `EntityEatBlockEvent` not being called when a player eats a slice of cake
changelogs/3.0-alpha.md:- Fixed `PlayerBucketEmptyEvent` not being used anywhere
changelogs/3.0-alpha.md:- Plugins can now register their own custom items and/or override existing implementations. Refer to `ItemFactory` for documentation.
changelogs/3.0-alpha.md:- Item ID constants are now generated automatically from vanilla. In the mix, many old aliases which didn't make sense have been removed.
changelogs/3.0-alpha.md:- Added API methods `Item->hasEnchantment(int, int) : bool`, `Item->removeEnchantment(int, int)`, `Item->removeEnchantments()`
changelogs/3.0-alpha.md:- Added API methods `Item->getAttackPoints() : int` and `Item->getDefensePoints() : int`
changelogs/3.0-alpha.md:- Many redundant item classes have been removed due to excess duplication. Items are now instantiated by creating clones of pre-initialized objects registered in `ItemFactory`.
changelogs/3.0-alpha.md:- `Item->clearCustomBlockData()` now works correctly.
changelogs/3.0-alpha.md:- `new Item()` should now **only** be used for constructing **item types**. `Item::get()` or `ItemFactory::get()` should be used instead for getting item instances to set into an inventory.
changelogs/3.0-alpha.md:- `Item::get()` and `Item::fromString()` now redirect to their respective methods in `ItemFactory`. This is backwards compatible with existing implementations.
changelogs/3.0-alpha.md:- The `count` parameter has been removed from `Item::__construct()`.
changelogs/3.0-alpha.md:- Fixed issues with serialize/deserialize items from NBT where the tag kept the wrong name
changelogs/3.0-alpha.md:- `Level->dropItem()` now returns a reference to the created item entity.
changelogs/3.0-alpha.md:- `Nether` generator no longer returns `normal` in `getName()`.
changelogs/3.0-alpha.md:- Added precision and rounding mode arguments to `Vector3->round()`. This defaults to the original behaviour if the arguments are not specified.
changelogs/3.0-alpha.md:- `Position->equals()` and `Location->equals()` will now additionally check level (if the parameter is an instance of Position) and yaw/pitch (if the parameter is an instance of Location) respectively. (b8a30309bbc4ec8600669ea0794c7d3d68c4a415)
changelogs/3.0-alpha.md:- MCPE packets are now registered in `pocketmine\network\mcpe\protocol\PacketPool`. API methods `registerPacket()` and `getPacket()` have been removed from `Network`. This is to allow easier auto-generation of protocol-related code.
changelogs/3.0-alpha.md:- Added `PlayerNetworkSessionAdapter`. This is currently used to reduce the amount of empty handlers in `Player`, however this may cause problems which override handlers in `Player` to handle packets. Plugins which override `Player->handleDataPacket()` should still work correctly, provided that you remember to call the parent.
changelogs/3.0-alpha.md:- `Packet->decode()` and `Packet->encode()` should no longer be overridden by plugins as core functionality is performed in here. Use `Packet->decodePayload()` and `Packet->encodePayload()` when creating new packets.
changelogs/3.0-alpha.md:- Plugins can now specify the `mcpe-protocol` attribute in plugin.yml to specify compatible protocol versions.
changelogs/3.0-alpha.md:- Specifying API as `2.0` when the server API is `2.0.0` or similar is now legal and will work correctly.
changelogs/3.0-alpha.md:- Fixed plugins with unknown dependencies claiming to have circular dependencies.
changelogs/3.0-alpha.md:- The `MainLogger` is now accessible in AsyncTasks by use of `MainLogger::getLogger()`.
changelogs/3.0-alpha.md:- Throwing exceptions during `Task->onCancel()` will no longer cause server crashes and undesirable behaviour.
changelogs/3.0-alpha.md:- `ServerScheduler->scheduleAsyncTask()` now returns the ID of the worker the task was scheduled to.
changelogs/3.0-alpha.md:- Added some methods to `tile\Sign` and `SignChangeEvent` for consistency. (42fb1d1fef47ae7cc55794764aa4057364348616)
changelogs/3.0-alpha.md:- `Sign->setText()` now accepts null parameters to leave the text on those lines as-is.
changelogs/3.0-alpha.md:- `Spawnable->getSpawnCompound()` is now final. Plugins implementing custom tiles should instead override `Spawnable->addAdditionalSpawnData()`. See #1259 for changes and examples.
changelogs/3.0-alpha.md:- Implemented: bone block, coloured beds, concrete, double plants, end rod, glazed terracotta, magma, nether wart, nether wart block, red nether brick, stained glass
changelogs/3.0-alpha.md:- Beds can no longer be slept in beyond a 2-block distance.
changelogs/3.0-alpha.md:- Fixed beds not requiring a solid block under the head
changelogs/3.0-alpha.md:- Fixed bookshelves dropping themselves instead of 3 books
changelogs/3.0-alpha.md:- Fixed quartz pillar rotation not working correctly
changelogs/3.0-alpha.md:- Grass growth and death now works correctly.
changelogs/3.0-alpha.md:- Lit redstone lamp block now emits the correct amount of light.
changelogs/3.0-alpha.md:- Obsidian can no longer be destroyed by TNT
changelogs/3.0-alpha.md:- Placing rails is now less weird (they still won't join up though yet).
changelogs/3.0-alpha.md:- Re-added Nether Reactor core (decorative only, as in vanilla)
changelogs/3.0-alpha.md:- Command usage messages are now translated server-side to resolve client-side translation issues.
changelogs/3.0-alpha.md:- Armor will now correctly absorb damage when the resulting damage from an attack is less than 1 point.
changelogs/3.0-alpha.md:- Fixed mobs such as zombies and villagers not having their positions updated server-side when something causes them to gain motion. This fixes problems with floating mobs and zombies being unkillable in earlier versions. As an added bonus, the change fixing this problem brought in substantial performance improvements. See 2f3c77c68a0d9e0fdfb0eb69bd44344f4c8d028d and c32b75fa188bcee58aa46977e97e140532fc47ba for details.
changelogs/3.0-alpha.md:- Fixed cake not applying any food/saturation to the eater
changelogs/3.0-alpha.md:- Absorption and damage resistance now absorb the correct amount of damage when armor is worn.
changelogs/3.0-alpha.md:- Several furnace fuel items which did not work before now work correctly.
changelogs/3.0-alpha.md:- Armor screen on PE will no longer duplicate armor items when equipping armor.
changelogs/3.0-alpha.md:- Fixed level random block ticking not being random anymore on the third iteration
changelogs/3.0-alpha.md:- The presence of a spectator player will no longer prevent building at a target.
changelogs/3.0-alpha.md:- Players will no longer take decades to spawn when the server is generating a new world. This was caused by a bug in chunk requesting causing the server not to fully utilize the CPU, which significantly delayed chunk generation before spawn.
changelogs/3.0-alpha.md:# 3.0.0-ALPHA7 build 27
changelogs/3.0-alpha.md:- Minimum PHP version requirement is now PHP 7.2. This is because of thread-safety issues in earlier versions which make PHP 7.0 & 7.1 unsafe. 7.2, while (at the time of writing) is still in RC, is far more stable.
changelogs/3.0-alpha.md:- Fixed not being able to find sources when PocketMine.php is run from anywhere other than 3 levels up
changelogs/3.0-alpha.md:- The server will no longer crash if a garbage value is set as the timezone in php.ini.
changelogs/3.0-alpha.md:- Exception stack traces are now always logged regardless of debug level. **Note that this ONLY affects stack traces**, the usual debug level applies for everything else.
changelogs/3.0-alpha.md:- `Non-packaged PocketMine-MP installation` is now more informative about the advantages of using a phar in production.
changelogs/3.0-alpha.md:- Fixed #1358 - resource packs reporting incorrect sizes in preprocessed Jenkins builds
changelogs/3.0-alpha.md:# 3.0.0-ALPHA8
changelogs/3.0-alpha.md:This build has breaking API changes, so the API has been bumped to 3.0.0-ALPHA8. These changes are NOT yet complete.
changelogs/3.0-alpha.md:- Composer is now required to run a server from source-code.
changelogs/3.0-alpha.md:- Xbox Live authentication has been implemented and is enabled by default.
changelogs/3.0-alpha.md:- The server no longer crashes when loading an old world containing furnaces with missing NBT tags.
changelogs/3.0-alpha.md:- Stats reporting can now be disabled from the command-line using `--anonymous-statistics.enabled=0`
changelogs/3.0-alpha.md:- Players with spaces in their names are now accepted on the server.
changelogs/3.0-alpha.md:  - Following from the above, commands now support quoted arguments, so if you want to kick player `Rotten Eggs`, use quotes, like so: `/kick "Rotten Eggs" reason why`
changelogs/3.0-alpha.md:- Added API method `BlockFactory::isRegistered()`
changelogs/3.0-alpha.md:- Added `PlayerBlockPickEvent`
changelogs/3.0-alpha.md:- API method `CraftItemEvent->getTransaction()` has been added and returns a `CraftingTransaction` object.
changelogs/3.0-alpha.md:- `InventoryTransactionEvent->getTransaction()` now returns an `InventoryTransaction` instead of a `TransactionGroup`
changelogs/3.0-alpha.md:- The general naming of TransactionGroups and Transactions has been refactored to Transaction and InventoryAction respectively as the original naming did not make sense.
changelogs/3.0-alpha.md:- Removed `SimpleTransactionGroup`, `TransactionGroup`, `BaseTransaction`, `Transaction` and `SlotType` classes
changelogs/3.0-alpha.md:- Added the following:
changelogs/3.0-alpha.md:  - `InventoryTransaction` - used for regular inventory transactions, this replaces the old SimpleTransactionGroup in terms of functionality
changelogs/3.0-alpha.md:  - `CraftingTransaction` - represents an `InventoryTransaction` in which the actions are to create a crafted item.
changelogs/3.0-alpha.md:  - `InventoryAction` - base class which represents a change in the amount of an item, somewhere. This has several subclasses:
changelogs/3.0-alpha.md:    - `SlotChangeAction`: Represents a change of the amount of an item in a specific slot of an inventory. This replaces the functionality of the old `BaseTransaction`.
changelogs/3.0-alpha.md:    - `DropItemAction`: Represents a player throwing an item onto the ground out of their inventory.
changelogs/3.0-alpha.md:    - `CreativeInventoryAction`: Represents the action of creating or deleting items using the creative menu.
changelogs/3.0-alpha.md:    - `CraftingTransferMaterialAction`: Represents the action of consuming a crafting ingredient, or getting a secondary output from a crafting event (don't try too hard to understand this)
changelogs/3.0-alpha.md:    - `CraftingTakeResultAction`: Represents a player taking the primary result item from the crafting grid result slot.
changelogs/3.0-alpha.md:- `CraftingGrid` and `BigCraftingGrid` have been added. **Note for plugin developers: if you change the contents of these, players _will not see_ the changes, due to a limitation in the current 1.2 client**.
changelogs/3.0-alpha.md:- `PlayerCursorInventory` has been added - this is a container representing the item under the cursor on desktop platforms. **Note that sending this inventory's contents does not work correctly due to a bug in the current 1.2 client.**
changelogs/3.0-alpha.md:- `InventoryType` has been removed
changelogs/3.0-alpha.md:- API methods `BaseInventory->getDefaultTitle()`, `BaseInventory->getDefaultSize()` and `ContainerInventory->getNetworkType()` have been added.
changelogs/3.0-alpha.md:- Due to changes in the 1.2 client, the API for changing hotbar linked slots has been removed - they now behave the same way as Minecraft PC Edition does. The following obsolete API methods have been removed:
changelogs/3.0-alpha.md:  - `PlayerInventory->resetHotbar()`
changelogs/3.0-alpha.md:  - `PlayerInventory->getHotbarSlotIndex()`
changelogs/3.0-alpha.md:  - `PlayerInventory->setHotbarSlotIndex()`
changelogs/3.0-alpha.md:  - `PlayerInventory->setHeldItemSlot()`
changelogs/3.0-alpha.md:- `BaseInventory->getItem()` and `BaseInventory->setItem()` will now throw an exception if an out-of-bounds inventory slot index is given.
changelogs/3.0-alpha.md:- `ShapedRecipe`'s constructor has been changed, it now accepts `Item $result, string[] $shape, Item[] $shapeItems, Item[] $extraResults`.
changelogs/3.0-alpha.md:- Removed `BigShapedRecipe` and `BigShapelessRecipe` - these have been obsoleted by the addition of `CraftingRecipe->requiresCraftingTable()`
changelogs/3.0-alpha.md:- Added `send` parameters to `BaseInventory->clear()`, `BaseInventory->setItem()`.
changelogs/3.0-alpha.md:- Added API method `Item->isNull()`, which returns true if the count of the item is less than or equal to 0, or if its ID is air.
changelogs/3.0-alpha.md:- Added API method `Item->equalsExact()` which asserts that the ID, count, damage and NBT must all be identical.
changelogs/3.0-alpha.md:- Added API method `ItemFactory::isRegistered()`
changelogs/3.0-alpha.md:- The server no longer crashes if a plugin uses `Level->unload()` directly. **Note that you should not be using this anyway!!! Use `Server->unloadLevel()` instead.**
changelogs/3.0-alpha.md:- Refactored API checking code into its own function (`PluginManager->isCompatibleApi(string ...$apiVersions)`)
changelogs/3.0-alpha.md:- Added API method `AsyncTask->storeLocal()`, which must be explictly called to store objects in the scheduler object store. This replaces the functionality of `AsyncTask->__construct()` because the old behaviour was too easy to use by accident. See #1322 for details.
changelogs/3.0-alpha.md:- Implemented Coarse Dirt
changelogs/3.0-alpha.md:- Eating sounds now work correctly.
changelogs/3.0-alpha.md:- Reverted botched fix for #145 that caused problems with double slabs.
changelogs/3.0-alpha.md:- Desktop crafting now works (except for a crash when using the recipe book - WIP)
changelogs/3.0-alpha.md:# 3.0.0-ALPHA9
changelogs/3.0-alpha.md:This build has breaking API changes, so the API has been bumped to 3.0.0-ALPHA9. These changes are NOT yet complete.
changelogs/3.0-alpha.md:- Minimum PHP version has been upped to PHP 7.2.0RC3 due to more bugfixes needed for ZTS mode.
changelogs/3.0-alpha.md:- Fixed PocketMine.php compatibility with PHP 5 (needed for incompatible PHP version messages to work correctly)
changelogs/3.0-alpha.md:- Incompatible PHP version message on startup is now more clear and tells the user what PHP version they are attempting to use.
changelogs/3.0-alpha.md:- Fixed a crash when Leaves2 is mined with a damage value > 1
changelogs/3.0-alpha.md:- Fixed debug spam when entities are created over zero tick diffs.
changelogs/3.0-alpha.md:- Entities which are saved when on fire will now appear on fire when they are next loaded.
changelogs/3.0-alpha.md:- Fixed performance degradation in `Level->getBlock()` which had very widespread effects.
changelogs/3.0-alpha.md:- Fixed performance degradation with chunk ticking caused by expensive subchunk empty checks.
changelogs/3.0-alpha.md:- Difficulty levels can now be set per-world, and can be set in pocketmine.yml using the `difficulty` key under the worlds section per-world.
changelogs/3.0-alpha.md:- Chunk-packet caching is now non-optional, offering better performance (#1448)
changelogs/3.0-alpha.md:- Compression level 0 in pocketmine.yml is no longer allowed and will be reset to the default if used.
changelogs/3.0-alpha.md:- Fixed a crash which occurred during login verification due to trying to read a nonexistent public key
changelogs/3.0-alpha.md:- Fixed ridiculous network upload & download statistics when the title ticker was disabled
changelogs/3.0-alpha.md:- Removed a redundant asserting function in packet reads which was degrading performance.
changelogs/3.0-alpha.md:- Added `\pocketmine\NAME` constant.
changelogs/3.0-alpha.md:- Basic support has been added for separation of block bounding boxes and collision boxes. `Block->getCollisionBoxes()` has been added.
changelogs/3.0-alpha.md:- Added API method `SimpleCommandMap->unregister()` to allow completely removing registered commands.
changelogs/3.0-alpha.md:  - `pocketmine\entity\Skin`
changelogs/3.0-alpha.md:  - `PlayerChangeSkinEvent`, called when a player changes their skin
changelogs/3.0-alpha.md:  - `Human->getSkinId() : string`
changelogs/3.0-alpha.md:  - `Human->getSkinData() : string`
changelogs/3.0-alpha.md:  - `Human->getSkin() : Skin`
changelogs/3.0-alpha.md:  - `Human->sendSkin(Player[])` The following methods have signature changes:
changelogs/3.0-alpha.md:  - `Human->setSkin()` now accepts `Skin` instead of `string, string`
changelogs/3.0-alpha.md:  - `Server->updatePlayerListData()` now accepts ` Skin` instead of the old skin string parameters.
changelogs/3.0-alpha.md:- Projectile-related classes such as `Projectile`, `ProjectileSource`, `Snowball` etc have been moved to an `entity\projectile` namespace.
changelogs/3.0-alpha.md:- Added `EntityIds` interface containing named constants for Minecraft: Bedrock entity type IDs.
changelogs/3.0-alpha.md:- Added API methods `Entity->canSaveWithChunk()` and `Entity->setCanSaveWithChunk()`. These methods allow marking an entity as non-permanent so that it does not get saved to disk when the chunk is saved.
changelogs/3.0-alpha.md:- Added API method `Entity::createBaseNBT()` to allow creation of base NBT needed to spawn an entity without boilerplate CompoundTags everywhere.
changelogs/3.0-alpha.md:- Added API method `Living->lookAt()` to make a mob turn and look at a certain position.
changelogs/3.0-alpha.md:- `Entity->spawnTo()` should no longer be overridden for sending packets for spawning entities to players; override `Entity->sendSpawnPacket()` instead.
changelogs/3.0-alpha.md:- Setting villager profession now shows the correct profession on the client side.
changelogs/3.0-alpha.md:- `Villager::PROFESSION_GENERIC` has been removed since it does not exist in vanilla and crashes players if used.
changelogs/3.0-alpha.md:- A range of API methods have been added to allow controlling entity oxygen supply (2601e359907fca98d95b10454256157977282f90)
changelogs/3.0-alpha.md:- Removed `PlayerMoveEvent->setFrom()`.
changelogs/3.0-alpha.md:- Added `PlayerChangeSkinEvent`
changelogs/3.0-alpha.md:- Added `BaseInventory->removeAllViewers()` and `BaseInventory->dropContents()`.
changelogs/3.0-alpha.md:- FloatingTextParticle now uses a transparent skin so that the tiny player cannot be seen.
changelogs/3.0-alpha.md:- Explosions now correctly remove tiles.
changelogs/3.0-alpha.md:- A range of new methods have been added to `CompoundTag`'s API to allow more sane handling of the data they contain. See #1469 for details.
changelogs/3.0-alpha.md:- `tagType` parameter has been added to `ListTag`'s constructor.
changelogs/3.0-alpha.md:- `Durable` class has been added to abstract damage handling away from tools directly.
changelogs/3.0-alpha.md:- `Enchantment::registerEnchantment()` method has been added.
changelogs/3.0-alpha.md:- Items with out-of-bounds damage values will no longer crash the server.
changelogs/3.0-alpha.md:- Serializing ItemBlocks which have previously been used to place blocks will no longer raise exceptions
changelogs/3.0-alpha.md:- `Item->getNamedTag()` will now return an empty `CompoundTag` if the item does not have any NBT; this change was made after seeing that this function is only ever used when wanting to alter the item's NBT.
changelogs/3.0-alpha.md:- Added API methods `Item->setNamedTagEntry()` and `Item->removeNamedTagEntry()`
changelogs/3.0-alpha.md:- Added some constants for commonly-accessed item NBT tags.
changelogs/3.0-alpha.md:- Some unnecessary/obsolete item classes have been removed.
changelogs/3.0-alpha.md:- Added `Player->getXuid()` - note that this will ONLY return a valid XUID for players logged into Xbox Live
changelogs/3.0-alpha.md:- Changed stupid default values for `Player->setAllowMovementCheats()` and `Player->setAllowInstaBreak()`
changelogs/3.0-alpha.md:- An ErrorException-throwing error handler is now set on AsyncWorkers. Due to a bug in PHP pthreads causing warnings not to get output, you may experience unexpected errors/crashes in AsyncTasks where previously everything appeared to work fine due to silenced warnings.
changelogs/3.0-alpha.md:- Fixed `Binary::unsignShort()` mistakenly being non-static
changelogs/3.0-alpha.md:- Arrows will now fly through smaller spaces as their bounding boxes have been corrected.
changelogs/3.0-alpha.md:- Arrows can no longer be shot through the top part of a stair.
changelogs/3.0-alpha.md:- Fixed getting kicked for flight when walking on top of fences, fence-gates and stairs.
changelogs/3.0-alpha.md:- Fixed a range of bugs with entity movement and collision on fences, fence-gates, glass panes, iron bars,
changelogs/3.0-alpha.md:- Movement anti-cheat is now disabled by default on new installations.
changelogs/3.0-alpha.md:- Oxygen supply is no longer used when the player is underwater in creative or spectator modes.
changelogs/3.0-alpha.md:- Players will no longer take damage on respawn when they were killed while falling from causes other than fall damage.
changelogs/3.0-alpha.md:- Peaceful difficulty no longer disables player-versus-player combat.
changelogs/3.0-alpha.md:- Skins with custom capes and geometry models are now supported.
changelogs/3.0-alpha.md:- Added the following:
changelogs/3.0-alpha.md:  - concrete powder
changelogs/3.0-alpha.md:  - red sandstone, red sandstone stairs and red sandstone slabs
changelogs/3.0-alpha.md:  - purpur, purpur stairs and purpur slabs
changelogs/3.0-alpha.md:  - end stone bricks
changelogs/3.0-alpha.md:- Beds no longer leave their other halves behind invisible when broken in survival mode.
changelogs/3.0-alpha.md:- Buttons now have the correct rotation when placed.
changelogs/3.0-alpha.md:- Dead bush now drops 0-2 sticks instead of itself.
changelogs/3.0-alpha.md:- Falling blocks will now fall when placed above fire.
changelogs/3.0-alpha.md:- Falling blocks landing in water will no longer overwrite wrong blocks when moved slightly by currents.
changelogs/3.0-alpha.md:- Farmland will now hydrate when <= 4 blocks from water (crops don't take notice of this yet)
changelogs/3.0-alpha.md:- Farmland and grass path will now turn to dirt if a solid block is placed on top of them.
changelogs/3.0-alpha.md:- Mob heads no longer rotate 45 degrees sideways when placed facing north
changelogs/3.0-alpha.md:- Slab placement in half-block gaps should now (finally!) work correctly.
changelogs/3.0-alpha.md:- Shift-clicking on the recipe book to batch-craft items now works correctly.
changelogs/3.0-alpha.md:- Crafting using mirrored asymmetric shaped recipes now works correctly.
changelogs/3.0-alpha.md:- Mob death animations now last the correct length of time.
changelogs/3.0-alpha.md:- Dropped items are now destroyed by lava.
changelogs/3.0-alpha.md:- Flint and steel will now play a sound when a fire is created.
changelogs/3.0-alpha.md:- Hoes and shovels now break when their damage exceeds their durability (although still take double damage).
changelogs/3.0-alpha.md:- Implemented writable and written books (#1397)
changelogs/3.0-alpha.md:# 3.0.0-ALPHA10
changelogs/3.0-alpha.md:**This version is an alpha - it is not feature complete. Please do not create issues for missing gameplay features.**
changelogs/3.0-alpha.md:This build does not have major breaking API changes, but has many new feature additions, so the API has been bumped to 3.0.0-ALPHA10.
changelogs/3.0-alpha.md:- RakLib and PocketMine-SPL are now Composer libraries instead of submodules. The installation process is exactly as before - simply run `composer install [...optional extra flags]` and the correct versions of RakLib and SPL will be installed.
changelogs/3.0-alpha.md:- The server will no longer crash when garbage is written in pocketmine.yml for `worlds` or `aliases`.
changelogs/3.0-alpha.md:- Minecraft PE 1.2 LevelDB worlds are now supported with https://github.com/pmmp/php-leveldb version 0.2.1 and the latest version of https://github/com/pmmp/leveldb-mcpe on branch `pmmp-merge`.
changelogs/3.0-alpha.md:- `server.properties` is no longer overwritten when stopping the server (finally!). However, there is one caveat - IF it has been modified at runtime (which rarely happens) without being saved, then it will still be overwritten.
changelogs/3.0-alpha.md:- Serialized spawn compounds are now cached by tiles for faster spawning. This significantly reduces chunk serialization overhead on the main thread when a chunk contains lots of tiles (since tile NBT has to be encoded on the main thread, and NBT is particularly slow). **Note that `Spawnable->onChanged()` MUST be called by implementations when their NBT changes, to ensure players see changes properly.**
changelogs/3.0-alpha.md:- `CraftingManager` now caches a pre-compressed crafting-data packet to reduce workload on player join.
changelogs/3.0-alpha.md:- Player skin geometry is now automatically stripped of pretty formatting to cut down on bandwidth overhead, since the geometry sizes tend to be very large.
changelogs/3.0-alpha.md:- `Level->isInWorld()` is no longer so horribly (relatively) expensive since the world height is now stored as a field in the level for faster comparison.
changelogs/3.0-alpha.md:- Liquid performance has been drastically improved.
changelogs/3.0-alpha.md:- Light population performance has been drastically improved using subchunk direct accessing (see below in API section).
changelogs/3.0-alpha.md:- Fixed errors when an effect duration becomes negative due to the level tick rate being > 1 (such as under lag when auto-tick-rate is enabled).
changelogs/3.0-alpha.md:- The `disable-block-ticking` config in pocketmine.yml now works correctly.
changelogs/3.0-alpha.md:- Fixed crashes when `Level->getSafeSpawn()` encounters a non-full block.
changelogs/3.0-alpha.md:- Fixed incorrect translation key being used for level generation errors.
changelogs/3.0-alpha.md:- All known core code is now making use of the new CompoundTag API. **Note that the original method (using dynamic fields) is now deprecated and should be avoided, as it will cease to work in the future.**
changelogs/3.0-alpha.md:- Players now respawn in the correct spawn world when dying in a different world. This was due to a bug with `Position->add()` returning a `Vector3` unexpectedly.
changelogs/3.0-alpha.md:- Resource pack UUIDs are now non-case-sensitive.
changelogs/3.0-alpha.md:- Added API method `Block->getPickedItem()`
changelogs/3.0-alpha.md:- The JSON mess leftovers from pre-1.2 in commands have been obliterated. Good riddance.
changelogs/3.0-alpha.md:- `Human->sendSkin()` now accepts and defaults to NULL for its `targets` parameter. For a `Human`, using NULL will broadcast its skin to all players who can see it. For a `Player`, it will be broadcasted to all online players (for player list purposes).
changelogs/3.0-alpha.md:- `Entity->setCanClimb()` now has a default value of TRUE for its first parameter.
changelogs/3.0-alpha.md:- `Living->setMaxAirSupplyTicks()` now actually sets the MAX air ticks instead of the current air ticks.
changelogs/3.0-alpha.md:- `Living->addEffect()` now returns a boolean to indicate success.
changelogs/3.0-alpha.md:- Added API methods `Entity->flagForDespawn()` and `Entity->isFlaggedForDespawn()`. These should be used instead of `kill()/close()` and `isAlive()` respectively when wanting to delete an entity without killing it and creating drops. Setting the despawn flag will cause the entity to be deleted on the next tick.
changelogs/3.0-alpha.md:- Block face click vector is now accessible in `PlayerInteractEvent` for `RIGHT_CLICK_BLOCK` action. I don't know why this wasn't already accessible, but now you can go and make yourself some nice touchscreens with maps.
changelogs/3.0-alpha.md:- Player data is once again saved after `PlayerQuitEvent`. This resolves issues with plugins doing odd things like killing players on quit.
changelogs/3.0-alpha.md:- Cancelling `EntityEffectAddEvent` and `EntityEffectRemoveEvent` now work correctly when cancelled.
changelogs/3.0-alpha.md:- `SlotChangeAction` now checks if the slot number is valid before trying to get items from the inventory - this fixes errors with players putting items at out of bounds offsets when PlayerInteractEvent is cancelled on a crafting table.
changelogs/3.0-alpha.md:- Added API methods `Armor->getCustomColor()` and `Armor->setCustomColor()`
changelogs/3.0-alpha.md:- Added API method `Chunk->getSavableEntities()`
changelogs/3.0-alpha.md:- `Level->getName()` no longer crashes after the level has been unloaded and the provider doesn't exist anymore.
changelogs/3.0-alpha.md:- Added a `SubChunkIteratorManager` to modularize the code for faster subchunk accessing. This is now used in `LightUpdate` and `Explosion` and provides drastic performance enhancements.
changelogs/3.0-alpha.md:- Extra parameters have been added to `CompoundTag`'s reading methods to allow returning the default when the tag type doesn't match expected.
changelogs/3.0-alpha.md:- Extra parameters have been added to `CompoundTag`'s writing methods to allow forcefully overwriting existing tags with a type that is not what was expected.
changelogs/3.0-alpha.md:- Added API method `Player->getLocale()`. This returns a locale code of the style `en_US`.
changelogs/3.0-alpha.md:- Added API method `Player->getPing()`. This is reported by RakLib every 5 seconds and returns the player's last measured latency in milliseconds.
changelogs/3.0-alpha.md:- Fixed bugs with bad time values for `Player->hasPlayedBefore()` by reusing calculated time when generating player data for the first time.
changelogs/3.0-alpha.md:- Added API method `ResourcePack->getPath()` - this returns a path to the resource pack's file(s).
changelogs/3.0-alpha.md:- `Server->getConfigBoolean()` has been deprecated; its replacement is `Server->getConfigBool()`. The original will be removed in a later version.
changelogs/3.0-alpha.md:- Added API method `Server->getResourcePath()` - this points to the server's file resource directory in the source/phar (`src/pocketmine/resources/`).
changelogs/3.0-alpha.md:- Added API method `Config->removeNested()`
changelogs/3.0-alpha.md:- Added API method `Color::mix()`
changelogs/3.0-alpha.md:- Liquids have undergone a major refactor, the following issues have been fixed:
changelogs/3.0-alpha.md:  - CPU leaks when liquids try to flow into other liquids have been fixed
changelogs/3.0-alpha.md:  - Liquids no longer flow all over the place when they have a downwards path of least resistance
changelogs/3.0-alpha.md:  - Liquids no longer flow in all directions when flowing down a slope instead of just down the slope
changelogs/3.0-alpha.md:  - Lava is no longer impossible to get rid of when deleting the source block
changelogs/3.0-alpha.md:  - Lava no longer turns to cobblestone when flowing over the top of water
changelogs/3.0-alpha.md:  - Performance has been drastically improved
changelogs/3.0-alpha.md:  - Mobs now move correctly when liquids flow around them
changelogs/3.0-alpha.md:- Added the following blocks: ender chest (#1462), banner (#1331)
changelogs/3.0-alpha.md:- Block-picking crops will now give the correct item instead of the crop block itself.
changelogs/3.0-alpha.md:- Basic command lists are now visible on the client when typing `/`. Arguments are not yet implemented and will always show `[args: message]` (this will come in the future).
changelogs/3.0-alpha.md:- Fixed a crash when attempting to create ListTags with JSON in the `/give` command.
changelogs/3.0-alpha.md:- Teleported entities will no longer continue to take damage from the blocks at their origin.
changelogs/3.0-alpha.md:- Entity death smoke cloud now works correctly.
changelogs/3.0-alpha.md:- Added the following items: banner, rotten flesh
changelogs/3.0-alpha.md:- Implemented sky light reduction based on time of day. This is used for various things including mob spawning (not implemented yet), grass growth and crop growth (not implemented yet).
changelogs/3.0-alpha.md:- Falling more than 3.5 blocks now correctly causes fall damage (incorrect floor() instead of ceil()).
changelogs/3.0-alpha.md:- Added a hack to stop players falling into the ground on spawn.
changelogs/3.0-alpha.md:# 3.0.0-ALPHA10 build 516
changelogs/3.0-alpha.md:This release is a support patch for Minecraft: Bedrock Edition v1.2.7 (protocol version 160). It has no breaking changes over the previous ALPHA10 release (1.7dev-501).
changelogs/3.0-alpha.md:# 3.0.0-ALPHA11
changelogs/3.0-alpha.md:**This version is an alpha - it is not feature complete. Please do not create issues for missing gameplay features.**
changelogs/3.0-alpha.md:This build has breaking API changes, so the API has been bumped to version 3.0.0-ALPHA11.
changelogs/3.0-alpha.md:- Fixed `__FILE__` and `__LINE__` being interpreted as C++ macros on Jenkins builds. This did not cause any noticeable bugs, but was still undesirable.
changelogs/3.0-alpha.md:- The NBT library has been moved to its own Composer library, along with `pocketmine\utils\Binary` and `pocketmine\utils\BinaryStream`.
changelogs/3.0-alpha.md:- **Instabreak anti-cheat has been removed from the core code.** A plugin implementing this can be found at https://github.com/pmmp/AntiInstaBreak
changelogs/3.0-alpha.md:- Fixed a race condition causing log messages to not be written to `server.log` when the server crashes.
changelogs/3.0-alpha.md:- Fixed a crash when using /dumpmemory to dump AsyncWorker global variables.
changelogs/3.0-alpha.md:- Fixed memory dumps not including core class static properties.
changelogs/3.0-alpha.md:- Fixed a crash when the right half of a double chest was destroyed while being viewed.
changelogs/3.0-alpha.md:- Fixed `/teleport` crash when extra spaces are placed between arguments.
changelogs/3.0-alpha.md:- Fixed a crash reading `CustomNameVisible` NBT tag from versions prior to API 3.0.0-ALPHA6.
changelogs/3.0-alpha.md:- Added configuration option `network.max-mtu-size` to allow restricting the maximum byte size of packets sent without being split up. This may be useful to mitigate connection problems.
changelogs/3.0-alpha.md:- Fixed ghost blocks bugs due to the block cache not getting cleared when chunks are replaced.
changelogs/3.0-alpha.md:- Fixed Region-based worlds leaking file resources (region GC was broken).
changelogs/3.0-alpha.md:- Entities are no longer close()d when changing levels. This fixes myriad bugs in plugins and finally properly resolves the age-old chunk unload memory leak without undesired behaviour.
changelogs/3.0-alpha.md:- Players joining LevelDB worlds with folder names that don't match the world display name will now not spawn up at y=32767.
changelogs/3.0-alpha.md:- Errors decoding pack manifests will now raise appropriate error messages instead of `TypeError`s.
changelogs/3.0-alpha.md:- Added API methods `Block->getDropsForCompatibleTool()` and `Block->getSilkTouchDrops()`.
changelogs/3.0-alpha.md:- `Block->canBeBrokenWith()` has been renamed to `isCompatibleWithTool()`.
changelogs/3.0-alpha.md:- Enchantments have been split into enchantment types (`Enchantment`) and enchantment instances (`EnchantmentInstance`). `EnchantmentInstance`s should now be used for applying enchantments to items. This change permits various optimizations, and allows separation of immutable type data (such as ID, max level, applicable items, etc) and mutable instance data (such as a specific enchantment's level on an item).
changelogs/3.0-alpha.md:- XP API has undergone significant changes. Generic math-only XP logic functions have been moved to `ExperienceUtils` from `Human`.
changelogs/3.0-alpha.md:- Added the following `Human` API methods: `addXpLevels()`, `subtractXpLevels()`, `getCurrentTotalXp()`, `setCurrentTotalXp()`, `addXp()`, `subtractXp()`, `getLifetimeTotalXp()` and`setLifetimeTotalXp()`.
changelogs/3.0-alpha.md:- Added API methods `Entity->isInvisible()` and `Entity->setInvisible()`.
changelogs/3.0-alpha.md:- Data-property handling has undergone significant changes, see #1876 for details.
changelogs/3.0-alpha.md:- Added API method `Living->getArmorInventory()`
changelogs/3.0-alpha.md:- `PlayerPreLoginEvent` is now called before whitelist and banlist checks are done. This fixes backwards incompatibilities with older plugins which broke after a previous update.
changelogs/3.0-alpha.md:- Cancelling `EntityEffectRemoveEvent` will now throw an exception if the effect's duration has expired.
changelogs/3.0-alpha.md:- Removed `EntityEatEvent` and subclasses. These events didn't make sense because of their hunger-centric nature, meaning that they only applied to Players regardless.
changelogs/3.0-alpha.md:- Added a `$send` parameter to `Inventory->clearAll()`
changelogs/3.0-alpha.md:- Added a `$includeEmpty` parameter to `Inventory->getContents()`
changelogs/3.0-alpha.md:- Removed `Inventory->getHolder()`. Inventories no longer require that you give them an `InventoryHolder`. A holder is now optional to be implemented by subclasses and is not required to be an `InventoryHolder`.
changelogs/3.0-alpha.md:- Armor handling has been removed from `PlayerInventory` and separated into its own `ArmorInventory` class.
changelogs/3.0-alpha.md:  - All armor-related methods have been removed from `PlayerInventory`
changelogs/3.0-alpha.md:  - `ArmorInventory` now contains armor-specific logic. All living entities have an armor inventory.
changelogs/3.0-alpha.md:- Fixed `Player->removeWindow()` breaking client-sided GUI.
changelogs/3.0-alpha.md:- Added API method `Item->getEnchantmentLevel()`, which returns the level of the enchantment on the item with the given ID, or 0 if it does not have the enchantment.
changelogs/3.0-alpha.md:- Removed `Item->getMaxDurability()` - this has been moved to `Durable` where it belongs.
changelogs/3.0-alpha.md:- Added API method `Level->addGlobalPacket()`, which allows queuing a packet to be broadcasted to everyone in the level at the end of the tick, similar to how `addChunkPacket()` works.
changelogs/3.0-alpha.md:- Added API method `Level->dropExperience()`, which drops a given amount of XP as XP orbs into the world.
changelogs/3.0-alpha.md:- `LevelProvider`s are no longer dependent on Levels. This is a significant change because it makes it possible to construct `LevelProvider`s on threads without a `Level`, which opens up **future possibilities** to do many cool things:
changelogs/3.0-alpha.md:    - Super-simple world format conversion
changelogs/3.0-alpha.md:    - Asynchronous chunk I/O
changelogs/3.0-alpha.md:- The `LevelProvider` interface has undergone significant changes. Unused or redundant methods have been stripped out, and the remaining methods have significant changes:
changelogs/3.0-alpha.md:    - `loadChunk()` now directly returns a `Chunk` object read from disk.
changelogs/3.0-alpha.md:    - `saveChunk()` now directly accepts a `Chunk` object instead of coordinates.
changelogs/3.0-alpha.md:    - `__construct()` now **only** accepts a `string $path`, the `Level` parameter has been removed.
changelogs/3.0-alpha.md:    - The following methods have been obsoleted, and therefore removed: `getChunk()`, `setChunk()`, `saveChunks()`, `unloadChunk()`, `unloadChunks()`, `isChunkLoaded()`,  `getLoadedChunks()`, `isChunkGenerated()`, `isChunkPopulated()` and `getLevel()`
changelogs/3.0-alpha.md:- `getServer()` method has been removed from `BaseLevelProvider`.
changelogs/3.0-alpha.md:- Added `Math::solveQuadratic()`
changelogs/3.0-alpha.md:- Fixed `Vector2`'s coordinates magically incrementing when `ceil()` is used repeatedly
changelogs/3.0-alpha.md:- Added `VoxelRayTrace` containing two generator functions, which allow iterating over blocks on a line between two points.
changelogs/3.0-alpha.md:- Removed Math module dependency on `Level` (`AxisAlignedBB` depended on `MovingObjectPosition`).
changelogs/3.0-alpha.md:- Added `RayTraceResult`, which contains data for AxisAlignedBB ray trace results.
changelogs/3.0-alpha.md:- NBT read/write logic (streams) have been moved to `NBTStream` and its descendents.
changelogs/3.0-alpha.md:- `NBT` class is now abstract.
changelogs/3.0-alpha.md:- Removed `network` parameters and endianness fields from NBT stream handling. These are now encapsulated in separate implementations of `NBTStream` (`BigEndianNBTStream`, `LittleEndianNBTStream`, `NetworkLittleEndianNBTStream`).
changelogs/3.0-alpha.md:- Added `BanList->getEntry()`
changelogs/3.0-alpha.md:- Added API method `ResourcePackManager->getPath()`, which returns the path to the server's resource packs directory.
changelogs/3.0-alpha.md:- The public constant `TextFormat::EOL` has been added. **This should be used instead of `PHP_EOL` when preparing messages to send to players, since `PHP_EOL` is platform-dependent.**
changelogs/3.0-alpha.md:- API method `TextFormat::colorize()` has been added (see #1837 for details).
changelogs/3.0-alpha.md:- `BlockIterator` has been removed in favour of `math\VoxelRayTrace`.
changelogs/3.0-alpha.md:- Block break times will now display correctly when an incorrect or not good enough tool is used to break a block.
changelogs/3.0-alpha.md:- Fixed beds dropping in creative (#1525)
changelogs/3.0-alpha.md:- Fixed chest items getting rearranged when creating a double chest.
changelogs/3.0-alpha.md:- Hunger effect now applies as expected with high amplifiers.
changelogs/3.0-alpha.md:- Implemented the following effects: Saturation, Fatal Poison (used for parrots).
changelogs/3.0-alpha.md:- Levitation effect no longer triggers anti-flight.
changelogs/3.0-alpha.md:- Fixed all currently-known occurrences of blocks like fire burning mobs when they are not actually intersecting with the block.
changelogs/3.0-alpha.md:- Armour is now useful for damage types other than PvP.
changelogs/3.0-alpha.md:- Non-player entities can now wear armour (with the help of plugins).
changelogs/3.0-alpha.md:- Implemented Potion effects
changelogs/3.0-alpha.md:- Implemented Chorus Fruit
changelogs/3.0-alpha.md:- Added sounds for Buckets
changelogs/3.0-alpha.md:- Buckets now show the correct liquid inside when used on still liquids
changelogs/3.0-alpha.md:- Empty buckets now stack to 16
changelogs/3.0-alpha.md:- Implemented the following enchantments: Respiration, Silk Touch, Efficiency, Unbreaking, Protection, Fire Protection, Blast Protection, Feather Falling, Projectile Protection.
changelogs/3.0-alpha.md:- Fixed players' knockback being messed up.
changelogs/3.0-alpha.md:- Crafting grid contents is no longer dumped into the player's inventory after respawning.
changelogs/3.0-alpha.md:- Fixed interaction anti-cheat false-positives when doing the following (see #983):
changelogs/3.0-alpha.md:  - Standing on the corner of a block and breaking it/placing it (player was further than 0.5 blocks from block centre directionally)
changelogs/3.0-alpha.md:  - Breaking/placing blocks "behind" self by looking down and using multi-touch mode with mining circle on mobile devices.
changelogs/3.0-alpha.md:  - Breaking blocks right at the end of the survival reach distance.
changelogs/3.0-alpha.md:- Adventure mode no longer prevents interacting with blocks.
changelogs/3.0-alpha.md:- Implemented experience and experience orbs.
changelogs/3.0-alpha.md:# 3.0.0-ALPHA11 build 698
changelogs/3.0-alpha.md:This release is a support patch for Minecraft: Bedrock Edition v1.2.10 (protocol version 201). It has no breaking changes over the previous ALPHA11 release (1.7dev-677).
changelogs/3.0-alpha.md:# 3.0.0-ALPHA11 build 703
changelogs/3.0-alpha.md:This release is a bugfix update. It has no breaking changes over the previous ALPHA11 release (1.7dev-698).
changelogs/3.0-alpha.md:- Fixed /timings paste not working since paste.ubuntu.com paste ID update.
changelogs/3.0-alpha.md:# 3.0.0-ALPHA11 build 717
changelogs/3.0-alpha.md:This release is a bugfix update. It has no breaking changes over the previous ALPHA11 release (1.7dev-703).
changelogs/3.0-alpha.md:- Fixed client-side performance issue/lag due to constant spam of empty batch packets (#2020)
changelogs/3.0-alpha.md:# 3.0.0-ALPHA11 build 743
changelogs/3.0-alpha.md:This release is a bugfix update. It has no breaking changes over the previous ALPHA11 release (1.7dev-717).
changelogs/3.0-alpha.md:- Fixed server freeze & performance problems due to XP orbs following players who are too far away (#2028)
changelogs/3.0-alpha.md:# 3.0.0-ALPHA12
changelogs/3.0-alpha.md:**This version is an alpha - it is not feature complete. Please do not create issues for missing gameplay features.**
changelogs/3.0-alpha.md:This build has breaking API changes, so the API has been bumped to version 3.0.0-ALPHA12.
changelogs/3.0-alpha.md:- `start.cmd` will now pause when the server exits with a non-zero exit code, to allow viewing any errors.
changelogs/3.0-alpha.md:- Adding ban entries with ridiculous date values is no longer permitted and will no longer crash the server on restart. This works around [a bug in the date extension in PHP](https://bugs.php.net/bug.php?id=75992) which permits `format()` to create dates which it cannot parse.
changelogs/3.0-alpha.md:- Memory dumps are now created in a separate `memory_dumps` directory.
changelogs/3.0-alpha.md:- `/dumpmemory` no longer requires a token to create a memory dump - instead it uses the current time to identify the dump.
changelogs/3.0-alpha.md:- Query packet responses are now sent only to the originating interface, not all interfaces.
changelogs/3.0-alpha.md:- Decreased on-join load by reducing size of `CraftingDataPacket`.
changelogs/3.0-alpha.md:- Fixed unhandled packet debug spam when armour items are set from the server side.
changelogs/3.0-alpha.md:- **Region-based worlds will now no longer be loaded if there are a mixture of types of region files in their `region` directory.** This would previously cause astonishing undefined behaviour which was dependent on the default level format. An error will now be emitted instead: `Cannot identify format of world`.
changelogs/3.0-alpha.md:- `Human` skins now save their skin data using `TAG_ByteArray` instead of `TAG_String`. **This is a backwards-incompatible change, earlier versions will raise errors if you have `Human` entities in your world after upgrading.**
changelogs/3.0-alpha.md:- `Human`s now save their cape data, geometry model and geometry data in their NBT.
changelogs/3.0-alpha.md:- Fixed a huge number of bugs relating to entities being saved on incorrect chunks in negative coordinates.
changelogs/3.0-alpha.md:- Fixed a bug in Region handling that caused incomplete corrupted regions to be retained and later crash the server.
changelogs/3.0-alpha.md:- Fixed chunks getting saved to disk twice on shutdown.
changelogs/3.0-alpha.md:- Exploits relating to players quitting to main menu on death have been patched.
changelogs/3.0-alpha.md:- Players can no longer modify item frames or signs inside spawn protection.
changelogs/3.0-alpha.md:- `pocketmine/binaryutils` v0.0.1
changelogs/3.0-alpha.md:- `pocketmine/math` v0.1.0
changelogs/3.0-alpha.md:- `pocketmine/nbt` v0.1.0
changelogs/3.0-alpha.md:- `pocketmine/raklib` v0.11.0
changelogs/3.0-alpha.md:- `pocketmine/spl` v0.3.0
changelogs/3.0-alpha.md:- `public static $handlerList` is no longer required in event declarations.
changelogs/3.0-alpha.md:- Any non-abstract event can have a handler registered to it - for example, you can now register handlers for both `EntityDamageEvent` (which will receive any instanceof `EntityDamageEvent`) and also be able to register a separate handler specifically for `EntityDamageByEntityEvent`.
changelogs/3.0-alpha.md:- Abstract events may be handled using the above rules if they declare the `@allowHandle` PhpDoc annotation.
changelogs/3.0-alpha.md:- Handlers will always handle all subclasses of an event. This slightly differs from existing behaviour, where handlers would only receive subclass events which did not declare their own handler lists.
changelogs/3.0-alpha.md:- `Block->onUpdate()` hook has been removed, and is replaced by several new methods: `onScheduledUpdate()`, `onNearbyBlockChange()`, and `onRandomUpdate()`. The associated `Level::BLOCK_UPDATE_*` constants have been removed.
changelogs/3.0-alpha.md:- `Command->getPermissionMessage()` is now permitted to return `null`.
changelogs/3.0-alpha.md:- `ConsoleCommandSender->isPlayer()` has been removed.
changelogs/3.0-alpha.md:- `Item`, `PrimedTNT` and `FallingSand` have been moved to `object\ItemEntity`, `object\PrimedTNT` and `object\FallingBlock` respectively.
changelogs/3.0-alpha.md:- Classes `entity\object\Painting` and `entity\object\PaintingMotive` have been added.
changelogs/3.0-alpha.md:- Added hook for nearby block updates: `Entity->onNearbyBlockChange()`.
changelogs/3.0-alpha.md:- Added API method `Living->hasEffects()` which returns if the entity has any active status effects.
changelogs/3.0-alpha.md:- `Effect` has been split into `Effect` (type) and `EffectInstance`. Methods relating to instance-specific things of `Effect` have been moved to `EffectInstance`. See dc3bf8546e2f700cb79adf988e15735a0c2d84fa for implementation examples.
changelogs/3.0-alpha.md:- `PlayerCreationEvent->getClientId()` has been removed.
changelogs/3.0-alpha.md:- Added new events `ProjectileHitBlockEvent` and `ProjectileHitEntityEvent`.
changelogs/3.0-alpha.md:- Added new event `PlayerExperienceChangeEvent`.
changelogs/3.0-alpha.md:- Triggering a call to an event inside a handler of that event will no longer cause a segmentation fault. Instead, the maximum recursion depth for event calls has now been limited to 50 calls. Trying to go beyond this depth will cause an exception to be thrown.
changelogs/3.0-alpha.md:- `BigCraftingGrid` has been removed. Instead, `CraftingGrid` now accepts a grid size in the constructor.
changelogs/3.0-alpha.md:- Added API method `Inventory->isSlotEmpty()`.
changelogs/3.0-alpha.md:- Optimized `BaseInventory->getContents()` method.
changelogs/3.0-alpha.md:- `DropItemAction` no longer requires a source item in the constructor (this was useless anyway).
changelogs/3.0-alpha.md:- `InventoryAction->getCreationTime()` has been removed.
changelogs/3.0-alpha.md:Crafting-related things have been mostly rewritten in this release and have significant changes.
changelogs/3.0-alpha.md:- `CraftingTransferMaterialAction`
changelogs/3.0-alpha.md:- `CraftingTakeResultAction`
changelogs/3.0-alpha.md:- `CraftingManager`
changelogs/3.0-alpha.md:	- removed the following: `getRecipe(UUID)`, `getRecipes()`
changelogs/3.0-alpha.md:	- `matchRecipe()` now accepts `CraftingGrid, Item[]` instead of `Item[][], Item, Item[]`
changelogs/3.0-alpha.md:- `CraftingTransaction`
changelogs/3.0-alpha.md:	- All API methods have been removed and are now handled in `CraftItemEvent`
changelogs/3.0-alpha.md:- `CraftItemEvent`
changelogs/3.0-alpha.md:	- added the following: `getInputs()`, `getOutputs()`, `getRepetitions()`
changelogs/3.0-alpha.md:- `Recipe` interface:
changelogs/3.0-alpha.md:	- Removed `getResult()` (because individual recipes may handle this differently)
changelogs/3.0-alpha.md:- `CraftingRecipe` interface
changelogs/3.0-alpha.md:	- removed the following: `matchItems()`, `getExtraResults()`, `getAllResults()`, `requiresCraftingTable()`,  `getId()`, `setId()`
changelogs/3.0-alpha.md:	- added the following: `getResultsFor(CraftingGrid)`, `getIngredientList()`, `matchesCraftingGrid(CraftingGrid)`
changelogs/3.0-alpha.md:- `ShapedRecipe`
changelogs/3.0-alpha.md:	- constructor now accepts `string[], Item[], Item[]`
changelogs/3.0-alpha.md:- `ShapelessRecipe`
changelogs/3.0-alpha.md:	- constructor now accepts `Item[], Item[]`
changelogs/3.0-alpha.md:- `ItemFactory::init()` no longer calls `Item::initCreativeItems()`.
changelogs/3.0-alpha.md:- `ItemFactory::fromString()` now throws exceptions on failure to parse a string as a valid item ID. Previously it would silently return an Air item.
changelogs/3.0-alpha.md:- Added API method `Item->getVanillaName()`, which returns the name of an item without any custom name NBT masking it.
changelogs/3.0-alpha.md:- `event\TranslationContainer` and `event\TextContainer` have been moved to the `lang` namespace.
changelogs/3.0-alpha.md:- Added API method `Level->getRandomTickedBlocks()`.
changelogs/3.0-alpha.md:- `Explosion->__construct()` will now throw exceptions on invalid parameters.
changelogs/3.0-alpha.md:- Removed dead generator things `Level->generateChunk()`, `Level->regenerateChunk()`, `GenerationTask`.
changelogs/3.0-alpha.md:- `Level->setBlock()` now clones the `Block` object given as a parameter, fixes unexpected behaviour with setting blocks in `BlockPlaceEvent` using `BlockPlaceEvent->getBlock()`.
changelogs/3.0-alpha.md:- `MovingObjectPosition` has been removed.
changelogs/3.0-alpha.md:- `Player->__construct()` no longer accepts a `clientID` parameter.
changelogs/3.0-alpha.md:- `Player->teleportImmediate()` has been removed.
changelogs/3.0-alpha.md:- `Player->getClientSecret()` has been removed.
changelogs/3.0-alpha.md:- `Player->getLastPlayed()` no longer always returns when the player started their current session. In the future it will only return when they last quit the server (or the same as firstPlayed if they haven't played before), but existing save data will still cause the bug until the player next joins.
changelogs/3.0-alpha.md:- Added API method `PluginDescription->getMap()` which returns an associative array of the contents of `plugin.yml`.
changelogs/3.0-alpha.md:- `PluginLoader` interface now requires the implementation of `canLoadPlugin(string) : bool`.
changelogs/3.0-alpha.md:- Throwables thrown from `AsyncTask->onCompletion()` will no longer crash the server.
changelogs/3.0-alpha.md:- `Server->updatePlayerListData()` now has an extra `xuid` parameter before the `players` parameter.
changelogs/3.0-alpha.md:- `Server->getResourceManager()` has been renamed to `Server->getResourcePackManager()`
changelogs/3.0-alpha.md:- `Server->addPlayer()` now accepts a `Player` as its only parameter.
changelogs/3.0-alpha.md:- `Server->addRecipe()` has been removed. Use `Server->getCraftingManager()->registerRecipe()` instead.
changelogs/3.0-alpha.md:- `Server->getConfigBoolean()` has been removed in favour of `Server->getConfigBool()`.
changelogs/3.0-alpha.md:- `Server->getDifficultyFromString()` has been removed in favour of its corresponding method in `Level`.
changelogs/3.0-alpha.md:- Added API methods `Server->getPlayerByUUID()` and `Server->getPlayerByRawUUID()`.
changelogs/3.0-alpha.md:- All generic utility functions have been moved from `PocketMine.php` to the `Utils` class.
changelogs/3.0-alpha.md:- Timezone-related functions have been moved to `pocketmine\utils\Timezone`.
changelogs/3.0-alpha.md:- `TextFormat::toANSI()` has been moved to `Terminal` since it directly pertains to the terminal output and has platform-dependent output.
changelogs/3.0-alpha.md:- Fixed a block-updating race-condition bug causing ghost blocks to sometimes appear on the client-side.
changelogs/3.0-alpha.md:- Commands with aliases are now shown correctly on the client-side. Previously only the aliases would be visible and the original command would be missing.
changelogs/3.0-alpha.md:- Entity teleporting now is now correctly visible to players.
changelogs/3.0-alpha.md:- Regeneration effect no longer permits more than 2 sets of incoming damage per second on mobs.
changelogs/3.0-alpha.md:- Implemented Paintings.
changelogs/3.0-alpha.md:- Projectiles now use ray tracing for movement. This significantly improves movement of projectiles, particularly fixing arrows getting stuck in mid-air and clipping through the corners of blocks.
changelogs/3.0-alpha.md:- Arrows now make the correct collision sound and shake on impact.
changelogs/3.0-alpha.md:- Taking damage with Resistance levels >5 will no longer give the subject absorption hearts.
changelogs/3.0-alpha.md:- Falling blocks are no longer moved by liquid currents.
changelogs/3.0-alpha.md:- Implemented Ender Pearls, Splash Potions and Bottle o' Enchanting.
changelogs/3.0-alpha.md:- Bows and throwable projectiles now make the correct sound when used.
changelogs/3.0-alpha.md:- Implemented armour durability.
changelogs/3.0-alpha.md:- Added some missing food items.
changelogs/3.0-alpha.md:- Fixed mess of incorrectly-registered Fish items.
changelogs/3.0-alpha.md:- Xbox Live icons are now shown on the server list.
changelogs/3.0-alpha.md:- Fixed a slot count offset bug that caused changes to player armour not to be visible in the inventory.
changelogs/3.0-alpha.md:- Implemented critical hits.
changelogs/3.0-alpha.md:- Players can no longer eat food requiring hunger when in creative mode.
changelogs/3.0-alpha.md:- Fixed block placement bugs due to AABB floating-point inaccuracies.
changelogs/3.0-alpha.md:# 3.0.0-ALPHA12 build 999
changelogs/3.0-alpha.md:This release is a support patch for Minecraft: Bedrock Edition v1.4.0 (protocol version 261). It has no breaking changes over the previous ALPHA12 release (1.7dev-937).
changelogs/3.0-alpha.md:# 3.0.0-ALPHA12 build 1001
changelogs/3.0-alpha.md:This release is a hotfix update over the previous build and has no breaking changes versus the previous release (1.7dev-999).
changelogs/3.0-alpha.md:- Command data is no longer sent on permission recalculation prior to player spawning, fixes game crash issues when the server is using PurePerms or similar.
changelogs/1.3.md:- Minecraft: Pocket Edition alpha 0.7.2 compatible!
changelogs/1.3.md:- Unicode support
changelogs/1.3.md:- Fixed /difficulty command
changelogs/1.3.md:- Fixed a few flying kicks
changelogs/1.3.md:- Fixed async. operations thread
changelogs/1.3.md:- Added whitelist enabled property to Query
changelogs/1.3.md:- Fixed armor crash
changelogs/1.3.md:- Fixed ghost armor
changelogs/1.3.md:- Fixed packets being received after player disconnection
changelogs/1.3.md:- Fixed player count bug
changelogs/1.3.md:- Added compatibility with encrypted login
changelogs/1.3.md:- Fixed flying check on fences
changelogs/1.3.md:- Fixed players connecting with empty usernames
changelogs/1.3.md:- Fixed several crashes related to Items
changelogs/1.3.md:- Added temporal water flowing. Really buggy
changelogs/1.3.md:- Automatic recovery of index-corrupted maps
changelogs/1.3.md:- Fixed hotbar reset when changing armor
changelogs/1.3.md:- Fixed some hotbar reset bugs on block placement
changelogs/1.3.md:- Added basic tool durability and breaking
changelogs/1.3.md:- Chests now have opening/closing animation.
changelogs/1.3.md:- Fixed /difficulty
changelogs/1.3.md:- In-game player list is now handled correctly
changelogs/1.3.md:- Player entities are saved in all worlds to remove join/leave spam
changelogs/1.3.md:- Quartz slabs
changelogs/1.3.md:- Fixed block durability (blocks being replaced)
changelogs/1.3.md:- Added armor replacing (changing the armor while you have other)
changelogs/1.3.md:- Added proper Player object cleanups as a fix to a memory leak
changelogs/1.3.md:In Minecraft: PE 0.7.4 you can add External servers directly. [How to add servers](https://github.com/PocketMine/PocketMine-MP/wiki/How-to-add-servers)
changelogs/1.3.md:- **Updated for 0.7.4 alpha**
changelogs/1.3.md:- **New API version 10**
changelogs/1.3.md:  - Adds Tile methods
changelogs/1.3.md:  - Changes message events to use new Minecraft protocol
changelogs/1.3.md:  - Added Level::getSafeSpawn()
changelogs/1.3.md:- Linux now uses PHP 5.5.3
changelogs/1.3.md:- Removed water updating
changelogs/1.3.md:- Fixes for Player teleporting
changelogs/1.3.md:- Removed invalid Cookie and fish items
changelogs/1.3.md:- Fixed Stone brick and quartz slab recipes
changelogs/1.3.md:- Shears now are used to drop leaves
changelogs/1.3.md:- Fixed a crash on Windows XP
changelogs/1.3.md:- Cake is removed when the bottom block is broken
changelogs/1.3.md:- Added new NBT parser/writer
changelogs/1.3.md:- Fixed chests and furnaces drops when broken.
changelogs/1.3.md:- Fixed signs not spawning on world load
changelogs/1.3.md:- Fixed actions not being deleted (memory leak)
changelogs/1.3.md:- Chests now are spawned correctly
changelogs/1.3.md:- Double chests
changelogs/1.3.md:- Added random x,z offset to item drops
changelogs/1.3.md:- No API changes
changelogs/1.3.md:- Fixed x,y,z indexes when opening a Furnace
changelogs/1.3.md:- Fixed invalid fix for CPU usage limiter on idle
changelogs/1.3.md:- Fixed cross-compiling
changelogs/1.3.md:- Fixed some Stonecutter recipes
changelogs/1.3.md:- Fixed a few items stack sizes
changelogs/1.3.md:- Fixed TimeAPI bugs
changelogs/1.3.md:- Forces position on teleport, blocks fast teleport mods
changelogs/1.3.md:- Fixed some blocks havin a send lag on place/break
changelogs/1.3.md:- Fixed Sign Posts not deleting the Tile data when broken by update
changelogs/1.3.md:- Fixed Ice converting to Water on creative mode
changelogs/1.3.md:- Added beds
changelogs/1.3.md:- Added scheduled teleport on spawn to fix spawning underground
changelogs/1.3.md:- Added date to console logs
changelogs/1.3.md:- Fixed server crash related to beds
changelogs/1.3.md:- Player movement is less laggy
changelogs/1.3.md:- Added new text formatting system for future updates
changelogs/1.3.md:- New Terminal Emulator for Windows
changelogs/1.3.md:  - More colors! Less warnings!
changelogs/1.3.md:- Added door sounds
changelogs/1.3.md:- Fixed bed sleeping position offset
changelogs/1.3.md:- Added explosions
changelogs/1.3.md:- Flint & Steel on Creative Mode (replaces Eggs)
changelogs/1.3.md:- Changed the Sword and Hoe to the diamond tier on the Creative inventory
changelogs/1.3.md:- Fixed colors on MacOS
changelogs/1.3.md:- Water flow
changelogs/1.3.md:- Fixed Windows console input not being accepted when using special keys
changelogs/1.3.md:- Added a way to disable console colors
changelogs/1.3.md:- Updated PHP to 5.5.6, pthreads to 0.0.55, and cURL
changelogs/1.3.md:- Armor drops
changelogs/1.3.md:- Fixed plugin issues
changelogs/1.3.md:- Fixed some block drops
changelogs/1.3.md:- Fixed a crash when @all is used in console, and only usable for OPs
changelogs/1.3.md:- Fixed some issues regarding teleporting
changelogs/1.3.md:- deop no longer op the player again
changelogs/1.3.md:Starting with this release, all PocketMine-MP versions will be given a codename. This one received the codename 「甘いビートルート」_(Amai Beetroot)_.
changelogs/1.3.md:- Fixed existing Packets of Death
changelogs/1.3.md:- Fixed lots of bugs related to crafting
changelogs/1.3.md:- Fixed block placement bugs
changelogs/1.3.md:- Redstone ore drops redstone dust
changelogs/1.3.md:- Sideway logs
changelogs/1.3.md:- Sponges
changelogs/1.3.md:- Added new wooden planks & stairs
changelogs/1.3.md:- Added iron bars, cobblestone walls and pumpkins
changelogs/1.3.md:- Added carpets, hay bales and coal blocks
changelogs/1.3.md:- Added potatoes, carrots and beetroots
changelogs/1.3.md:- Additional tall grass drops
changelogs/1.3.md:- Achievements
changelogs/1.3.md:- Added multiple orders for _/gamemode_ command
changelogs/1.3.md:- Chat plugins can work with each other #975
changelogs/1.3.md:- Fixed internal world chunks bug
changelogs/1.3.md:- Private messages are now hidden on console except when the console is the target/origin
changelogs/1.3.md:- PHP plugins are now loaded with include()
changelogs/1.3.md:- Fixed plugin paths
changelogs/1.3.md:- Added source SHA1 sum to crash reports
changelogs/1.3.md:- Added Level::startTime() and Level::stopTime()
changelogs/1.3.md:- Fixed server not being able to start on several OS when offline
changelogs/1.3.md:- More small fixes and small additions
changelogs/1.3.md:For more information, check the [complete changelog](https://github.com/PocketMine/PocketMine-MP/compare/Alpha_1.3.10...Alpha_1.3.11).
changelogs/1.3.md:- **Full network rewrite.** Plugins can work with packets easily now.
changelogs/1.3.md:- **New Event API,** only implemented for packets right now.
changelogs/1.3.md:- Added player.block.place.bypass and player.block.break.bypass
changelogs/1.3.md:- Level included in data for event item.drop
changelogs/1.3.md:- Added Utils::getUniqueID()
changelogs/1.3.md:- **Added default support in PHP binaries for MySQLi**
changelogs/1.3.md:- Removed Spyc
changelogs/1.3.md:- Call Plugin::__destruct() on PluginAPI::__destruct()
changelogs/1.3.md:- Added more OS detection on Utils::getOS()
changelogs/1.3.md:- New set-up wizard in multiple languages. Help translate it to more languages on http://translate.pocketmine.net/
changelogs/1.3.md:- Updated pthreads and PHP binaries
changelogs/1.3.md:- New font for MinTTY console on Windows
changelogs/1.3.md:- Send partial hotbar history
changelogs/1.3.md:- Fixed Tile saving indexes
changelogs/1.3.md:- Fixed a few teleport bugs
changelogs/1.3.md:- Improved crash dumps
changelogs/1.3.md:- Increased apple health restore
changelogs/1.3.md:- Fixed players being invincible after death
changelogs/1.3.md:- Fixed Level::unloadChunk() not using saveEnabled
changelogs/1.3.md:- Show player name on bad username kick
changelogs/1.3.md:- Fixed item duplication on void #1100
changelogs/1.3.md:- OPs can bypass the player limit
changelogs/1.3.md:- Fixed item replacing on furnace #1114
changelogs/1.3.md:- Fixed multiple small bugs #1058 #1032 #854 #823 #1135 #1150 #1172 #1173 #486 #466 #483
changelogs/1.3.md:- Fixed PHP compilation on 64-bit linux #519 #861 #940 #505 #590 #761 #129
changelogs/1.3.md:- Included OPCache to optimize opcodes
changelogs/1.3.md:If you are on Linux, you can use `wget -q -O - http://cdn.pocketmine.net/installer.sh | bash -s - -v Alpha_1.3.12` to update. If you are on a MacOS, use `curl -sL http://cdn.pocketmine.net/installer.sh | bash -s - -v Alpha_1.3.12`
changelogs/3.7.md:- Compatibility with Minecraft: Bedrock Edition 1.10.0
changelogs/3.7.md:- Removed compatibility with 1.9.0
changelogs/3.7.md:- Fixed protocol argument types for commands.
changelogs/3.7.md:- Autosave debug message will now report in milliseconds when the time taken is less than 1 second.
changelogs/3.7.md:- Flatworld presets now allow `*` as a multiplier symbol (fixes PC compatibility).
changelogs/3.7.md:- Network runtimeIDs for blocks are now randomized to prevent things (like plugins) relying on them.
changelogs/3.7.md:- Updated NBT dependency to 0.2.7 for some bug fixes.
changelogs/3.7.md:- Fixed a memory leak when `PlayerLoginEvent` is cancelled.
changelogs/3.7.md:- Fixed permissions `pocketmine.command.ban.list`, `pocketmine.command.difficulty`, `pocketmine.command.whitelist.enable` and `pocketmine.command.whitelist.disable` always being granted to operators.
changelogs/3.7.md:- Fixed some commands outputting `commands.generic.permission` instead of the proper message when running commands that the sender doesn't have permission to use.
changelogs/3.7.md:- Worlds with unknown generator types will now refuse to load instead of getting incorrect terrain generation ruining them.
changelogs/3.7.md:- `TextFormat::tokenize()` no longer corrupts Unicode sequences.
changelogs/3.7.md:- `TextFormat::clean()` now removes non-printable Unicode code points in the private-use area.
changelogs/3.7.md:- Running two servers in the same data directory is no longer allowed and will gracefully halt instead of corrupting your data.
changelogs/3.7.md:- Sign text length is now soft-capped at 1000 characters.
changelogs/3.7.md:- World save timings now include saves that are triggered by chunk unloading.
changelogs/3.7.md:- Fixed several network denial-of-service bugs.
changelogs/3.7.md:- A warning is now emitted when the `ChunkUtils` extension is not loaded.
changelogs/3.7.md:- Moved version constants to a separate `VersionInfo` file for easier parsing and handling.
changelogs/3.12.md:**WARNING: If your plugin uses the protocol, you're not shielded by API change constraints.** You should consider using the `mcpe-protocol` directive in `plugin.yml` as a constraint if you do.
changelogs/3.12.md:- Added support for Minecraft: Bedrock Edition 1.14.60
changelogs/3.12.md:- Removed compatibility with 1.14.0-1.14.30
changelogs/3.12.md:- Fixed parsing of single-line doc comments for event handlers, e.g. `/** @ignoreCancelled */` should now work correctly.
changelogs/3.12.md:- The server will no longer crash on failure to load `level.dat` contents, but will gracefully shutdown instead without producing a crashdump.
changelogs/3.12.md:- Fixed some bugs in login verification that could cause undefined behaviour.
changelogs/3.12.md:- Fixed item-use behaviour when sneaking - sneaking and clicking a block with an empty hand, and sneaking and using an item, both now follow vanilla behaviour.
changelogs/3.12.md:- `start.sh` will now work on platforms where `/bin/bash` is not available, as long as `/usr/bin/env` knows where bash is.
changelogs/3.12.md:- Fixed permission default timings not being reported in timings reports (they were never stopped, only started).
changelogs/3.12.md:- Resource packs with a directory tree like `pack.zip/MyPack/manifest.json` are now supported. Note that the manifest closest to the root will be used.
changelogs/3.12.md:- Fixed `SkinImage` height and width being inverted at the protocol layer.
changelogs/3.12.md:- Fixed blocks being able to be placed inside the spawn protection radius by clicking the side of a block outside the radius.
changelogs/3.12.md:- Fixed server crash when `network.compression-level` is overridden by a CLI parameter.
changelogs/3.12.md:- Fixed moving entities spawning themselves to players registered on chunks when the players haven't received the chunk yet.
changelogs/3.12.md:- Cocoa pods now drop cocoa beans when broken instead of the block itself.
changelogs/3.12.md:- Core code is now analyzed using PHPStan level 8 (using baselines). While not all the code is level 8 compliant, this does mean that new code will be held to a higher standard, ensuring quality going forwards.
changelogs/3.12.md:- Players no longer burn when melee-attacked by other players. (vanilla parity)
changelogs/3.12.md:- Arrows shot by burning players are no longer on fire. (vanilla parity)
changelogs/3.12.md:- Fixed a crash that could occur with plugins on Unix filesystems that had backslashes in their names.
changelogs/3.12.md:- Cleaned up a whole bunch of unknowns in the protocol layer. Many new constants have been added.
changelogs/3.12.md:- Fixed player walking sounds.
changelogs/3.12.md:- Default generation queue size has been raised to 32 (previously 8). The previous default was selected in a time when PHP was much less performant than it is today, and in today's world it just needlessly slows things down.
changelogs/3.12.md:- Double plants are now burned away by fire.
changelogs/3.12.md:- Snow layers can now be stacked. (vanilla parity)
changelogs/3.12.md:- Resource pack sending chunk size has been reduced to 128 KB (previously 1 MB). This change was made after analyzing the effects that larger pack chunk sizes have on RakNet. Given the technical evidence, a smaller size, while slightly less bandwidth-efficient, should be more manageable for RakNet due to lower split reassembly overhead and reduced memory pressure.
changelogs/3.12.md:- Fixed "switching" (an exploit often complained about by PvP players). Now, the previous damage is subtracted from current damage when an entity is attacked while on cooldown. This means that attacking with a wooden sword and then diamond sword while attack cooldown is active will only deal as much damage as the diamond sword would have, instead of the combined total. This can be controlled using the `EntityDamageEvent::MODIFIER_PREVIOUS_DAMAGE_COOLDOWN` modifier. (vanilla parity)
changelogs/3.12.md:- Fixed projectiles knocking mobs back in unexpected directions on collision.
changelogs/3.12.md:- Fixed inventories not being synchronized on failed inventory transactions.
changelogs/3.12.md:- Vector3s decoded from packets are no longer rounded directly. Instead, the player movement handler takes responsibility for rounding the coordinates to prevent anti cheat doing something it's not supposed to.
changelogs/3.12.md:- `mobflame` particle can now be spawned using the `/particle` command.
changelogs/3.12.md:- Fixed several internal errors that could occur while modifying writable books.
changelogs/3.12.md:- Fixed swapping writable book pages not working in some cases.
changelogs/3.12.md:- `WritableBook->getPageText()` no longer throws an exception when the page doesn't exist, but returns null (as it was originally intended to).
changelogs/3.12.md:- Fixed absorption hearts not being consumed.
changelogs/3.12.md:- Fixed broken attack cooldowns.
changelogs/3.12.md:- Fixed entities not getting movement updates after teleports.
changelogs/3.12.md:- Fixed slow flight in spectator mode when starting from the ground and after teleportation.
changelogs/3.12.md:- Errors communicating with the crash archive on automatic crash submission are now logged.
changelogs/3.2.md:- `Level` generators are now registered only when needed instead of as soon as a worker starts. This drastically reduces memory consumption on servers with lots of workers.
changelogs/3.2.md:- Async workers are now garbage-collected along with everything else on the default schedule. Idle workers with 0 queued tasks will be shutdown and removed from the pool to reduce memory usage.
changelogs/3.2.md:- UPnP error messages are now more informative of troubleshooting steps.
changelogs/3.2.md:- Errors are no longer caught in cases where they are unrecoverable.
changelogs/3.2.md:- Arrow pickup mode can now be controlled via `Arrow->setPickupMode()`. This accepts one of three `Arrow` constants: `PICKUP_NONE`, `PICKUP_ANY`, `PICKUP_CREATIVE`.
changelogs/3.2.md:- Added new API methods `Projectile->getBaseDamage()` and `Projectile->setBaseDamage()`.
changelogs/3.2.md:- Added new API methods `Entity->getScoreTag()` and `Entity->setScoreTag()`.
changelogs/3.2.md:- The `Listener` interface has now received in-depth documentation about its behaviour and uses. See the top of the `Listener` class to read it.
changelogs/3.2.md:- It is now possible to declare `@ignoreCancelled` on an event handler without specifying `true` or `false`. If no value is found, `true` will be assumed.
changelogs/3.2.md:- `ServerCommandEvent` and `RemoteServerCommandEvent` are now **`@deprecated`** and their usage discouraged. A new generic `CommandEvent` has been introduced in its place, which allows capturing commands from any type of command sender. This was done in response to difficulties of code duplication when wanting to intercept commands from both console and players.
changelogs/3.2.md:- `EntityDamageEvent`
changelogs/3.2.md:  - Added `MODIFIER_WEAPON_ENCHANTMENTS` constant for attack damage bonuses due to enchantments like Sharpness.
changelogs/3.2.md:  - Added new API methods `getAttackCooldown()` and `setAttackCooldown()` to allow controlling Living entities attack cooldown times (default 10 ticks).
changelogs/3.2.md:- `PlayerDeathEvent`: Added new static method `deriveMessage()`.
changelogs/3.2.md:- `PlayerKickEvent`: Added new method `setReason()`.
changelogs/3.2.md:- Added a new `pocketmine\form\Form` interface. Implementing this interface permits custom form implementations to make use of `Player->sendForm()`, eliminating the need to handle packets directly and also solving the form ID collision problem.
changelogs/3.2.md:- `Item` and `ItemFactory` now support negative item IDs (needed for future extended blocks support).
changelogs/3.2.md:- Updated `ItemIds` interface with new constants.
changelogs/3.2.md:- Added a new `PermissionManager` class which encapsulates all of the permission-management functionality originally bloating `PluginManager`. The API is identical to that of `PluginManager`'s permission API. All methods moved to `PermissionManager` have **`@deprecated`** redirects remaining behind in `PluginManager`, which will be removed in the next major release (4.0).
changelogs/3.2.md:- `PluginBase->getConfig()` will now automatically save the default config if it does not already exist.
changelogs/3.2.md:- Plugin data directories will now be automatically created on plugin load, eliminating the need for boilerplate `@mkdir($this->getDataFolder())` calls at the top of every plugin.
changelogs/3.2.md:- `Tile::createNBT()` will now throw a `BadMethodCallException` when called directly.
changelogs/3.2.md:- `Utils::getURL()`, `Utils::postURL()`, `Utils::simpleCurl()` and `Utils::getIP()` have been moved to a new `pocketmine\utils\Internet` class. The original methods are **`@deprecated`** and will be removed for the next major version (4.0).
changelogs/3.2.md:- Removed the ability for `Config` to be asynchronously saved. This was discussed for removal because of various problems that it causes. It was deemed not worth fixing since `Config` saving should not be significant enough to cause problems anyway. See #2298 for details.
changelogs/3.2.md:- Deprecated `level` parameter of `findEntity()`. This parameter was premature optimization. Code using it will continue to work as before.
changelogs/3.2.md:- Air bubbles are now regenerated at the same speed as vanilla UpdateAquatic, instead of instantly when leaving water.
changelogs/3.2.md:- Implemented Conduit Power effect.
changelogs/3.2.md:- Implemented the following enchantments: Thorns, Sharpness, Knockback, Fire Aspect, Power, Punch, Flame, Infinity, Mending.
changelogs/3.2.md:- Added the following new items: `Scute`
changelogs/3.2.md:- Fixed `VerifyLoginTask` completion bug when players get disconnected prior to the task completing.
changelogs/3.2.md:- Fixed client crash issue due to outdated runtime ID mappings.
changelogs/3.2.md:- Updated NBT dependency to 0.2.1 to receive bug fixes (see https://github.com/pmmp/NBT/releases/tag/0.2.1).
changelogs/3.2.md:- Errors thrown during level tick will now crash the server instead of spamming the console.
changelogs/3.2.md:- Fixed arrows despawning too soon after hitting the ground.
changelogs/3.2.md:- Fixed projectiles despawning before colliding if they were airborne for > 60 seconds.
changelogs/3.2.md:- Fixed crash related to Flame enchantment when the player shooting the arrow was on fire.
changelogs/3.2.md:- Fixed levels unloaded during an earlier level's tick on the same tick causing a crash.
changelogs/3.2.md:- PermissibleBase->clearPermissions() now properly unsubscribes from all permissions.
changelogs/3.2.md:- Fixed incorrect break check for standing torch.
changelogs/3.2.md:- Fixed drops for brewing stand.
changelogs/3.2.md:- Fixed block picking brewing stand, bed, double slab, cake, farmland, and mob heads giving the wrong items.
changelogs/3.2.md:- Fixed blocks not placing correctly when clicking on redstone ore.
changelogs/3.2.md:- Fixed unknown PC items in tile inventories crashing the server - now they'll be quietly removed instead.
changelogs/3.2.md:- Fixed server freezing when eating chorus fruit from high altitude.
changelogs/3.2.md:- `readline` is now disabled by default on Windows and must be explicitly enabled with `--enable-readline` due to thread-safety issues.
changelogs/3.2.md:- Fixed server crash when trying to use non-implemented splash potions.
changelogs/3.2.md:- Removed incorrect maximum region file size cap which may have caused some worlds to be incorrectly detected as corrupted.
changelogs/3.2.md:- `Player->sendForm()` now throws a proper exception when failing to JSON-encode `Form` objects given to it.
changelogs/3.2.md:- Fixed crash when handling later packets in a batch when an earlier packet triggered termination of the player's connection.
changelogs/3.2.md:- Fixed a race condition causing progress updates in `AsyncTasks` to be lost when published near completion.
changelogs/3.2.md:- Fixed bad decoding for some packets with unsupported structures.
changelogs/3.2.md:- Crash dumps no longer report 20 empty lines when an error occurs in `eval()`'d code.
changelogs/3.2.md:- `pocketmine/nbt` dependency updated to `0.2.2` to fix bugs (see NBT repo for changelog).
changelogs/3.2.md:- Chunk ticking no longer occurs in chunks which have an adjacent unloaded chunks, fixing things like grass ticking triggering unintentional chunk loading.
changelogs/3.2.md:- Fixed some lighting propagation issues where step count is the same but light level is different.
changelogs/3.2.md:- Fixed full-chunk light repopulation producing broken lighting when the generator hasn't been registered on a worker.
changelogs/3.2.md:- Fixed a missing field in `MoveEntityDeltaPacket`.
changelogs/3.2.md:- Added client-sided rate limiting for crashdump reporting to mitigate involuntary DDoS of the crash archive.
changelogs/3.2.md:- Fixed a bug in `start.cmd` where quotes would appear around the "couldn't find installation" message.
changelogs/3.2.md:- Added a network-layer check for item NBT size to avoid unexplained client-sided crashes due to length overflow.
changelogs/3.2.md:- Fixed some desync bugs with double chests when one half of a double chest is unloaded.
changelogs/3.2.md:- Anonymous class timings will now have a cleaned path for the identifier relative to the plugins directory.
changelogs/3.2.md:- Anonymous class timings now render correctly on timings.pmmp.io.
changelogs/3.2.md:- Fixed empty garbage subchunks not getting removed from long-life chunks.
changelogs/3.2.md:- `start.ps1`, `start.sh` and `start.cmd` no longer recognize source-code installations. Since source-code installations should only be used by developers who know what they are doing anyway, this was considered unwise to keep.
changelogs/3.2.md:- Fixed a bug/oversight in network chunk preparation that caused chunk prepare to be 4x slower than necessary.
changelogs/3.2.md:- `Chunk->fastSerialize()` now doesn't serialize useless data (data is omitted based on chunk flags). This significantly reduces the amount of useless data getting copied for generation, population and light calculation.
changelogs/3.2.md:- `TaskHandler->cancel()` was incorrectly marked as `@internal` in 2014. This has been fixed. Plugin developers should in fact prefer `TaskHandler->cancel()` since it does not require a task to have a circular dependency on its own executor.
changelogs/3.3.md:- Compatibility with Minecraft: Bedrock Edition 1.7.0
changelogs/3.3.md:- Removed compatibility with 1.6.0
changelogs/3.3.md:- `Player->sendForm()` now throws a proper exception when failing to JSON-encode `Form` objects given to it.
changelogs/3.3.md:- Fixed crash when handling later packets in a batch when an earlier packet triggered termination of the player's connection.
changelogs/3.3.md:- Fixed a race condition causing progress updates in `AsyncTasks` to be lost when published near completion.
changelogs/3.3.md:- Fixed bad decoding for some packets with unsupported structures.
changelogs/3.3.md:- Crash dumps no longer report 20 empty lines when an error occurs in `eval()`'d code.
changelogs/3.3.md:- `pocketmine/nbt` dependency updated to `0.2.2` to fix bugs (see NBT repo for changelog).
changelogs/3.3.md:- Chunk ticking no longer occurs in chunks which have an adjacent unloaded chunks, fixing things like grass ticking triggering unintentional chunk loading.
changelogs/3.3.md:- Fixed some lighting propagation issues where step count is the same but light level is different.
changelogs/3.3.md:- Fixed full-chunk light repopulation producing broken lighting when the generator hasn't been registered on a worker.
changelogs/3.3.md:- Fixed a missing field in `MoveEntityDeltaPacket`.
changelogs/3.3.md:- Added client-sided rate limiting for crashdump reporting to mitigate involuntary DDoS of the crash archive.
changelogs/3.3.md:- Fixed a bug in `start.cmd` where quotes would appear around the "couldn't find installation" message.
changelogs/3.3.md:- Added a network-layer check for item NBT size to avoid unexplained client-sided crashes due to length overflow.
changelogs/3.3.md:- Fixed some desync bugs with double chests when one half of a double chest is unloaded.
changelogs/3.3.md:- Anonymous class timings will now have a cleaned path for the identifier relative to the plugins directory.
changelogs/3.3.md:- Anonymous class timings now render correctly on timings.pmmp.io.
changelogs/3.3.md:- Fixed empty garbage subchunks not getting removed from long-life chunks.
changelogs/3.3.md:- `start.ps1`, `start.sh` and `start.cmd` no longer recognize source-code installations. Since source-code installations should only be used by developers who know what they are doing anyway, this was considered unwise to keep.
changelogs/3.3.md:- Fixed a bug/oversight in network chunk preparation that caused chunk prepare to be 4x slower than necessary.
changelogs/3.3.md:- `Chunk->fastSerialize()` now doesn't serialize useless data (data is omitted based on chunk flags). This significantly reduces the amount of useless data getting copied for generation, population and light calculation.
changelogs/3.3.md:- `TaskHandler->cancel()` was incorrectly marked as `@internal` in 2014. This has been fixed. Plugin developers should in fact prefer `TaskHandler->cancel()` since it does not require a task to have a circular dependency on its own executor.
changelogs/3.3.md:- Development build error messages are now more user friendly.
changelogs/3.3.md:- Fixed meta-only changes not getting saved correctly in `SubChunk->setBlock()`.
changelogs/3.3.md:- Server will now sleep for up to 120 seconds on a crash if the uptime was less than 120 seconds. This delay is intended to reduce crash archive spam and can be skipped by the user if attended by pressing CTRL+C.
changelogs/3.3.md:- Fixed preprocessed builds sometimes having `new ` calls treated as function calls.
changelogs/3.3.md:- Fixed a rare corruption case where player data could be written incorrectly due to a race condition.
changelogs/3.3.md:- `DataPacket` will now throw errors when attempting to read/write nonexisting fields to make it easier to debug protocol change errors.
changelogs/3.3.md:- Fixed an undefined `DataPacket` field making the previous release unusable.
changelogs/3.11.md:**WARNING: If your plugin uses the protocol, you're not shielded by API change constraints.** You should consider using the `mcpe-protocol` directive in `plugin.yml` as a constraint if you do.
changelogs/3.11.md:- Added support for Minecraft: Bedrock Edition 1.14.0
changelogs/3.11.md:- Removed compatibility with 1.13.0
changelogs/3.11.md:- Fixed blocks with incorrect properties when placed or interacted with.
changelogs/3.11.md:- PHPStan 0.12.3 with level 5 is now used for automated static analysis.
changelogs/3.11.md:- Fixed a possible crash when plugins override the `EnderChest` tile class with something incompatible.
changelogs/3.11.md:- Fixed disconnected players being considered as never played.
changelogs/3.11.md:- Fixed enchantments with IDs outside the range 0-255 in item NBT crashing the server.
changelogs/3.11.md:- Fixed particles rendering incorrectly.
changelogs/3.11.md:- Timings handlers are no longer able to underflow; they now throw exceptions when attempting to be stopped more times than they were started.
changelogs/3.11.md:- Fixed explosion rays getting stuck in empty subchunks (possible incorrect behaviour in large caves).
changelogs/3.11.md:- Fixed bad tile/entity NBT data being propagated from world providers in some cases.
changelogs/3.11.md:- Fixed a possible crash when detecting timezone on CentOS.
changelogs/3.11.md:- Fixed many cases of incorrectly documented types in the API found by PHPStan.
changelogs/3.11.md:- Generation tasks no longer assume that generator instances stored in TLS are always valid, fixing a possible crash.
changelogs/3.11.md:- Fixed skin animation image corruption in LoginPacket handling caused by incorrect data handling.
changelogs/3.11.md:- Fixed skin animation extra data not being decoded from LoginPacket.
changelogs/3.11.md:- `SkinImage` now throws `InvalidArgumentException` if it receives an unexpected amount of bytes for the given image heigh/width.
changelogs/3.11.md:- Fixed broken code in `PlayerAuthInputPacket::create()`.
changelogs/3.11.md:- Removed some dead constants from `NetworkInventoryAction`.
changelogs/3.11.md:- Fixed some PHPStan false-positives in release builds.
changelogs/3.11.md:- Git hash is now correctly detected for source builds when the working directory is not the repository root.
changelogs/3.11.md:- Added a specialized build script `build/server-phar.php` for creating server phars.
changelogs/3.11.md:- Fixed timings crashing the server.
changelogs/3.11.md:- Timings chains now work correctly.
changelogs/3.11.md:- Fixed some minor timing errors in chained timings.
changelogs/3.11.md:- Forcing resource packs no longer causes removal of client-sided resource packs. If this behaviour is desired, use a vanilla resource pack at the bottom of your resource stack (as was necessary for non-forced packs).
changelogs/3.11.md:- Added documentation to the API to clarify that effect durations are in ticks.
changelogs/3.11.md:- Fixed performance issue in leaf decay.
changelogs/3.11.md:- Fixed entity position desync when entities stop moving, but still have velocity on the client.
changelogs/3.11.md:- Fixed a crash when encountering truncated `level.dat` files in LevelDB worlds.
changelogs/3.11.md:- Core code is now analyzed using PHPStan level 6.
changelogs/3.11.md:- The core constants `pocketmine\PATH` and `pocketmine\RESOURCE_PATH` are now unconditionally available when including the Composer autoloader.
changelogs/3.11.md:- Populate type information in lots of places where it was previously missing; this will improve the quality of static analysis for plugins.
changelogs/3.11.md:- `MainLogger::logException()` now logs previous exceptions recursively.
changelogs/3.11.md:- `MainLogger::logException()` now always logs exceptions as `critical`.
changelogs/3.11.md:- PHPStan and PHPUnit are now managed as Composer dev dependencies.
changelogs/3.11.md:- Core code is now analyzed using PHPStan level 6 (full, including iterable types checking).
changelogs/3.11.md:- Improved type information available to PHPStan in many areas.
changelogs/3.11.md:- Mass-removal of useless PHPDoc.
changelogs/3.11.md:- Fixed incorrect documentation of `Internet::getURL()`, `Internet::postURL()` and `Internet::simpleCurl()`.
changelogs/3.11.md:- Fixed crash on use of case-mismatched recursive command aliases.
changelogs/3.11.md:- Basic build instructions are now provided in `BUILDING.md`.
changelogs/3.11.md:- `build/server-phar.php` now uses GZIP compression on created phars, providing a 75% size reduction.
changelogs/3.11.md:- `ClientboundMapItemDataPacket` now uses `MapDecoration` objects for decorations instead of associative arrays.
changelogs/3.11.md:- Updated Composer dependencies to get bug fixes in `pocketmine/nbt` and other libraries.
changelogs/3.11.md:- Packages `pocketmine/classloader` and `pocketmine/log` are now required; these provide classes previously part of `pocketmine/spl`. This change has no effect on API compatibility.
changelogs/3.11.md:- Core code, tests and build scripts are now analyzed using `phpstan-strict-rules` and `phpstan-phpunit` rules.
changelogs/3.11.md:- Added more PHPStan-specific type annotations to improve static analysis.
changelogs/3.11.md:- Fixed more incorrect PHPDoc types.
changelogs/3.11.md:- Added a workaround for player movement not working since 1.14.30.
changelogs/3.11.md:- Fixed lava and water buckets being edible since 1.13.
changelogs/3.11.md:- `AutoUpdater` is now created before any plugins are loaded.
changelogs/3.11.md:- Fixed trees not generating below y=2 in custom generators.
changelogs/3.11.md:- Fixed crash when opening a chest improperly unpaired from its pair (destroyed, setBlock(), unloaded, etc.).
changelogs/3.11.md:- `ThreadManager` is now lazily initialized.
changelogs/3.11.md:- Removed raw NBT storage from `Item` internals. The following methods are now deprecated:
changelogs/3.11.md:  - `Item::setCompoundTag()`
changelogs/3.11.md:- Build system: Fixed crash reports of Jenkins builds being rejected by the crash archive as invalid.
changelogs/3.11.md:- Introduced a new dependency on `pocketmine/log-pthreads`, which contains classes separated from `pocketmine/log`.
changelogs/3.11.md:- Fixed minimum composer stability preventing any newer version of `pocketmine/pocketmine-mp` being installed than 3.3.4 by replacing `daverandom/callback-validator` with [`pocketmine/callback-validator`](https://github.com/pmmp/CallbackValidator).
changelogs/3.11.md:- Fixed every player seeing eating particles when any player eats.
changelogs/3.11.md:- Fixed setting held item not working during `BlockBreakEvent`, `PlayerInteractEvent` and `EntityDamageEvent`.
changelogs/3.11.md:- Fixed some incorrect documented types in `PlayerQuitEvent` reported by PHPStan.
changelogs/3.11.md:- Fixed documentation of `Item->pop()` return value.
changelogs/3.11.md:- Fixed server crash on encountering corrupted compressed data stored in region files.
changelogs/3.11.md:- Protocol: Split screen header is now properly accounted for during decoding. Note that split screen is still not supported natively, but their packets can be decoded properly now.
changelogs/3.11.md:- Protocol: Fixed wrong order of fields in `UpdateTradePacket`.
changelogs/3.11.md:- Protocol: Fixed loss of `fullSkinId` when decoding network skins.
changelogs/3.11.md:- Fixed RCON not being able to bind to port after a fast server restart.
changelogs/3.15.md:**WARNING: If your plugin uses the protocol, you're not shielded by API change constraints.** You should consider using the `mcpe-protocol` directive in `plugin.yml` as a constraint if you do.
changelogs/3.15.md:- Added support for Minecraft: Bedrock Edition 1.16.20.
changelogs/3.15.md:- Removed compatibility with 1.16.0.
changelogs/3.15.md:- Walls don't connect to each other
changelogs/3.15.md:- Pumpkin and melon stems may not connect to their corresponding pumpkin/melon
changelogs/3.15.md:- New blocks, items & mobs aren't implemented
changelogs/3.15.md:- Nether doesn't exist
changelogs/3.15.md:- Fixed various PHP 7.4 compatibility issues in Composer dependencies (primarily callback-validator).
changelogs/3.15.md:- Fixed LevelDB worlds with corrupted `level.dat` crashing the server instead of failing gracefully.
changelogs/3.15.md:- Fixed error spam when using strings for layers in flatworld presets (`e.g. bedrock,3xdirt,grass`).
changelogs/3.15.md:- Fixed blocks not getting updated properly on explosions.
changelogs/3.15.md:- Fixed `BlockGrowEvent` not being called when sugarcane grows.
changelogs/3.15.md:- Potato crops now drop poisonous potatoes when harvested.
changelogs/3.15.md:- Fixed the wrong number of potatoes being dropped when harvesting potato crops.
changelogs/3.15.md:- Players no longer get pullbacks when sprinting on slabs, stairs and various other blocks when `player.anti-cheat.allow-movement-cheats` is set to `false`. (This bug has been around for over 5 years, so many of you will be used to its existence.)
changelogs/3.15.md:- Fixed entity collision box calculation not taking clip distance into account.
changelogs/3.15.md:- Entities now step up the correct height of the target block, instead of jumping into the air 0.6 blocks and falling back down.
changelogs/3.15.md:- Fixed issues with preloading `SubChunk`.
changelogs/3.15.md:- `/gc` and automatic garbage collection will now release unused heap blocks back to the OS. Previously, the PHP process might hold onto these blocks indefinitely even when not used, causing elevated real memory usage.
changelogs/3.15.md:- Added some documentation to `FurnaceBurnEvent`.
changelogs/3.15.md:- Fixed fall damage accumulation over continuous knockbacks (e.g. combo attacks in PvP).
changelogs/3.15.md:- Fixed a bug in `Human->addXp()` that would cause a crash when saving player data.
changelogs/3.15.md:- `Human->addXp()` will no longer modify the target's total XP if `PlayerExperienceChangeEvent` was cancelled.
changelogs/3.15.md:- `AsyncPool->getTaskQueueSizes()` has been added to allow external detection of async pool overload. This is planned to be implemented as a core feature in the future, but it hasn't been done yet.
changelogs/3.15.md:- `BaseInventory->canAddItem()` behaviour now matches `addItem()` by considering the max stack size of the given item.
changelogs/3.15.md:- Fixed a bug in generator options handling for worlds loaded via `pocketmine.yml`. This fix has the following side effects:
changelogs/3.15.md:  - It's now possible to provide generator options as an `options` key when loading a world via `pocketmine.yml`.
changelogs/3.15.md:  - If generator options are not provided, the options from `server.properties` will be used, instead of using an empty preset. (It's not clear whether this is desired behaviour, but it was clearly intended, since there is code to do this which was broken until this release. As such, this behaviour is subject to change in the future.)
changelogs/3.15.md:- Fixed a bug in region-based world loading where some files without filename extensions and names containing a region filename extension (e.g a file named `amca` in a McRegion world) would cause the world not to load. These files are now ignored.
changelogs/3.15.md:- Default network compression level has been lowered to 6, due to level 7 being 25% more expensive for only a marginal improvement in bandwidth.
changelogs/3.15.md:- Fixed a performance issue with chunk requesting when players trigger chunk generation on first join.
changelogs/3.15.md:- Setup wizard will now always show IP information, even if the user chose to skip the setup wizard when prompted. (This doesn't affect `--no-wizard` in any way.)
changelogs/3.15.md:- `Maximum memory (system)` is no longer reported in `/status` due to having a misleading output (it was the same as the current memory usage).
changelogs/3.15.md:- The `Player Chunk Send` timer on timings reports now actually reports measurements of chunk sending, not chunk loading.
changelogs/3.15.md:- A new parent timer `World Load` has been added to timings reports, which aggregates timings from `syncChunkLoad` and subtimings from all worlds.
changelogs/3.15.md:- Fixed a bug in the inventory transaction system that caused the server to freeze under some circumstances.
changelogs/3.9.md:**WARNING: If your plugin uses the protocol, you're not shielded by API change constraints.** You should consider using the `mcpe-protocol` directive in `plugin.yml` as a constraint if you do.
changelogs/3.9.md:- Added support for Minecraft: Bedrock Edition 1.12.0
changelogs/3.9.md:- Removed compatibility with 1.11.0
changelogs/3.9.md:- The following classes in the `\pocketmine\network\mcpe\protocol` namespace have been renamed:
changelogs/3.9.md:  - `AddEntityPacket` -> `AddActorPacket`
changelogs/3.9.md:  - `AddItemEntityPacket` -> `AddItemActorPacket`
changelogs/3.9.md:  - `AvailableEntityIdentifiersPacket` -> `AvailableActorIdentifiersPacket`
changelogs/3.9.md:  - `BlockEntityDataPacket` -> `BlockActorDataPacket`
changelogs/3.9.md:  - `EntityEventPacket` -> `ActorEventPacket`
changelogs/3.9.md:  - `EntityFallPacket` -> `ActorFallPacket`
changelogs/3.9.md:  - `EntityPickRequestPacket` -> `ActorPickRequestPacket`
changelogs/3.9.md:  - `MoveEntityAbsolutePacket` -> `MoveActorAbsolutePacket`
changelogs/3.9.md:  - `MoveEntityDeltaPacket` -> `MoveActorDeltaPacket`
changelogs/3.9.md:  - `RemoveEntityPacket` -> `RemoveActorPacket`
changelogs/3.9.md:  - `SetEntityDataPacket` -> `SetActorDataPacket`
changelogs/3.9.md:  - `SetEntityLinkPacket` -> `SetActorLinkPacket`
changelogs/3.9.md:  - `SetEntityMotionPacket` -> `SetActorMotionPacket`
changelogs/3.9.md:  - `TakeItemEntityPacket` -> `TakeItemActorPacket`
changelogs/3.9.md:- The following classes in the `\pocketmine\network\mcpe\protocol` namespace have been removed:
changelogs/3.9.md:  - `FullChunkDataPacket`
changelogs/3.9.md:- The following classes in the `\pocketmine\network\mcpe\protocol` namespace have been added:
changelogs/3.9.md:  - `AddEntityPacket` (not to be confused with the old one)
changelogs/3.9.md:  - `ClientCacheBlobStatusPacket`
changelogs/3.9.md:  - `ClientCacheMissResponsePacket`
changelogs/3.9.md:  - `ClientCacheStatusPacket`
changelogs/3.9.md:  - `LevelChunkPacket`
changelogs/3.9.md:  - `RemoveEntityPacket` (not to be confused with the old one)
changelogs/3.9.md:  - `StructureTemplateDataExportRequestPacket`
changelogs/3.9.md:  - `StructureTemplateDataExportResponsePacket`
changelogs/3.9.md:- Fixed resource packs not working on 1.12 clients.
changelogs/3.9.md:- Fixed some particles displaying incorrectly (some still don't render at all).
changelogs/3.9.md:- Fixed `Entity->setFireTicks()` with a value of `0` setting the on-fire flag.
changelogs/3.9.md:- Silenced a debug message which appeared every time a player right-clicked a block.
changelogs/3.9.md:- Updated constants for `LevelSoundEventPacket`.
changelogs/3.9.md:- Logger warnings for illegal player movements have been lowered to debug.
changelogs/3.9.md:- TNT explosions now start from the center instead of the base. This fixes unexpected results when TNT is lit on top of obsidian.
changelogs/3.9.md:- Fixed the `loadbefore` directive in `plugin.yml` sometimes being ignored.
changelogs/3.9.md:- Fixed `Item->setCustomName()` with an empty string leaving behind an empty tag.
changelogs/3.9.md:- Fixed incorrect positioning of bucket empty sound.
changelogs/3.9.md:- Fixed some incorrect tag parsing in `/give` involving quoted numbers.
changelogs/3.9.md:- Fixed a memory leak on async task removal in error conditions.
changelogs/3.9.md:- Fixed scheduled block updates (for example liquid) triggering chunk reloading. This could cause a significant performance issue in some conditions.
changelogs/3.9.md:- Fixed some minor cosmetic issues in documentation.
changelogs/3.9.md:- Fixed a memory leak when scheduled updates were pending on a chunk being unloaded.
changelogs/3.9.md:- Fixed plugin detection in crashdumps. Previously `src/pocketmine` anywhere in the path would cause the error to be considered a core crash, regardless of the preceding path.
changelogs/3.9.md:- Fixed entity metadata types for 1.12. The SLOT type was removed and a COMPOUND_TAG type added. This change involves changes to internal API which may break plugins. **See the warning at the top of this changelog about API versioning.**
changelogs/3.9.md:- Fixed random and base populator amounts of trees and tallgrass never being initialized. This bug had no obvious effect, but may have become a problem in future PHP versions.
changelogs/3.9.md:- The following internal methods have been marked as `@deprecated` and documentation warnings added:
changelogs/3.9.md:  - `Entity->getBlocksAround()`
changelogs/3.9.md:  - `Entity->despawnFrom()`
changelogs/3.9.md:  - `Entity->despawnFromAll()`
changelogs/3.9.md:- Fixed plugin `softdepend` not influencing load order when a soft-depended plugin had an unresolved soft dependency of its own.
changelogs/3.9.md:- Fixed endless falling of sand on top of fences.
changelogs/3.9.md:- Fixed some issues with multiple consecutive commas inside quotes in form responses.
changelogs/3.9.md:- Fixed server crash when the manifest json does not contain a json object in a resource pack.
changelogs/3.9.md:- Ender pearls no longer collide with blocks that do not have any collision boxes.
changelogs/3.9.md:- Updated Composer dependencies to their latest versions.
changelogs/3.9.md:- Prevent clients repeating the resource pack sequence. This fixes error spam with bugged 1.12 clients.
changelogs/3.9.md:- `Internet::simpleCurl()` now includes the PocketMine-MP version in the user-agent string.
changelogs/3.9.md:- Spawn protection is now disabled by default in the setup wizard.
changelogs/3.9.md:- Default difficulty is now NORMAL(2) instead of EASY(1).
changelogs/3.9.md:- Fixed crashing on corrupted world manifest and unsupported world formats.
changelogs/3.9.md:- Fixed `/transferserver` being usable without appropriate permissions.
changelogs/3.9.md:- `RegionLoader->removeChunk()` now writes the region header as appropriate.
changelogs/3.9.md:- Fixed performance issue when loading large regions (bug in header validation).
changelogs/3.9.md:- Fixed skin geometry being removed when the JSON contained comments.
changelogs/3.9.md:- Added new constants to `EventPacket`.
changelogs/3.9.md:- Added encode/decode for `StructureTemplateDataExportRequestPacket` and `StructureTemplateDataExportResponsePacket`.
changelogs/3.9.md:- Fixed broken type asserts in `LevelChunkPacket::withCache()` and `ClientCacheMissResponsePacket::create()`.
changelogs/3.9.md:- `types\CommandParameter` field `byte1` has been renamed to `flags`.
changelogs/3.9.md:- Cleaned up public interface of `AvailableCommandsPacket`, removing fields which exposed details of the encoding scheme.
changelogs/3.9.md:- Improved documentation for the following API methods:
changelogs/3.9.md:  - `pocketmine\item\Item`:
changelogs/3.9.md:    - `addCreativeItem()`
changelogs/3.9.md:    - `removeCreativeItem()`
changelogs/3.9.md:    - `clearCreativeItems()`
changelogs/3.9.md:  - `pocketmine\level\Explosion`:
changelogs/3.9.md:    - `explodeA()`
changelogs/3.9.md:    - `explodeB()`
changelogs/3.9.md:- Fixed various cosmetic documentation inconsistencies in the core and dependencies.
changelogs/3.9.md:- Fixed a crash that could occur during timezone detection.
changelogs/3.9.md:- Squid no longer spin around constantly in enclosed spaces. Their performance impact is reduced.
changelogs/3.9.md:- Cleaned up the bootstrap file.
changelogs/3.9.md:- Added [PHPStan](https://github.com/phpstan/phpstan) configuration. PHPStan is now used on CI for automated QA, which should improve stability and quality going forward.
changelogs/3.9.md:- The following constants are now autoloaded when loading the Composer autoloader:
changelogs/3.9.md:  - `pocketmine\NAME`
changelogs/3.9.md:  - `pocketmine\BASE_VERSION`
changelogs/3.9.md:  - `pocketmine\IS_DEVELOPMENT_BUILD`
changelogs/3.9.md:  - `pocketmine\BUILD_NUMBER`
changelogs/3.9.md:  - `INT32_MIN`
changelogs/3.9.md:  - `INT32_MAX`
changelogs/3.9.md:  - `INT32_MASK`
changelogs/3.9.md:- Fixed memory leaks and crashes caused by plugin use of `Player->showPlayer()` and `Entity->spawnTo()`.
changelogs/3.9.md:- Fixed crashes that could occur when tile classes were overridden with classes incompatible with the originals.
changelogs/3.9.md:- Fixed improper handling of non-Compound root NBT tags on network itemstack decoding.
changelogs/3.9.md:- Fixed paintings dropping multiple items when destroyed by block updates.
changelogs/3.9.md:- Fixed `var_dump()` not showing private and protected properties of `DataPacket` subclasses.
changelogs/3.9.md:- Fixed overloads with zero arguments being missing when decoding `AvailableCommandsPacket`.
changelogs/3.9.md:- `CraftingDataPacket` now retains the `cleanRecipes` field when decoding.
changelogs/3.9.md:- Fixed `Block->getMetadata()` returning null (non-iterable).
changelogs/3.9.md:- `PlayerChatEvent` documentation has been updated to specify that `CommandSender` recipients are accepted. This behaviour was already present in previous versions, but incorrectly documented.
changelogs/3.9.md:- Fixed various issues with PHPDoc comments reported by PHPStan.
changelogs/3.9.md:- Fixed various minor code nits reported by PHPStan.
changelogs/3.16.md:**WARNING: If your plugin uses the protocol, you're not shielded by API change constraints.** You should consider using the `mcpe-protocol` directive in `plugin.yml` as a constraint if you do.
changelogs/3.16.md:- Added support for Minecraft: Bedrock Edition 1.16.100.
changelogs/3.16.md:- Removed compatibility with earlier versions.
changelogs/3.16.md:- Added new custom composer commands `make-server` and `make-devtools` to ease setting up a development environment and building the server.
changelogs/3.16.md:- Walls don't connect to each other
changelogs/3.16.md:- Pumpkin and melon stems may not connect to their corresponding pumpkin/melon
changelogs/3.16.md:- New blocks, items & mobs aren't implemented
changelogs/3.16.md:- Nether doesn't exist
changelogs/3.16.md:- Fixed incorrect encoding of skins in the protocol.
changelogs/3.16.md:- `/version` no longer crashes when a plugin provides `string[]` for the `author` field in `plugin.yml`.
changelogs/3.16.md:- `author` in `plugin.yml` now accepts arrays, just like `authors`.
changelogs/3.16.md:- Fixed `HellBiome` never being registered.
changelogs/3.8.md:- Compatibility with Minecraft: Bedrock Edition 1.11.0
changelogs/3.8.md:- Removed compatibility with 1.10.0
changelogs/3.8.md:- Fixed furnace smelting recipes not working.
changelogs/3.8.md:- Reduced legacy hacks dealing with `BatchPacket` to fix possible ID collisions.
changelogs/3.8.md:- Reduced release phar size by minifying JSON data blobs.
changelogs/3.8.md:- Moved some MCPE-specific JSON blobs to submodule.
changelogs/3.8.md:- Fixed --enable-ansi and --disable-ansi not being respected on threads.
changelogs/3.8.md:- Fixed a crash that could occur when decoding `AvailableCommandsPacket`.
changelogs/3.8.md:- Fixed a crash when loading worlds with entities with missing `Motion` NBT tag.
changelogs/3.8.md:- Fixed a crash when world time overflows signed int64 max.
changelogs/3.8.md:- Fixed world generators and providers being registered too late (this was causing plugin issues).
changelogs/3.8.md:- Updated RakLib version to get a security fix.
changelogs/3.8.md:- Fixed errors when custom clients fill the wrong information in `ResourcePackClientResponsePacket`.
changelogs/3.8.md:- Fixed `setImmobile()` getting overridden directly after `PlayerJoinEvent`.
changelogs/3.8.md:- Fixed air being breakable by creative players.
changelogs/3.8.md:- Fixed performance loss caused by bugs in the preprocessor.
changelogs/3.8.md:- Fixed infinite recursion when using `Entity->close()` during `EntityDespawnEvent`.
changelogs/3.8.md:- Fixed crash reports caused by folder plugins being reported to the crash archive.
changelogs/3.8.md:- Fixed spawning entities on unloaded chunks during spawn sequence (possible client crash cause).
changelogs/3.8.md:- Fixed `/time query` output message.
changelogs/3.8.md:- Fixed `Server->hasOfflinePlayerData()` being case-sensitive.
changelogs/3.8.md:- Improved error messages for skin validation in some places.
changelogs/3.8.md:- Fixed classic stonecutter hardness.
changelogs/3.8.md:- Fixed iron trapdoors being considered a valid furnace fuel.
changelogs/3.8.md:- Fixed apple dropping from leaves happening less frequently than intended.
changelogs/3.8.md:- Fixed tall plants like sunflower being replaceable by the top half.
changelogs/3.8.md:- Plugin load order is now randomised to remove the ability to implicitly depend on filesystem-specific ordering.
changelogs/3.8.md:- Packet logging in debug messages now uses base64 instead of hex (uses less space).
changelogs/3.8.md:- Array and string size are now shown in error stack trace logs.
changelogs/3.8.md:- Stack traces now render a maximum of 80 characters when making string parameters printable.
changelogs/3.8.md:- Improved documentation for some transaction classes.
changelogs/3.8.md:- Action order in inventory transactions is now randomised to prevent dependencies on any accidental or client-dependent ordering. Since the transaction system is specifically designed to avoid depending on order, this does not affect any core functionality.
changelogs/3.8.md:- Moved preprocessor to build/ directory.
changelogs/3.8.md:- Added documentation for `Server->getPlayer()`, `Server->getPlayerExact()` and `Server->matchPlayer()`.
changelogs/3.8.md:- `server.lock` now contains the PID of the currently-running server.
changelogs/3.8.md:- PID of server is now reported in the error message when attempting to run two servers from the same data directory at once.
changelogs/3.8.md:- Fixed sluggish playercount updating on MOTD.
changelogs/3.8.md:- Added new MultiRecipe UUIDs.
changelogs/3.8.md:- Added an extra field to `StartGamePacket` to resolve minor incompatibility issues on different 1.11.x patch versions.
changelogs/3.8.md:- Fixed `Entity->isNameTagAlwaysVisible()` not working.
changelogs/3.8.md:- Log messages are now cleaned of invalid UTF-8 sequences before emitting them.
changelogs/3.8.md:- Fixed negative integers being considered as strings for world seeds.
changelogs/3.8.md:- Fixed out-of-bounds access on invalid inventory data in player data saves.
changelogs/3.8.md:- Fixed crash when custom liquids have flow decays which aren't factors of 4.
changelogs/3.8.md:- Fixed `Entity->noDamageTicks` not working when the entity had no previous damage cause.
changelogs/3.8.md:- Improved documentation of `Player->getDisplayName()` and `Player::isValidUserName()`.
changelogs/3.8.md:- Fixed a bug in `SetScorePacket` decoding causing the entry list to always be empty.
changelogs/3.6.md:- Compatibility with Minecraft: Bedrock Edition 1.9.0
changelogs/3.6.md:- Removed compatibility with 1.8.0
changelogs/3.6.md:- `Item->getCompoundTag()` is now `@deprecated`.
changelogs/3.6.md:- `Item->setCompoundTag()` now accepts NULL as a possible value.
changelogs/3.6.md:- `ItemFactory::fromString()` now accepts NULL for the `tags` parameter.
changelogs/3.6.md:- Fixed crashing when items with negative IDs are found in the inventory (caused by downgrading from dev builds).
changelogs/3.6.md:- Updated creative inventory and crafting recipes.
changelogs/3.6.md:- Fixed handling for some new blocks which magically appeared without appropriate implementations (extra meta values).
changelogs/3.6.md:- Fixed client-sided crash when upper-case letters appear in command names.
changelogs/3.6.md:- Fixed crash when too-large values are given to `/effect` for duration.
changelogs/3.6.md:- `/op` and other commands no longer crash when an invalid player name is given.
changelogs/3.6.md:- Startup time no longer includes the time spent in the setup wizard.
changelogs/3.6.md:- `TextFormat::clean()` is now UTF-8 aware, and will scrub any invalid UTF-8 characters from the given string.
changelogs/3.6.md:- Fixed `TextFormat::clean()` not fully removing ANSI escape codes in some cases.
changelogs/3.6.md:- Fixed Korean command arguments failing to parse.
changelogs/3.6.md:- `Sign->setText()` and `Sign->setLine()` now enforce that the given text must be UTF-8 text, or an exception will be thrown.
changelogs/3.6.md:- Sign text is now processed by `mb_scrub()` immediately after loading to remove invalid UTF-8 characters that could crash the client.
changelogs/3.6.md:- `Human->exhaust()` no longer underflows when the hunger attribute has a fractional value.
changelogs/3.6.md:- Added a hack to disable client sided AI for non-moving entities. This fixes items floating in water despite it not being implemented server-side yet.
changelogs/3.6.md:- Fixed max health not working as expected on respawn if changed by plugins.
changelogs/3.6.md:- Fixed Item Frame hardness (0.25 instead of 0).
changelogs/3.6.md:- Fire Aspect tools will now light TNT when right-clicked with.
changelogs/3.6.md:- Fixed incorrect nullable typehints on `TaskScheduler` return values.
changelogs/3.6.md:- `NetworkStackLatencyPacket` unhandled debug has been silenced.
changelogs/3.6.md:- Fixed `Player->removeWindow()` removing GUI or crashing clients when removing a window which was not added.
changelogs/3.6.md:- Fixed packed ice dropping itself when mined without a silk touch pickaxe.
changelogs/3.6.md:- Fixed players not taking fall damage when falling off the side of a ladder when their AABB was intersecting with the ladder's full block area.
changelogs/3.6.md:- Fixed arrows reloaded from disk never despawning.
changelogs/3.6.md:- Fixed player XP not dropping on death.
changelogs/3.6.md:- Fixed player's held slot being out of sync when respawning.
changelogs/3.6.md:- Fixed items with different NBT being considered stackable in some cases by `BaseInventory->canAddItem()`.
changelogs/3.6.md:- Fixed stdout silence on crash if a crash occurs when PHP output buffering is enabled.
changelogs/3.6.md:- Fixed `RegionLoader` considering a range of invalid chunk coordinates as valid.
changelogs/3.6.md:- Fixed `RegionLoader` causing region header corruption when an oversized chunk was discovered. This was causing entire regions to be discarded next time they were freshly loaded.
changelogs/3.6.md:- Fixed performance issue loading old LevelDB worlds (from before MCPE 1.0) due to unmodified chunks being converted every time they were loaded.
changelogs/3.6.md:- Added new debug messages when a world takes too long (longer than 50ms) to complete a tick.
changelogs/3.6.md:- Debug messages are now logged when autosave kicks in (with time measurements), which helps debugging unexplained lag spikes.
changelogs/3.6.md:- Level "auto tick rate" anti-feature and its associated `pocketmine.yml` settings have been removed (see #2665). The settings will persist in old configurations, but will be ignored by this version and future versions.
changelogs/3.6.md:- The `/save-all` command now outputs custom (non-vanilla) messages informing the user how long it took to complete autosaving.
changelogs/3.6.md:- The word `level` has been replaced with `world` (where appropriate) throughout language strings and general user interface messages.
changelogs/3.6.md:- Fixed protocol argument types for commands.
changelogs/3.6.md:- Autosave debug message will now report in milliseconds when the time taken is less than 1 second.
changelogs/3.6.md:- Flatworld presets now allow `*` as a multiplier symbol (fixes PC compatibility).
changelogs/3.6.md:- Network runtimeIDs for blocks are now randomized to prevent things (like plugins) relying on them.
changelogs/3.6.md:- Updated NBT dependency to 0.2.7 for some bug fixes.
changelogs/1.6.md:# 1.6.1dev-87
changelogs/1.6.md:- New RNG, based on XorShift128 from the php-random library. This fixes issue with repeating terrain on 32-bit systems. _Note however that new generation into existing worlds will not be seamless._
changelogs/1.6.md:- Block and Item IDs have been moved to interfaces for better consistency
changelogs/1.6.md:- Better method for synchronisation of client/server time (less packet spam)
changelogs/1.6.md:- Utils::getRandomBytes() has been deprecated in favour of php7's random_bytes() function.
changelogs/1.6.md:- `<player>.dat` saving/reading can now be disabled in `pocketmine.yml` (set `player.save-player-data` to `false`)
changelogs/1.6.md:- Added Flower Pots
changelogs/1.6.md:- Containers can now be opened in creative
changelogs/1.6.md:- Trapdoors can now be placed without a supporting block
changelogs/1.6.md:`$entity->setDataFlag(Entity::DATA_FLAGS, Entity::INSERT_DATA_FLAG_NAME, true/false);`
changelogs/1.6.md:- Main thread local storage: Developers can pass any data including objects to the constructor of AsyncTask such that the data can be retrieved after the AsyncTask completes using the new `AsyncTask::fetchLocal()` method, or use the `AsyncTask::peekLocal()` method to get the data without removing it.
changelogs/1.6.md:- Progress updates: Developers can use the new `AsyncTask::publishProgress() method and override`AsyncTask::onProgressUpdated()` to handle AsyncTask progress information in the main thread.
changelogs/1.6.md:- Added Player->sendWhisper() (#73).
changelogs/1.6.md:- Removed LargeExplodeParticle due to incorrect name - use HugeExplodeParticle. Added HugeExplodeSeedParticle and BlockForceFieldParticle (7314aaf7f7bdae582f674c085c7ae879985bf847)
changelogs/1.6.md:- Fixed the infamous hotbar spaz bug
changelogs/1.6.md:- Creative/spectator inventory now sends correctly
changelogs/1.6.md:- Fixed spectator flight controls
changelogs/1.6.md:- Fixed issues with items going past the end of the regular inventory
changelogs/1.6.md:- Fixed furnace client crashes
changelogs/1.6.md:- Fixed inventory windows for anvils and enchanting tables
changelogs/1.6.md:- Fixed kicked for walking on lily pads (#blameshoghicp)
changelogs/1.6.md:- Fixed a nasty entity-related memory leak on chunk unload
changelogs/1.6.md:- Fixed sleeping players floating above beds and teleportation of sleeping players.
changelogs/1.6.md:- Fixed a bug in Level::updateAround() where only one block would update
changelogs/1.6.md:- Fixed some slab placement issues (#31)
changelogs/1.6.md:- Fixed crash loading 1.11 worlds (#32)
changelogs/1.6.md:- Fixed broken `--disable-readline` command-line option (#34)
changelogs/1.6.md:- Fixed world unload crash when players have spawnpoints set in that world (#24)
changelogs/1.6.md:- Fixed start.sh detection of system PHP binaries (#66)
changelogs/1.6.md:- Fixed anvil rotation when placed and variant drops (d696049a0ad5e3b878a8f902e4ef75f19ec8cecc)
changelogs/1.6.md:- /timings command is now more verbose about paste errors (#95)
changelogs/1.6.md:- Fixed server crash at shutdown when RCON is enabled (#101)
changelogs/1.6.md:- Fixed server name is always "Minecraft: PE Server" when running setup wizard (92bd1a755d4b171b687538db83893b9bd9c70420)
changelogs/1.6.md:- Fixed CraftItemEvent->getInput() does not return used items (7eb9530346e953d1555623ff871086f85447b6c6)
changelogs/1.6.md:- Fixed useless ServerKiller (#122)
changelogs/3.14.md:**WARNING: If your plugin uses the protocol, you're not shielded by API change constraints.** You should consider using the `mcpe-protocol` directive in `plugin.yml` as a constraint if you do.
changelogs/3.14.md:- Added support for Minecraft: Bedrock Edition 1.16.0.
changelogs/3.14.md:- Removed compatibility with 1.14.60.
changelogs/3.14.md:- Walls don't connect to each other
changelogs/3.14.md:- Pumpkin and melon stems may not connect to their corresponding pumpkin/melon
changelogs/3.14.md:- New blocks, items & mobs aren't implemented
changelogs/3.14.md:- Nether doesn't exist
changelogs/3.14.md:- All skins are now trusted, bypassing the client-side trusted skin setting. Note that this means that NSFW skin filtering will **not** apply.
changelogs/3.14.md:- Fixed projectile motion being altered by ladders.
changelogs/3.14.md:- Fixed client-sided crashes when pressing E repeatedly very quickly on a high-latency connection.
changelogs/3.14.md:- `/plugins`, `/whitelist list`, `/banlist` and `/list` now show output in alphabetical order.
changelogs/3.14.md:- Some `pocketmine\event` APIs which accept arrays now have more robust type checking, fixing type errors caused by plugin input occurring in core code.
changelogs/3.14.md:- `Attribute::getAttributeByName()` is now aware of the `minecraft:lava_movement` attribute.
changelogs/3.14.md:- Exception stack traces are now logged as CRITICAL. It's hoped that users will recognize that they are just as important as the error message and not leave them out when asking for help with errors on Discord.
changelogs/3.14.md:- `TaskScheduler` no longer accepts tasks that already have a handler. This fixes undefined behaviour which occurs when scheduling the same task instance twice, but it does break plugins such as **MyPlot** which unintentionally used this buggy behaviour.
changelogs/3.14.md:- Players will now correctly receive the needed number of spawn chunks if they are teleported between `PlayerLoginEvent` and `PlayerJoinEvent`. This fixes a bug that could occur when teleporting players in delayed tasks between login and join.
changelogs/3.14.md:- `PlayerRespawnEvent->setRespawnPosition()` now throws an exception if the provided `Position` has an invalid world associated with it (null or unloaded).
changelogs/3.14.md:- Fixed a crash that occurred when stats reporting was enabled.
changelogs/3.14.md:- Fixed deprecation error when running `/whitelist list` on PHP 7.4.
changelogs/3.14.md:- Fixed podzol breaking animation being incorrect (incorrect hardness).
changelogs/3.14.md:- `Entity::getSaveId()` now reports the class name in the message thrown for unregistered entities.
changelogs/3.14.md:- Fixed `CraftingManager->validate()` producing different results when called multiple times for the same transaction.
changelogs/3.14.md:- Fixed various issues with batch-crafting items using the recipe book and shift-clicking.
changelogs/3.14.md:- `tests/plugins/PocketMine-DevTools` submodule has been renamed to `tests/plugins/DevTools`.
changelogs/3.1.md:**This build contains changes to the **protocol** which are not covered by the API version. To lock your plugin to a specific protocol version, declare the `mcpe-protocol` attribute in your `plugin.yml`.
changelogs/3.1.md:- Support for Minecraft: Bedrock Edition version 1.5.0
changelogs/3.1.md:- Fixed player on-ground state not updating when moving horizontally. This allowed fly hacks with the built in anti-cheat, and also affected some third party anti-cheat plugins due to the effect on `inAirTicks`.
changelogs/3.1.md:- Fixed knockback. PC 1.9-style knockback was mistakenly introduced in 3.0.3. This has now been reverted back to the old 1.8-style behaviour.
changelogs/3.1.md:- Cleaned up odd behaviour of `/kill` due to old broken code.
changelogs/3.1.md:- Fixed patch level check for plugin APIs not allowing lesser patch versions on greater minor versions.
changelogs/3.1.md:- Fixed `/timings paste`. This now reports directly to the timings host instead of using Ubuntu Pastebin.
changelogs/3.1.md:- Minor code cleanups in various places.
changelogs/3.1.md:- Zip resource packs will now give slightly less useless errors - errors for broken manifest have been separated from those with fields missing, and now reports why decoding failed if it failed.
changelogs/3.1.md:- Added constant `Entity::DATA_FLAG_SHOW_TRIDENT_ROPE`.
changelogs/3.1.md:- Syntax error crashdumps will no longer be reported to the crash archive.
changelogs/3.1.md:- Chunk sending is now fault-tolerant. Before this release, any error on a worker during async chunk sending (such as memory errors caused by pthreads) would cause that chunk to never get sent, resulting in invisible and missing chunks. Levels will now attempt to retry chunk prepare when a task crashes, which should fix most invisible chunk bugs.
changelogs/3.1.md:- `MainLogger` now logs exception stack traces in a synchronized block to ensure that they are coherent when log messages are emitted from multiple threads at once.
changelogs/3.1.md:- `AsyncTask->isCrashed()` now returns `true` if a fatal error occurred during the task execution.
changelogs/3.1.md:- `DropItemAction` will now consider itself invalid if attempting to drop a null item.
changelogs/3.1.md:- Fixed leaking globally broadcasted Level packets when no players are on the server.
changelogs/3.1.md:- Fixed title bar not being cleared on server stop on some terminals.
changelogs/3.1.md:- Fixed `FallingBlock` saving corrupted data.
changelogs/3.1.md:- Fixed the structure of `GuiDataPickItemPacket`.
changelogs/3.1.md:- Cleaned up some code in `OfflinePlayer`.
changelogs/3.1.md:- Splash potions no longer apply effects to dead (but not yet respawned) players.
changelogs/3.1.md:- Coal ore no longer drops XP when mined with a silk touch tool.
changelogs/3.1.md:- Item entities now cannot be picked up when a negative pickup delay is used.
changelogs/3.1.md:- Fixed extra byte at the end of `PlayerSkinPacket` not being read (1.5 protocol change that somehow got lost).
changelogs/3.1.md:- `Config` keys which are considered bools by YAML 1.1 will no longer be transformed into 1 or 0.
changelogs/3.1.md:- Fixed painting motives not getting saved.
changelogs/3.1.md:- Fixed cacti spewing items when placed in some invalid locations.
changelogs/3.1.md:- Fixed entity fire damage not applying in the void.
changelogs/3.1.md:- Fixed entities not getting updated appropriately in some conditions.
changelogs/3.1.md:- Fixed players disconnected during login verification getting leaked and not destroyed correctly.
changelogs/3.1.md:- Updated NBT dependency to 0.2.1 to receive bug fixes (see https://github.com/pmmp/NBT/releases/tag/0.2.1).
changelogs/3.1.md:- Errors thrown during level tick will now crash the server instead of spamming the console.
changelogs/3.1.md:- Fixed arrows despawning too soon after hitting the ground.
changelogs/3.1.md:- Fixed projectiles despawning before colliding if they were airborne for > 60 seconds.
changelogs/3.1.md:- Fixed levels unloaded during an earlier level's tick on the same tick causing a crash.
changelogs/3.1.md:- PermissibleBase->clearPermissions() now properly unsubscribes from all permissions.
changelogs/3.1.md:- Fixed incorrect break check for standing torch.
changelogs/3.1.md:- Fixed drops for brewing stand.
changelogs/3.1.md:- Fixed block picking brewing stand, bed, double slab, cake, farmland, and mob heads giving the wrong items.
changelogs/3.1.md:- Fixed blocks not placing correctly when clicking on redstone ore.
changelogs/3.1.md:- Fixed unknown PC items in tile inventories crashing the server - now they'll be quietly removed instead.
changelogs/3.1.md:- Fixed server freezing when eating chorus fruit from high altitude.
changelogs/3.1.md:- `readline` is now disabled by default on Windows and must be explicitly enabled with `--enable-readline` due to thread-safety issues.
changelogs/3.1.md:- Fixed server crash when trying to use non-implemented splash potions.
changelogs/3.1.md:- Removed incorrect maximum region file size cap which may have caused some worlds to be incorrectly detected as corrupted.
changelogs/1.4.md:# 1.4dev-228
changelogs/1.4.md:This is the first beta in the 1.4 series. This is a complete rewrite of PocketMine-MP, so only plugins developed for this new API will work.
changelogs/1.4.md:- Physics!
changelogs/1.4.md:- New plugin API!
changelogs/1.4.md:- Infinite worlds
changelogs/1.4.md:- Multithreading!
changelogs/1.4.md:- New efficient threaded networking library, [RakLib](https://github.com/PocketMine/RakLib)
changelogs/1.4.md:- Supports Minecraft: PE 0.9.0!
changelogs/1.4.md:- Permission system
changelogs/1.4.md:- New event system
changelogs/1.4.md:- Separation of network code and server logic, allows custom interfaces _(RakLib, BigBrother, RubberBand)_
changelogs/1.4.md:- Advanced settings on pocketmine.yml file!
changelogs/1.4.md:- Auto updater notifications
changelogs/1.4.md:- Support for Anvil worlds (import your PC worlds)
changelogs/1.4.md:- No entities except dropped items (and no spawning)
changelogs/1.4.md:- No liquid flow
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-277
changelogs/1.4.md:This beta changes the API version to 1.1.0 (backwards-compatible) due to fixes and the new timings feature being added. All plugins that use API 1.0.0 are compatible and do not need changes. If your plugin works on API 1.0.0, please do not set the API version to 1.1.0, that will only refuse to load where it can work.
changelogs/1.4.md:- Updated RakLib to 0.2.0
changelogs/1.4.md:  - Fixes high CPU load issues
changelogs/1.4.md:  - Fixes players not quitting on timeout
changelogs/1.4.md:  - Fixes abusive bandwidth usage when a player timeouts
changelogs/1.4.md:- Fixed abusive CPU and memory usage on normal operation
changelogs/1.4.md:- Added Timings (read more on #1634)
changelogs/1.4.md:- Updated lava and fire causes #1581
changelogs/1.4.md:- Fixed #1570 Plugins can't be loaded on folders with periods
changelogs/1.4.md:- Fixed #1583 Scheduled Tasks getting repeated
changelogs/1.4.md:- Entity health is now saved and restored
changelogs/1.4.md:- Fixed #1584 duplicated death messages
changelogs/1.4.md:- RakLib is now blocking, less CPU usage
changelogs/1.4.md:- Updated plugin enable/disable event type #1585
changelogs/1.4.md:- Fixed #1578 Memory leak on chunk garbage collection
changelogs/1.4.md:- Fixed #1591 Players die when they leave the game
changelogs/1.4.md:- Fixed /kick player name
changelogs/1.4.md:- Fixed #1595 Undefined variable on QueryHandler
changelogs/1.4.md:- Improved entity attack push
changelogs/1.4.md:- Added more damage sources
changelogs/1.4.md:- Fixed #1598 spawning on index-corrupted chunks
changelogs/1.4.md:- Added settings.query-plugins to pocketmine.yml
changelogs/1.4.md:- Added deprecation warning on plugin events
changelogs/1.4.md:- Fixed /list now showing the correct player count
changelogs/1.4.md:- Fixed #1609
changelogs/1.4.md:- Fixed #1604 Items fly upwards
changelogs/1.4.md:- Added upload/download speed on title bar
changelogs/1.4.md:- Fixed unsigned fields read as signed, fixes not being able to use ports bigger than 2^15
changelogs/1.4.md:- Fixed #1622 /kick crashes the server on offline players
changelogs/1.4.md:- Fixed #1616 Players now use the world spawn by default
changelogs/1.4.md:- Fixed #1615 Players on creative mode can die of falling
changelogs/1.4.md:- Added core timings, plugin timings, and /timings command
changelogs/1.4.md:- New API version 1.1.0 (backwards-compatible)
changelogs/1.4.md:- Fixed #1642 Server crashing on invalid entities
changelogs/1.4.md:- Fixed #1641 Players not having a proper timeout
changelogs/1.4.md:- Added proper comments to Vector3::add() and Vector3::substract() #1649
changelogs/1.4.md:- Workaround for clients teleporting randomly
changelogs/1.4.md:- Workaround for clients crashing in the server
changelogs/1.4.md:- Workaround for certain AsyncTask not getting collected by the pthreads Pool
changelogs/1.4.md:- Fixed memory leak in AsyncTask collection
changelogs/1.4.md:- Improved random block ticking
changelogs/1.4.md:- Fixed #1640
changelogs/1.4.md:- Fixed #1636
changelogs/1.4.md:- Fixed #1590
changelogs/1.4.md:- Fixed #1573
changelogs/1.4.md:- CPU usage is high during player join (Anvil -> MCPE network chunk conversion)
changelogs/1.4.md:- Chunks can be generated empty sometimes, even on spawn chunks
changelogs/1.4.md:- No entities except dropped items (and no spawning)
changelogs/1.4.md:- Entity AI
changelogs/1.4.md:- RCON
changelogs/1.4.md:- No liquid flow
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-413
changelogs/1.4.md:This beta changes the API version to 1.2.0 (backwards-compatible) due to changes in how level formats are handled, Thread management. All plugins that use API 1.0.0 or 1.1.0 are compatible and do not need changes. If your plugin works on API 1.0.0 or 1.1.0, please do not set the API version to 1.2.0, that will only refuse to load where it can work.
changelogs/1.4.md:- Crash reports and automatic reporting
changelogs/1.4.md:- Added multiple Level format support
changelogs/1.4.md:- Use McRegion format to improve chunk sending CPU usage
changelogs/1.4.md:- Loaded chunks use 50% less memory than before
changelogs/1.4.md:- Void chunks have been fixed
changelogs/1.4.md:- RCON is now working
changelogs/1.4.md:- Added far-generated chunk garbage collection
changelogs/1.4.md:- Fixed #1628 #1671 invalid sender x,y,z on /spawnpoint
changelogs/1.4.md:- Use Player::getDisplayName() on more commands
changelogs/1.4.md:- Fixed crash on /stop
changelogs/1.4.md:- Fixed being killed on teleport
changelogs/1.4.md:- Fixed inventory being sent before spawning
changelogs/1.4.md:- Fixed #1614 #1678 #1711 Some blocks cannot be placed, stone has incorrect ID
changelogs/1.4.md:- Fixed #1668 Only allow one thread per property
changelogs/1.4.md:- Implemented new crash dumps
changelogs/1.4.md:- Added count(Enum), for NBT
changelogs/1.4.md:- Fixed Level::useBreakOn() when Item was null
changelogs/1.4.md:- Fixed an error related to AIR constant
changelogs/1.4.md:- Updated Stick crafting recipe to give x4
changelogs/1.4.md:- Fix for thrown EmptyChunkSection modification exception
changelogs/1.4.md:- Fixed player creative inventory
changelogs/1.4.md:- Fixed crash when placing water or lava
changelogs/1.4.md:- Fixed crash when cactus was updated
changelogs/1.4.md:- Fixed crash when using Level scheduled block update ReversePriorityQueue
changelogs/1.4.md:- Added new exception when a plugin creates an orphaned PluginTask
changelogs/1.4.md:- Throw exception when an invalid chunk is set as the parent of a Tile/Entity
changelogs/1.4.md:- Added McRegion detection to Anvil
changelogs/1.4.md:- Added multiple format support
changelogs/1.4.md:- Added McRegion level format
changelogs/1.4.md:- API version bumped to 1.2.0
changelogs/1.4.md:- Added block order detection, added support for non-sectioned level formats
changelogs/1.4.md:- Fixed #1659 PvP settings not working
changelogs/1.4.md:- Fixed loading invalid plugins crashing the server
changelogs/1.4.md:- Removed SimpleChunk from generator, core, use binary representation of chunks
changelogs/1.4.md:- Fixed #1807 #1794 #1740 #1741 #1685 Tuned generator to use a better way to process chunks
changelogs/1.4.md:- Fixed crash on chunks that are used by an entity after generation
changelogs/1.4.md:- Improved memory usage when chunks are saved/generated
changelogs/1.4.md:- Added worlds directive to pocketmine.yml to load extra worlds or use a plugin-provided generator
changelogs/1.4.md:- Disabled chunk ticking while it is being worked on
changelogs/1.4.md:- Added getExecutor() and setExecutor() method to PluginCommand
changelogs/1.4.md:- Updated Installer wizard language
changelogs/1.4.md:- Added proper Entity->__toString()
changelogs/1.4.md:- Added ChunkLoadEvent, ChunkUnloadEvent, ChunkPopulateEvent
changelogs/1.4.md:- Fixed /tell command not having spaces
changelogs/1.4.md:- Added Position::fromObject() strong reference parameter
changelogs/1.4.md:- Modified how chunks handle level providers
changelogs/1.4.md:- Added a Thread manager
changelogs/1.4.md:- Fixed #1842 Players are now moved using the head
changelogs/1.4.md:- Fixed source servers getting invalid AutoUpdater notifications
changelogs/1.4.md:- Made AsyncTask::onCompletion() implementation optional
changelogs/1.4.md:- Fixed RCON usage
changelogs/1.4.md:- World generation is slower than in older builds
changelogs/1.4.md:- No entities except dropped items (and no spawning)
changelogs/1.4.md:- Entity AI
changelogs/1.4.md:- No liquid flow
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-449
changelogs/1.4.md:This beta changes the API version to 1.3.0 (backwards-compatible), improving level chunk sending and adding new plugin events for developers. All plugins that target older APIs are compatible and do not need changes. If your plugin works on older API versions, please do not set the API version to 1.2.0, that will only refuse to load where it can work.
changelogs/1.4.md:- Improved player movement
changelogs/1.4.md:- Fixed player actions lagging behind the server
changelogs/1.4.md:- Implemented circular chunk sending / view distance
changelogs/1.4.md:- Generation works correctly with multiple worlds
changelogs/1.4.md:- Creative and survival hotbar works better
changelogs/1.4.md:- Better wooden tool crafting
changelogs/1.4.md:- Players will drop their inventory on death
changelogs/1.4.md:- Level formats can send chunks to players directly without implementing an AsyncTask
changelogs/1.4.md:- Implemented circular chunk sending / view distance, as Johan commented on the IRC
changelogs/1.4.md:- Fixed AddMobPacket (x,y,z from float to int)
changelogs/1.4.md:- Generated levels create chunks starting from the spawn, instead of the corner
changelogs/1.4.md:- Added exception handling to level loading
changelogs/1.4.md:- Player movement is sent as direct packets, decreases lag
changelogs/1.4.md:- Fixed #1883 Release strong weak references on close
changelogs/1.4.md:- Throw exception when null chunk is passed to a Tile/Entity instead of crashing
changelogs/1.4.md:- Fixed crash caused by a race condition on Query
changelogs/1.4.md:- Throw invalid event exception when a plugin tries to declare an abstract event
changelogs/1.4.md:- Stop submission of plugin syntax error crashes
changelogs/1.4.md:- Fixed crash on tile unloading
changelogs/1.4.md:- Load later plugins with custom loader, fixes API
changelogs/1.4.md:- Fixed #1882 Race-condition on multiple world generation, causing lock up
changelogs/1.4.md:- Alternate chunk generation between multiple levels
changelogs/1.4.md:- Fixed #1901, EmptyChunkSection gets replaced by invalid Section
changelogs/1.4.md:- Added SignChangeEvent
changelogs/1.4.md:- Added RemoteServerCommandEvent
changelogs/1.4.md:- Bump API version to 1.3.0
changelogs/1.4.md:- Removed PHP_VERSION constant on pocketmine namespace
changelogs/1.4.md:- Added Chiseled stone brick, red sand
changelogs/1.4.md:- Added item activation
changelogs/1.4.md:- Added Zombie spawn egg
changelogs/1.4.md:- Added Villager spawn egg
changelogs/1.4.md:- Fixed AddEntityPacket (type byte -> int)
changelogs/1.4.md:- Added base Arrow
changelogs/1.4.md:- Check if player is online before showing it to other players
changelogs/1.4.md:- Creative and survival hotbar works better
changelogs/1.4.md:- Workaround crash when placing paintings
changelogs/1.4.md:- Fixed crashes when default level is not loaded
changelogs/1.4.md:- Modified chunk generation garbage collector
changelogs/1.4.md:- Fixed #1674 Wooden tools only craft with Oak wood
changelogs/1.4.md:- Fixed #1889 Players drop their inventory when they die
changelogs/1.4.md:- Fixed #1703 In-game action lag
changelogs/1.4.md:- Fixed level data not being saved
changelogs/1.4.md:- Improved server shutdown
changelogs/1.4.md:- Improved player spawning, closes #1890
changelogs/1.4.md:- Added End Stone, End Portal, Mycelium, Monster Spawner and Podzol blocks.
changelogs/1.4.md:- World generation is slower than in older builds
changelogs/1.4.md:- Server can use more memory than specified
changelogs/1.4.md:- Chunks are not freed correctly from the generation thread
changelogs/1.4.md:- Spawning lots of entities causes massive lag
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No liquid flow
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-478
changelogs/1.4.md:- Fixed player movement glitch
changelogs/1.4.md:- Overall performance improvements
changelogs/1.4.md:- Server requires PHP 5.5 or greater (drops Windows XP support)
changelogs/1.4.md:- Reactivated chunk ticking _(can be disabled via pocketmine.yml)_
changelogs/1.4.md:- Beds! Furnaces!
changelogs/1.4.md:- Fixed potential Mycelium crash. PR #1944
changelogs/1.4.md:- Fixed #1948 /whitelist list not working
changelogs/1.4.md:- Deprecated Server::loadPlugin(Plugin) in favor of Server::enablePlugin(Plugin)
changelogs/1.4.md:- Removed hardcoded Server name from source
changelogs/1.4.md:- Added --enable-profiler parameter to use with @krakjoe profiler
changelogs/1.4.md:- Require PHP >= 5.5
changelogs/1.4.md:- Performance improvements in NBT reading/writing
changelogs/1.4.md:- Performance improvements in blocks and Entities
changelogs/1.4.md:- Improved Level::getBlock()
changelogs/1.4.md:- Improved Air block collision check
changelogs/1.4.md:- Updated blocks bounding boxes
changelogs/1.4.md:- Added RakLib port checking option
changelogs/1.4.md:- Implemented correct time offsets and speed
changelogs/1.4.md:- Implemented beds
changelogs/1.4.md:- Fixed #1967 Glowstone dust -> Glowstone recipe
changelogs/1.4.md:- Added teleport flag to MovePlayerPacket, improves player movement
changelogs/1.4.md:- Removed unloaded chunk check
changelogs/1.4.md:- Improved player onGround collision check
changelogs/1.4.md:- Improved NBT IntArray read/write
changelogs/1.4.md:- Improved Block selection and construction performance
changelogs/1.4.md:- Fixed #1970 Breaking blocks does not remove tile entities
changelogs/1.4.md:- Fixed Chests/Furnaces not dropping contents when broken
changelogs/1.4.md:- Workaround BaseChunk::setBlock() recursion issues
changelogs/1.4.md:- Moved spl to [PocketMine-SPL](https://github.com/PocketMine/PocketMine-MP)
changelogs/1.4.md:- Ctrl+C handling and kill signals are working again
changelogs/1.4.md:- Fixed #1953 Increased item PickupDelay to 2.5 seconds
changelogs/1.4.md:- Fixed #1879 Tile entities were not saved on chunk unload
changelogs/1.4.md:- Fixed #1911 Implemented FurnaceInventory callback
changelogs/1.4.md:- Added Furnace progress fire
changelogs/1.4.md:- Fixed undefined index on furnace recipes
changelogs/1.4.md:- Fixed furnace achievement check
changelogs/1.4.md:- Improved chunk sending
changelogs/1.4.md:- Improved chunk ticking, enabled again. _Disable it setting chunk-ticking.per-tick to 0_
changelogs/1.4.md:- Dropped items and arrows get deleted on Y < 0
changelogs/1.4.md:- Fixed #1926 Teleport to non-generated chunks
changelogs/1.4.md:- Server can use more memory than specified
changelogs/1.4.md:- Idle servers will increase its CPU usage as time goes on
changelogs/1.4.md:- Chunks are not freed correctly from the generation thread
changelogs/1.4.md:- Spawning lots of entities causes unexpected lag
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No liquid flow
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-491
changelogs/1.4.md:- Server requires PHP 5.6, improves performace
changelogs/1.4.md:- Fixed fatal error on startup
changelogs/1.4.md:- Fixed entity physics, fixed cause of lag
changelogs/1.4.md:- Fixed #1983 Check player online status
changelogs/1.4.md:- Fixed #1980 Fatal error on server load
changelogs/1.4.md:- Initial PHP 5.6 features support
changelogs/1.4.md:- Improved safe_var_dump(), Inventory::addItem() Inventory::removeItem() using argument unpacking
changelogs/1.4.md:- Improved performance of Item::get()
changelogs/1.4.md:- Removed cli_set_process_title() check
changelogs/1.4.md:- Added entity id names
changelogs/1.4.md:- Fixed Item after-clone behavior
changelogs/1.4.md:- Fixed possible Level::getBlock() crash
changelogs/1.4.md:- Improved unloaded tile entity handling
changelogs/1.4.md:- Fixed #1966 Face Lit Pumkins correctly
changelogs/1.4.md:- Fixed entity physics and AxisAlignedBB
changelogs/1.4.md:- Server can use more memory than specified
changelogs/1.4.md:- Chunks are not freed correctly from the generation thread
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No liquid flow
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-576
changelogs/1.4.md:The API version has been bumped to 1.4.0 (backwards-compatible) due to new features being added and bugs in the API being patched.
changelogs/1.4.md:- New pthreads version required, thanks to @krakjoe for fixing lots of bugs!
changelogs/1.4.md:- Performance improvements in RakLib & thread communication
changelogs/1.4.md:- Better physics & bounding boxes
changelogs/1.4.md:- Added working bow & arrows
changelogs/1.4.md:- Better timings reports
changelogs/1.4.md:- Improved server ticks per second
changelogs/1.4.md:- Improved world and block saving
changelogs/1.4.md:- Added more damage sources
changelogs/1.4.md:- Implemented NBT::getArray() and NBT::setArray()
changelogs/1.4.md:- Made EntityDamageByEntityEvent call EntityDamageEvent handlers
changelogs/1.4.md:- Added EntityShootBowEvent
changelogs/1.4.md:- Added extra documentation to Level::setBlock()
changelogs/1.4.md:- Added Server::getTickUsage()
changelogs/1.4.md:- Fixed PermissionAttachment not recalculating its Permissible permissions
changelogs/1.4.md:- Fixed EntityMoveEvent not being cancelled correctly on players
changelogs/1.4.md:- Fixed Permissible::setPermission() not using the correct order on replacement
changelogs/1.4.md:- Added PermissionAttachment::setPermissions()
changelogs/1.4.md:- Added PermissionAttachment::unsetPermissions(), PermissionAttachment::clearPermissions()
changelogs/1.4.md:- Custom threading is less buggy now due to pthreads fixes
changelogs/1.4.md:- Renamed Item\Block to Item\ItemBlock, fixes several crashes
changelogs/1.4.md:- Fixed physics sneak flag
changelogs/1.4.md:- Use Entity::move() as player movement, protect against noclip cheat
changelogs/1.4.md:- Fixed double physics calculation
changelogs/1.4.md:- Fixed armor crafting recipes
changelogs/1.4.md:- Added Bed bounding box
changelogs/1.4.md:- Added Chest bounding box
changelogs/1.4.md:- Added Carpet bounding box
changelogs/1.4.md:- Added Slab bounding box
changelogs/1.4.md:- Added Wooden Slab bounding box
changelogs/1.4.md:- Fixed entity partial block moving
changelogs/1.4.md:- Disable RakLib port checking by default
changelogs/1.4.md:- Added survival check to movements
changelogs/1.4.md:- Added check for invalid entity attack
changelogs/1.4.md:- Added arrow and suicide death messages
changelogs/1.4.md:- Added stairs bounding box
changelogs/1.4.md:- Added cactus bounding box
changelogs/1.4.md:- Added End Portal frame bounding box
changelogs/1.4.md:- Added Farmland bounding box
changelogs/1.4.md:- Added Fence bounding box
changelogs/1.4.md:- Added Fence Gate bounding box
changelogs/1.4.md:- Added Glass Pane bounding box
changelogs/1.4.md:- Added Iron bars bounding box
changelogs/1.4.md:- Added Doors bounding boxes
changelogs/1.4.md:- Added Cake bounding box
changelogs/1.4.md:- Added Ladder bounding box
changelogs/1.4.md:- Added Soul Sand bounding box
changelogs/1.4.md:- Added Cobble Wall bounding box
changelogs/1.4.md:- Added Trapdoor bounding box
changelogs/1.4.md:- Fixed infinite Entity recursion on chunk load
changelogs/1.4.md:- Fixed creative players dropping their inventory
changelogs/1.4.md:- Player creative check refactor
changelogs/1.4.md:- Fixed timings name
changelogs/1.4.md:- Fixed timings ticks getting reset
changelogs/1.4.md:- Tick entities on Level, show correct timing reports
changelogs/1.4.md:- Fixed crash when chests are closed with viewers
changelogs/1.4.md:- Fixed #2032 Do not set Level to null
changelogs/1.4.md:- Improved CallbackTask timings data
changelogs/1.4.md:- Added __debugInfo() to Server and Level
changelogs/1.4.md:- Fixed dropped items going too fast
changelogs/1.4.md:- Do not report E_PARSE or E_COMPILE_ERROR crashes
changelogs/1.4.md:- Improved server ticking.
changelogs/1.4.md:- Fixed Server::getTicksPerSecond()
changelogs/1.4.md:- Possible fix for level save issues, related to #1985 #1982 #1758
changelogs/1.4.md:- Implemented Falling Sand
changelogs/1.4.md:- Fixed possible Player crash on save
changelogs/1.4.md:- Fixed Level::setBlock() old calls
changelogs/1.4.md:- Added cactus neighbour block check
changelogs/1.4.md:- Implemented attack cooldown
changelogs/1.4.md:- Fixed HeldItem were swapped in mining
changelogs/1.4.md:- Fixed Player's slot[0] disappears on logging in
changelogs/1.4.md:- Added --disable-readline CLI argument
changelogs/1.4.md:- Fixed Item drop delay
changelogs/1.4.md:- Updated RakLib path
changelogs/1.4.md:- TPS measurement improvement, moved interface handling to tick
changelogs/1.4.md:- Possible fix for #2061
changelogs/1.4.md:- Added binary reading optimizations, faster 64-bit reading
changelogs/1.4.md:- Normalized Player pitch/yaw
changelogs/1.4.md:- Added Pumpkin & Lit Pumpkin rotation
changelogs/1.4.md:- Removed pthreads workarounds
changelogs/1.4.md:- Fixed #2077 Block changes not being saved
changelogs/1.4.md:- Fixed #2075 Door bounding boxes
changelogs/1.4.md:- Added forced position strong check for Player
changelogs/1.4.md:- Fixed #2035 Invalid Fence Gate bounding box
changelogs/1.4.md:- Added Player->forceMovement check on teleport
changelogs/1.4.md:- Enabled default PHP GC on generator thread
changelogs/1.4.md:- Optimized server sleep times
changelogs/1.4.md:- Added Permission/Permissible calculation timings
changelogs/1.4.md:- Level generators can be set in server.properties
changelogs/1.4.md:- Improved Player last damage check
changelogs/1.4.md:- Added Fire, Lava damage
changelogs/1.4.md:- Show fire to other clients
changelogs/1.4.md:- Cobweb, Ladders and Water won't cause fall damage
changelogs/1.4.md:- Added suffocation, drowning damage. Closes #1908
changelogs/1.4.md:- Added more death messages
changelogs/1.4.md:- Added Cactus damage
changelogs/1.4.md:- Server can use more memory than specified
changelogs/1.4.md:- Chunks are not freed correctly from the generation thread
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No liquid flow
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-599
changelogs/1.4.md:- Faster RakLib processing
changelogs/1.4.md:- Server won't hang up when stopping
changelogs/1.4.md:- Fixed usage sending issues
changelogs/1.4.md:- Decreased memory issues on Generation Thread
changelogs/1.4.md:- Fixed entity issues on negative coordinates
changelogs/1.4.md:- Improved event checking on PlayerInteractEvent
changelogs/1.4.md:- Throw exception when Server::dispatchCommand() is called with an invalid CommandSender
changelogs/1.4.md:- Documented tool usage in Level::useBreakOn()
changelogs/1.4.md:- RakLib patches
changelogs/1.4.md:- Handle force parameter properly on Level::unload()
changelogs/1.4.md:- Remove level locks
changelogs/1.4.md:- Removed embedded class names
changelogs/1.4.md:- Fixed #2046
changelogs/1.4.md:- Fixed date_default_timezone_set E_NOTICE
changelogs/1.4.md:- Send build number on usage
changelogs/1.4.md:- Send project name on usage
changelogs/1.4.md:- Block more player actions when dead, fixes #2102
changelogs/1.4.md:- Fixed #2104 Can't place blocks where non-solid entities exist
changelogs/1.4.md:- Fixed Utils::getUniqueID() on Linux due to /proc/cpuinfo
changelogs/1.4.md:- Protect against \0 attacks on name checking
changelogs/1.4.md:- Added TPS load to /status
changelogs/1.4.md:- Possible fix for #1920
changelogs/1.4.md:- Fixed #2114 Removed Player collisions with other entities
changelogs/1.4.md:- Fixed Entity/Block issues on negative coordinates, fixes #2100
changelogs/1.4.md:- Fixed #1750 cannot place slabs against blocks
changelogs/1.4.md:- Server can use more memory than specified
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No liquid flow
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-659
changelogs/1.4.md:- Added non-threaded chunk generation, toggleable on pocketmine.yml
changelogs/1.4.md:- Added Liquid flow
changelogs/1.4.md:- Fixed Double Chests
changelogs/1.4.md:- Auto-save property is now working
changelogs/1.4.md:- Implemented Arrow pick up
changelogs/1.4.md:- Implement Armor changes as Transactions
changelogs/1.4.md:- Compatibility with pthreads > 2.0.8
changelogs/1.4.md:- Entities / Tile Entities are handled more reliable on worlds
changelogs/1.4.md:- Implemented flying protection
changelogs/1.4.md:- Deprecated Level->getChunkAt() in favor of Level->getChunk()
changelogs/1.4.md:- Allow setting the player spawnpoint via events before PlayerJoinEvent
changelogs/1.4.md:- Fixed PlayerChatEvent::setRecipients() being useless
changelogs/1.4.md:- Fixed #2153 Cancelling an EntityDamageEvent has no effect for lava damage
changelogs/1.4.md:- Add valid position difference back to Player entities
changelogs/1.4.md:- Torches can now be crafted using charcoal
changelogs/1.4.md:- Fixed players getting Suffocation damage inside transparent blocks
changelogs/1.4.md:- Send player metadata on respawn
changelogs/1.4.md:- Improved Level::getSafeSpawn()
changelogs/1.4.md:- Improved knockback motion
changelogs/1.4.md:- Improved player movement, check once per tick
changelogs/1.4.md:- Improved chunk unload queue
changelogs/1.4.md:- Added non-threaded chunk generation, toggleable on pocketmine.yml
changelogs/1.4.md:- Fixed #2121 Players' heads flip upside down and back around after going past pitch = 0
changelogs/1.4.md:- Fixed Level->scheduleUpdate() tick calculation
changelogs/1.4.md:- Improved Level block update scheduling for repeated updates
changelogs/1.4.md:- Added torch drop
changelogs/1.4.md:- Basic entity motion on water
changelogs/1.4.md:- Improved Player generation queue
changelogs/1.4.md:- Fixed #2126 Items drop twice from tile entities
changelogs/1.4.md:- Fixed Double Chests
changelogs/1.4.md:- Fixed server crash when Tile Entities / Entities were loaded and requested the same chunk
changelogs/1.4.md:- Fixed auto-save configuration, made it global
changelogs/1.4.md:- RakLib update
changelogs/1.4.md:- Fixed #2055 Extra packet data sent on armor change
changelogs/1.4.md:- Improved single-threaded chunk generation efficiency
changelogs/1.4.md:- Improved entity base ticks
changelogs/1.4.md:- Improved entity movement updates
changelogs/1.4.md:- Implemented Arrow pick up
changelogs/1.4.md:- Fixed Anvil levels duplicating saved entities
changelogs/1.4.md:- Improved Chunk entity loading
changelogs/1.4.md:- Improved exponentiation
changelogs/1.4.md:- Added armor change $source parameter
changelogs/1.4.md:- Improved PlayerInventory->setItemInHand() $source call, fixed Tool durability
changelogs/1.4.md:- Implement Armor changes as Transactions
changelogs/1.4.md:- Fixed entities getting OnGround default to true
changelogs/1.4.md:- Added individual object timings to Entities / Tile Entities
changelogs/1.4.md:- Compatibility with pthreads > 2.0.8
changelogs/1.4.md:- Reliable timezone detection
changelogs/1.4.md:- Fixed Server->unloadLevel() not removing objects from memory
changelogs/1.4.md:- Moved connected flag up in the Player disconnect process
changelogs/1.4.md:- Improved initial chunk loading, do not skip near chunks, fixes world loading getting stuck
changelogs/1.4.md:- Changed base block classes to abstract, closes #2159
changelogs/1.4.md:- Implement crop growth levels properly, fixes #2002, closes #2160
changelogs/1.4.md:- Implemented flying protection
changelogs/1.4.md:- Fixed Player movement collision checks
changelogs/1.4.md:- Removed parse errors from AutoReporting
changelogs/1.4.md:- Improved entity ticking
changelogs/1.4.md:- Fixed Level->getCollidingEntities() when called with a null Entity
changelogs/1.4.md:- Removed selectors on Player->sendMessage()
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-665
changelogs/1.4.md:There are new additions to the API (backwards-compatible), and the API version has been bumped to 1.5.0
changelogs/1.4.md:- Fixed issues with latest beta
changelogs/1.4.md:- Explosions!
changelogs/1.4.md:- Added Vines
changelogs/1.4.md:- Plugins can now change Query data
changelogs/1.4.md:- Added new Tool type selection constants
changelogs/1.4.md:- Implemented QueryRegenerateEvent
changelogs/1.4.md:- API 1.5.0
changelogs/1.4.md:- Do not spawn dead entities to players, fixes #2157, possible fix for #2139
changelogs/1.4.md:- Unload entities from chunks, possible fix for #2157, fixes #2165
changelogs/1.4.md:- Added Vine blocks, closes #2162
changelogs/1.4.md:- Spawnable->spawnToAll() now uses the actual chunk instead of the entire level to spawn
changelogs/1.4.md:- Implemented Explosion and PrimedTNT, closes #2139
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-707
changelogs/1.4.md:This release includes lots of backwards-compatible API changes, so the API version has been bumped to 1.6.0
changelogs/1.4.md:- Overall performance improvement
changelogs/1.4.md:- Lots of new events for the plugin API
changelogs/1.4.md:- Level Block caching, improves performance
changelogs/1.4.md:- Removed dead code and ported old functionality on item drops
changelogs/1.4.md:- Implemented scheduled and partial entity updates, improves performance
changelogs/1.4.md:- Only modified chunks are saved
changelogs/1.4.md:- API 1.6.0
changelogs/1.4.md:- New PlayerMoveEvent, improved player movement event firing
changelogs/1.4.md:- **Deprecated EntityMoveEvent**
changelogs/1.4.md:- Fixed arrow damage not getting overridden by the event result
changelogs/1.4.md:- Added EntityCombustEvent and children
changelogs/1.4.md:- Added EntityDamageByBlockEvent (child of EntityDamageEvent)
changelogs/1.4.md:- Improved EntityRegainHealthEvent
changelogs/1.4.md:- Improved EntityShootBowEvent
changelogs/1.4.md:- Added ExplosionPrimeEvent
changelogs/1.4.md:- Added ItemDespawnEvent
changelogs/1.4.md:- Added ItemSpawnEvent
changelogs/1.4.md:- Added ProjectileLaunchEvent
changelogs/1.4.md:- Added ProjectileHitEvent
changelogs/1.4.md:- Added PlayerBedEnterEvent and PlayerBedLeaveEvent
changelogs/1.4.md:- Added PlayerDeathEvent methods for inventory keeping
changelogs/1.4.md:- Added Tile->getBlock() method
changelogs/1.4.md:- Added FurnaceBurnEvent
changelogs/1.4.md:- Added FurnaceSmeltEvent
changelogs/1.4.md:- Added Living->getTargetBlock(), Living->getLineOfSight(), Vector3 side constants, Vector3::getOppositeSide()
changelogs/1.4.md:- Deprecated Level->getSpawn() in favor of Level->getSpawnLocation()
changelogs/1.4.md:- Added LeavesDecayEvent
changelogs/1.4.md:- Added BlockSpreadEvent
changelogs/1.4.md:- Added BlockGrowEvent
changelogs/1.4.md:- Added EntityBlockChangeEvent
changelogs/1.4.md:- Added PlayerBucketEvent and children, improved Bucket usage and Liquid placing
changelogs/1.4.md:- Removed Generic block class
changelogs/1.4.md:- Updated PluginManager event deprecation message
changelogs/1.4.md:- Added BlockUpdateEvent
changelogs/1.4.md:- Throw CRITICAL error message on unhandled Exception on plugin events instead of crashing
changelogs/1.4.md:- Throw CRITICAL error message on unhandled Exception on commands instead of crashing
changelogs/1.4.md:- Fixed Inventory->removeItem()
changelogs/1.4.md:- Fixed AxisAlignedBB->setBB()
changelogs/1.4.md:- Updated RakLib, better player join
changelogs/1.4.md:- Fixed issues with Entity::heal() method
changelogs/1.4.md:- Removed unused imports
changelogs/1.4.md:- Updated fuel duration to ticks
changelogs/1.4.md:- Improved liquid performance
changelogs/1.4.md:- Removed old OS detection code
changelogs/1.4.md:- Added TextWrapper
changelogs/1.4.md:- Increased Player->stepHeight to 0.6, closes #2156
changelogs/1.4.md:- Removed workaround on flying check due to physics calculation fix, closes #2169
changelogs/1.4.md:- Workaround for entities glitching through the floor on the client-side
changelogs/1.4.md:- Improved Living entity ticking
changelogs/1.4.md:- Removed unused code, fixed undefined variables
changelogs/1.4.md:- Added global block cache
changelogs/1.4.md:- Made Wheat crops extend Crop class
changelogs/1.4.md:- Removed old Player->timeout property
changelogs/1.4.md:- Fixed Level->getCollidingEntities()
changelogs/1.4.md:- Save block bounding boxes, improves block cache
changelogs/1.4.md:- Removed a bunch of TODO and fixed item drops on block update
changelogs/1.4.md:- Improved item drop spawning
changelogs/1.4.md:- Improved Entity extinguish operations and packet spam
changelogs/1.4.md:- Increased Player->forceMovement check radius
changelogs/1.4.md:- Improved player movement event firing & corrections
changelogs/1.4.md:- Fixed Level->getNearbyEntities(), fixes item drops not being picked up
changelogs/1.4.md:- RakLib update, PING/PONG handling
changelogs/1.4.md:- Implemented scheduled and partial entity updates
changelogs/1.4.md:- Micro-optimizations
changelogs/1.4.md:- Fixed player using an invalid spawn chunk
changelogs/1.4.md:- Implemented saving modified chunks
changelogs/1.4.md:- Fixes entities not being saved and tile entities having an incorrect field, closes #1661
changelogs/1.4.md:- Match Player pickup area with Minecraft
changelogs/1.4.md:- Fixed RegionLoader not creating default index on first load
changelogs/1.4.md:- Do not block when killing workers
changelogs/1.4.md:- Fixed error_handler trace generation on higher debug levels
changelogs/1.4.md:- Do not wrap text if unknown characters are found.
changelogs/1.4.md:- Fixed Tasks deleting their Timings reports
changelogs/1.4.md:- Added extra Entity metadata
changelogs/1.4.md:- Optimized Player->orderChunks() and chunk sending ordering algorithm
changelogs/1.4.md:- Improved chunk loading and order refresh times
changelogs/1.4.md:- Fixed #2183
changelogs/1.4.md:- Improved broadcast packet encoding
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-822
changelogs/1.4.md:This release includes lots of backwards-compatible API changes, so the API version has been bumped to 1.7.0
changelogs/1.4.md:- Overall performance improvements
changelogs/1.4.md:- Fixes lots of problems related to inventory
changelogs/1.4.md:- Snowballs!
changelogs/1.4.md:- Added Error -> Exception handling
changelogs/1.4.md:- Fixed lots of crafting recipes
changelogs/1.4.md:- Builds are now optimized on creation time
changelogs/1.4.md:- Added /time start and /time stop
changelogs/1.4.md:- Improved networking code and binary I/O methods
changelogs/1.4.md:- API 1.7.0
changelogs/1.4.md:- Fixed Level->getMetadata() and similar, removed extra references
changelogs/1.4.md:- Fixes get and set armor
changelogs/1.4.md:- Fixed Inventory->removeItem()
changelogs/1.4.md:- New way to spawn entities/tiles using a global register table, allow overriding default entity/tile classes via classes
changelogs/1.4.md:- Added Error -> Exception handling
changelogs/1.4.md:- Added extra Exceptions
changelogs/1.4.md:- Fixed InventoryPickupItemEvent
changelogs/1.4.md:- EntityDamageEvent and children now only fire if the attack is possible, moved event trigger to Entity->attack()
changelogs/1.4.md:- Added InventoryPickupArrowEvent
changelogs/1.4.md:- Fixed Event name being null
changelogs/1.4.md:- Fixed some inventory events not firing on players
changelogs/1.4.md:- Fire PlayerInteractEvent on 0xff face
changelogs/1.4.md:- Added EntityDamageByChildEntityEvent
changelogs/1.4.md:- Allow passing a Player source as last parameter on Inventory->addItem() and Inventory->removeItem()
changelogs/1.4.md:- Return proper BlockIterator index, throw more exceptions, improved blockQueue performance
changelogs/1.4.md:- Use proper indexes on Living->getLineOfSight() when a max length is set
changelogs/1.4.md:- Fixed inventory changes getting the wrong window, closes #2187
changelogs/1.4.md:- Improved Level object deallocation
changelogs/1.4.md:- Improved inventory and window allocation, fixes #2200
changelogs/1.4.md:- Fixed entities not being pushed out of blocks
changelogs/1.4.md:- Improved Player->onGround checking
changelogs/1.4.md:- Improved Explosion item drop position
changelogs/1.4.md:- Added explosion death message
changelogs/1.4.md:- Fixed crash when doing var_dump() of anything that contains the Server object
changelogs/1.4.md:- Removed extra ; from if, fixes #2205
changelogs/1.4.md:- Possible fix for entities not closing correctly
changelogs/1.4.md:- Fixed #2207 Server crashing if players are closed before logging in
changelogs/1.4.md:- Fixed red sand not falling correctly
changelogs/1.4.md:- Drop invalid entities / tile entities on chunk loading
changelogs/1.4.md:- Fixed entities not getting ticks on movement
changelogs/1.4.md:- Fixed /setworldspawn changing sender data
changelogs/1.4.md:- Mark chunk to be saved when removing invalid entities/tiles
changelogs/1.4.md:- Updated RakLib
changelogs/1.4.md:- Improved network packets allocation
changelogs/1.4.md:- Improve #2238, do not crash when an invalid/corrupt RCON stop event happens
changelogs/1.4.md:- Disallow further modification of Signs by its creator after load/unload
changelogs/1.4.md:- Added Snowballs
changelogs/1.4.md:- Fixed UseItemPacket being able to be sent before spawning
changelogs/1.4.md:- Fixed plugins crashing the server when teleporting players on an invalid event
changelogs/1.4.md:- Use Player->forceMovement on MovePlayerPacket non-tick revert
changelogs/1.4.md:- Added Entity->onGround setting when entities keep moving without checks
changelogs/1.4.md:- Remove chunks from advanced cache after setting
changelogs/1.4.md:- Fixed Trapdoor recipe
changelogs/1.4.md:- Fixed Bowl recipe
changelogs/1.4.md:- Fixed Stonecutter recipe
changelogs/1.4.md:- Fixed Double Chest behavior
changelogs/1.4.md:- Fixed Chest->unpair()
changelogs/1.4.md:- Blocks now save their bounding box, fixed entity block collision check
changelogs/1.4.md:- Added extra chunk sending timings
changelogs/1.4.md:- Added preprocessor optimizations
changelogs/1.4.md:- Fixed players not loading chunks when stuck on a unloaded chunk
changelogs/1.4.md:- Optimized networking code & AxisAlignedBB
changelogs/1.4.md:- Improved freeing chunks
changelogs/1.4.md:- Fixed #2204
changelogs/1.4.md:- Added packet exception handling
changelogs/1.4.md:- Fixed crashing server not stopping
changelogs/1.4.md:- Fixed Entity being set position after being closed
changelogs/1.4.md:- Fixed Query-related crash
changelogs/1.4.md:- Despawn entities correctly from clients as they move
changelogs/1.4.md:- Improved level switching for players
changelogs/1.4.md:- Added /time start and /time stop
changelogs/1.4.md:- Fixed server not using the correct provided path if it did not exist
changelogs/1.4.md:- Fixed random block updates not firing
changelogs/1.4.md:- Updated timings command, give direct link to results
changelogs/1.4.md:- Use SplFixedArray for improved performance
changelogs/1.4.md:- Fixed player viewer list including themselves
changelogs/1.4.md:- Improved inventory sending, send single slots instead of full inventory as much as possible
changelogs/1.4.md:- Fixed unloading chunks
changelogs/1.4.md:- Automatically set Entity / Tile entity save identifiers
changelogs/1.4.md:- Added vertical and horizontal collision detection to Entities
changelogs/1.4.md:- Fixed bonemeal recipe, closes #2260
changelogs/1.4.md:- Fixed Snow block recipe
changelogs/1.4.md:- Fixed String -> Wool recipe
changelogs/1.4.md:- Fixed ladder recipe
changelogs/1.4.md:- Fixed red sand smelting recipe
changelogs/1.4.md:- Improved Level->getTile() to a direct lookup instead of linear search
changelogs/1.4.md:- Reenabled collision against entities on move
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-834
changelogs/1.4.md:- Minecraft: PE v0.10 support!
changelogs/1.4.md:- Fixed some crafting recipes
changelogs/1.4.md:- Fixed some memory leaks
changelogs/1.4.md:- Fixed issues with tile entities
changelogs/1.4.md:- API 1.7.1
changelogs/1.4.md:- Fixed PlayerInventory->setItem() with null items
changelogs/1.4.md:- Fixed Level->getTile()
changelogs/1.4.md:- Bumped protocol version to 20
changelogs/1.4.md:- Added different Fences, new Fence crafting recipes
changelogs/1.4.md:- Added different Fence Gates, new Fence Gate crafting recipes
changelogs/1.4.md:- Added new fences and fence gates to fuel types
changelogs/1.4.md:- Updated UseItemPacket
changelogs/1.4.md:- Updated time steps from x2.5 to x1.25
changelogs/1.4.md:- Fixed Chunk tile indexes
changelogs/1.4.md:- Get timezone directly. Fixes #2287.
changelogs/1.4.md:- Bumped weakref version, fixes travis builds
changelogs/1.4.md:- Fixed Acacia / Dark Oak logs crafting recipes
changelogs/1.4.md:- Fixed version message color
changelogs/1.4.md:- Fixed tile entities not being placed in the correct array
changelogs/1.4.md:- Fixed permission-related memory leak
changelogs/1.4.md:- Improved and fixed command exception message, closes #2301
changelogs/1.4.md:- Fixed #1969
changelogs/1.4.md:- Possible fix for #2297
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-842
changelogs/1.4.md:- Improved chunk loading
changelogs/1.4.md:- Catch more exceptions and give extra debug messages
changelogs/1.4.md:- Recreates / fixes corrupt chunks with a huge amount of tile entities
changelogs/1.4.md:- Improved exception handling and debugging
changelogs/1.4.md:- Improved chunk loading/unloading
changelogs/1.4.md:- Protect permission removal against bad plugins
changelogs/1.4.md:- Remove duplicated tiles from chunk table automatically
changelogs/1.4.md:- Regenerate corrupt player data if invalid data is found
changelogs/1.4.md:- Catch corrupted chunk data errors
changelogs/1.4.md:- Increased Fence, Fence Gate and Stone Wall Y bounding box
changelogs/1.4.md:- Bumped Minecraft: PE version string
changelogs/1.4.md:- Removed old trigger_error() calls, closes #2335
changelogs/1.4.md:- Properly close inventory windows from Players
changelogs/1.4.md:- Catch exceptions when chunks are unloaded
changelogs/1.4.md:- Possible fix for #2267, #2314
changelogs/1.4.md:- Improved player spawn item in hand sending
changelogs/1.4.md:- Improved global entity motion encoding using per-player queues
changelogs/1.4.md:- Issues with spawnpoint
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-847
changelogs/1.4.md:- Fixed a crash introduced on the last beta
changelogs/1.4.md:- Improved inventory handling
changelogs/1.4.md:- Fixed Inventory->addItem()
changelogs/1.4.md:- Removed unused Block->isLiquid property
changelogs/1.4.md:- Fixed #2340
changelogs/1.4.md:- Improved Inventory->addItem(), fixed breaking containers duplicating the last slot, removed not necessary slot changes
changelogs/1.4.md:- Fixed ladder crafting recipe
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-855
changelogs/1.4.md:- Fixed some duplication issues
changelogs/1.4.md:- Added light spreading
changelogs/1.4.md:- Less glitched PlayerMoveEvent handling by plugins
changelogs/1.4.md:- API 1.8.0
changelogs/1.4.md:- Added Level->getFullLight()
changelogs/1.4.md:- Updated player movement processing and event handling
changelogs/1.4.md:- Fixed armor dropping twice
changelogs/1.4.md:- Fixed invalid worlds property being set by users
changelogs/1.4.md:- Removed temporal pthreads workaround
changelogs/1.4.md:- Implemented light population
changelogs/1.4.md:- Removed old revert flag from Player->processMovement()
changelogs/1.4.md:- Enabled batch block sending again
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No support for LevelDB worlds (0.9.0 format)
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-900
changelogs/1.4.md:- Global optimizations
changelogs/1.4.md:- New block/item creation and handling system
changelogs/1.4.md:- Multiple non-ordered hotbar slots
changelogs/1.4.md:- Added death animations
changelogs/1.4.md:- Updated RakLib: proper recovery queues and packet reordering
changelogs/1.4.md:- Experimental LevelDB worlds support
changelogs/1.4.md:- API 1.9.0
changelogs/1.4.md:- Added internal use warning for TaskHandler::cancel()
changelogs/1.4.md:- Implemented no damage ticks
changelogs/1.4.md:- Added Config->getNested(key) and Config->setNested(key, value)
changelogs/1.4.md:- Added HeightMap get/set methods on chunks, Level
changelogs/1.4.md:- Do not quiet error messages when parsing config files
changelogs/1.4.md:- Added Level->getFullBlock()
changelogs/1.4.md:- Added FullChunk->getFullBlock()
changelogs/1.4.md:- Added Chunk->getFullBlock()
changelogs/1.4.md:- Added ChunkSection->getFullBlock()
changelogs/1.4.md:- Deprecated FullChunk->getBlock()
changelogs/1.4.md:- Deprecated Chunk->getBlock()
changelogs/1.4.md:- Deprecated ChunkSection->getBlock()
changelogs/1.4.md:- Added trait autoloading
changelogs/1.4.md:- Fixed #2392
changelogs/1.4.md:- Fixed #2394
changelogs/1.4.md:- Allow $base in knockback() to be dynamic and getters/setters in EntityDamageByEntityEvent
changelogs/1.4.md:- Update documentation of PluginBase::getCommand() for IDEs' auto completion
changelogs/1.4.md:- Added default parameter to Config getters, implements #2398
changelogs/1.4.md:- Added optional parameter for multiple NBT read
changelogs/1.4.md:- Change last X/Y/Z/Yaw/Pitch on teleport
changelogs/1.4.md:- Added armor items and max stack size for them.
changelogs/1.4.md:- Force player setting their new position
changelogs/1.4.md:- Block creating and property handling rewrite
changelogs/1.4.md:- Fix CPU issue when starting without STDIN
changelogs/1.4.md:- Use squared distance on movement handling
changelogs/1.4.md:- Renamed old getID() calls to getId()
changelogs/1.4.md:- Improved Item property handling
changelogs/1.4.md:- Handle a hotbar queue to allow using more than the first slot (won't save order due to the protocol)
changelogs/1.4.md:- Collect unallocated chunks from the Level provider
changelogs/1.4.md:- Faster Level provider chunk unloading
changelogs/1.4.md:- Improved block reading
changelogs/1.4.md:- Created global block states array
changelogs/1.4.md:- Improved Level->getBlock() using block states
changelogs/1.4.md:- Improved Level->getBlock() for 64-bit systems
changelogs/1.4.md:- Better block creation on Level
changelogs/1.4.md:- Added Player death animations, improved spawning behavior to correct invisible players, fixed players getting stuck when dead, closes #2304
changelogs/1.4.md:- Replaced some instanceof to null checks
changelogs/1.4.md:- Fixed players not getting sound when they are harmed
changelogs/1.4.md:- Level optimization, added new chunk/block hashes
changelogs/1.4.md:- Optimized Liquid spreading, optimized light updates, improved side block get/update, fixed raw set not cleaning Block cache (TNT explosions)
changelogs/1.4.md:- Updated RakLib: Implemented packet reordering, fixed packet recovery in both sides, errors are now debug level, workarounds possible CPU-hog DoS attack over ACK/NACK packets
changelogs/1.4.md:- Changed some Entity move AABB calls
changelogs/1.4.md:- Snow layer recipe added: Fix for #2400
changelogs/1.4.md:- Added World Generation timings
changelogs/1.4.md:- Added experimental LevelDB support, fixed a few issues with NBT, spawning and Binary R/W
changelogs/1.4.md:- Fixed #2423
changelogs/1.4.md:- Added Double Plant block, fixes damage walking inside it.
changelogs/1.4.md:- Added Chest recreation on imported levels
changelogs/1.4.md:- Fixed possible memory leak when hiding players from each other
changelogs/1.4.md:- Fixed server.log created in two different places on path changed
changelogs/1.4.md:- Increased transaction timeout, not needed anymore due to packet ordering
changelogs/1.4.md:- Improved block breaking time and event handling
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4dev-916
changelogs/1.4.md:- New version format (drops the stage part)
changelogs/1.4.md:- Added automatic/manual IP blocking
changelogs/1.4.md:- Increased chunk defaults
changelogs/1.4.md:- Improved speed of several generation steps
changelogs/1.4.md:- Fixed some memory leaks on 32-bit hosts
changelogs/1.4.md:- Improved exception handling and trace creation
changelogs/1.4.md:- API 1.10.0
changelogs/1.4.md:- Changed RakLib network interface implementation
changelogs/1.4.md:- Bitmask block state
changelogs/1.4.md:- New version format
changelogs/1.4.md:- Possible workaround for some PHP bug related to resources and threads
changelogs/1.4.md:- Players won't take damage 60 ticks after spawning / respawning.
changelogs/1.4.md:- Fixed #2446
changelogs/1.4.md:- Added automatic/manual RakLib IP address, block addresses when exceptions are thrown
changelogs/1.4.md:- Move Query exceptions to debug level > 1
changelogs/1.4.md:- Block IP addresses on ban-ip
changelogs/1.4.md:- Added typehints to HelpCommand
changelogs/1.4.md:- Corrected fence crafting recipes, closes #2457
changelogs/1.4.md:- Improved Normal generator speed
changelogs/1.4.md:- Fixed memory leak issues on chunk generation under 32-bit hosts. Closes #2419, fixes #2308
changelogs/1.4.md:- Fixed issue with generated chunks not having a provider. Closes #2421
changelogs/1.4.md:- Higher chunk defaults
changelogs/1.4.md:- Improved Simplex 2D noise
changelogs/1.4.md:- Added chunk check on Level
changelogs/1.4.md:- Detect really big corrupted chunks, closes #2471
changelogs/1.4.md:- Improved exception handling and trace creation
changelogs/1.4.md:- Fixed players not calculating onGround correctly
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:This is the first stable build of PocketMine-MP 1.4. Lots of changes have happened since 1.3.12, and they won't be detailed here. You can find them on the release list here on GitHub.
changelogs/1.4.md:- New version format (drops the stage part)
changelogs/1.4.md:- Added automatic/manual IP blocking
changelogs/1.4.md:- Increased chunk defaults
changelogs/1.4.md:- Improved speed of several generation steps
changelogs/1.4.md:- Fixed some memory leaks on 32-bit hosts
changelogs/1.4.md:- Improved exception handling and trace creation
changelogs/1.4.md:- API 1.10.0
changelogs/1.4.md:- Changed RakLib network interface implementation
changelogs/1.4.md:- Bitmask block state
changelogs/1.4.md:- New version format
changelogs/1.4.md:- Possible workaround for some PHP bug related to resources and threads
changelogs/1.4.md:- Players won't take damage 60 ticks after spawning / respawning.
changelogs/1.4.md:- Fixed #2446
changelogs/1.4.md:- Added automatic/manual RakLib IP address, block addresses when exceptions are thrown
changelogs/1.4.md:- Move Query exceptions to debug level > 1
changelogs/1.4.md:- Block IP addresses on ban-ip
changelogs/1.4.md:- Added typehints to HelpCommand
changelogs/1.4.md:- Corrected fence crafting recipes, closes #2457
changelogs/1.4.md:- Improved Normal generator speed
changelogs/1.4.md:- Fixed memory leak issues on chunk generation under 32-bit hosts. Closes #2419, fixes #2308
changelogs/1.4.md:- Fixed issue with generated chunks not having a provider. Closes #2421
changelogs/1.4.md:- Higher chunk defaults
changelogs/1.4.md:- Improved Simplex 2D noise
changelogs/1.4.md:- Added chunk check on Level
changelogs/1.4.md:- Detect really big corrupted chunks, closes #2471
changelogs/1.4.md:- Improved exception handling and trace creation
changelogs/1.4.md:- Fixed players not calculating onGround correctly
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:# 1.4.1dev-936
changelogs/1.4.md:- Improved chunk saving and reduced world corruption
changelogs/1.4.md:- Fixed some strange crashes on broken systems
changelogs/1.4.md:- Improved movement and block placing
changelogs/1.4.md:- Automatic resource freeing on Region-based worlds
changelogs/1.4.md:- API 1.11.0
changelogs/1.4.md:- Added PlayerCreationEvent
changelogs/1.4.md:- Added Level->getChunks(), fixed some Doc Comments
changelogs/1.4.md:- Added Async Task crash warning
changelogs/1.4.md:- Fixed issue where plugins schedule a Player update before log in
changelogs/1.4.md:- Improved threading and resource usage, new defaults
changelogs/1.4.md:- Removed all @mkdir() calls
changelogs/1.4.md:- Catch exceptions on level generation
changelogs/1.4.md:- Fixed some crashes related to crashing
changelogs/1.4.md:- Fixed messages and default settings
changelogs/1.4.md:- Fixed #2488 Player suffocates when putting blocks to climb higher
changelogs/1.4.md:- Fixed #2489 Falling Sand drops as an item when not expected
changelogs/1.4.md:- Cleaned up BanEntry creation
changelogs/1.4.md:- Fixed phar check
changelogs/1.4.md:- Fixed visual typo in /ban-ip, closes #2503
changelogs/1.4.md:- Improved chunk saving times by not marking it as changed when Players are added/removed
changelogs/1.4.md:- Fixed #2511
changelogs/1.4.md:- Catch more corruption issues in Region-based worlds, fixed first chunk being generated on an invalid sector
changelogs/1.4.md:- Fixed Entities being placed in recreated chunks
changelogs/1.4.md:- Fixed Flat generator on existing chunks, region issues
changelogs/1.4.md:- Unload unused regions after 5 minutes
changelogs/1.4.md:- Improved file resource usage
changelogs/1.4.md:- Added GarbageCollectionTask, workaround for weird PHP behaviour when using --disable-ansi
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/1.4.md:- Improved chunk saving and reduced world corruption
changelogs/1.4.md:- Fixed some strange crashes on broken systems
changelogs/1.4.md:- Improved movement and block placing
changelogs/1.4.md:- Automatic resource freeing on Region-based worlds
changelogs/1.4.md:- Ignore spawn protection when no ops are set
changelogs/1.4.md:- Improved flight cheat protection
changelogs/1.4.md:- Fixed chunk corruptions
changelogs/1.4.md:- API 1.11.0
changelogs/1.4.md:- Added PlayerCreationEvent
changelogs/1.4.md:- Added Level->getChunks(), fixed some Doc Comments
changelogs/1.4.md:- Added Async Task crash warning
changelogs/1.4.md:- Fixed issue where plugins schedule a Player update before log in
changelogs/1.4.md:- Added new predictive flight protection
changelogs/1.4.md:- Added Location::__toString()
changelogs/1.4.md:- Added Entity->resetFallDistance()
changelogs/1.4.md:- Fixed #2619 BlockMetadataStore
changelogs/1.4.md:- Added Entity->fastMove() for players and direct-controlled entities
changelogs/1.4.md:- Implemented Threaded ClassLoader, improves class loading while on different threads (no need to synchronize states)
changelogs/1.4.md:- Allow plugins to cancel some kicks better, closes #2743
changelogs/1.4.md:- Improved threading and resource usage, new defaults
changelogs/1.4.md:- Removed all @mkdir() calls
changelogs/1.4.md:- Implemented proportional armor modifier, applied armor in other damage types and consume armor when player is damaged
changelogs/1.4.md:- Implemented hardcore banning, closes #2574
changelogs/1.4.md:- Implemented double chest fix, closes #2744, fixes #2493
changelogs/1.4.md:- Catch exceptions on level generation
changelogs/1.4.md:- Changed generator choosing logic, add proper preset if needed, fixes #2751
changelogs/1.4.md:- Fixed some crashes related to crashing
changelogs/1.4.md:- Fixed messages and default settings
changelogs/1.4.md:- Fixed #2488 Player suffocates when putting blocks to climb higher
changelogs/1.4.md:- Fixed #2489 Falling Sand drops as an item when not expected
changelogs/1.4.md:- Cleaned up BanEntry creation
changelogs/1.4.md:- Fixed phar check
changelogs/1.4.md:- Fixed visual typo in /ban-ip, closes #2503
changelogs/1.4.md:- Improved chunk saving times by not marking it as changed when Players are added/removed
changelogs/1.4.md:- Fixed #2511
changelogs/1.4.md:- Catch more corruption issues in Region-based worlds, fixed first chunk being generated on an invalid sector
changelogs/1.4.md:- Fixed Entities being placed in recreated chunks
changelogs/1.4.md:- Fixed Flat generator on existing chunks, region issues
changelogs/1.4.md:- Unload unused regions after 5 minutes
changelogs/1.4.md:- Improved file resource usage
changelogs/1.4.md:- Added GarbageCollectionTask, workaround for weird PHP behaviour when using --disable-ansi
changelogs/1.4.md:- Fixed /timings off
changelogs/1.4.md:- Fixed fences not showing up
changelogs/1.4.md:- Improved chunk ticking
changelogs/1.4.md:- Block saving chunks too big
changelogs/1.4.md:- Changed max speed per tick from 100 to 10 blocks
changelogs/1.4.md:- Added outdated event static properties
changelogs/1.4.md:- Allow placing Snow Layers on top of solid transparent blocks
changelogs/1.4.md:- Fixed PHPRC env. variable being set
changelogs/1.4.md:- Throw exception when RakLib crashes
changelogs/1.4.md:- Added rotation transformations to remaining packet
changelogs/1.4.md:- Fixed #2557
changelogs/1.4.md:- Fixed #2541 server not saving chunks on chunk unloading
changelogs/1.4.md:- Return on Level->getSafeSpawn() in case of invalid position
changelogs/1.4.md:- Fixed #2565
changelogs/1.4.md:- Falling sand will become block when in contact with a Liquid
changelogs/1.4.md:- Fixed Iron bar, Stonecutter drops
changelogs/1.4.md:- TallGrass blocks should be only placed on grass blocks
changelogs/1.4.md:- Fixed #2615
changelogs/1.4.md:- Fixed players getting kicked for flying when going through special blocks
changelogs/1.4.md:- Future workaround for #2626
changelogs/1.4.md:- Catch file saving exceptions
changelogs/1.4.md:- Added basic speed protection
changelogs/1.4.md:- Fixed Dark Oak Fence's name
changelogs/1.4.md:- Fixed #2762
changelogs/1.4.md:- Fixed Anvil lighting issues
changelogs/1.4.md:- Fix some Chunk corruption due to Chunk overlap
changelogs/1.4.md:- Fixed constructors, default memory to -1, default async generator
changelogs/1.4.md:- Fixed NBT IntArray off-by-one reading
changelogs/1.4.md:- Fixed falling sand breaking on full BB partial blocks, closes #2770
changelogs/1.4.md:- Entities / Entity AI
changelogs/1.4.md:- No conversion for old levels (will be added later)
changelogs/1.4.md:- No Minecarts
changelogs/1.4.md:- Not all items are implemented
changelogs/1.4.md:- Generated worlds use a basic generator
changelogs/3.4.md:- Entity `EXHAUSTION` attribute is no longer synced to the client, which reduces network traffic for survival players and reduces client-sided lag.
changelogs/3.4.md:- A redundant call was removed from an `Event` call hot path which improves event calling performance by ~15% per event handler executed.
changelogs/3.4.md:- Light updates are now batched together and executed on the end of each tick. The effects of this are noticeable when setting a large number of blocks in a close area - significant performance improvements should be noticeable for world editors (the ones that didn't disable light updates) and liquid flow is now significantly less expensive.
changelogs/3.4.md:- Internal enhancements have been made to subchunk light array interfacing to reduce branching and improve access performance.
changelogs/3.4.md:- Memory usage of most chunks has dropped by ~30-40% due to some improvements to internal storage of unlit subchunks. In real terms this translates to ~30% memory usage reduction for a freshly generated world.
changelogs/3.4.md:- Throwing **unexpected** `Throwable`s in the following cases will now cause a server crash (except on network (this will be changed in the future)):
changelogs/3.4.md:  - Event handlers
changelogs/3.4.md:  - `Task->onRun()` on a scheduler
changelogs/3.4.md:  - `AsyncTask->onCompletion()`
changelogs/3.4.md:  - `Command->execute()` and `CommandExecutor->onCommand()`
changelogs/3.4.md:- Unexpected `Throwable`s thrown during packet handling will now cause the target player to be disconnected with an `Internal server error` message.
changelogs/3.4.md:- Anti-flight has been removed, along with the `allow-flight` directive in `server.properties`.
changelogs/3.4.md:- Server language is now controlled by the `language` directive in `server.properties`.
changelogs/3.4.md:- Added `unban` and `unban-ip` as aliases of `pardon` and `pardon-ip` commands respectively.
changelogs/3.4.md:- `BlockSpreadEvent` is now fired when lava or water tries to flow into a block.
changelogs/3.4.md:- `BlockFormEvent` is now fired when lava and water collide to form cobblestone, obsidian or stone.
changelogs/3.4.md:- Added new method `Event->call()`. This should be used instead of `PluginManager->callEvent()` in plugins only supporting 3.4+.
changelogs/3.4.md:- `PluginManager->callEvent()` has been `@deprecated`.
changelogs/3.4.md:- Attempting to unload a level during its tick will now throw an `InvalidStateException`.
changelogs/3.4.md:- Added the following new methods:
changelogs/3.4.md:  - `Level->broadcastPacketToViewers()`
changelogs/3.4.md:  - `Level->getViewersForPosition()`
changelogs/3.4.md:  - `Level->broadcastGlobalPacket()`
changelogs/3.4.md:  - `Level->getChunkAtPosition()`
changelogs/3.4.md:  - `Level->isInLoadedTerrain()`
changelogs/3.4.md:- `Level->addGlobalPacket()` has been `@deprecated`.
changelogs/3.4.md:- `LightUpdate` now allows calling `setAndUpdateLight()` for the same position multiple times (needed for light update batching).
changelogs/3.4.md:- `Permission::getByName()` now throws an exception on invalid values instead of silently returning `DEFAULT_FALSE`. This may cause new errors to appear if your plugins had broken permission defaults in `plugin.yml`.
changelogs/3.4.md:- `addWindow()` now has stricter validity checks and will now throw exceptions in the following cases: No window IDs left to use, and when a forced window ID collides with an existing window.
changelogs/3.4.md:- The public `$speed` field has been removed (this was only used by anti-cheat which has now been removed).
changelogs/3.4.md:- `AsyncTask->setResult()` has had the `$serialize` parameter removed - now it will automatically serialize (or not) as appropriate.
changelogs/3.4.md:- Added a new `ClosureTask` which allows concisely scheduling closure execution on a `TaskScheduler`.
changelogs/3.4.md:- `TaskScheduler->__construct()` `$logger` parameter has been `@deprecated` and will be removed in a future major version.
changelogs/3.4.md:- Added new method `Server->hasOfflinePlayerData(string $name) : bool`.
changelogs/3.4.md:- `Server->getAllowFlight()` has been `@deprecated`.
changelogs/3.4.md:- `Config->save()` will no longer catch unexpected exceptions thrown while encoding data.
changelogs/3.4.md:- Rail connectivity has been implemented for normal, powered, detector and activator rails (but there are currently no minecarts).
changelogs/3.4.md:- Updated crashdump format to be compatible with newest CA. This version or newer is required if you want to be able to submit crashdumps to crash.pmmp.io.
changelogs/3.4.md:- `DataPacket` errors when writing to undefined fields are now more clear.
changelogs/3.4.md:- Fixed trees being able to overwrite the log parts of other trees.
changelogs/3.4.md:- Fixed `Player->sendForm()` not working during `PlayerJoinEvent`.
changelogs/3.4.md:- `Entity->setScale()` now explicitly requires a scale larger than 0.
changelogs/3.4.md:- Adding invisible `FloatingTextParticle` to a level no longer causes an error.
changelogs/3.4.md:- Fixed burning TNT setting hurt entities on fire when exploding.
changelogs/3.4.md:- `~` relative coordinates now work in the `/particle` command.
changelogs/3.4.md:- Various boring fixes to error stack trace reporting.
changelogs/3.4.md:- `Level->setChunk()` no longer deletes tiles and entities when replacing a chunk with itself.
changelogs/3.4.md:- Fixed a generator race condition causing rare appearances of half-trees on the client in freshly generated terrain.
changelogs/3.4.md:- `Attribute->resetToDefault()` now fits the default per the min/max bounds, fixing crashes when the bounds are changed to exclude the default.
changelogs/3.4.md:- Fixed a crash with LevelDB worlds when the `TAG_2D_MAPS` tag is missing.
changelogs/3.4.md:- Fixed `Utils::getCoreCount()` crashing on some Debian variants.
changelogs/3.0.md:This release is the first to use the new merged versioning system. The PocketMine-MP version and the API version are now one and the same.
changelogs/3.0.md:- This release introduces a new dependency library called `Snooze`, which PocketMine-MP utilizes for managing notifications between threads. This library is currently utilized by command reading, RCON and RakLib, allowing faster response times to commands, reduced network latency, and better performance due to lack of need for polling.
changelogs/3.0.md:- Fixed race condition causing `ServerKiller` to sometimes kill the server for no reason on shutdown.
changelogs/3.0.md:- [`pocketmine/raklib` `^0.12.0`](https://github.com/pmmp/RakLib/releases/0.12.0)
changelogs/3.0.md:- [`pocketmine/spl` `^0.3.0`](https://github.com/pmmp/SPL/releases/0.3.0)
changelogs/3.0.md:- [`pocketmine/binaryutils` `^0.1.0`](https://github.com/pmmp/BinaryUtils/releases/0.1.0)
changelogs/3.0.md:- [`pocketmine/nbt` `^0.2.0`](https://github.com/pmmp/NBT/releases/0.2.0)
changelogs/3.0.md:- [`pocketmine/math` `^0.2.0`](https://github.com/pmmp/Math/releases/0.2.0)
changelogs/3.0.md:- [`pocketmine/snooze` `^0.1.0`](https://github.com/pmmp/Snooze/releases/0.1.0)
changelogs/3.0.md:- Async workers are now started dynamically when they are needed only, instead of being started immediately on startup. This allows reducing idle memory usage.
changelogs/3.0.md:- AsyncPool now appropriately shuts down the workers when instructed to, instead of leaving it up to the ThreadManager to clean it up. This eliminates debug messages of shutting down async workers on server shutdown.
changelogs/3.0.md:- Default maximum async worker memory limit has been lowered from 1024MB to 256MB.
changelogs/3.0.md:- Async workers are now started using the options `PTHREADS_INHERIT_CONSTANTS | PTHREADS_INHERIT_INI`, which reduces idle memory wastage and works around some bugs in pthreads.
changelogs/3.0.md:- Fixed entities not being despawned when flagged, if they weren't scheduled for an update.
changelogs/3.0.md:- Seed handling is now always consistent between `pocketmine.yml` and `server.properties`.
changelogs/3.0.md:- Fixed generation bugs in imported LevelDB worlds where the classpath was saved into level.dat.
changelogs/3.0.md:- Generators for levels are no longer created on the main thread, reducing memory usage.
changelogs/3.0.md:- Plugin data is now stored under `<data dir>/plugin_data` by default on new installations, instead of in `<plugins dir>`. This behaviour does not affect existing installations by default - if you want to enable it, set `plugins.legacy-data-dir` to `false` in `pocketmine.yml`.
changelogs/3.0.md:- Now event-driven (using Snooze) instead of poll-based, improving performance.
changelogs/3.0.md:- Fixed segmentation fault when stopping the server with RCON enabled.
changelogs/3.0.md:The way that the API versioning is done has changed. Now the API version is synonymous with the PocketMine-MP version.
changelogs/3.0.md:- Take the base version, and strip any metadata (everything after the `+` sign, for example `3.0.0+dev.1191` becomes `3.0.0`).
changelogs/3.0.md:- Assert that:
changelogs/3.0.md:  - The major versions is the same
changelogs/3.0.md:  - The server's minor version is greater than or equal to the plugin's
changelogs/3.0.md:  - The server's patch version is greater than or equal to the plugin's
changelogs/3.0.md:- `Server->getCodename()` and `\pocketmine\CODENAME` have been removed.
changelogs/3.0.md:- Added API method `Server->getTickSleeper()`, which returns a `\pocketmine\snooze\SleeperHandler` instance.
changelogs/3.0.md:- `Server->getIp()` now returns `0.0.0.0` if not set.
changelogs/3.0.md:- Added `Block->getXpDropForTool()`.
changelogs/3.0.md:- Calling `scheduleUpdate()` on an `Entity` after it has been `close()`d will now cause an exception to be thrown.
changelogs/3.0.md:- `Entity->motionX`, `Entity->motionY` `Entity->motionZ` have been removed in favour of an `Entity->motion` `Vector3` field. This also applies for the `lastMotion` fields.
changelogs/3.0.md:- `Entity->isInsideOfWater()` has been renamed to `isUnderwater()`.
changelogs/3.0.md:- Added support for `@softDepend` annotation on event handlers, which allows the event handler to not be registered if the dependency plugin is not loaded.
changelogs/3.0.md:- Added support for `@notHandler` annotation for `Listener` methods to indicate that such methods are not event handlers.
changelogs/3.0.md:- Typehints have been applied to the events API to PHP 7.2 standards.
changelogs/3.0.md:- Fixed preventing effect expiry using `EntityEffectRemoveEvent` not being reflected on the client.
changelogs/3.0.md:- `EntityDamageEvent` API has significant changes. The general purpose of this is to split up base damage from modifiers.
changelogs/3.0.md:  - Added methods `getBaseDamage()`, `setBaseDamage()`, `getOriginalBaseDamage()`, `getModifiers()`, `getOriginalModifiers()`
changelogs/3.0.md:  - `setDamage()` renamed to `setModifier()`, and type parameter is now mandatory
changelogs/3.0.md:  - `getDamage()` renamed to `getModifier()`, and type parameter is now mandatory
changelogs/3.0.md:  - `getOriginalDamage()` renamed to `getOriginalModifier()`, and type parameter is now mandatory
changelogs/3.0.md:  - Removed `MODIFIER_BASE` constant
changelogs/3.0.md:  - Constructors now accept: `float baseDamage`, `float[] modifiers` instead of just `float[] modifiers`
changelogs/3.0.md:- Added `BlockBreakEvent->getXpDropAmount()` and `BlockBreakEvent->setXpDropAmount()`.
changelogs/3.0.md:- `InventoryTransaction->getCreationTime()` has been removed.
changelogs/3.0.md:- `EntityInventoryChangeEvent` and `EntityArmorChangeEvent` are no longer fired during entity inventory intialization.
changelogs/3.0.md:- Methods `isPickaxe()`, `isAxe()`, `isSword()`, `isShovel()`, `isHoe()`, `isShears()` have been removed. These should be replaced with `instanceof` checks for the relevant classes.
changelogs/3.0.md:- Removed `Item->useOn()`. This has been superseded by new methods used for handling durability changes.
changelogs/3.0.md:- Added hooks `Item->onDestroyBlock()` and `Item->onAttackEntity()`. These are called when a player uses the item to destroy a block or attack an entity respectively. This is used in the core code for updating durability.
changelogs/3.0.md:- `Item->pop()` now accepts an optional count parameter.
changelogs/3.0.md:- `Enchantment` now has separated primary items (which can be enchanted directly) and secondary items (which can be enchanted on an anvil). The constructor of `Enchantment` has been updated to reflect this.
changelogs/3.0.md:  - Removed `Enchantment->getSlot()` and `Enchantment->hasSlot()`.
changelogs/3.0.md:  - Added `Enchantment->getPrimaryItemFlags()`, `Enchantment->hasPrimaryItemFlag()`, `Enchantment->getSecondaryItemFlags()` and `Enchantment->hasSecondaryItemFlag()`
changelogs/3.0.md:- `Biome` classes have been moved to `pocketmine\level\biome` namespace. This is in preparation for future work on Levels which requires biome information (such as weather conditions).
changelogs/3.0.md:- `WeakPosition` has been removed.
changelogs/3.0.md:- Added `Level->getBiome()`.
changelogs/3.0.md:- `Level->getSafeSpawn()` now always returns a `Position` instance.
changelogs/3.0.md:- `Level->getBlockExtraData()` and `Level->setBlockExtraData()` have been removed (as well as their associated `Chunk` methods).
changelogs/3.0.md:- `ChunkManager->isInWorld()` now accepts integers instead of floats.
changelogs/3.0.md:- Added `SubChunkIteratorManager->invalidate()`.
changelogs/3.0.md:- `BiomeSelector` has been refactored to make it simpler and more robust.
changelogs/3.0.md:- Generator-management methods `registerDefaultGenerators()`, `addGenerator()`, `getGeneratorList()`, `getGenerator()`, and `getGeneratorName()` have been moved from `Generator` to a new `GeneratorManager` class.
changelogs/3.0.md:- Static noise functions in the `Generator` base class have been moved to `Noise` instance methods.
changelogs/3.0.md:- Added static method `Generator::convertSeed()`, which converts an int or string into a numeric seed for generation.
changelogs/3.0.md:- `SourceInterface->process()` no longer returns a value.
changelogs/3.0.md:- `PluginBase->getResources()` now returns an associative array where the index is the path to the resource relative to the plugin's `resources` directory.
changelogs/3.0.md:- `PluginLoader`s have been almost completely rewritten to make them simpler and more robust.
changelogs/3.0.md:  - `PluginManager->registerInterface()` does not return anything, and now accepts a `PluginLoader` instance instead of a `string`.
changelogs/3.0.md:  - `PluginLoader`:
changelogs/3.0.md:    - `getPluginFilters()`, `enablePlugin()` and `disablePlugin()` are removed.
changelogs/3.0.md:    - `loadPlugin()` responsibilities are now solely confined to doing whatever is necessary to make the plugin's classes visible by the server, and does not emit log messages or check for data directories.
changelogs/3.0.md:    - Added method `getAccessProtocol()` which determines what prefix to apply to the plugin path to access the files inside it (for example `phar://`).
changelogs/3.0.md:  - `PluginBase->init()` and `PluginBase->isInitialized()` have been removed.
changelogs/3.0.md:  - `Plugin` interface now declares a signature for the constructor which implementations must comply with.
changelogs/3.0.md:  - `Plugin` interface now declares `setEnabled()`.
changelogs/3.0.md:- It is now possible to create a custom `Plugin` implementation without requiring a custom `PluginLoader`.
changelogs/3.0.md:- Removed `Server->getScheduler()`. All plugins now have their own scheduler which is accessible using `Plugin->getScheduler()`. Aside from being syntactically more concise and pleasant, this also allows much more effective management of tasks when plugins are disabled.
changelogs/3.0.md:- Removed `PluginTask` class, because it's now unnecessary. Previously it was required to allow the server to delete tasks associated with a plugin when the plugin was disabled. With plugin-owned schedulers, this is no longer a requirement. Plugins may now utilize the `Task` class as a base if they like.
changelogs/3.0.md:- Added `Server->getAsyncPool()`. Since the global scheduler does not exist any more, it does not manage the server's `AsyncPool` any more. Additionally, `ServerScheduler` was previously bloated by a lot of `AsyncTask` related methods, which are now not necessary because direct access to `AsyncPool` is granted instead.
changelogs/3.0.md:- `ServerScheduler`:
changelogs/3.0.md:  - `ServerScheduler` has been renamed to `TaskScheduler` since it is now a general-purpose task scheduler which is non-dependent on the user. This allows much greater flexibility and also makes it possible to unit-test.
changelogs/3.0.md:  - All `AsyncTask`/`AsyncPool` related methods have been removed - the task scheduler does not manage the async pool anymore.
changelogs/3.0.md:    - Calls to `Server->getScheduler()->scheduleAsyncTask()` should be replaced with `Server->getAsyncPool()->submitTask()`.
changelogs/3.0.md:    - Calls to `Server->getScheduler()->scheduleAsyncTaskToWorker()` should be replaced with and `Server->getAsyncPool()->submitTaskToWorker()`.
changelogs/3.0.md:- Calling `scheduleUpdate()` on a `Tile` after it has been `close()`d will now cause an exception to be thrown.
changelogs/3.0.md:- Tile NBT is now ephemeral and is not retained after creating the tile.
changelogs/3.0.md:  - `Tile->namedtag` has been removed.
changelogs/3.0.md:  - `Tile->saveNBT()` now returns a new `CompoundTag` containing saved data.
changelogs/3.0.md:  - Added new protected methods `Tile->readSaveData()` and `Tile->writeSaveData()`. These should be overridden to add or read tile-specific data, instead of overriding `saveNBT()` and `__construct()`.
changelogs/3.0.md:- Added `MainLogger->getFormat()` and `MainLogger->setFormat()` to allow manipulating console output format.
changelogs/3.0.md:- Fixed a range of block collision issues stemming from off-by-one errors when fetching areas.
changelogs/3.0.md:- Fixed a crash which occurred when leaving a bed which was broken and replaced during sleep.
changelogs/3.0.md:- Fixed dark oak and acacia saplings growing into oak trees - now they will not grow at all (they need to be implemented).
changelogs/3.0.md:- Saplings now take light level into account when trying to grow.
changelogs/3.0.md:- Ores and other blocks now drop experience when broken with an appropriate tool.
changelogs/3.0.md:- Fixed dropped items not being correctly destroyed by fire, cacti and other damage sources.
changelogs/3.0.md:- Grass no longer generates as the top layer of ground cover in river biomes.
changelogs/3.0.md:- Ocean biomes now use gravel instead of grass+dirt for ground cover.
changelogs/3.0.md:- Reduced maximum elevation of plains biomes to make them less bumpy.
changelogs/3.0.md:- Snow layers and other can-be-flowed-into blocks no longer generate underwater.
changelogs/3.0.md:- Buckets are no longer able to delete any block by replacing it with water.
changelogs/3.0.md:- Dried Kelp, Bleach, Nautilus Shell and Heart of the Sea items are registered (although crafting recipes for these are not yet available).
changelogs/3.0.md:- Implemented `Vanishing` enchantment.
changelogs/3.0.md:- Implemented Totems.
changelogs/3.0.md:- Fixed explosions sometimes leaving behind air blocks with non-zero damage values.
changelogs/3.0.md:- Fixed error when players move things around in the crafting grid after plugins cancel `PlayerInteractEvent` on crafting tables.
changelogs/3.0.md:- Fixed memory dumps not showing private properties of parent classes.
changelogs/3.0.md:- Fixed a memory leak when cancelling all tasks in the `TaskScheduler`.
changelogs/3.0.md:- Fixed scheduled task timings showing `Unknown` as the plugin name.
changelogs/3.0.md:- Fixed possible crash in Sign when placed by a plugin.
changelogs/3.0.md:- Fixed slightly-damaged and very-damaged anvils dropping incorrect items.
changelogs/3.0.md:- `Living->applyPostDamageEffects()` is no longer called if the mob died from an attack.
changelogs/3.0.md:- Cooldown for mob attack is now reset prior to applying post-damage effects.
changelogs/3.0.md:- Added constant `ItemIds::MUTTON` to resolve crashes using PC worlds.
changelogs/3.0.md:- Fixed emerald ore not dropping XP when broken with a valid tool.
changelogs/3.0.md:- Fixed mobs getting crazy vertical knockback if attacked while airborne.
changelogs/3.0.md:- Fixed XP orbs continuing to follow dead players.
changelogs/3.0.md:- Fixed RCON spamming the console when a client does not disconnect correctly.
changelogs/3.0.md:- Fixed dropping chunk cache unnecessarily when no blocks need to be updated on a chunk.
changelogs/3.0.md:- Fixed outdated block updates getting sent on chunks replaced using `setBlock()`.
changelogs/3.0.md:- Fixed not being able to place blocks where a player died and has not yet respawned (#2265).
changelogs/3.0.md:- Fixed mob death animation not being played when `Entity->kill()` is called directly or `/kill` is used.
changelogs/3.0.md:- Fixed viewers of different halves of double chests not seeing changes made by viewers who opened the other half (#2261).
changelogs/3.0.md:- Fixed bugs setting items into wrong indexes when double chest halves have differently sized inventories.
changelogs/3.0.md:- Fixed `getConfig()` crashing when called when the plugin's data directory doesn't exist.
changelogs/3.0.md:- Fixed a possible exploit with keychain signing for XBL login.
changelogs/3.0.md:- Fixed invalid keys in `.properties` config files being considered as invalid strings.
changelogs/3.0.md:- Fixed whitespace between key and value `key = value` being invalid in `.properties` config files.
changelogs/3.0.md:- Fixed a bug in exception message when an invalid permission type is written for a command in plugin.yml.
changelogs/3.0.md:- Properly fixed newline issues when parsing event handler annotations - `@notHandler` will now work as expected when CRLF line endings are used.
changelogs/3.0.md:- Fixed `PluginManager->registerEvents()` registering functions as event handlers declared by parent classes which are not `Listener` instances (#2293).
changelogs/3.0.md:- Fixed setting spawn points in un-generated chunks causing the player to fall out of the world.
changelogs/3.0.md:- Fixed spawn protection deactivating when there are no ops set (this was an unwanted/unexpected feature, so it's considered a bug).
changelogs/3.0.md:- Fixed cursor items not getting dropped when closing the inventory or dying.
changelogs/3.0.md:- Fixed more issues with blocks with invalid metadata appearing as update! blocks.
changelogs/3.0.md:- `Entity->setNameTagAlwaysVisible()` now works (although nametags will still not be shown if the entity is invisible, due to a behavioural change in Minecraft PE).
changelogs/3.0.md:- Fixed errors passing zero motions to projectiles in some cases.
changelogs/3.0.md:- Fixed player on-ground state not updating when moving horizontally. This allowed fly hacks with the built in anti-cheat, and also affected some third party anti-cheat plugins due to the effect on `inAirTicks`.
changelogs/3.0.md:- Fixed knockback. PC 1.9-style knockback was mistakenly introduced in 3.0.3. This has now been reverted back to the old 1.8-style behaviour.
changelogs/3.0.md:- Cleaned up odd behaviour of `/kill` due to old broken code.
changelogs/3.0.md:- Fixed patch level check for plugin APIs not allowing lesser patch versions on greater minor versions.
changelogs/3.0.md:- Fixed `/timings paste`. This now reports directly to the timings host instead of using Ubuntu Pastebin.
changelogs/3.0.md:- Minor code cleanups in various places.
changelogs/3.0.md:- Zip resource packs will now give slightly less useless errors - errors for broken manifest have been separated from those with fields missing, and now reports why decoding failed if it failed.
changelogs/3.0.md:- Syntax error crashdumps will no longer be reported to the crash archive.
changelogs/3.0.md:- Chunk sending is now fault-tolerant. Before this release, any error on a worker during async chunk sending (such as memory errors caused by pthreads) would cause that chunk to never get sent, resulting in invisible and missing chunks. Levels will now attempt to retry chunk prepare when a task crashes, which should fix most invisible chunk bugs.
changelogs/3.0.md:- `MainLogger` now logs exception stack traces in a synchronized block to ensure that they are coherent when log messages are emitted from multiple threads at once.
changelogs/3.0.md:- `AsyncTask->isCrashed()` now returns `true` if a fatal error occurred during the task execution.
changelogs/3.0.md:- `DropItemAction` will now consider itself invalid if attempting to drop a null item.
changelogs/3.0.md:- Fixed leaking globally broadcasted Level packets when no players are on the server.
changelogs/3.0.md:- Fixed title bar not being cleared on server stop on some terminals.
changelogs/3.0.md:- Fixed `FallingBlock` saving corrupted data.
changelogs/3.0.md:- Fixed the structure of `GuiDataPickItemPacket`.
changelogs/3.0.md:- Cleaned up some code in `OfflinePlayer`.
changelogs/3.0.md:- Splash potions no longer apply effects to dead (but not yet respawned) players.
changelogs/3.0.md:- Coal ore no longer drops XP when mined with a silk touch tool.
changelogs/3.0.md:- Item entities now cannot be picked up when a negative pickup delay is used.
changelogs/3.0.md:- `Config` keys which are considered bools by YAML 1.1 will no longer be transformed into 1 or 0.
changelogs/3.0.md:- Fixed painting motives not getting saved.
changelogs/3.0.md:- Fixed cacti spewing items when placed in some invalid locations.
changelogs/3.0.md:- Fixed entity fire damage not applying in the void.
changelogs/3.0.md:- Fixed entities not getting updated appropriately in some conditions.
changelogs/3.10.md:**WARNING: If your plugin uses the protocol, you're not shielded by API change constraints.** You should consider using the `mcpe-protocol` directive in `plugin.yml` as a constraint if you do.
changelogs/3.10.md:- Added support for Minecraft: Bedrock Edition 1.13.0
changelogs/3.10.md:- Removed compatibility with 1.12.0
changelogs/3.10.md:PocketMine-MP **does not support skins made in the Charactor Creator** (known as Persona skins), due to technical changes which would require premature backwards compatibility breaks. The dev team has decided not to support Persona yet.
changelogs/3.10.md:These skins will be **replaced with a random solid-colour skin. This is not a bug.**
changelogs/3.10.md:- Fixed custom plugin-created skins being invisible when no geometry name was specified.
changelogs/3.10.md:- Updated RakLib to 0.12.6 to fix security bugs.
changelogs/3.17.md:**WARNING: If your plugin uses the protocol, you're not shielded by API change constraints.** You should consider using the `mcpe-protocol` directive in `plugin.yml` as a constraint if you do.
changelogs/3.17.md:- Added support for Minecraft: Bedrock Edition 1.16.200.
changelogs/3.17.md:- Removed compatibility with earlier versions.
changelogs/3.17.md:- Walls don't connect to each other
changelogs/3.17.md:- Pumpkin and melon stems may not connect to their corresponding pumpkin/melon
changelogs/3.17.md:- New blocks, items & mobs aren't implemented
changelogs/3.17.md:- Nether doesn't exist
changelogs/3.17.md:- Fixed some instances of plugin-caused crashes not being detected (eval()'d code, custom plugin paths).
changelogs/3.17.md:- Server uptime is now included in crash reports.
changelogs/3.17.md:- Hoes now take damage when used to break sponges.
changelogs/3.17.md:- Using lava as fuel in a furnace now leaves behind an empty bucket.
changelogs/3.17.md:- Fixed region header corruption when chunks with larger-than-expected lengths are found. These chunks are now treated as corrupted, instead of automatically attempting to salvage them (which usually fails anyway).
changelogs/3.17.md:- `RegionLoader->removeChunk()` now allows the space used by the removed chunk to be reused by future region saves.
changelogs/3.17.md:- Extracted `Living->applyConsumptionResults()` from `Living->consumeObject()` (preparation for a future bug fix).
changelogs/3.17.md:- Improved performance of chunk loading in Region-based worlds.
changelogs/3.17.md:- Improved performance of region header validation in Region-based worlds (indirect improvement to chunk loading performance).
changelogs/3.17.md:- Fixed some PHP 8.0 language-level compatibility issues.
changelogs/3.17.md:- Source installations will now exit with an error when Composer dependencies are not in sync with the current Git revision. Now, it's required to run `composer install` after every git pull to make sure the correct dependency versions are installed.
changelogs/3.17.md:- Removed `readline` support. This hasn't been maintained for many years, never worked correctly, and isn't thread-safe in any case.
changelogs/3.17.md:- Fixed false-positives of region corruption in Region-based worlds (outdated file stat cache).
changelogs/3.17.md:- Fixed more deprecation warnings on PHP 8.0 (optional parameter before required).
changelogs/3.17.md:- `CraftItemEvent->getInputs()` now returns a list starting at offset 0, instead of random offsets. (Note that the contents still won't be ordered.)
changelogs/3.17.md:- `CraftItemEvent->getOutputs()` now returns a list starting at offset 0, instead of random offsets. (Note that the contents still won't be ordered.)
changelogs/3.17.md:- Fixed a bug that broke synchronized building, bridging, towering and more.
changelogs/3.17.md:- Objects in memory dumps no longer show inherited properties multiple times.
changelogs/3.5.md:- Compatibility with Minecraft: Bedrock Edition 1.8.0
changelogs/3.5.md:- Removed compatibility with 1.7.0
changelogs/3.5.md:- Fixed internal server errors when attempting to craft.
changelogs/3.5.md:- `DataPacket` errors when writing to undefined fields are now more clear.
changelogs/3.5.md:- Fixed trees being able to overwrite the log parts of other trees.
changelogs/3.5.md:- Fixed `Player->sendForm()` not working during `PlayerJoinEvent`.
changelogs/3.5.md:- `Entity->setScale()` now explicitly requires a scale larger than 0.
changelogs/3.5.md:- Adding invisible `FloatingTextParticle` to a level no longer causes an error.
changelogs/3.5.md:- Updated some misc protocol magic numbers.
changelogs/3.5.md:- Fixed burning TNT setting hurt entities on fire when exploding.
changelogs/3.5.md:- `~` relative coordinates now work in the `/particle` command.
changelogs/3.5.md:- Various boring fixes to error stack trace reporting.
changelogs/3.5.md:- `Level->setChunk()` no longer deletes tiles and entities when replacing a chunk with itself.
changelogs/3.5.md:- Fixed a generator race condition causing rare appearances of half-trees on the client in freshly generated terrain.
changelogs/3.5.md:- `Attribute->resetToDefault()` now fits the default per the min/max bounds, fixing crashes when the bounds are changed to exclude the default.
changelogs/3.5.md:- Fixed a crash with LevelDB worlds when the `TAG_2D_MAPS` tag is missing.
changelogs/3.5.md:- Fixed `Utils::getCoreCount()` crashing on some Debian variants.
changelogs/3.5.md:- Rewritten documentation of `PlayerPreLoginEvent`, `PlayerLoginEvent` and `PlayerJoinEvent`. They are now much more detailed and no longer misleading.
changelogs/3.5.md:- Chest items block-picked from double chests will no longer place chests that crash the server when opened.
changelogs/3.5.md:- Ender chests now make the correct sounds when opening and closing.
changelogs/3.5.md:- Fixed Sign errors when a buggy or malicious client sent broken NBT with the wrong tags or wrong number of lines.
changelogs/3.5.md:- Resource packs with comments in the manifest will now load correctly. (MOJANG!!!)
changelogs/3.5.md:- Placement of unknown blocks is now disallowed. This solves a range of problems with invalid blocks in the world, such as #2260 .
changelogs/3.5.md:- Errors thrown during `PlayerQuitEvent` or other `Player->close()` errors will now crash the server instead of causing cryptic bugs later on.
changelogs/3.5.md:- Fixed large chunks (>= 1044476 bytes) becoming corrupted when saved in Region-based worlds - now an exception is thrown instead.
changelogs/3.5.md:- Reduced the range of exceptions caught during chunk loading. Now, only chunk corruption errors are caught, and anything else will produce a crash.
changelogs/3.5.md:- Removed catch-all block on chunk saving. Unexpected errors thrown during chunk save will now create a crash.
changelogs/3.5.md:- Fixed some asserts in packet decode methods.
changelogs/3.5.md:- `Attribute` now throws exceptions with more informative messages on errors.
changelogs/3.5.md:- Properly handled some remaining `Uninitialized string offset` bugs when decoding packets.
changelogs/3.5.md:- Fixed chunk updates taking several seconds to show up on the client. This bug was most apparent during generation and some world editing tools using asynchronous tasks.
changelogs/3.5.md:- Fixed CPU waste ordering chunks for non-moving players.
changelogs/3.5.md:- Fixed server crash when a block update occurs on a torch with corrupted metadata.
changelogs/3.5.md:- Added a hack to mitigate client-side right-click spam bug. This mostly eliminates spam of `PlayerInteractEvent` on right-click.
changelogs/3.5.md:- Players will no longer see commands they don't have permission to use in client-sided hints when typing a `/` in the chat window.
changelogs/3.5.md:- `Event->isCancelled()` and `Event->setCancelled()` now throw more informative errors.
changelogs/3.5.md:- Errors thrown during a network interface processing will now _actually_ crash the server.
changelogs/3.5.md:- Deprecated `NetworkInterfaceCrashEvent`. Nobody should have been using this anyway.
changelogs/3.5.md:- Deprecated `Network->processInterface()`
changelogs/3.5.md:- Deprecated `SourceInterface->emergencyShutdown()`
changelogs/3.5.md:- Mobs no longer spawn with their heads facing a different direction to their bodies.
changelogs/3.5.md:- Added a console message when the crash strangler sleeps to stop crash spam.
changelogs/3.5.md:- Fixed crash in `/title` command `times` subcommand when not enough arguments were passed.
changelogs/3.5.md:- AsyncWorkers will now not be shut down on GC unless they have not been used for the last 5 minutes. This reduces lag spikes on garbage collection.
changelogs/3.5.md:- Fixed some unhandled error cases in `AddEntityPacket` encoding.
changelogs/3.5.md:- Fixed `LogicException` descendents being thrown from some packet decoding methods when encountering bad userdata.
changelogs/3.5.md:- Player network inventory transaction processing now catches more specific errors.
changelogs/3.5.md:- Fixed missing decode for `TakeItemEntityPacket`.
changelogs/3.5.md:- Fixed `/gc` and `/status` truncating memory statistics - now they report to 0.01 precision.
changelogs/3.5.md:- Global functions and constants are now imported to improve performance.
changelogs/3.5.md:- Fixed a typo in `pocketmine.command.op.take` description.
changelogs/3.5.md:- Ice no longer creates water when a creative player breaks it.
changelogs/3.5.md:- `spawn-mobs` and `spawn-animals` no longer appear in generated `server.properties` on a newly-installed server.
changelogs/3.5.md:- Added a hack to disable pre-spawn client-sided movement.
changelogs/3.5.md:- Assertions enabled warning now always shows when `zend.assertions` is not `-1`. The config option to disable this warning has been removed.
changelogs/3.5.md:- `/status`,`/dumpmemory` and `/gc` are now enabled by default. The `debug.commands` config option has been removed.
changelogs/3.5.md:- Crash dumps are now more thorough at catching plugin-related crashes.
changelogs/3.5.md:- Fixed `#`-commenting properties in `.properties` files not working.
changelogs/3.5.md:- `pocketmine.yml` now permits writing `worldname:` with no generation settings in the `worlds` section to force a world to be loaded.
changelogs/3.5.md:- Fixed Bow force being too low - now it's consistent with Minecraft Java (but not with Bedrock due to a vanilla bug).
changelogs/3.5.md:- Fixed `recursion detected` bug when encoding crashdumps in some cases.
changelogs/3.5.md:- Items with too-large NBT tags on network will now have their tags ignored when sending over network, instead of crashing the server. This is a workaround for a protocol bug which will be addressed in a future Minecraft release.
changelogs/3.5.md:- `/enchant` no longer crashes the server when out-of-bounds enchantment levels are used.
changelogs/3.5.md:- Fixed some crashes loading Region-based worlds when encountering unexpected EOF.
changelogs/3.5.md:- `Entity->fireTicks` is now protected (but accessible by magic method for BC purposes) and will now throw an exception when written to if the value is > 32767 or < 0.
changelogs/3.5.md:- Fixed Signs asserting on corrupted world data with more than 4 lines of text per sign.
changelogs/3.5.md:- Fixed several bugs in RCON packet receive that would allow an attacker to block or crash the RCON thread, denying service to other legitimate RCON clients.
changelogs/3.5.md:- Fixed RCON connections not working (timing out with no response) on some platforms.
changelogs/3.5.md:- Logins are now permitted to have up to 60 seconds clock drift on the `nbf` and `exp` timestamps in the login JWT.
changelogs/3.5.md:- Fixed XP orbs following players who switched to a location spatially nearby in a different world.
changelogs/3.5.md:- `Player->removeWindow()` now throws `InvalidArgumentException` instead of `BadMethodCallException` when trying to non-forcefully remove a fixed window ID.
changelogs/3.5.md:- Fixed player XP not dropping if a player was fast enough to respawn.
changelogs/3.5.md:- Player XP drop amount now matches vanilla (7x level points, incurs some loss of points for higher levels)
changelogs/3.5.md:- Fixed Doxygen configuration including test sources.
changelogs/3.5.md:- Improved performance of block-cache accesses.
changelogs/3.5.md:- Improved performance of random block-ticking.
changelogs/3.5.md:- Closure tasks will now show the correctly formatted name on timings.
changelogs/3.5.md:- Fixed a crash when a local update happens next to an `ItemFrame` with invalid metadata.
changelogs/3.5.md:- Fixed player being subscribed to broadcast permissions too early when permissions are modified before spawn.
changelogs/3.5.md:- Block-picking is now disallowed on unknown blocks.
changelogs/3.5.md:- Internal IP detection now works correctly on all platforms.
changelogs/3.5.md:- Fixed UPnP portforwarding not working correctly when multiple network adapters are installed.
changelogs/3.5.md:- Starting or stopping flight now resets fall distance and in-air ticks.
changelogs/3.5.md:- Fixed falling causing starvation.
changelogs/3.5.md:- Fixed crops consuming bone meal when fully grown.
changelogs/3.5.md:- Users are no longer able to avoid agreeing to the license by restarting the server.
changelogs/3.5.md:- Explosions no longer create broken double chests which crash the server. Existing chests affected by this bug will continue to crash. This will be addressed in a future release.
changelogs/3.5.md:- Cactus and sugarcane no longer grow through non-air blocks.
changelogs/3.5.md:- Fixed a memory leak in `setChunk()` when the `unload` parameter is true.
changelogs/3.5.md:- Generator will now crash if preset is invalid, instead of producing unexpected results.
changelogs/3.5.md:- Fixed a `setChunk()` bug introduced by 3.5.8.
changelogs/3.5.md:- Applied a hack to disable client-sided automatic regeneration.
changelogs/3.5.md:- `Level->getChunkPlayers()` is now deprecated.
changelogs/3.5.md:- Some internal `Level` functions are now correctly marked `@internal`.
changelogs/3.5.md:- Fixed splash potion distance being measured from player feet instead of eye height.
changelogs/3.5.md:- Fixed tall grass being unplaceable on dirt.
changelogs/3.5.md:- A debug message is now recorded when a chunk is loaded with no associated loaders.
changelogs/3.5.md:- Composer dependencies have been updated to fix bugs in some dependencies.
changelogs/3.5.md:- Fixed crashing when items with negative IDs are found in the inventory (caused by downgrading from dev builds).
changelogs/3.5.md:- Updated creative inventory and crafting recipes.
changelogs/3.5.md:- Fixed crash when too-large values are given to `/effect` for duration.
changelogs/3.5.md:- `/op` and other commands no longer crash when an invalid player name is given.
changelogs/3.5.md:- Startup time no longer includes the time spent in the setup wizard.
changelogs/3.5.md:- `TextFormat::clean()` is now UTF-8 aware, and will scrub any invalid UTF-8 characters from the given string.
changelogs/3.5.md:- Fixed `TextFormat::clean()` not fully removing ANSI escape codes in some cases.
changelogs/3.5.md:- Fixed Korean command arguments failing to parse.
changelogs/3.5.md:- `Sign->setText()` and `Sign->setLine()` now enforce that the given text must be UTF-8 text, or an exception will be thrown.
changelogs/3.5.md:- Sign text is now processed by `mb_scrub()` immediately after loading to remove invalid UTF-8 characters that could crash the client.
changelogs/3.5.md:- `Human->exhaust()` no longer underflows when the hunger attribute has a fractional value.
changelogs/3.5.md:- Added a hack to disable client sided AI for non-moving entities. This fixes items floating in water despite it not being implemented server-side yet.
changelogs/3.5.md:- Fixed max health not working as expected on respawn if changed by plugins.
changelogs/3.5.md:- Fixed Item Frame hardness (0.25 instead of 0).
changelogs/3.5.md:- Fire Aspect tools will now light TNT when right-clicked with.
changelogs/3.5.md:- Fixed incorrect nullable typehints on `TaskScheduler` return values.
changelogs/3.13.md:**WARNING: If your plugin uses the protocol, you're not shielded by API change constraints.** You should consider using the `mcpe-protocol` directive in `plugin.yml` as a constraint if you do.
changelogs/3.13.md:- PHP 7.3.0 or newer is now required.
changelogs/3.13.md:- Player movement processing has been revamped. It's now more tolerant of network lag and doesn't have as many problems with falling.
changelogs/3.13.md:- `/time` now supports additional aliases `noon`, `sunset`, `midnight` and `sunrise`.
changelogs/3.13.md:- Removed warnings when a plugin registers a handler for a deprecated event. Since this warning is developer-focused, and too specific to be useful, it just caused annoyance and confusion to users who didn't know what it meant.
changelogs/3.13.md:- It's now possible to require a specific operating system using the `os` directive in `plugin.yml`. More information about this directive can be found in the [developer documentation](https://github.com/pmmp/DeveloperDocs).
changelogs/3.13.md:- `Player->resetItemCooldown()` now accepts a second parameter, allowing plugins to provide a custom duration.
changelogs/3.13.md:- The following methods have been deprecated and have recommended replacements:
changelogs/3.13.md:  - `Player->addTitle()` -> `Player->sendTitle()`
changelogs/3.13.md:  - `Player->addSubTitle()` -> `Player->sendSubTitle()`
changelogs/3.13.md:  - `Player->addActionBarMessage()` -> `Player->sendActionBarMessage()`
changelogs/3.13.md:- The following methods have been deprecated:
changelogs/3.13.md:  - `EntityDespawnEvent->getType()`
changelogs/3.13.md:  - `EntityDespawnEvent->getPosition()`
changelogs/3.13.md:  - `EntityDespawnEvent->isCreature()`
changelogs/3.13.md:  - `EntityDespawnEvent->isHuman()`
changelogs/3.13.md:  - `EntityDespawnEvent->isProjectile()`
changelogs/3.13.md:  - `EntityDespawnEvent->isVehicle()`
changelogs/3.13.md:  - `EntityDespawnEvent->isItem()`
changelogs/3.13.md:  - `EntitySpawnEvent->getType()`
changelogs/3.13.md:  - `EntitySpawnEvent->getPosition()`
changelogs/3.13.md:  - `EntitySpawnEvent->isCreature()`
changelogs/3.13.md:  - `EntitySpawnEvent->isHuman()`
changelogs/3.13.md:  - `EntitySpawnEvent->isProjectile()`
changelogs/3.13.md:  - `EntitySpawnEvent->isVehicle()`
changelogs/3.13.md:  - `EntitySpawnEvent->isItem()`
changelogs/3.13.md:- Added the following API methods:
changelogs/3.13.md:  - `EntityDeathEvent->getXpDropAmount()`
changelogs/3.13.md:  - `EntityDeathEvent->setXpDropAmount()`
changelogs/3.13.md:- `PlayerDeathEvent::__construct()` now accepts a fourth (optional) parameter `int $xp`.
changelogs/3.13.md:- `EntityDeathEvent::__construct()` now accepts a third (optional) parameter `int $xp`.
changelogs/3.13.md:- The following classes have been deprecated:
changelogs/3.13.md:  - `Recipe`
changelogs/3.13.md:- The following methods have been deprecated:
changelogs/3.13.md:  - `CraftingManager->registerRecipe()`
changelogs/3.13.md:  - `Recipe->registerToCraftingManager()` (and all its implementations)
changelogs/3.13.md:- New `Enchantment` type ID constants have been added.
changelogs/3.13.md:- `ItemFactory::fromStringSingle()` has been added. This works exactly the same as `ItemFactory::fromString()`, but it has a return type of `Item` instead of `Item|Item[]` (more static analysis friendly).
changelogs/3.13.md:- Added the following API methods:
changelogs/3.13.md:  - `Position->getLevelNonNull()`: this is the same as `Position->getLevel()`, but throws an `AssumptionFailedError` if the level is null or invalid (more static analysis friendly).
changelogs/3.13.md:  - `Level->getTimeOfDay()`
changelogs/3.13.md:- The following constants have been changed:
changelogs/3.13.md:  - `Level::TIME_DAY` now has a value of `1000`
changelogs/3.13.md:  - `Level::TIME_NIGHT` now has a value of `13000`
changelogs/3.13.md:- Added the following constants:
changelogs/3.13.md:  - `Level::TIME_MIDNIGHT`
changelogs/3.13.md:  - `Level::TIME_NOON`
changelogs/3.13.md:- The following types of particles now accept optional `Color` parameters in the constructor:
changelogs/3.13.md:  - `EnchantParticle`
changelogs/3.13.md:  - `InstantEnchantParticle`
changelogs/3.13.md:- Added the following API methods:
changelogs/3.13.md:  - `RakLibInterface->setPacketLimit()`
changelogs/3.13.md:AsyncTask thread-local storage has been improved, making it simpler and easier to use.
changelogs/3.13.md:- `AsyncTask->fetchLocal()` no longer deletes stored thread-local data. Instead, the storage behaves more like properties, and gets deleted when the AsyncTask object goes out of scope.
changelogs/3.13.md:- `AsyncTask->peekLocal()` has been `@deprecated` (use `fetchLocal()` instead).
changelogs/3.13.md:- Notices are no longer emitted if an async task doesn't fetch its locally stored data.
changelogs/3.13.md:- The following methods have been deprecated:
changelogs/3.13.md:  - `AsyncTask->getFromThreadStore()` (use its worker's corresponding method)
changelogs/3.13.md:  - `AsyncTask->saveToThreadStore()` (use its worker's corresponding method)
changelogs/3.13.md:  - `AsyncTask->removeFromThreadStore()` (use its worker's corresponding method)
changelogs/3.13.md:- The following functions have been deprecated and have recommended replacements:
changelogs/3.13.md:  - `Utils::getMemoryUsage()` -> split into `Process::getMemoryUsage()` and `Process::getAdvancedMemoryUsage()` (not 1:1 replacement!!)
changelogs/3.13.md:  - `Utils::getRealMemoryUsage()` -> `Process::getRealMemoryUsage()`
changelogs/3.13.md:  - `Utils::getThreadCount()` -> `Process::getThreadCount()`
changelogs/3.13.md:  - `Utils::kill()` -> `Process::kill()`
changelogs/3.13.md:  - `Utils::execute()` -> `Process::execute()`
changelogs/3.13.md:- Added the following constants:
changelogs/3.13.md:  - `Utils::OS_WINDOWS`
changelogs/3.13.md:  - `Utils::OS_IOS`
changelogs/3.13.md:  - `Utils::OS_MACOS`
changelogs/3.13.md:  - `Utils::OS_ANDROID`
changelogs/3.13.md:  - `Utils::OS_LINUX`
changelogs/3.13.md:  - `Utils::OS_BSD`
changelogs/3.13.md:  - `Utils::OS_UNKNOWN`
changelogs/3.13.md:- Added the following API methods:
changelogs/3.13.md:  - `Config->getPath()`
changelogs/3.13.md:  - `Utils::recursiveUnlink()`
changelogs/3.13.md:  - `Terminal::write()`
changelogs/3.13.md:  - `Terminal::writeLine()`
changelogs/3.13.md:- Fixed issues with `server.lock` not being unlocked on some platforms. Now, the server explicitly releases it before exiting.
changelogs/3.13.md:- `/timings` now sends a usage message when using an unknown subcommand. Previously, it would just give no output.
changelogs/3.13.md:- `/whitelist` now sends a usage message when using an unknown subcommand. Previously, it would just give no output.
changelogs/3.13.md:- The output from `/timings` is now broadcasted on the `pocketmine.broadcast.admin` broadcast channel for auditability, similarly to other operator commands.
changelogs/3.13.md:- Fixed `ShapedRecipe` deprecation warning on PHP 7.4.
changelogs/3.13.md:- Fixed some potential crashes with Bedrock worlds when chunk data is corrupted or missing.
changelogs/3.13.md:- Fixed a bug in region handling that caused region loaders to overestimate the amount of space used in the file. This resulted in an up to 4 MB growth of the file size every time the region was reloaded after writing a chunk.
changelogs/3.13.md:- Region handlers now try to reuse free space in region files before putting the chunk at the end of the file. Previously, space was only reused if the new version of the chunk was <= the size of the old. This fixes endless growth of region files.
changelogs/3.13.md:- Regions now never directly overwrite old copies of chunks when saving; instead they try to find an alternative location (preferring unused space within the file first). This avoids chunk corruption on power failure (the old copy of the chunk won't be damaged, so a rollback might occur instead), and as happy side effect, causes oversized regions to gradually shrink towards their most packed state over time, saving disk space.
changelogs/3.13.md:- Regions now have a hard size cap at 64 GB. This is because the header pointers will overflow beyond 64 GB (besides, a normal region shouldn't be this big anyway).
changelogs/3.13.md:- Fixed a crash that could occur when reading a too-short region header.
changelogs/3.13.md:- `VerifyLoginTask` now only copies JWTs to verify instead of the entire login packet. This reduces the amount of data copied between threads, improving performance.
changelogs/3.13.md:- Added a fast-fail check to `VerifyLoginTask` by checking the JWT header's `x5u` against the expected public key.
changelogs/3.13.md:- `Skin->validate()` now throws `InvalidSkinException` instead of `\InvalidArgumentException`.
changelogs/3.13.md:- A debug message is now logged when a player is kicked for having an invalid skin, giving a brief line of detail why.
changelogs/3.13.md:- Fixed players not being kicked for having an invalid `resourcePatch`.
changelogs/3.13.md:- Fixed block meta value of cake being preserved when using pick-block.
changelogs/3.13.md:- Fixed explosions not fully destroying multi-block objects like beds and doors.
composer.json:   "name": "pocketmine/pocketmine-mp",
composer.json:   "license": "LGPL-3.0",
composer.json:      "php-64bit": "*",
composer.json:      "ext-ctype": "*",
composer.json:      "ext-curl": "*",
composer.json:      "ext-date": "*",
composer.json:      "ext-hash": "*",
composer.json:      "ext-json": "*",
composer.json:      "ext-mbstring": "*",
composer.json:      "ext-openssl": "*",
composer.json:      "ext-pcre": "*",
composer.json:      "ext-phar": "*",
composer.json:      "ext-pthreads": "~3.2.0",
composer.json:      "ext-reflection": "*",
composer.json:      "ext-sockets": "*",
composer.json:      "ext-spl": "*",
composer.json:      "ext-yaml": ">=2.0.0",
composer.json:      "ext-zip": "*",
composer.json:      "ext-zlib": ">=1.2.11",
composer.json:      "composer-runtime-api": "^2.0",
composer.json:      "adhocore/json-comment": "^0.1.0",
composer.json:      "pocketmine/callback-validator": "^1.0.2",
composer.json:      "pocketmine/log-pthreads": "^0.1.0",
composer.json:   "require-dev": {
composer.json:      "phpstan/phpstan-phpunit": "^0.12.6",
composer.json:      "phpstan/phpstan-strict-rules": "^0.12.2",
composer.json:      "psr-4": {
composer.json:   "autoload-dev": {
composer.json:      "psr-4": {
composer.json:      "sort-packages": true
composer.json:      "make-devtools": "@php -dphar.readonly=0 tests/plugins/DevTools/src/DevTools/ConsoleScript.php --make tests/plugins/DevTools --out plugins/DevTools.phar",
composer.json:      "make-server": [
composer.json:         "@composer install --no-dev --classmap-authoritative",
composer.json:         "@php -dphar.readonly=0 build/server-phar.php"
composer.lock:        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
composer.lock:    "content-hash": "1609bd6189c249ac32c4d86501a7d020",
composer.lock:            "name": "adhocore/json-comment",
composer.lock:                "url": "https://github.com/adhocore/php-json-comment.git",
composer.lock:                "url": "https://api.github.com/repos/adhocore/php-json-comment/zipball/8448076039389f558f39ad0553aab87db3f81614",
composer.lock:            "require-dev": {
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "strip-comment"
composer.lock:                "issues": "https://github.com/adhocore/php-json-comment/issues",
composer.lock:                "source": "https://github.com/adhocore/php-json-comment/tree/0.1.0"
composer.lock:            "time": "2020-01-03T13:51:23+00:00"
composer.lock:                "php-64bit": "*"
composer.lock:            "require-dev": {
composer.lock:                "phpstan/extension-installer": "^1.0",
composer.lock:                "phpstan/phpstan-strict-rules": "^0.12.4"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "LGPL-3.0"
composer.lock:            "time": "2021-01-15T14:19:13+00:00"
composer.lock:            "name": "pocketmine/callback-validator",
composer.lock:                "ext-reflection": "*",
composer.lock:                "daverandom/callback-validator": "*"
composer.lock:            "require-dev": {
composer.lock:                "phpstan/extension-installer": "^1.0",
composer.lock:                "phpstan/phpstan-strict-rules": "^0.12.4",
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "description": "Fork of daverandom/callback-validator - Tools for validating callback signatures",
composer.lock:            "time": "2020-12-11T01:45:37+00:00"
composer.lock:                "ext-pthreads": "~3.2.0",
composer.lock:                "ext-reflection": "*",
composer.lock:            "require-dev": {
composer.lock:                "phpstan/extension-installer": "^1.0",
composer.lock:                "phpstan/phpstan-strict-rules": "^0.12.4"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "LGPL-3.0"
composer.lock:            "description": "Ad-hoc autoloading components used by PocketMine-MP",
composer.lock:            "time": "2021-01-15T00:40:47+00:00"
composer.lock:            "require-dev": {
composer.lock:                "phpstan/phpstan-strict-rules": "^0.12.2"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "LGPL-3.0"
composer.lock:            "description": "Logging components used by PocketMine-MP and related projects",
composer.lock:            "time": "2021-01-15T14:32:41+00:00"
composer.lock:            "name": "pocketmine/log-pthreads",
composer.lock:                "ext-pthreads": "~3.2.0",
composer.lock:            "require-dev": {
composer.lock:                "phpstan/extension-installer": "^1.0",
composer.lock:                "phpstan/phpstan-strict-rules": "^0.12.4"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "LGPL-3.0"
composer.lock:            "description": "Logging components specialized for pthreads used by PocketMine-MP and related projects",
composer.lock:            "time": "2021-01-15T00:35:49+00:00"
composer.lock:                "php-64bit": "*"
composer.lock:            "require-dev": {
composer.lock:                "phpstan/extension-installer": "^1.0",
composer.lock:                "phpstan/phpstan-strict-rules": "^0.12.4"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "LGPL-3.0"
composer.lock:            "description": "PHP library containing math related code used in PocketMine-MP",
composer.lock:            "time": "2021-01-15T14:25:11+00:00"
composer.lock:                "ext-zlib": "*",
composer.lock:                "php-64bit": "*",
composer.lock:            "require-dev": {
composer.lock:                "irstea/phpunit-shim": "^7.5 || ^8.0",
composer.lock:                "phpstan/extension-installer": "^1.0",
composer.lock:                "phpstan/phpstan-strict-rules": "^0.12.4"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "LGPL-3.0"
composer.lock:            "time": "2021-01-15T15:27:28+00:00"
composer.lock:                "ext-pthreads": "~3.2.0",
composer.lock:                "ext-sockets": "*",
composer.lock:                "php-64bit": "*",
composer.lock:                "php-ipv6": "*",
composer.lock:                "pocketmine/log-pthreads": "^0.1.0",
composer.lock:            "require-dev": {
composer.lock:                "phpstan/phpstan-strict-rules": "^0.12.2"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "GPL-3.0"
composer.lock:            "time": "2021-01-15T16:19:15+00:00"
composer.lock:                "ext-pthreads": ">=3.1.7dev",
composer.lock:                "php-64bit": "^7.2 || ^8.0"
composer.lock:            "require-dev": {
composer.lock:                "phpstan/extension-installer": "^1.0",
composer.lock:                "phpstan/phpstan-strict-rules": "^0.12.4"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "LGPL-3.0"
composer.lock:            "time": "2021-01-15T14:44:16+00:00"
composer.lock:            "require-dev": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "LGPL-3.0"
composer.lock:            "description": "Standard library files required by PocketMine-MP and related projects",
composer.lock:            "time": "2021-01-15T15:15:23+00:00"
composer.lock:    "packages-dev": [
composer.lock:            "require-dev": {
composer.lock:                "doctrine/coding-standard": "^8.0",
composer.lock:                "ext-pdo": "*",
composer.lock:                "ext-phar": "*",
composer.lock:                "phpbench/phpbench": "^0.13 || 1.0.0-alpha2",
composer.lock:                "phpstan/phpstan-phpunit": "^0.12",
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
composer.lock:                    "url": "https://www.doctrine-project.org/sponsorship.html",
composer.lock:            "time": "2020-11-10T18:47:58+00:00"
composer.lock:            "name": "myclabs/deep-copy",
composer.lock:                "myclabs/deep-copy": "self.version"
composer.lock:            "require-dev": {
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
composer.lock:            "time": "2020-11-13T09:40:50+00:00"
composer.lock:            "name": "nikic/php-parser",
composer.lock:                "url": "https://github.com/nikic/PHP-Parser.git",
composer.lock:                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/c6d052fc58cb876152f89f532b95a8d7907e7f0e",
composer.lock:                "ext-tokenizer": "*",
composer.lock:            "require-dev": {
composer.lock:                "ircmaxell/php-yacc": "^0.0.7",
composer.lock:                "bin/php-parse"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "4.9-dev"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:                "issues": "https://github.com/nikic/PHP-Parser/issues",
composer.lock:                "source": "https://github.com/nikic/PHP-Parser/tree/v4.10.4"
composer.lock:            "time": "2020-12-20T10:01:03+00:00"
composer.lock:            "name": "phar-io/manifest",
composer.lock:                "url": "https://github.com/phar-io/manifest.git",
composer.lock:                "url": "https://api.github.com/repos/phar-io/manifest/zipball/85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
composer.lock:                "ext-dom": "*",
composer.lock:                "ext-phar": "*",
composer.lock:                "ext-xmlwriter": "*",
composer.lock:                "phar-io/version": "^3.0.1",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.0.x-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:                "issues": "https://github.com/phar-io/manifest/issues",
composer.lock:                "source": "https://github.com/phar-io/manifest/tree/master"
composer.lock:            "time": "2020-06-27T14:33:11+00:00"
composer.lock:            "name": "phar-io/version",
composer.lock:                "url": "https://github.com/phar-io/version.git",
composer.lock:                "url": "https://api.github.com/repos/phar-io/version/zipball/e4782611070e50613683d2b9a57730e9a3ba5451",
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:                "issues": "https://github.com/phar-io/version/issues",
composer.lock:                "source": "https://github.com/phar-io/version/tree/3.0.4"
composer.lock:            "time": "2020-12-13T23:18:30+00:00"
composer.lock:            "name": "phpdocumentor/reflection-common",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-2.x": "2.x-dev"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2020-06-27T09:03:43+00:00"
composer.lock:            "name": "phpdocumentor/reflection-docblock",
composer.lock:                "ext-filter": "*",
composer.lock:                "phpdocumentor/reflection-common": "^2.2",
composer.lock:                "phpdocumentor/type-resolver": "^1.3",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "5.x-dev"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2020-09-03T19:13:55+00:00"
composer.lock:            "name": "phpdocumentor/type-resolver",
composer.lock:                "phpdocumentor/reflection-common": "^2.0"
composer.lock:            "require-dev": {
composer.lock:                "ext-tokenizer": "*"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-1.x": "1.x-dev"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "description": "A PSR-5 based resolver of Class names, Types and Structural Element Names",
composer.lock:            "time": "2020-09-17T18:55:26+00:00"
composer.lock:                "phpdocumentor/reflection-docblock": "^5.2",
composer.lock:                "sebastian/recursion-context": "^3.0 || ^4.0"
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.11.x-dev"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2020-12-19T10:15:11+00:00"
composer.lock:                "phpstan/phpstan-shim": "*"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "0.12-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "description": "PHPStan - PHP Static Analysis Tool",
composer.lock:            "time": "2021-02-13T11:47:44+00:00"
composer.lock:            "name": "phpstan/phpstan-phpunit",
composer.lock:                "url": "https://github.com/phpstan/phpstan-phpunit.git",
composer.lock:                "url": "https://api.github.com/repos/phpstan/phpstan-phpunit/zipball/432575b41cf2d4f44e460234acaf56119ed97d36",
composer.lock:            "require-dev": {
composer.lock:                "php-parallel-lint/php-parallel-lint": "^1.2",
composer.lock:                "phpstan/phpstan-strict-rules": "^0.12.6",
composer.lock:            "type": "phpstan-extension",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "0.12-dev"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "issues": "https://github.com/phpstan/phpstan-phpunit/issues",
composer.lock:                "source": "https://github.com/phpstan/phpstan-phpunit/tree/0.12.17"
composer.lock:            "time": "2020-12-13T12:12:51+00:00"
composer.lock:            "name": "phpstan/phpstan-strict-rules",
composer.lock:                "url": "https://github.com/phpstan/phpstan-strict-rules.git",
composer.lock:                "url": "https://api.github.com/repos/phpstan/phpstan-strict-rules/zipball/0705fefc7c9168529fd130e341428f5f10f4f01d",
composer.lock:            "require-dev": {
composer.lock:                "php-parallel-lint/php-parallel-lint": "^1.2",
composer.lock:                "phpstan/phpstan-phpunit": "^0.12.16",
composer.lock:            "type": "phpstan-extension",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "0.12-dev"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "issues": "https://github.com/phpstan/phpstan-strict-rules/issues",
composer.lock:                "source": "https://github.com/phpstan/phpstan-strict-rules/tree/0.12.9"
composer.lock:            "time": "2021-01-13T08:50:28+00:00"
composer.lock:            "name": "phpunit/php-code-coverage",
composer.lock:                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/f3e026641cc91909d421802dd3ac7827ebfd97e1",
composer.lock:                "ext-dom": "*",
composer.lock:                "ext-libxml": "*",
composer.lock:                "ext-xmlwriter": "*",
composer.lock:                "nikic/php-parser": "^4.10.2",
composer.lock:                "phpunit/php-file-iterator": "^3.0.3",
composer.lock:                "phpunit/php-text-template": "^2.0.2",
composer.lock:                "sebastian/code-unit-reverse-lookup": "^2.0.2",
composer.lock:                "sebastian/lines-of-code": "^1.0.3",
composer.lock:            "require-dev": {
composer.lock:                "ext-pcov": "*",
composer.lock:                "ext-xdebug": "*"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "9.2-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
composer.lock:                "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.5"
composer.lock:            "time": "2020-11-28T06:44:49+00:00"
composer.lock:            "name": "phpunit/php-file-iterator",
composer.lock:                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/aa4be8575f26070b100fccb67faabb28f21f66f8",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "3.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
composer.lock:                "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.5"
composer.lock:            "time": "2020-09-28T05:57:25+00:00"
composer.lock:            "name": "phpunit/php-invoker",
composer.lock:                "url": "https://github.com/sebastianbergmann/php-invoker.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
composer.lock:            "require-dev": {
composer.lock:                "ext-pcntl": "*",
composer.lock:                "ext-pcntl": "*"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "3.1-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
composer.lock:                "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/php-invoker/tree/3.1.1"
composer.lock:            "time": "2020-09-28T05:58:55+00:00"
composer.lock:            "name": "phpunit/php-text-template",
composer.lock:                "url": "https://github.com/sebastianbergmann/php-text-template.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
composer.lock:                "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/php-text-template/tree/2.0.4"
composer.lock:            "time": "2020-10-26T05:33:50+00:00"
composer.lock:            "name": "phpunit/php-timer",
composer.lock:                "url": "https://github.com/sebastianbergmann/php-timer.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "5.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "https://github.com/sebastianbergmann/php-timer/",
composer.lock:                "issues": "https://github.com/sebastianbergmann/php-timer/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/php-timer/tree/5.0.3"
composer.lock:            "time": "2020-10-26T13:16:10+00:00"
composer.lock:                "ext-dom": "*",
composer.lock:                "ext-json": "*",
composer.lock:                "ext-libxml": "*",
composer.lock:                "ext-mbstring": "*",
composer.lock:                "ext-xml": "*",
composer.lock:                "ext-xmlwriter": "*",
composer.lock:                "myclabs/deep-copy": "^1.10.1",
composer.lock:                "phar-io/manifest": "^2.0.1",
composer.lock:                "phar-io/version": "^3.0.2",
composer.lock:                "phpunit/php-code-coverage": "^9.2.3",
composer.lock:                "phpunit/php-file-iterator": "^3.0.5",
composer.lock:                "phpunit/php-invoker": "^3.1.1",
composer.lock:                "phpunit/php-text-template": "^2.0.3",
composer.lock:                "phpunit/php-timer": "^5.0.2",
composer.lock:                "sebastian/cli-parser": "^1.0.1",
composer.lock:                "sebastian/code-unit": "^1.0.6",
composer.lock:                "sebastian/global-state": "^5.0.1",
composer.lock:                "sebastian/object-enumerator": "^4.0.3",
composer.lock:                "sebastian/resource-operations": "^3.0.3",
composer.lock:            "require-dev": {
composer.lock:                "ext-pdo": "*",
composer.lock:                "phpspec/prophecy-phpunit": "^2.0.1"
composer.lock:                "ext-soap": "*",
composer.lock:                "ext-xdebug": "*"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "9.5-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "time": "2021-02-02T14:45:58+00:00"
composer.lock:            "name": "sebastian/cli-parser",
composer.lock:                "url": "https://github.com/sebastianbergmann/cli-parser.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/442e7c7e687e42adc03470c7b668bc4b2402c0b2",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "https://github.com/sebastianbergmann/cli-parser",
composer.lock:                "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/cli-parser/tree/1.0.1"
composer.lock:            "time": "2020-09-28T06:08:49+00:00"
composer.lock:            "name": "sebastian/code-unit",
composer.lock:                "url": "https://github.com/sebastianbergmann/code-unit.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "https://github.com/sebastianbergmann/code-unit",
composer.lock:                "issues": "https://github.com/sebastianbergmann/code-unit/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/code-unit/tree/1.0.8"
composer.lock:            "time": "2020-10-26T13:08:54+00:00"
composer.lock:            "name": "sebastian/code-unit-reverse-lookup",
composer.lock:                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
composer.lock:                "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3"
composer.lock:            "time": "2020-09-28T05:30:19+00:00"
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "4.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "time": "2020-10-26T15:49:45+00:00"
composer.lock:                "nikic/php-parser": "^4.7",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "time": "2020-10-26T15:52:27+00:00"
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "4.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:                    "email": "mail@kore-nordmann.de"
composer.lock:            "time": "2020-10-26T13:10:38+00:00"
composer.lock:            "require-dev": {
composer.lock:                "ext-posix": "*"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "5.1-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "time": "2020-09-28T05:52:38+00:00"
composer.lock:                "sebastian/recursion-context": "^4.0"
composer.lock:            "require-dev": {
composer.lock:                "ext-mbstring": "*",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "4.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "time": "2020-09-28T05:24:23+00:00"
composer.lock:            "name": "sebastian/global-state",
composer.lock:                "url": "https://github.com/sebastianbergmann/global-state.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/a90ccbddffa067b51f574dea6eb25d5680839455",
composer.lock:                "sebastian/object-reflector": "^2.0",
composer.lock:                "sebastian/recursion-context": "^4.0"
composer.lock:            "require-dev": {
composer.lock:                "ext-dom": "*",
composer.lock:                "ext-uopz": "*"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "5.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "http://www.github.com/sebastianbergmann/global-state",
composer.lock:                "issues": "https://github.com/sebastianbergmann/global-state/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/global-state/tree/5.0.2"
composer.lock:            "time": "2020-10-26T15:55:19+00:00"
composer.lock:            "name": "sebastian/lines-of-code",
composer.lock:                "url": "https://github.com/sebastianbergmann/lines-of-code.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/c1c2e997aa3146983ed888ad08b15470a2e22ecc",
composer.lock:                "nikic/php-parser": "^4.6",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "https://github.com/sebastianbergmann/lines-of-code",
composer.lock:                "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/1.0.3"
composer.lock:            "time": "2020-11-28T06:42:11+00:00"
composer.lock:            "name": "sebastian/object-enumerator",
composer.lock:                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71",
composer.lock:                "sebastian/object-reflector": "^2.0",
composer.lock:                "sebastian/recursion-context": "^4.0"
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "4.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
composer.lock:                "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4"
composer.lock:            "time": "2020-10-26T13:12:34+00:00"
composer.lock:            "name": "sebastian/object-reflector",
composer.lock:                "url": "https://github.com/sebastianbergmann/object-reflector.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "description": "Allows reflection of object attributes, including inherited and non-public ones",
composer.lock:            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
composer.lock:                "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/object-reflector/tree/2.0.4"
composer.lock:            "time": "2020-10-26T13:14:26+00:00"
composer.lock:            "name": "sebastian/recursion-context",
composer.lock:                "url": "https://github.com/sebastianbergmann/recursion-context.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/cd9d8cf3c5804de4341c283ed787f099f5506172",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "4.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "http://www.github.com/sebastianbergmann/recursion-context",
composer.lock:                "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/recursion-context/tree/4.0.4"
composer.lock:            "time": "2020-10-26T13:17:30+00:00"
composer.lock:            "name": "sebastian/resource-operations",
composer.lock:                "url": "https://github.com/sebastianbergmann/resource-operations.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "3.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "description": "Provides a list of PHP built-in functions that operate on resources",
composer.lock:            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
composer.lock:                "issues": "https://github.com/sebastianbergmann/resource-operations/issues",
composer.lock:                "source": "https://github.com/sebastianbergmann/resource-operations/tree/3.0.3"
composer.lock:            "time": "2020-09-28T06:45:17+00:00"
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.3-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "time": "2020-10-26T13:18:59+00:00"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "3.0-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
composer.lock:            "time": "2020-09-28T06:39:44+00:00"
composer.lock:            "name": "symfony/polyfill-ctype",
composer.lock:                "url": "https://github.com/symfony/polyfill-ctype.git",
composer.lock:                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/c6c942b1ac76c82448322025e084cadc56048b4e",
composer.lock:                "ext-ctype": "For best performance"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-main": "1.22-dev"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.22.0"
composer.lock:            "time": "2021-01-07T16:49:33+00:00"
composer.lock:                "ext-dom": "*",
composer.lock:                "ext-tokenizer": "*",
composer.lock:                "ext-xmlwriter": "*",
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "time": "2020-07-12T23:59:07+00:00"
composer.lock:                "symfony/polyfill-ctype": "^1.8"
composer.lock:            "require-dev": {
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2020-07-08T17:02:28+00:00"
composer.lock:    "minimum-stability": "stable",
composer.lock:    "stability-flags": [],
composer.lock:    "prefer-stable": false,
composer.lock:    "prefer-lowest": false,
composer.lock:        "php-64bit": "*",
composer.lock:        "ext-ctype": "*",
composer.lock:        "ext-curl": "*",
composer.lock:        "ext-date": "*",
composer.lock:        "ext-hash": "*",
composer.lock:        "ext-json": "*",
composer.lock:        "ext-mbstring": "*",
composer.lock:        "ext-openssl": "*",
composer.lock:        "ext-pcre": "*",
composer.lock:        "ext-phar": "*",
composer.lock:        "ext-pthreads": "~3.2.0",
composer.lock:        "ext-reflection": "*",
composer.lock:        "ext-sockets": "*",
composer.lock:        "ext-spl": "*",
composer.lock:        "ext-yaml": ">=2.0.0",
composer.lock:        "ext-zip": "*",
composer.lock:        "ext-zlib": ">=1.2.11",
composer.lock:        "composer-runtime-api": "^2.0"
composer.lock:    "platform-dev": [],
composer.lock:    "platform-overrides": {
composer.lock:    "plugin-api-version": "2.0.0"
CONTRIBUTING.md:![](http://cdn.pocketmine.net/img/PocketMine-MP-h.png)
CONTRIBUTING.md:# PocketMine-MP Contribution Guidelines
CONTRIBUTING.md:- If you are reporting a bug:
CONTRIBUTING.md:  - **make sure that you are using the latest supported version** before opening an issue.
CONTRIBUTING.md:  - **test it on a clean test server, WITHOUT PLUGINS**, to see if the issue still occurs. If not then it may be a plugin issue. Please also indicate the result of such tests.
CONTRIBUTING.md:- **[Search the issue tracker](https://github.com/pmmp/PocketMine-MP/issues?utf8=%E2%9C%93&q=is%3Aissue)** to check if anyone has already reported it, to avoid needlessly creating duplicate issues. Make sure you also check closed issues, as an issue you think is valid may already have been resolved.
CONTRIBUTING.md:- **Do not report plugin issues here.** If your issue is related to a plugin, contact the plugin's original author instead.
CONTRIBUTING.md:- **Support requests are not bugs.** Issues such as "How do I do this" are not bugs and will be closed. If you need help, please see [here](README.md#discussion) and do not misuse our issue tracker.
CONTRIBUTING.md:- **No generic titles** such as "Question", "Help", "Crash Report" etc. A good issue report provides a quick summary in the title. If you just got a crash report but you don't understand it, please look for a line starting with `Message`. It summarizes the bug.
CONTRIBUTING.md:- **Provide information in the issue body, not in the title.** No tags like `[BUG]` are allowed in the title, including `[SOLVED]` for solved issues.
CONTRIBUTING.md:- **No generic issue reports.** For bugs, it is the issue author's responsibility to provide us an issue that is **trackable, debuggable, reproducible, reported professionally and is an actual bug**.
CONTRIBUTING.md:- To express appreciation, objection, confusion or other supported reactions on pull requests, issues or comments on them, use GitHub [reactions](https://github.com/blog/2119-add-reactions-to-pull-requests-issues-and-comments) rather than posting an individual comment with an emoji only. This helps keeping the issue/pull request conversation clean and readable.
CONTRIBUTING.md:- If your issue is related to the PocketMine-MP website, forums, etc., please [talk to a human directly](README.md#discussion).
CONTRIBUTING.md:To contribute to the repository, [fork it on GitHub](https://github.com/pmmp/PocketMine-MP/fork), create a branch on your fork, and make your changes on your fork. You can then make a [pull request](https://github.com/pmmp/PocketMine-MP/pull/new) to the project to compare your branch to ours and propose your changes to our repository. We use the Pull Request system to allow members of the team to review changes before they are merged.
CONTRIBUTING.md:By proposing a pull request to the project, you agree to your code being distributed within PocketMine-MP under the [LGPL license](LICENSE).
CONTRIBUTING.md:- **We enforce a very high standard for contributions**. This is because PocketMine-MP and its related projects are used very widely in production. While this might seem like we are being mean at times, **our priority is what is best for PocketMine-MP itself**.
CONTRIBUTING.md:We try to ensure that our project's codebase is as clean as possible and ensure that only top-quality material makes it through to PocketMine-MP itself.
CONTRIBUTING.md:- **If a contribution does not meet our standards, changes may be requested or the pull request may be closed.**
CONTRIBUTING.md:- **Create a new branch for each pull request.** Do not create a pull request with commits that exist in another pull request.
CONTRIBUTING.md:- **Use descriptive commit titles.** You can see an example [here](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).
CONTRIBUTING.md:- **Do not include multiple unrelated changes in one commit.** An atomic style for commits is preferred - this means that changes included in a commit should be part of a single distinct change set. See [this link](https://www.freshconsulting.com/atomic-commits/) for more information on atomic commits. See the [documentation on `git add`](https://git-scm.com/docs/git-add) for information on how to isolate local changes for committing.
CONTRIBUTING.md:- **Your pull request will be checked and discussed in due time.** Since the team is scattered all around the world, your PR may not receive any attention for some time.
CONTRIBUTING.md:- **It is inadvisable to create large pull requests with lots of changes** unless this has been discussed with the team beforehand. Large pull requests are difficult to review, and such pull requests may end up being closed. The only exception is when all features in the pull request are related to each other, and share the same core changes.
CONTRIBUTING.md:- **You may be asked to rebase your pull request** if the branch becomes outdated and/or if possibly conflicting changes are made to the target branch. To see how to do this, read [this page](https://github.com/edx/edx-platform/wiki/How-to-Rebase-a-Pull-Request).
CONTRIBUTING.md:- **Details should be provided of tests done.** Simply saying "Tested" or equivalent is not acceptable.
CONTRIBUTING.md:- **Avoid committing changes directly on GitHub. This includes use of the web editor, and also uploading files.** The web editor lacks most useful GIT features and **should only be used for very minor changes**. It is immediately clear if the web editor has been used, and if so the PR is more likely to be rejected. If you want to make serious contributions, **please learn how to use [GIT version control](https://git-scm.com/)**.
CONTRIBUTING.md:- **Do not copy-paste code**. There are potential license issues implicit with copy-pasting, and copy-paste usually indicates a lack of understanding of the actual code. Copy-pasted code is obvious a mile off and **any PR like this is likely to be closed**. If you want to use somebody else's code from a Git repository, **use [GIT's cherry-pick feature](https://git-scm.com/docs/git-cherry-pick)** to cherry-pick the commit. **Cherry-picking is the politer way to copy somebody's changes** and retains all the original accreditation, so there is no need for copy-pasted commits with descriptions like `Some code, thanks @exampleperson`.
CONTRIBUTING.md:- **Make sure you can explain your changes**. If you can't provide a good explanation of changes, your PR may be rejected.
CONTRIBUTING.md:- **Code should use the same style as in PocketMine-MP.** See [below](#code-syntax) for an example.
CONTRIBUTING.md:- **The code must be clear** and written in English, comments included.
CONTRIBUTING.md:**Thanks for contributing to PocketMine-MP!**
CONTRIBUTING.md:It is mainly [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md) with a few exceptions.
CONTRIBUTING.md:- Opening braces MUST go on the same line, and MUST NOT have spaces before.
CONTRIBUTING.md:- `else if` MUST be written as `elseif`. _(It is in PSR-2, but using a SHOULD)_
CONTRIBUTING.md:- Control structure keywords or opening braces MUST NOT have one space before or after them.
CONTRIBUTING.md:- Code MUST use tabs for indenting.
CONTRIBUTING.md:- Long arrays MAY be split across multiple lines, where each subsequent line is indented once.
CONTRIBUTING.md:- Files MUST use only the `<?php` tag.
CONTRIBUTING.md:- Files MUST NOT have an ending `?>` tag.
CONTRIBUTING.md:- Code MUST use namespaces.
CONTRIBUTING.md:- Strings SHOULD use the double quote `"` except when the single quote is required.
CONTRIBUTING.md:- All code SHOULD have parameter and type declarations where possible.
CONTRIBUTING.md:- Strict types SHOULD be enabled on new files where it is sensible to do so.
CONTRIBUTING.md:- All constant declarations SHOULD be preceded by a visibility modifier.
CONTRIBUTING.md:				$this->examplePrivateVariable = [
CONTRIBUTING.md:<!-- TODO: RFC and voting on the forums instead -->
doxygen/index.md:## PocketMine-MP API Documentation
doxygen/index.md:This site contains auto-generated API documentation for PocketMine-MP (and dependencies which are not outsourced). Documentation here is regenerated for every release.
doxygen/index.md: - [DevTools](https://github.com/pmmp/DevTools/) - Development tools plugin for creating plugins
doxygen/index.md: - [ExamplePlugin](https://github.com/pmmp/ExamplePlugin/) - Example plugin demonstrating some basic API features
doxygen/index.md: - [DeveloperDocs](https://github.com/pmmp/DeveloperDocs/) - Reference, guides and specifications for the PocketMine-MP API
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:# file that follow. The default is UTF-8 which is also the encoding used for all
doxygen/doxygen.conf:# The default value is: UTF-8.
doxygen/doxygen.conf:DOXYFILE_ENCODING      = UTF-8
doxygen/doxygen.conf:# double-quotes, unless you are using Doxywizard) that should identify the
doxygen/doxygen.conf:PROJECT_NAME           = PocketMine-MP
doxygen/doxygen.conf:# If the CREATE_SUBDIRS tag is set to YES then doxygen will create 4096 sub-
doxygen/doxygen.conf:# If the ALLOW_UNICODE_NAMES tag is set to YES, doxygen will allow non-ASCII
doxygen/doxygen.conf:# characters to appear in the names of generated files. If set to NO, non-ASCII
doxygen/doxygen.conf:# Chinese-Traditional, Croatian, Czech, Danish, Dutch, English (United States),
doxygen/doxygen.conf:# Indonesian, Italian, Japanese, Japanese-en (Japanese with English messages),
doxygen/doxygen.conf:# Korean, Korean-en (Korean with English messages), Latvian, Lithuanian,
doxygen/doxygen.conf:# Serbian, Serbian-Cyrillic, Slovak, Slovene, Spanish, Swedish, Turkish,
doxygen/doxygen.conf:# This tag implements a quasi-intelligent brief description abbreviator that is
doxygen/doxygen.conf:# text. Otherwise, the brief description is used as-is. If left blank, the
doxygen/doxygen.conf:# The STRIP_FROM_PATH tag can be used to strip a user-defined part of the path.
doxygen/doxygen.conf:# Stripping is only done if one of the specified strings matches the left-hand
doxygen/doxygen.conf:# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of the
doxygen/doxygen.conf:# using the -I flag.
doxygen/doxygen.conf:# support long names like on DOS, Mac, or CD-ROM.
doxygen/doxygen.conf:# first line (until the first dot) of a Javadoc-style comment as the brief
doxygen/doxygen.conf:# description. If set to NO, the Javadoc-style will behave just like regular Qt-
doxygen/doxygen.conf:# line (until the first dot) of a Qt-style comment as the brief description. If
doxygen/doxygen.conf:# set to NO, the Qt-style will behave just like regular Qt-style comments (thus
doxygen/doxygen.conf:# multi-line C++ special comment block (i.e. a block of //! or /// comments) as
doxygen/doxygen.conf:# to treat a multi-line C++ comment block as a detailed description. Set this
doxygen/doxygen.conf:# documentation from any documented member that it re-implements.
doxygen/doxygen.conf:# documentation, which will result in a user-defined paragraph with heading
doxygen/doxygen.conf:# This tag can be used to specify a number of word-keyword mappings (TCL only).
doxygen/doxygen.conf:# extension. Doxygen has a built-in mapping, but you can override or extend it
doxygen/doxygen.conf:# Csharp (C#), C, C++, D, PHP, md (Markdown), Objective-C, Python, Slice,
doxygen/doxygen.conf:# If the MARKDOWN_SUPPORT tag is enabled then doxygen pre-processes all comments
doxygen/doxygen.conf:# When the TOC_INCLUDE_HEADINGS tag is set to a non-zero value, all headings up
doxygen/doxygen.conf:# code, doxygen keeps a cache of pre-resolved symbols. If the cache is too small
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:# This flag is only useful for Objective-C code. If set to YES, local methods,
doxygen/doxygen.conf:# names in lower-case letters. If set to YES, upper-case letters are also
doxygen/doxygen.conf:# fully-qualified names, including namespaces. If set to NO, the class list will
doxygen/doxygen.conf:# popen()) the command command input-file, where command is the value of the
doxygen/doxygen.conf:# FILE_VERSION_FILTER tag, and input-file is the name of an input file provided
doxygen/doxygen.conf:# that represents doxygen's defaults, run doxygen with the -l option. You can
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:# that doxygen parses. Internally doxygen uses the UTF-8 encoding. Doxygen uses
doxygen/doxygen.conf:# The default value is: UTF-8.
doxygen/doxygen.conf:INPUT_ENCODING         = UTF-8
doxygen/doxygen.conf:# *.h) to filter out the source-files in the directories.
doxygen/doxygen.conf:# *.h) to filter out the source-files in the directories. If left blank all
doxygen/doxygen.conf:# <filter> <input-file>
doxygen/doxygen.conf:# where <filter> is the value of the INPUT_FILTER tag, and <input-file> is the
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:# generated. Documented entities will be cross-referenced with these sources.
doxygen/doxygen.conf:# point to the HTML generated by the htags(1) tool instead of doxygen built-in
doxygen/doxygen.conf:# - Install the latest version of global
doxygen/doxygen.conf:# - Enable SOURCE_BROWSER and USE_HTAGS in the configuration file
doxygen/doxygen.conf:# - Make sure the INPUT points to the root of the source tree
doxygen/doxygen.conf:# - Run doxygen as normal
doxygen/doxygen.conf:# rich C++ code for which doxygen's built-in parser lacks the necessary type
doxygen/doxygen.conf:# generated with the -Duse_libclang=ON option for CMake.
doxygen/doxygen.conf:# were built. This is equivalent to specifying the "-p" option to a clang tool,
doxygen/doxygen.conf:# such as clang-check. These options will then be passed to the parser.
doxygen/doxygen.conf:# generated with the -Duse_libclang=ON option for CMake.
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:# The HTML_HEADER tag can be used to specify a user-defined HTML header file for
doxygen/doxygen.conf:# doxygen -w html new_header.html new_footer.html new_stylesheet.css
doxygen/doxygen.conf:# The HTML_FOOTER tag can be used to specify a user-defined HTML footer for each
doxygen/doxygen.conf:# The HTML_STYLESHEET tag can be used to specify a user-defined cascading style
doxygen/doxygen.conf:# sheet that is used by each HTML page. It can be used to fine-tune the look of
doxygen/doxygen.conf:# The HTML_EXTRA_STYLESHEET tag can be used to specify additional user-defined
doxygen/doxygen.conf:# files will be copied as-is; there are no commands or markers available.
doxygen/doxygen.conf:# set bundle. This should be a reverse domain-name style string, e.g.
doxygen/doxygen.conf:# the documentation publisher. This should be a reverse domain-name style
doxygen/doxygen.conf:# (see: https://www.microsoft.com/en-us/download/details.aspx?id=21138) on
doxygen/doxygen.conf:# including file name) of the HTML help compiler (hhc.exe). If non-empty,
doxygen/doxygen.conf:# (see: http://doc.qt.io/archives/qt-4.8/qthelpproject.html#namespace).
doxygen/doxygen.conf:# Folders (see: http://doc.qt.io/archives/qt-4.8/qthelpproject.html#virtual-
doxygen/doxygen.conf:# Filters (see: http://doc.qt.io/archives/qt-4.8/qthelpproject.html#custom-
doxygen/doxygen.conf:# Filters (see: http://doc.qt.io/archives/qt-4.8/qthelpproject.html#custom-
doxygen/doxygen.conf:# http://doc.qt.io/archives/qt-4.8/qthelpproject.html#filter-attributes).
doxygen/doxygen.conf:# qhelpgenerator. If non-empty doxygen will try to run qhelpgenerator on the
doxygen/doxygen.conf:# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index
doxygen/doxygen.conf:# value is set to YES, a side panel will be generated containing a tree-like
doxygen/doxygen.conf:# further fine-tune the look of the index. As an example, the default style
doxygen/doxygen.conf:# instead of using pre-rendered bitmaps. Use this if you do not have LaTeX
doxygen/doxygen.conf:# Possible values are: HTML-CSS (which is slower, but has the best
doxygen/doxygen.conf:# The default value is: HTML-CSS.
doxygen/doxygen.conf:MATHJAX_FORMAT         = HTML-CSS
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:# Note: Only use a user-defined header if you know what you are doing! The
doxygen/doxygen.conf:# Note: Only use a user-defined footer if you know what you are doing!
doxygen/doxygen.conf:# The LATEX_EXTRA_STYLESHEET tag can be used to specify additional user-defined
doxygen/doxygen.conf:# directory. Note that the files will be copied as-is; there are no commands or
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:# generated using doxygen -e rtf extensionFile.
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:# listings (including syntax highlighting and cross-referencing information) to
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:# program listings (including syntax highlighting and cross-referencing
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:# C-preprocessor directives found in the sources and include files.
doxygen/doxygen.conf:# patterns (like *.h and *.hpp) to filter out the header-files in the
doxygen/doxygen.conf:# defined before the preprocessor is started (similar to the -D option of e.g.
doxygen/doxygen.conf:# remove all references to function-like macros that are alone on a line, have
doxygen/doxygen.conf:# are typically used for boiler-plate code, and will confuse the parser if not
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:#---------------------------------------------------------------------------
doxygen/doxygen.conf:# badly anti-aliased labels on the edges of a graph (i.e. they become hard to
doxygen/doxygen.conf:# files in one run (i.e. multiple -o and -T options on the command line). This
fork-sync.sh:echo "---Fetching---"
fork-sync.sh:echo "---Checking out---"
fork-sync.sh:echo "---Merging---"
LICENSE:       of the Library that is interface-compatible with the Linked
phpstan.neon.dist:	- tests/phpstan/configs/actual-problems.neon
phpstan.neon.dist:	- tests/phpstan/configs/check-explicit-mixed-baseline.neon
phpstan.neon.dist:	- tests/phpstan/configs/com-dotnet-magic.neon
phpstan.neon.dist:	- tests/phpstan/configs/gc-hacks.neon
phpstan.neon.dist:	- tests/phpstan/configs/l7-baseline.neon
phpstan.neon.dist:	- tests/phpstan/configs/l8-baseline.neon
phpstan.neon.dist:	- tests/phpstan/configs/php-bugs.neon
phpstan.neon.dist:	- tests/phpstan/configs/phpstan-bugs.neon
phpstan.neon.dist:	- tests/phpstan/configs/phpunit-wiring-tests.neon
phpstan.neon.dist:	- tests/phpstan/configs/pthreads-bugs.neon
phpstan.neon.dist:	- tests/phpstan/configs/runtime-type-checks.neon
phpstan.neon.dist:	- vendor/phpstan/phpstan-phpunit/extension.neon
phpstan.neon.dist:	- vendor/phpstan/phpstan-phpunit/rules.neon
phpstan.neon.dist:	- vendor/phpstan/phpstan-strict-rules/rules.neon
phpstan.neon.dist:		- tests/phpstan/bootstrap.php
phpstan.neon.dist:	    - tests/plugins/TesterPlugin
phpstan.neon.dist:		- src/pocketmine/PocketMine.php
phpstan.neon.dist:		- build/make-release.php
phpstan.neon.dist:		- build/server-phar.php
phpstan.neon.dist:		- src
phpstan.neon.dist:		- build/make-release.php
phpstan.neon.dist:		- build/server-phar.php
phpstan.neon.dist:		- tests/phpunit
phpstan.neon.dist:		- tests/plugins/TesterPlugin
phpstan.neon.dist:		- pocketmine\IS_DEVELOPMENT_BUILD
phpstan.neon.dist:		- pocketmine\DEBUG
phpstan.neon.dist:		- tests/phpstan/stubs/pthreads.stub
phpstan.neon.dist:		- tests/phpstan/stubs/chunkutils.stub
phpstan.neon.dist:		- tests/phpstan/stubs/leveldb.stub
phpstan.neon.dist:	reportUnmatchedIgnoredErrors: false #no other way to silence platform-specific non-warnings
phpstan.neon.dist:		- "#^COM$#"
phpstan.neon.dist:	    #variadics don't work for this - mixed probably shouldn't work either, but for now it does
phpstan.neon.dist:	    #we'll just fill it with 10 - it's very unlikely to encounter a callable with 10 parameters anyway.
README.md:	<a href="https://pmmp.io"><img src="http://cdn.pocketmine.net/img/PocketMine-MP-h.png"></img></a><br>
README.md:	<img src="https://github.com/pmmp/PocketMine-MP/workflows/CI/badge.svg" alt="CI" />
README.md:	<a href="https://github.com/pmmp/PocketMine-MP/releases"><img src="https://img.shields.io/github/v/tag/pmmp/PocketMine-MP?label=release&logo=github" alt="GitHub tag (latest semver)" /></a>
README.md:	<a href="https://hub.docker.com/r/pmmp/pocketmine-mp"><img src="https://img.shields.io/docker/v/pmmp/pocketmine-mp?logo=docker&label=image" alt="Docker image version (latest semver)" /></a>
README.md:- [Documentation](http://pmmp.readthedocs.org/)
README.md:- [Installation instructions](https://pmmp.readthedocs.io/en/rtfd/installation.html)
README.md:- [Docker image](https://hub.docker.com/r/pmmp/pocketmine-mp)
README.md:- [Plugin repository](https://poggit.pmmp.io/plugins)
README.md:- [Forums](https://forums.pmmp.io/)
README.md:- [Discord](https://discord.gg/bmSAZBG)
README.md:- [StackOverflow](https://stackoverflow.com/tags/pocketmine)
README.md: * [Latest API documentation](https://jenkins.pmmp.io/job/PocketMine-MP-doc/doxygen/) - Doxygen documentation generated from development
README.md: * [DevTools](https://github.com/pmmp/DevTools/) - Development tools plugin for creating plugins
README.md: * [ExamplePlugin](https://github.com/pmmp/ExamplePlugin/) - Example plugin demonstrating some basic API features
README.md:- Bitcoin Cash (BCH): `qq3r46hn6ljnhnqnfwxt5pg3g447eq9jhvw5ddfear`
README.md:- Bitcoin (BTC): `171u8K9e4FtU6j3e5sqNoxKUgEw9qWQdRV`
README.md:- Stellar Lumens (XLM): `GAAC5WZ33HCTE3BFJFZJXONMEIBNHFLBXM2HJVAZHXXPYA3HP5XPPS7T`
README.md:- [Patreon](https://www.patreon.com/pocketminemp)
README.md:This project is licensed under LGPL-3.0. Please see the [LICENSE](/LICENSE) file for details.
README.md:pmmp/PocketMine are not affiliated with Mojang. All brands and trademarks belong to their respective owners. PocketMine-MP is not a Mojang-approved software, nor is it associated with Mojang.
SECURITY.md:| -------- | ------------------ |
SECURITY.md:**Contact us** by sending an email to [**team@pmmp.io**](mailto:team@pmmp.io?subject=Security%20Vulnerability%20in%20PocketMine-MP). Include the following information:
SECURITY.md:- Version of PocketMine-MP
SECURITY.md:- Detailed description of the vulnerability (e.g. how to exploit it, what the effects are)
src/pocketmine/ThreadManager.php:		foreach($this->getAll() as $thread){
src/pocketmine/ThreadManager.php:			$logger->debug("Stopping " . $thread->getThreadName() . " thread");
src/pocketmine/ThreadManager.php:				$thread->quit();
src/pocketmine/ThreadManager.php:				$logger->debug($thread->getThreadName() . " thread stopped successfully.");
src/pocketmine/ThreadManager.php:				$logger->debug("Could not stop " . $thread->getThreadName() . " thread: " . $e->getMessage());
src/pocketmine/lang/locale/tlh.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/tlh.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/vie.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/vie.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/gle.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/gle.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/README.md:# PocketMine-Language
src/pocketmine/lang/locale/README.md:These files contain translation strings used in PocketMine-MP.
src/pocketmine/lang/locale/README.md:To contribute translations, please use the [Crowdin Translation Page](http://translate.pocketmine.net/), select the language you want to translate and and go to PocketMine-MP and select "PocketMine core strings"
src/pocketmine/lang/locale/README.md:If you have issues with translation files being deleted, add a language mapping in the Crowdin config. Some issues arose with Chinese due to Chinese Simplified and Chinese Traditional both mapping to `zho`, requiring a mapping to `zho-cn` for simplified.
src/pocketmine/lang/locale/swe.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/swe.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/tur.ini:ability.noclip=No-clip
src/pocketmine/lang/locale/tur.ini:commands.save.usage=/save-all
src/pocketmine/lang/locale/tur.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/tur.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/chs.ini:commands.banip.usage=/ban-ip <Ip地址|名称> [原因]
src/pocketmine/lang/locale/chs.ini:commands.unbanip.usage=/pardon-ip <IP 地址>
src/pocketmine/lang/locale/chs.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/chs.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/hun.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/hun.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/bul.ini:commands.help.header=--- Показва се помощна страница{%0} от {%1} (/помощ <page>) ---
src/pocketmine/lang/locale/bul.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/bul.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/fra.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/fra.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/mlt.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/mlt.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/hrv.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/hrv.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/ces.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/ces.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/pol.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/pol.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/tha.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/tha.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/heb.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/heb.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/fin.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/fin.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/lav.ini:commands.banip.usage=/ban-ip <IP adrese|spēlētāja lietotājvārds> [iemesls ...]
src/pocketmine/lang/locale/lav.ini:commands.help.header=--- Rāda palīdzības lapu {%0} no {%1} (/help <lapa>) ---
src/pocketmine/lang/locale/lav.ini:commands.save-off.usage=/save-off
src/pocketmine/lang/locale/lav.ini:commands.save-on.usage=/save-on
src/pocketmine/lang/locale/lav.ini:commands.save.disabled=Pasaules auto-saglabāšanas režīms izslēgts
src/pocketmine/lang/locale/lav.ini:commands.save.enabled=Pasaules auto-saglabāšanas režīms ieslēgts
src/pocketmine/lang/locale/lav.ini:commands.save.usage=/save-all
src/pocketmine/lang/locale/lav.ini:commands.tp.usage=/tp [spēlētājs1] <spēlētājs2> VAI /tp [spēlētājs1] <x> <y> <z> [<y-rot> <x-rot>]
src/pocketmine/lang/locale/lav.ini:commands.unbanip.usage=/pardon-ip <IP adrese>
src/pocketmine/lang/locale/lav.ini:pocketmine.disconnect.invalidSession.tooEarly=Žetonu nevar vēl izmantot - pārbaudiet vai servera datums/laiks atbilst klienta.
src/pocketmine/lang/locale/lav.ini:pocketmine.disconnect.invalidSession.tooLate=Žetonu derīgums ir beidzies - pārbaudiet vai servera datums/laiks atbilst klienta.
src/pocketmine/lang/locale/lav.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/lav.ini:pocketmine.level.ambiguousFormat=Nevarēja identificēt pareizo formātu - sakrīt ar vairākiem formātiem ({%0})
src/pocketmine/lang/locale/lav.ini:pocketmine.server.authProperty.disabled=Lai ieslēgtu autentifikāciju, uzlieciet "xbox-auth" uz "true" failā server.properties.
src/pocketmine/lang/locale/lav.ini:pocketmine.server.authProperty.enabled=Lai izslēgtu autentifikāciju, uzlieciet "xbox-auth" uz "false" failā server.properties.
src/pocketmine/lang/locale/lav.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/lav.ini:pocketmine_plugins=Apskatiet Spraudņu Repozitoriju, lai pievienotu jaunas īpašības, mini-spēles, vai advancētu aizsardzību jūsu serverim.
src/pocketmine/lang/locale/nld.ini:commands.banip.invalid=Je hebt een ongeldig IP-adres of een speler die niet online is ingevoerd
src/pocketmine/lang/locale/nld.ini:commands.banip.usage=/ban-ip <adres|naam> [reden ...]
src/pocketmine/lang/locale/nld.ini:commands.banlist.ips=Er zijn in totaal {%0} verbannen IP-adressen:
src/pocketmine/lang/locale/nld.ini:commands.deop.success=De-opped {%0}
src/pocketmine/lang/locale/nld.ini:commands.help.header=--- Help pagina {%0} van de {%1} (/help <pagina>) ---
src/pocketmine/lang/locale/nld.ini:commands.save-off.usage=/save-off
src/pocketmine/lang/locale/nld.ini:commands.save-on.usage=/save-on
src/pocketmine/lang/locale/nld.ini:commands.save.usage=/save-all
src/pocketmine/lang/locale/nld.ini:commands.tp.usage=/tp [speler] <eindpunt speler> OF /tp [speler] <x> <y> <z> [<y-rot> <x-rot>]
src/pocketmine/lang/locale/nld.ini:commands.unbanip.invalid=Je hebt een ongeldig IP-adres ingevuld
src/pocketmine/lang/locale/nld.ini:commands.unbanip.usage=/pardon-ip <adres>
src/pocketmine/lang/locale/nld.ini:pocketmine.disconnect.invalidSession.tooEarly=Token kan nog niet worden gebruikt - check of de server's datum/tijd overeenkomt met die van de speler.
src/pocketmine/lang/locale/nld.ini:pocketmine.disconnect.invalidSession.tooLate=Token is verlopen - check of de server's datum/tijd overeenkomt met die van de speler.
src/pocketmine/lang/locale/nld.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/nld.ini:pocketmine.command.ban.ip.description=Voorkomt dat het opgegeven IP-adres gebruik maakt van deze server
src/pocketmine/lang/locale/nld.ini:pocketmine.command.unban.ip.description=Staat het opgegeven IP-adres toe om deze server te gebruiken
src/pocketmine/lang/locale/nld.ini:pocketmine.level.ambiguousFormat=Kon geen correct wereldformaat identificeren - Meerdere formaten gevonden ({%0})
src/pocketmine/lang/locale/nld.ini:pocketmine.server.authProperty.disabled=Om authenticatie aan te zetten, zet "xbox-auth" naar "true" in de server.properties.
src/pocketmine/lang/locale/nld.ini:pocketmine.server.authProperty.enabled=Om authenticatie uit te zetten, zet "xbox-auth" naar "false" in de server.properties.
src/pocketmine/lang/locale/nld.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/nld.ini:ip_confirm=Wees zeker dit te controleren, als je moet port-forwarden en je slaat dit over, kunnen externe spelers niet op de server spelen. [Druk op Enter]
src/pocketmine/lang/locale/nld.ini:ip_warning=Je externe IP is {%EXTERNAL_IP}. Het is mogelijk dat je moet port-forwarden naar je interne IP:{%INTERNAL_IP}
src/pocketmine/lang/locale/nld.ini:skip_installer=Wil je de set-up stappen overslaan?
src/pocketmine/lang/locale/nld.ini:you_have_finished=Je hebt de set-up stappen correct beëindigd
src/pocketmine/lang/locale/kor.ini:ability.noclip=No-clip
src/pocketmine/lang/locale/kor.ini:commands.banip.usage=/ban-ip <주소|이름> [사유 ...]
src/pocketmine/lang/locale/kor.ini:commands.help.header=--- 도움말 {%1}쪽 중 {%0}쪽 (/help <쪽 번호>) ---
src/pocketmine/lang/locale/kor.ini:commands.save-off.usage=/save-off
src/pocketmine/lang/locale/kor.ini:commands.save-on.usage=/save-on
src/pocketmine/lang/locale/kor.ini:commands.save.usage=/save-all
src/pocketmine/lang/locale/kor.ini:commands.unbanip.usage=/pardon-ip <주소>
src/pocketmine/lang/locale/kor.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/kor.ini:pocketmine.server.authProperty.disabled=인증을 활성화하려면, server.properties에서 "xbox-auth"를 "true"로 설정하세요.
src/pocketmine/lang/locale/kor.ini:pocketmine.server.authProperty.enabled=인증을 비활성화하려면, server.properties에서 "xbox-auth"를 "false"로 설정하세요.
src/pocketmine/lang/locale/kor.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/rus.ini:ability.noclip=Нет-клип
src/pocketmine/lang/locale/rus.ini:commands.banip.invalid=Вы ввели неправильный IP-адрес или игрока, который не в сети
src/pocketmine/lang/locale/rus.ini:commands.banip.success.players=Запрещенный IP-адрес {%0}, принадлежащий {%1}
src/pocketmine/lang/locale/rus.ini:commands.banip.success=Запрещенный IP-адрес {%0}
src/pocketmine/lang/locale/rus.ini:commands.banip.usage=/ban-ip <IP адрес|имя игрока> [причина ...]
src/pocketmine/lang/locale/rus.ini:commands.banlist.ips=Есть {%0} Всего запрещенных IP-адресов:
src/pocketmine/lang/locale/rus.ini:commands.help.header=--- Страница помощи {%0} из {%1} (/help <страница>) ---
src/pocketmine/lang/locale/rus.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/rus.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/tgl.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/tgl.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/nor.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/nor.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/ell.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/ell.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/ukr.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/ukr.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/jpn.ini:ability.noclip=No-clip
src/pocketmine/lang/locale/jpn.ini:commands.banip.usage=/ban-ip <アドレス|名前> [理由 …]
src/pocketmine/lang/locale/jpn.ini:commands.save-off.usage=/save-off
src/pocketmine/lang/locale/jpn.ini:commands.save-on.usage=/save-on
src/pocketmine/lang/locale/jpn.ini:commands.save.usage=/save-all
src/pocketmine/lang/locale/jpn.ini:commands.unbanip.usage=/pardon-ip <アドレス>
src/pocketmine/lang/locale/jpn.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/jpn.ini:pocketmine.server.authProperty.disabled=認証を有効にするには、server.properties で「xbox-auth」を「true」に設定してください。
src/pocketmine/lang/locale/jpn.ini:pocketmine.server.authProperty.enabled=認証を無効にするには、server.properties で「xbox-auth」を「false」に設定してください。
src/pocketmine/lang/locale/jpn.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/.github/PULL_REQUEST_TEMPLATE.md:<!-- 
src/pocketmine/lang/locale/.github/PULL_REQUEST_TEMPLATE.md:-->
src/pocketmine/lang/locale/afr.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/afr.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/crowdin.yml:  - source: eng.ini
src/pocketmine/lang/locale/crowdin.yml:        zh-CN: chs
src/pocketmine/lang/locale/ara.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/ara.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/deu.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/deu.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/est.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/est.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/spa.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/spa.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/ita.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/ita.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/por.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/por.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/zho.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/zho.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/eng.ini:ability.noclip=No-clip
src/pocketmine/lang/locale/eng.ini:commands.banip.usage=/ban-ip <address|name> [reason ...]
src/pocketmine/lang/locale/eng.ini:commands.deop.success=De-opped {%0}
src/pocketmine/lang/locale/eng.ini:commands.help.header=--- Showing help page {%0} of {%1} (/help <page>) ---
src/pocketmine/lang/locale/eng.ini:commands.save-off.usage=/save-off
src/pocketmine/lang/locale/eng.ini:commands.save-on.usage=/save-on
src/pocketmine/lang/locale/eng.ini:commands.save.disabled=Turned off world auto-saving
src/pocketmine/lang/locale/eng.ini:commands.save.enabled=Turned on world auto-saving
src/pocketmine/lang/locale/eng.ini:commands.save.usage=/save-all
src/pocketmine/lang/locale/eng.ini:commands.tp.usage=/tp [target player] <destination player> OR /tp [target player] <x> <y> <z> [<y-rot> <x-rot>]
src/pocketmine/lang/locale/eng.ini:commands.unbanip.usage=/pardon-ip <address>
src/pocketmine/lang/locale/eng.ini:pocketmine.disconnect.invalidSession.tooEarly=Token can't be used yet - check the server's date/time matches the client.
src/pocketmine/lang/locale/eng.ini:pocketmine.disconnect.invalidSession.tooLate=Token has expired - check the server's date/time matches the client.
src/pocketmine/lang/locale/eng.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/eng.ini:pocketmine.level.ambiguousFormat=Cannot identify correct format - matched multiple formats ({%0})
src/pocketmine/lang/locale/eng.ini:pocketmine.server.authProperty.disabled=To enable authentication, set "xbox-auth" to "true" in server.properties.
src/pocketmine/lang/locale/eng.ini:pocketmine.server.authProperty.enabled=To disable authentication, set "xbox-auth" to "false" in server.properties.
src/pocketmine/lang/locale/eng.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/eng.ini:ip_warning = Your external IP is {%EXTERNAL_IP}. You may have to port-forward to your internal IP {%INTERNAL_IP}
src/pocketmine/lang/locale/eng.ini:skip_installer = Do you want to skip the set-up wizard?
src/pocketmine/lang/locale/eng.ini:whitelist_enable = Do you want to enable the white-list?
src/pocketmine/lang/locale/eng.ini:whitelist_info = The white-list only allows players in it to join.
src/pocketmine/lang/locale/eng.ini:whitelist_warning = You will have to add the players to the white-list
src/pocketmine/lang/locale/eng.ini:you_have_finished = You have finished the set-up wizard correctly
src/pocketmine/lang/locale/msa.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/msa.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/locale/ind.ini:; -------------------- PocketMine language strings, only for console --------------------
src/pocketmine/lang/locale/ind.ini:; -------------------- PocketMine setup-wizard strings, only for console --------------------
src/pocketmine/lang/TranslationContainer.php:		$this->setParameters($params);
src/pocketmine/lang/TranslationContainer.php:		return $this->params;
src/pocketmine/lang/TranslationContainer.php:		return $this->params[$i] ?? null;
src/pocketmine/lang/TranslationContainer.php:		if($i < 0 or $i > count($this->params)){ //Intended, allow to set the last
src/pocketmine/lang/TranslationContainer.php:			throw new \InvalidArgumentException("Invalid index $i, have " . count($this->params));
src/pocketmine/lang/TranslationContainer.php:		$this->params[$i] = $str;
src/pocketmine/lang/TranslationContainer.php:			$this->params[$i] = (string) $str;
src/pocketmine/lang/BaseLang.php:	 * @phpstan-return array<string, string>
src/pocketmine/lang/BaseLang.php:					return substr($filename, -4) === ".ini";
src/pocketmine/lang/BaseLang.php:						$result[substr($file, 0, -4)] = $strings["language.name"];
src/pocketmine/lang/BaseLang.php:		$this->langName = strtolower($lang);
src/pocketmine/lang/BaseLang.php:		if(!self::loadLang($file = $path . $this->langName . ".ini", $this->lang)){
src/pocketmine/lang/BaseLang.php:			MainLogger::getLogger()->error("Missing required language file $file");
src/pocketmine/lang/BaseLang.php:		if(!self::loadLang($file = $path . $fallback . ".ini", $this->fallbackLang)){
src/pocketmine/lang/BaseLang.php:			MainLogger::getLogger()->error("Missing required language file $file");
src/pocketmine/lang/BaseLang.php:		return $this->get("language.name");
src/pocketmine/lang/BaseLang.php:		return $this->langName;
src/pocketmine/lang/BaseLang.php:		$baseText = $this->get($str);
src/pocketmine/lang/BaseLang.php:		$baseText = $this->parseTranslation(($onlyPrefix === null or strpos($str, $onlyPrefix) === 0) ? $baseText : $str, $onlyPrefix);
src/pocketmine/lang/BaseLang.php:			$baseText = str_replace("{%$i}", $this->parseTranslation((string) $p), $baseText);
src/pocketmine/lang/BaseLang.php:			$baseText = $this->internalGet($c->getText());
src/pocketmine/lang/BaseLang.php:			$baseText = $this->parseTranslation($baseText ?? $c->getText());
src/pocketmine/lang/BaseLang.php:			foreach($c->getParameters() as $i => $p){
src/pocketmine/lang/BaseLang.php:				$baseText = str_replace("{%$i}", $this->parseTranslation($p), $baseText);
src/pocketmine/lang/BaseLang.php:			$baseText = $this->parseTranslation($c->getText());
src/pocketmine/lang/BaseLang.php:		if(isset($this->lang[$id])){
src/pocketmine/lang/BaseLang.php:			return $this->lang[$id];
src/pocketmine/lang/BaseLang.php:		}elseif(isset($this->fallbackLang[$id])){
src/pocketmine/lang/BaseLang.php:			return $this->fallbackLang[$id];
src/pocketmine/lang/BaseLang.php:		if(isset($this->lang[$id])){
src/pocketmine/lang/BaseLang.php:			return $this->lang[$id];
src/pocketmine/lang/BaseLang.php:		}elseif(isset($this->fallbackLang[$id])){
src/pocketmine/lang/BaseLang.php:			return $this->fallbackLang[$id];
src/pocketmine/lang/BaseLang.php:					($ord >= 0x30 and $ord <= 0x39) // 0-9
src/pocketmine/lang/BaseLang.php:					or ($ord >= 0x41 and $ord <= 0x5a) // A-Z
src/pocketmine/lang/BaseLang.php:					or ($ord >= 0x61 and $ord <= 0x7a) or // a-z
src/pocketmine/lang/BaseLang.php:					$c === "." or $c === "-"
src/pocketmine/lang/BaseLang.php:					if(($t = $this->internalGet(substr($replaceString, 1))) !== null and ($onlyPrefix === null or strpos($replaceString, $onlyPrefix) === 1)){
src/pocketmine/lang/BaseLang.php:			if(($t = $this->internalGet(substr($replaceString, 1))) !== null and ($onlyPrefix === null or strpos($replaceString, $onlyPrefix) === 1)){
src/pocketmine/lang/TextContainer.php:		$this->text = $text;
src/pocketmine/lang/TextContainer.php:		$this->text = $text;
src/pocketmine/lang/TextContainer.php:		return $this->text;
src/pocketmine/lang/TextContainer.php:		return $this->getText();
src/pocketmine/tile/FlowerPot.php:		$this->item = ItemFactory::get($nbt->getShort(self::TAG_ITEM, 0, true), $nbt->getInt(self::TAG_ITEM_DATA, 0, true), 1);
src/pocketmine/tile/FlowerPot.php:		$nbt->setShort(self::TAG_ITEM, $this->item->getId());
src/pocketmine/tile/FlowerPot.php:		$nbt->setInt(self::TAG_ITEM_DATA, $this->item->getDamage());
src/pocketmine/tile/FlowerPot.php:		if(!$this->isEmpty()){
src/pocketmine/tile/FlowerPot.php:		switch($item->getId()){
src/pocketmine/tile/FlowerPot.php:				if($item->getDamage() === 1){
src/pocketmine/tile/FlowerPot.php:		return clone $this->item;
src/pocketmine/tile/FlowerPot.php:		$this->item = clone $item;
src/pocketmine/tile/FlowerPot.php:		$this->onChanged();
src/pocketmine/tile/FlowerPot.php:		$this->setItem(ItemFactory::get(Item::AIR, 0, 0));
src/pocketmine/tile/FlowerPot.php:		return $this->getItem()->isNull();
src/pocketmine/tile/FlowerPot.php:		$nbt->setShort(self::TAG_ITEM, $this->item->getId());
src/pocketmine/tile/FlowerPot.php:		$nbt->setInt(self::TAG_ITEM_DATA, $this->item->getDamage());
src/pocketmine/tile/NameableTrait.php:		return $this->customName ?? $this->getDefaultName();
src/pocketmine/tile/NameableTrait.php:			$this->customName = null;
src/pocketmine/tile/NameableTrait.php:			$this->customName = $name;
src/pocketmine/tile/NameableTrait.php:		return $this->customName !== null;
src/pocketmine/tile/NameableTrait.php:		if($item !== null and $item->hasCustomName()){
src/pocketmine/tile/NameableTrait.php:			$nbt->setString(Nameable::TAG_CUSTOM_NAME, $item->getCustomName());
src/pocketmine/tile/NameableTrait.php:		if($this->customName !== null){
src/pocketmine/tile/NameableTrait.php:			$nbt->setString(Nameable::TAG_CUSTOM_NAME, $this->customName);
src/pocketmine/tile/NameableTrait.php:		if($tag->hasTag(Nameable::TAG_CUSTOM_NAME, StringTag::class)){
src/pocketmine/tile/NameableTrait.php:			$this->customName = $tag->getString(Nameable::TAG_CUSTOM_NAME);
src/pocketmine/tile/NameableTrait.php:		if($this->customName !== null){
src/pocketmine/tile/NameableTrait.php:			$tag->setString(Nameable::TAG_CUSTOM_NAME, $this->customName);
src/pocketmine/tile/Chest.php:		if($nbt->hasTag(self::TAG_PAIRX, IntTag::class) and $nbt->hasTag(self::TAG_PAIRZ, IntTag::class)){
src/pocketmine/tile/Chest.php:			$this->pairX = $nbt->getInt(self::TAG_PAIRX);
src/pocketmine/tile/Chest.php:			$this->pairZ = $nbt->getInt(self::TAG_PAIRZ);
src/pocketmine/tile/Chest.php:		$this->loadName($nbt);
src/pocketmine/tile/Chest.php:		$this->inventory = new ChestInventory($this);
src/pocketmine/tile/Chest.php:		$this->loadItems($nbt);
src/pocketmine/tile/Chest.php:		if($this->isPaired()){
src/pocketmine/tile/Chest.php:			$nbt->setInt(self::TAG_PAIRX, $this->pairX);
src/pocketmine/tile/Chest.php:			$nbt->setInt(self::TAG_PAIRZ, $this->pairZ);
src/pocketmine/tile/Chest.php:		$this->saveName($nbt);
src/pocketmine/tile/Chest.php:		$this->saveItems($nbt);
src/pocketmine/tile/Chest.php:			$tag->removeTag(self::TAG_PAIRX, self::TAG_PAIRZ);
src/pocketmine/tile/Chest.php:		if(!$this->closed){
src/pocketmine/tile/Chest.php:			$this->inventory->removeAllViewers(true);
src/pocketmine/tile/Chest.php:			if($this->doubleInventory !== null){
src/pocketmine/tile/Chest.php:				if($this->isPaired() and $this->level->isChunkLoaded($this->pairX >> 4, $this->pairZ >> 4)){
src/pocketmine/tile/Chest.php:					$this->doubleInventory->removeAllViewers(true);
src/pocketmine/tile/Chest.php:					$this->doubleInventory->invalidate();
src/pocketmine/tile/Chest.php:					if(($pair = $this->getPair()) !== null){
src/pocketmine/tile/Chest.php:						$pair->doubleInventory = null;
src/pocketmine/tile/Chest.php:				$this->doubleInventory = null;
src/pocketmine/tile/Chest.php:			$this->inventory = null;
src/pocketmine/tile/Chest.php:		if($this->isPaired() and $this->doubleInventory === null){
src/pocketmine/tile/Chest.php:			$this->checkPairing();
src/pocketmine/tile/Chest.php:		return $this->doubleInventory instanceof DoubleChestInventory ? $this->doubleInventory : $this->inventory;
src/pocketmine/tile/Chest.php:		return $this->inventory;
src/pocketmine/tile/Chest.php:		if($this->isPaired() and !$this->getLevelNonNull()->isInLoadedTerrain(new Vector3($this->pairX, $this->y, $this->pairZ))){
src/pocketmine/tile/Chest.php:			$this->doubleInventory = null;
src/pocketmine/tile/Chest.php:		}elseif(($pair = $this->getPair()) instanceof Chest){
src/pocketmine/tile/Chest.php:			if(!$pair->isPaired()){
src/pocketmine/tile/Chest.php:				$pair->createPair($this);
src/pocketmine/tile/Chest.php:				$pair->checkPairing();
src/pocketmine/tile/Chest.php:			if($this->doubleInventory === null){
src/pocketmine/tile/Chest.php:				if($pair->doubleInventory !== null){
src/pocketmine/tile/Chest.php:					$this->doubleInventory = $pair->doubleInventory;
src/pocketmine/tile/Chest.php:					if(($pair->x + ($pair->z << 15)) > ($this->x + ($this->z << 15))){ //Order them correctly
src/pocketmine/tile/Chest.php:						$this->doubleInventory = $pair->doubleInventory = new DoubleChestInventory($pair, $this);
src/pocketmine/tile/Chest.php:						$this->doubleInventory = $pair->doubleInventory = new DoubleChestInventory($this, $pair);
src/pocketmine/tile/Chest.php:			$this->doubleInventory = null;
src/pocketmine/tile/Chest.php:			$this->pairX = $this->pairZ = null;
src/pocketmine/tile/Chest.php:		return $this->pairX !== null and $this->pairZ !== null;
src/pocketmine/tile/Chest.php:		if($this->isPaired()){
src/pocketmine/tile/Chest.php:			$tile = $this->getLevelNonNull()->getTileAt($this->pairX, $this->y, $this->pairZ);
src/pocketmine/tile/Chest.php:		if($this->isPaired() or $tile->isPaired()){
src/pocketmine/tile/Chest.php:		$this->createPair($tile);
src/pocketmine/tile/Chest.php:		$this->onChanged();
src/pocketmine/tile/Chest.php:		$tile->onChanged();
src/pocketmine/tile/Chest.php:		$this->checkPairing();
src/pocketmine/tile/Chest.php:		$this->pairX = $tile->x;
src/pocketmine/tile/Chest.php:		$this->pairZ = $tile->z;
src/pocketmine/tile/Chest.php:		$tile->pairX = $this->x;
src/pocketmine/tile/Chest.php:		$tile->pairZ = $this->z;
src/pocketmine/tile/Chest.php:		if(!$this->isPaired()){
src/pocketmine/tile/Chest.php:		$tile = $this->getPair();
src/pocketmine/tile/Chest.php:		$this->pairX = $this->pairZ = null;
src/pocketmine/tile/Chest.php:		$this->onChanged();
src/pocketmine/tile/Chest.php:			$tile->pairX = $tile->pairZ = null;
src/pocketmine/tile/Chest.php:			$tile->checkPairing();
src/pocketmine/tile/Chest.php:			$tile->onChanged();
src/pocketmine/tile/Chest.php:		$this->checkPairing();
src/pocketmine/tile/Chest.php:		if($this->isPaired()){
src/pocketmine/tile/Chest.php:			$nbt->setInt(self::TAG_PAIRX, $this->pairX);
src/pocketmine/tile/Chest.php:			$nbt->setInt(self::TAG_PAIRZ, $this->pairZ);
src/pocketmine/tile/Chest.php:		$this->addNameSpawnData($nbt);
src/pocketmine/tile/Tile.php:	 * @phpstan-var array<string, class-string<Tile>>
src/pocketmine/tile/Tile.php:	 * @phpstan-var array<class-string<Tile>, string>
src/pocketmine/tile/Tile.php:	 * @phpstan-param class-string<Tile> $className
src/pocketmine/tile/Tile.php:		if(is_a($className, Tile::class, true) and !$class->isAbstract()){
src/pocketmine/tile/Tile.php:			$shortName = $class->getShortName();
src/pocketmine/tile/Tile.php:		$this->timings = Timings::getTileEntityTimings($this);
src/pocketmine/tile/Tile.php:		$this->server = $level->getServer();
src/pocketmine/tile/Tile.php:		$this->name = "";
src/pocketmine/tile/Tile.php:		$this->id = Tile::$tileCount++;
src/pocketmine/tile/Tile.php:		parent::__construct($nbt->getInt(self::TAG_X), $nbt->getInt(self::TAG_Y), $nbt->getInt(self::TAG_Z), $level);
src/pocketmine/tile/Tile.php:		$this->readSaveData($nbt);
src/pocketmine/tile/Tile.php:		$this->getLevelNonNull()->addTile($this);
src/pocketmine/tile/Tile.php:		return $this->id;
src/pocketmine/tile/Tile.php:		$nbt->setString(self::TAG_ID, static::getSaveId());
src/pocketmine/tile/Tile.php:		$nbt->setInt(self::TAG_X, $this->x);
src/pocketmine/tile/Tile.php:		$nbt->setInt(self::TAG_Y, $this->y);
src/pocketmine/tile/Tile.php:		$nbt->setInt(self::TAG_Z, $this->z);
src/pocketmine/tile/Tile.php:		$this->writeSaveData($nbt);
src/pocketmine/tile/Tile.php:		$this->writeSaveData($tag = new CompoundTag());
src/pocketmine/tile/Tile.php:		return $tag->getCount() > 0 ? $tag : null;
src/pocketmine/tile/Tile.php:			new IntTag(self::TAG_X, (int) $pos->x),
src/pocketmine/tile/Tile.php:			new IntTag(self::TAG_Y, (int) $pos->y),
src/pocketmine/tile/Tile.php:			new IntTag(self::TAG_Z, (int) $pos->z)
src/pocketmine/tile/Tile.php:			$customBlockData = $item->getCustomBlockData();
src/pocketmine/tile/Tile.php:					$nbt->setTag(clone $customBlockDataTag);
src/pocketmine/tile/Tile.php:		return $this->level->getBlockAt($this->x, $this->y, $this->z);
src/pocketmine/tile/Tile.php:		if($this->closed){
src/pocketmine/tile/Tile.php:		$this->level->updateTiles[$this->id] = $this;
src/pocketmine/tile/Tile.php:		return $this->closed;
src/pocketmine/tile/Tile.php:		$this->close();
src/pocketmine/tile/Tile.php:		if(!$this->closed){
src/pocketmine/tile/Tile.php:			$this->closed = true;
src/pocketmine/tile/Tile.php:			if($this->isValid()){
src/pocketmine/tile/Tile.php:				$this->level->removeTile($this);
src/pocketmine/tile/Tile.php:				$this->setLevel(null);
src/pocketmine/tile/Tile.php:		return $this->name;
src/pocketmine/tile/ItemFrame.php:		if(($itemTag = $nbt->getCompoundTag(self::TAG_ITEM)) !== null){
src/pocketmine/tile/ItemFrame.php:			$this->item = Item::nbtDeserialize($itemTag);
src/pocketmine/tile/ItemFrame.php:			$this->item = ItemFactory::get(Item::AIR, 0, 0);
src/pocketmine/tile/ItemFrame.php:		$this->itemRotation = $nbt->getByte(self::TAG_ITEM_ROTATION, 0, true);
src/pocketmine/tile/ItemFrame.php:		$this->itemDropChance = $nbt->getFloat(self::TAG_ITEM_DROP_CHANCE, 1.0, true);
src/pocketmine/tile/ItemFrame.php:		$nbt->setFloat(self::TAG_ITEM_DROP_CHANCE, $this->itemDropChance);
src/pocketmine/tile/ItemFrame.php:		$nbt->setByte(self::TAG_ITEM_ROTATION, $this->itemRotation);
src/pocketmine/tile/ItemFrame.php:		$nbt->setTag($this->item->nbtSerialize(-1, self::TAG_ITEM));
src/pocketmine/tile/ItemFrame.php:		return !$this->item->isNull();
src/pocketmine/tile/ItemFrame.php:		return clone $this->item;
src/pocketmine/tile/ItemFrame.php:		if($item !== null and !$item->isNull()){
src/pocketmine/tile/ItemFrame.php:			$this->item = clone $item;
src/pocketmine/tile/ItemFrame.php:			$this->item = ItemFactory::get(Item::AIR, 0, 0);
src/pocketmine/tile/ItemFrame.php:		$this->onChanged();
src/pocketmine/tile/ItemFrame.php:		return $this->itemRotation;
src/pocketmine/tile/ItemFrame.php:		$this->itemRotation = $rotation;
src/pocketmine/tile/ItemFrame.php:		$this->onChanged();
src/pocketmine/tile/ItemFrame.php:		return $this->itemDropChance;
src/pocketmine/tile/ItemFrame.php:		$this->itemDropChance = $chance;
src/pocketmine/tile/ItemFrame.php:		$this->onChanged();
src/pocketmine/tile/ItemFrame.php:		$nbt->setFloat(self::TAG_ITEM_DROP_CHANCE, $this->itemDropChance);
src/pocketmine/tile/ItemFrame.php:		$nbt->setByte(self::TAG_ITEM_ROTATION, $this->itemRotation);
src/pocketmine/tile/ItemFrame.php:		$nbt->setTag($this->item->nbtSerialize(-1, self::TAG_ITEM));
src/pocketmine/tile/ContainerTrait.php:		if($tag->hasTag(Container::TAG_ITEMS, ListTag::class)){
src/pocketmine/tile/ContainerTrait.php:			$inventoryTag = $tag->getListTag(Container::TAG_ITEMS);
src/pocketmine/tile/ContainerTrait.php:			$inventory = $this->getRealInventory();
src/pocketmine/tile/ContainerTrait.php:				$inventory->setItem($itemNBT->getByte("Slot"), Item::nbtDeserialize($itemNBT));
src/pocketmine/tile/ContainerTrait.php:		if($tag->hasTag(Container::TAG_LOCK, StringTag::class)){
src/pocketmine/tile/ContainerTrait.php:			$this->lock = $tag->getString(Container::TAG_LOCK);
src/pocketmine/tile/ContainerTrait.php:		foreach($this->getRealInventory()->getContents() as $slot => $item){
src/pocketmine/tile/ContainerTrait.php:			$items[] = $item->nbtSerialize($slot);
src/pocketmine/tile/ContainerTrait.php:		$tag->setTag(new ListTag(Container::TAG_ITEMS, $items, NBT::TAG_Compound));
src/pocketmine/tile/ContainerTrait.php:		if($this->lock !== null){
src/pocketmine/tile/ContainerTrait.php:			$tag->setString(Container::TAG_LOCK, $this->lock);
src/pocketmine/tile/ContainerTrait.php:		return $this->lock === null or $this->lock === $key;
src/pocketmine/tile/Bed.php:		return $this->color;
src/pocketmine/tile/Bed.php:		$this->color = $color & 0xf;
src/pocketmine/tile/Bed.php:		$this->onChanged();
src/pocketmine/tile/Bed.php:		$this->color = $nbt->getByte(self::TAG_COLOR, 14, true);
src/pocketmine/tile/Bed.php:		$nbt->setByte(self::TAG_COLOR, $this->color);
src/pocketmine/tile/Bed.php:		$nbt->setByte(self::TAG_COLOR, $this->color);
src/pocketmine/tile/Bed.php:			$nbt->setByte(self::TAG_COLOR, $item->getDamage());
src/pocketmine/tile/Sign.php:		if($nbt->hasTag(self::TAG_TEXT_BLOB, StringTag::class)){ //MCPE 1.2 save format
src/pocketmine/tile/Sign.php:			$this->text = self::fixTextBlob($nbt->getString(self::TAG_TEXT_BLOB));
src/pocketmine/tile/Sign.php:				if($nbt->hasTag($textKey, StringTag::class)){
src/pocketmine/tile/Sign.php:					$this->text[$i - 1] = $nbt->getString($textKey);
src/pocketmine/tile/Sign.php:		$this->text = array_map(function(string $line) : string{
src/pocketmine/tile/Sign.php:			return mb_scrub($line, 'UTF-8');
src/pocketmine/tile/Sign.php:		}, $this->text);
src/pocketmine/tile/Sign.php:		$nbt->setString(self::TAG_TEXT_BLOB, implode("\n", $this->text));
src/pocketmine/tile/Sign.php:		for($i = 1; $i <= 4; ++$i){ //Backwards-compatibility
src/pocketmine/tile/Sign.php:			$nbt->setString($textKey, $this->getLine($i - 1));
src/pocketmine/tile/Sign.php:			$this->setLine(0, $line1, false);
src/pocketmine/tile/Sign.php:			$this->setLine(1, $line2, false);
src/pocketmine/tile/Sign.php:			$this->setLine(2, $line3, false);
src/pocketmine/tile/Sign.php:			$this->setLine(3, $line4, false);
src/pocketmine/tile/Sign.php:		$this->onChanged();
src/pocketmine/tile/Sign.php:	 * @param int    $index 0-3
src/pocketmine/tile/Sign.php:			throw new \InvalidArgumentException("Index must be in the range 0-3!");
src/pocketmine/tile/Sign.php:		if(!mb_check_encoding($line, 'UTF-8')){
src/pocketmine/tile/Sign.php:			throw new \InvalidArgumentException("Text must be valid UTF-8");
src/pocketmine/tile/Sign.php:		$this->text[$index] = $line;
src/pocketmine/tile/Sign.php:			$this->onChanged();
src/pocketmine/tile/Sign.php:	 * @param int $index 0-3
src/pocketmine/tile/Sign.php:			throw new \InvalidArgumentException("Index must be in the range 0-3!");
src/pocketmine/tile/Sign.php:		return $this->text[$index];
src/pocketmine/tile/Sign.php:		return $this->text;
src/pocketmine/tile/Sign.php:		$nbt->setString(self::TAG_TEXT_BLOB, implode("\n", $this->text));
src/pocketmine/tile/Sign.php:		if($nbt->getString("id") !== Tile::SIGN){
src/pocketmine/tile/Sign.php:		if($nbt->hasTag(self::TAG_TEXT_BLOB, StringTag::class)){
src/pocketmine/tile/Sign.php:			$lines = self::fixTextBlob($nbt->getString(self::TAG_TEXT_BLOB));
src/pocketmine/tile/Sign.php:			//trigger kick + IP ban - TODO: on 4.0 this will require a better fix
src/pocketmine/tile/Sign.php:			throw new \UnexpectedValueException($player->getName() . " tried to write $size bytes of text onto a sign (bigger than max 1000)");
src/pocketmine/tile/Sign.php:		$removeFormat = $player->getRemoveFormat();
src/pocketmine/tile/Sign.php:		$ev = new SignChangeEvent($this->getBlock(), $player, array_map(function(string $line) use ($removeFormat) : string{ return TextFormat::clean($line, $removeFormat); }, $lines));
src/pocketmine/tile/Sign.php:		$ev->call();
src/pocketmine/tile/Sign.php:		if(!$ev->isCancelled()){
src/pocketmine/tile/Sign.php:			$this->setText(...$ev->getLines());
src/pocketmine/tile/Banner.php:		$this->baseColor = $nbt->getInt(self::TAG_BASE, self::COLOR_BLACK, true);
src/pocketmine/tile/Banner.php:		$this->patterns = $nbt->getListTag(self::TAG_PATTERNS) ?? new ListTag(self::TAG_PATTERNS);
src/pocketmine/tile/Banner.php:		$this->loadName($nbt);
src/pocketmine/tile/Banner.php:		$nbt->setInt(self::TAG_BASE, $this->baseColor);
src/pocketmine/tile/Banner.php:		$nbt->setTag($this->patterns);
src/pocketmine/tile/Banner.php:		$this->saveName($nbt);
src/pocketmine/tile/Banner.php:		$nbt->setInt(self::TAG_BASE, $this->baseColor);
src/pocketmine/tile/Banner.php:		$nbt->setTag($this->patterns);
src/pocketmine/tile/Banner.php:		$this->addNameSpawnData($nbt);
src/pocketmine/tile/Banner.php:		return $this->baseColor;
src/pocketmine/tile/Banner.php:		$this->baseColor = $color;
src/pocketmine/tile/Banner.php:		$this->onChanged();
src/pocketmine/tile/Banner.php:		$this->patterns->push(new CompoundTag("", [
src/pocketmine/tile/Banner.php:		$this->onChanged();
src/pocketmine/tile/Banner.php:		return $this->patterns->count() - 1; //Last offset in the list
src/pocketmine/tile/Banner.php:		return $this->patterns->isset($patternId);
src/pocketmine/tile/Banner.php:	 * @phpstan-return array{Color?: int, Pattern?: string}
src/pocketmine/tile/Banner.php:		if(!$this->patternExists($patternId)){
src/pocketmine/tile/Banner.php:		$patternTag = $this->patterns->get($patternId);
src/pocketmine/tile/Banner.php:			self::TAG_PATTERN_COLOR => $patternTag->getInt(self::TAG_PATTERN_COLOR),
src/pocketmine/tile/Banner.php:			self::TAG_PATTERN_NAME => $patternTag->getString(self::TAG_PATTERN_NAME)
src/pocketmine/tile/Banner.php:		if(!$this->patternExists($patternId)){
src/pocketmine/tile/Banner.php:		$this->patterns->set($patternId, new CompoundTag("", [
src/pocketmine/tile/Banner.php:		$this->onChanged();
src/pocketmine/tile/Banner.php:		if(!$this->patternExists($patternId)){
src/pocketmine/tile/Banner.php:		$this->patterns->remove($patternId);
src/pocketmine/tile/Banner.php:		$this->onChanged();
src/pocketmine/tile/Banner.php:		return $this->deletePattern($this->getPatternCount() - 1);
src/pocketmine/tile/Banner.php:		return $this->deletePattern(0);
src/pocketmine/tile/Banner.php:		return $this->patterns->count();
src/pocketmine/tile/Banner.php:		return $this->patterns;
src/pocketmine/tile/Banner.php:		$nbt->setInt(self::TAG_BASE, $item !== null ? $item->getDamage() & 0x0f : 0);
src/pocketmine/tile/Banner.php:			if($item->getNamedTag()->hasTag(self::TAG_PATTERNS, ListTag::class)){
src/pocketmine/tile/Banner.php:				$nbt->setTag($item->getNamedTag()->getListTag(self::TAG_PATTERNS));
src/pocketmine/tile/Skull.php:		$this->skullType = $nbt->getByte(self::TAG_SKULL_TYPE, self::TYPE_SKELETON, true);
src/pocketmine/tile/Skull.php:		$this->skullRotation = $nbt->getByte(self::TAG_ROT, 0, true);
src/pocketmine/tile/Skull.php:		$nbt->setByte(self::TAG_SKULL_TYPE, $this->skullType);
src/pocketmine/tile/Skull.php:		$nbt->setByte(self::TAG_ROT, $this->skullRotation);
src/pocketmine/tile/Skull.php:		$this->skullType = $type;
src/pocketmine/tile/Skull.php:		$this->onChanged();
src/pocketmine/tile/Skull.php:		return $this->skullType;
src/pocketmine/tile/Skull.php:		$nbt->setByte(self::TAG_SKULL_TYPE, $this->skullType);
src/pocketmine/tile/Skull.php:		$nbt->setByte(self::TAG_ROT, $this->skullRotation);
src/pocketmine/tile/Skull.php:		$nbt->setByte(self::TAG_SKULL_TYPE, $item !== null ? $item->getDamage() : self::TYPE_SKELETON);
src/pocketmine/tile/Skull.php:			$rot = floor(($player->yaw * 16 / 360) + 0.5) & 0x0F;
src/pocketmine/tile/Skull.php:		$nbt->setByte(self::TAG_ROT, $rot);
src/pocketmine/tile/Spawnable.php:		$pk->x = $this->x;
src/pocketmine/tile/Spawnable.php:		$pk->y = $this->y;
src/pocketmine/tile/Spawnable.php:		$pk->z = $this->z;
src/pocketmine/tile/Spawnable.php:		$pk->namedtag = $this->getSerializedSpawnCompound();
src/pocketmine/tile/Spawnable.php:		if($this->closed){
src/pocketmine/tile/Spawnable.php:		$player->dataPacket($this->createSpawnPacket());
src/pocketmine/tile/Spawnable.php:		$this->spawnToAll();
src/pocketmine/tile/Spawnable.php:		if($this->closed){
src/pocketmine/tile/Spawnable.php:		$this->level->broadcastPacketToViewers($this, $this->createSpawnPacket());
src/pocketmine/tile/Spawnable.php:	 * WARNING: This MUST be called to clear spawn-compound and chunk caches when the tile's spawn compound has changed!
src/pocketmine/tile/Spawnable.php:		$this->spawnCompoundCache = null;
src/pocketmine/tile/Spawnable.php:		$this->spawnToAll();
src/pocketmine/tile/Spawnable.php:		$this->level->clearChunkCache($this->getFloorX() >> 4, $this->getFloorZ() >> 4);
src/pocketmine/tile/Spawnable.php:	 * Returns encoded NBT (varint, little-endian) used to spawn this tile to clients. Uses cache where possible,
src/pocketmine/tile/Spawnable.php:		if($this->spawnCompoundCache === null){
src/pocketmine/tile/Spawnable.php:			$spawnCompoundCache = self::$nbtWriter->write($this->getSpawnCompound());
src/pocketmine/tile/Spawnable.php:			if($spawnCompoundCache === false) throw new AssumptionFailedError("NBTStream->write() should not return false when given a CompoundTag");
src/pocketmine/tile/Spawnable.php:			$this->spawnCompoundCache = $spawnCompoundCache;
src/pocketmine/tile/Spawnable.php:		return $this->spawnCompoundCache;
src/pocketmine/tile/Spawnable.php:			new IntTag(self::TAG_X, $this->x),
src/pocketmine/tile/Spawnable.php:			new IntTag(self::TAG_Y, $this->y),
src/pocketmine/tile/Spawnable.php:			new IntTag(self::TAG_Z, $this->z)
src/pocketmine/tile/Spawnable.php:		$this->addAdditionalSpawnData($nbt);
src/pocketmine/tile/Furnace.php:		if($this->burnTime > 0){
src/pocketmine/tile/Furnace.php:			$this->scheduleUpdate();
src/pocketmine/tile/Furnace.php:		$this->burnTime = max(0, $nbt->getShort(self::TAG_BURN_TIME, 0, true));
src/pocketmine/tile/Furnace.php:		$this->cookTime = $nbt->getShort(self::TAG_COOK_TIME, 0, true);
src/pocketmine/tile/Furnace.php:		if($this->burnTime === 0){
src/pocketmine/tile/Furnace.php:			$this->cookTime = 0;
src/pocketmine/tile/Furnace.php:		$this->maxTime = $nbt->getShort(self::TAG_MAX_TIME, 0, true);
src/pocketmine/tile/Furnace.php:		if($this->maxTime === 0){
src/pocketmine/tile/Furnace.php:			$this->maxTime = $this->burnTime;
src/pocketmine/tile/Furnace.php:		$this->loadName($nbt);
src/pocketmine/tile/Furnace.php:		$this->inventory = new FurnaceInventory($this);
src/pocketmine/tile/Furnace.php:		$this->loadItems($nbt);
src/pocketmine/tile/Furnace.php:		$this->inventory->setEventProcessor(new class($this) implements InventoryEventProcessor{
src/pocketmine/tile/Furnace.php:				$this->furnace = $furnace;
src/pocketmine/tile/Furnace.php:				$this->furnace->scheduleUpdate();
src/pocketmine/tile/Furnace.php:		$nbt->setShort(self::TAG_BURN_TIME, $this->burnTime);
src/pocketmine/tile/Furnace.php:		$nbt->setShort(self::TAG_COOK_TIME, $this->cookTime);
src/pocketmine/tile/Furnace.php:		$nbt->setShort(self::TAG_MAX_TIME, $this->maxTime);
src/pocketmine/tile/Furnace.php:		$this->saveName($nbt);
src/pocketmine/tile/Furnace.php:		$this->saveItems($nbt);
src/pocketmine/tile/Furnace.php:		if(!$this->closed){
src/pocketmine/tile/Furnace.php:			$this->inventory->removeAllViewers(true);
src/pocketmine/tile/Furnace.php:			$this->inventory = null;
src/pocketmine/tile/Furnace.php:		return $this->inventory;
src/pocketmine/tile/Furnace.php:		return $this->getInventory();
src/pocketmine/tile/Furnace.php:		$ev = new FurnaceBurnEvent($this, $fuel, $fuel->getFuelTime());
src/pocketmine/tile/Furnace.php:		$ev->call();
src/pocketmine/tile/Furnace.php:		if($ev->isCancelled()){
src/pocketmine/tile/Furnace.php:		$this->maxTime = $this->burnTime = $ev->getBurnTime();
src/pocketmine/tile/Furnace.php:		if($this->getBlock()->getId() === Block::FURNACE){
src/pocketmine/tile/Furnace.php:			$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::BURNING_FURNACE, $this->getBlock()->getDamage()), true);
src/pocketmine/tile/Furnace.php:		if($this->burnTime > 0 and $ev->isBurning()){
src/pocketmine/tile/Furnace.php:			$this->inventory->setFuel($fuel->getFuelResidue());
src/pocketmine/tile/Furnace.php:		return $this->maxTime > 0 ? (int) ceil($this->burnTime / $this->maxTime * 200) : 0;
src/pocketmine/tile/Furnace.php:		if($this->closed){
src/pocketmine/tile/Furnace.php:		$this->timings->startTiming();
src/pocketmine/tile/Furnace.php:		$prevCookTime = $this->cookTime;
src/pocketmine/tile/Furnace.php:		$prevFuelTicksLeft = $this->getFuelTicksLeft();
src/pocketmine/tile/Furnace.php:		$fuel = $this->inventory->getFuel();
src/pocketmine/tile/Furnace.php:		$raw = $this->inventory->getSmelting();
src/pocketmine/tile/Furnace.php:		$product = $this->inventory->getResult();
src/pocketmine/tile/Furnace.php:		$smelt = $this->server->getCraftingManager()->matchFurnaceRecipe($raw);
src/pocketmine/tile/Furnace.php:		$canSmelt = ($smelt instanceof FurnaceRecipe and $raw->getCount() > 0 and (($smelt->getResult()->equals($product) and $product->getCount() < $product->getMaxStackSize()) or $product->isNull()));
src/pocketmine/tile/Furnace.php:		if($this->burnTime <= 0 and $canSmelt and $fuel->getFuelTime() > 0 and $fuel->getCount() > 0){
src/pocketmine/tile/Furnace.php:			$this->checkFuel($fuel);
src/pocketmine/tile/Furnace.php:		if($this->burnTime > 0){
src/pocketmine/tile/Furnace.php:			--$this->burnTime;
src/pocketmine/tile/Furnace.php:				++$this->cookTime;
src/pocketmine/tile/Furnace.php:				if($this->cookTime >= 200){ //10 seconds
src/pocketmine/tile/Furnace.php:					$product = ItemFactory::get($smelt->getResult()->getId(), $smelt->getResult()->getDamage(), $product->getCount() + 1);
src/pocketmine/tile/Furnace.php:					$ev->call();
src/pocketmine/tile/Furnace.php:					if(!$ev->isCancelled()){
src/pocketmine/tile/Furnace.php:						$this->inventory->setResult($ev->getResult());
src/pocketmine/tile/Furnace.php:						$raw->pop();
src/pocketmine/tile/Furnace.php:						$this->inventory->setSmelting($raw);
src/pocketmine/tile/Furnace.php:					$this->cookTime -= 200;
src/pocketmine/tile/Furnace.php:			}elseif($this->burnTime <= 0){
src/pocketmine/tile/Furnace.php:				$this->burnTime = $this->cookTime = $this->maxTime = 0;
src/pocketmine/tile/Furnace.php:				$this->cookTime = 0;
src/pocketmine/tile/Furnace.php:			if($this->getBlock()->getId() === Block::BURNING_FURNACE){
src/pocketmine/tile/Furnace.php:				$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::FURNACE, $this->getBlock()->getDamage()), true);
src/pocketmine/tile/Furnace.php:			$this->burnTime = $this->cookTime = $this->maxTime = 0;
src/pocketmine/tile/Furnace.php:		if($prevCookTime !== $this->cookTime){
src/pocketmine/tile/Furnace.php:			$pk->property = ContainerSetDataPacket::PROPERTY_FURNACE_TICK_COUNT;
src/pocketmine/tile/Furnace.php:			$pk->value = $this->cookTime;
src/pocketmine/tile/Furnace.php:		$fuelTicksLeft = $this->getFuelTicksLeft();
src/pocketmine/tile/Furnace.php:			$pk->property = ContainerSetDataPacket::PROPERTY_FURNACE_LIT_TIME;
src/pocketmine/tile/Furnace.php:			$pk->value = $fuelTicksLeft;
src/pocketmine/tile/Furnace.php:			foreach($this->getInventory()->getViewers() as $player){
src/pocketmine/tile/Furnace.php:				$windowId = $player->getWindowId($this->getInventory());
src/pocketmine/tile/Furnace.php:						$pk->windowId = $windowId;
src/pocketmine/tile/Furnace.php:						$player->dataPacket(clone $pk);
src/pocketmine/tile/Furnace.php:		$this->timings->stopTiming();
src/pocketmine/tile/Furnace.php:		$nbt->setShort(self::TAG_BURN_TIME, $this->burnTime);
src/pocketmine/tile/Furnace.php:		$nbt->setShort(self::TAG_COOK_TIME, $this->cookTime);
src/pocketmine/tile/Furnace.php:		$this->addNameSpawnData($nbt);
src/pocketmine/wizard/SetupWizard.php: * Set-up wizard used on the first run
src/pocketmine/wizard/SetupWizard.php: * Can be disabled with --no-wizard
src/pocketmine/wizard/SetupWizard.php:		$this->message(\pocketmine\NAME . " set-up wizard");
src/pocketmine/wizard/SetupWizard.php:			$this->error("No language files found, please use provided builds or clone the repository recursively.");
src/pocketmine/wizard/SetupWizard.php:		$this->message("Please select a language");
src/pocketmine/wizard/SetupWizard.php:			$this->writeLine(" $native => $short");
src/pocketmine/wizard/SetupWizard.php:			$lang = strtolower($this->getInput("Language", "eng"));
src/pocketmine/wizard/SetupWizard.php:				$this->error("Couldn't find the language");
src/pocketmine/wizard/SetupWizard.php:		$this->lang = new BaseLang($lang);
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("language_has_been_selected"));
src/pocketmine/wizard/SetupWizard.php:		if(!$this->showLicense()){
src/pocketmine/wizard/SetupWizard.php:		$config->set("language", $lang);
src/pocketmine/wizard/SetupWizard.php:		$config->save();
src/pocketmine/wizard/SetupWizard.php:		if(strtolower($this->getInput($this->lang->get("skip_installer"), "n", "y/N")) === "y"){
src/pocketmine/wizard/SetupWizard.php:			$this->printIpDetails();
src/pocketmine/wizard/SetupWizard.php:		$this->writeLine();
src/pocketmine/wizard/SetupWizard.php:		$this->welcome();
src/pocketmine/wizard/SetupWizard.php:		$this->generateBaseConfig();
src/pocketmine/wizard/SetupWizard.php:		$this->generateUserFiles();
src/pocketmine/wizard/SetupWizard.php:		$this->networkFunctions();
src/pocketmine/wizard/SetupWizard.php:		$this->printIpDetails();
src/pocketmine/wizard/SetupWizard.php:		$this->endWizard();
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->translateString("welcome_to_pocketmine", [\pocketmine\NAME]));
src/pocketmine/wizard/SetupWizard.php:		$this->writeLine();
src/pocketmine/wizard/SetupWizard.php:		if(strtolower($this->getInput($this->lang->get("accept_license"), "n", "y/N")) !== "y"){
src/pocketmine/wizard/SetupWizard.php:			$this->error($this->lang->translateString("you_have_to_accept_the_license", [\pocketmine\NAME]));
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("setting_up_server_now"));
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("default_values_info"));
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("server_properties"));
src/pocketmine/wizard/SetupWizard.php:		$config->set("motd", ($name = $this->getInput($this->lang->get("name_your_server"), self::DEFAULT_NAME)));
src/pocketmine/wizard/SetupWizard.php:		$config->set("server-name", $name);
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("port_warning"));
src/pocketmine/wizard/SetupWizard.php:			$port = (int) $this->getInput($this->lang->get("server_port"), (string) self::DEFAULT_PORT);
src/pocketmine/wizard/SetupWizard.php:				$this->error($this->lang->get("invalid_port"));
src/pocketmine/wizard/SetupWizard.php:		$config->set("server-port", $port);
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("gamemode_info"));
src/pocketmine/wizard/SetupWizard.php:			$gamemode = (int) $this->getInput($this->lang->get("default_gamemode"), (string) self::DEFAULT_GAMEMODE);
src/pocketmine/wizard/SetupWizard.php:		$config->set("gamemode", $gamemode);
src/pocketmine/wizard/SetupWizard.php:		$config->set("max-players", (int) $this->getInput($this->lang->get("max_players"), (string) self::DEFAULT_PLAYERS));
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("spawn_protection_info"));
src/pocketmine/wizard/SetupWizard.php:		if(strtolower($this->getInput($this->lang->get("spawn_protection"), "n", "y/N")) === "n"){
src/pocketmine/wizard/SetupWizard.php:			$config->set("spawn-protection", -1);
src/pocketmine/wizard/SetupWizard.php:			$config->set("spawn-protection", 16);
src/pocketmine/wizard/SetupWizard.php:		$config->save();
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("op_info"));
src/pocketmine/wizard/SetupWizard.php:		$op = strtolower($this->getInput($this->lang->get("op_who"), ""));
src/pocketmine/wizard/SetupWizard.php:			$this->error($this->lang->get("op_warning"));
src/pocketmine/wizard/SetupWizard.php:			$ops->set($op, true);
src/pocketmine/wizard/SetupWizard.php:			$ops->save();
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("whitelist_info"));
src/pocketmine/wizard/SetupWizard.php:		if(strtolower($this->getInput($this->lang->get("whitelist_enable"), "n", "y/N")) === "y"){
src/pocketmine/wizard/SetupWizard.php:			$this->error($this->lang->get("whitelist_warning"));
src/pocketmine/wizard/SetupWizard.php:			$config->set("white-list", true);
src/pocketmine/wizard/SetupWizard.php:			$config->set("white-list", false);
src/pocketmine/wizard/SetupWizard.php:		$config->save();
src/pocketmine/wizard/SetupWizard.php:		$this->error($this->lang->get("query_warning1"));
src/pocketmine/wizard/SetupWizard.php:		$this->error($this->lang->get("query_warning2"));
src/pocketmine/wizard/SetupWizard.php:		if(strtolower($this->getInput($this->lang->get("query_disable"), "n", "y/N")) === "y"){
src/pocketmine/wizard/SetupWizard.php:			$config->set("enable-query", false);
src/pocketmine/wizard/SetupWizard.php:			$config->set("enable-query", true);
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("rcon_info"));
src/pocketmine/wizard/SetupWizard.php:		if(strtolower($this->getInput($this->lang->get("rcon_enable"), "n", "y/N")) === "y"){
src/pocketmine/wizard/SetupWizard.php:			$config->set("enable-rcon", true);
src/pocketmine/wizard/SetupWizard.php:			$config->set("rcon.password", $password);
src/pocketmine/wizard/SetupWizard.php:			$this->message($this->lang->get("rcon_password") . ": " . $password);
src/pocketmine/wizard/SetupWizard.php:			$config->set("enable-rcon", false);
src/pocketmine/wizard/SetupWizard.php:		$config->save();
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("ip_get"));
src/pocketmine/wizard/SetupWizard.php:			$internalIP = "unknown (" . $e->getMessage() . ")";
src/pocketmine/wizard/SetupWizard.php:		$this->error($this->lang->translateString("ip_warning", ["EXTERNAL_IP" => $externalIP, "INTERNAL_IP" => $internalIP]));
src/pocketmine/wizard/SetupWizard.php:		$this->error($this->lang->get("ip_confirm"));
src/pocketmine/wizard/SetupWizard.php:		$this->readLine();
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("you_have_finished"));
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->get("pocketmine_plugins"));
src/pocketmine/wizard/SetupWizard.php:		$this->message($this->lang->translateString("pocketmine_will_start", [\pocketmine\NAME]));
src/pocketmine/wizard/SetupWizard.php:		$this->writeLine();
src/pocketmine/wizard/SetupWizard.php:		$this->writeLine();
src/pocketmine/wizard/SetupWizard.php:		$this->writeLine("[*] " . $message);
src/pocketmine/wizard/SetupWizard.php:		$this->writeLine("[!] " . $message);
src/pocketmine/wizard/SetupWizard.php:		$input = $this->readLine();
src/pocketmine/scheduler/BulkCurlTask.php:	 * @phpstan-param list<array{page: string, timeout?: float, extraHeaders?: list<string>, extraOpts?: array<int, mixed>}> $operations
src/pocketmine/scheduler/BulkCurlTask.php:		$this->storeLocal($complexData);
src/pocketmine/scheduler/BulkCurlTask.php:		$this->operations = serialize($operations);
src/pocketmine/scheduler/BulkCurlTask.php:		/** @phpstan-var list<array{page: string, timeout?: float, extraHeaders?: list<string>, extraOpts?: array<int, mixed>}> $operations */
src/pocketmine/scheduler/BulkCurlTask.php:		$operations = unserialize($this->operations);
src/pocketmine/scheduler/BulkCurlTask.php:		$this->setResult($results);
src/pocketmine/scheduler/FileWriteTask.php:		$this->path = $path;
src/pocketmine/scheduler/FileWriteTask.php:		$this->contents = $contents;
src/pocketmine/scheduler/FileWriteTask.php:		$this->flags = $flags;
src/pocketmine/scheduler/FileWriteTask.php:		file_put_contents($this->path, $this->contents, $this->flags);
src/pocketmine/scheduler/TaskHandler.php:	public function __construct(Task $task, int $taskId, int $delay = -1, int $period = -1, ?string $ownerName = null){
src/pocketmine/scheduler/TaskHandler.php:		if($task->getHandler() !== null){
src/pocketmine/scheduler/TaskHandler.php:		$this->task = $task;
src/pocketmine/scheduler/TaskHandler.php:		$this->taskId = $taskId;
src/pocketmine/scheduler/TaskHandler.php:		$this->delay = $delay;
src/pocketmine/scheduler/TaskHandler.php:		$this->period = $period;
src/pocketmine/scheduler/TaskHandler.php:		$this->taskName = $task->getName();
src/pocketmine/scheduler/TaskHandler.php:		$this->ownerName = $ownerName ?? "Unknown";
src/pocketmine/scheduler/TaskHandler.php:		$this->timings = Timings::getScheduledTaskTimings($this, $period);
src/pocketmine/scheduler/TaskHandler.php:		$this->task->setHandler($this);
src/pocketmine/scheduler/TaskHandler.php:		return $this->cancelled;
src/pocketmine/scheduler/TaskHandler.php:		return $this->nextRun;
src/pocketmine/scheduler/TaskHandler.php:		$this->nextRun = $ticks;
src/pocketmine/scheduler/TaskHandler.php:		return $this->taskId;
src/pocketmine/scheduler/TaskHandler.php:		return $this->task;
src/pocketmine/scheduler/TaskHandler.php:		return $this->delay;
src/pocketmine/scheduler/TaskHandler.php:		return $this->delay > 0;
src/pocketmine/scheduler/TaskHandler.php:		return $this->period > 0;
src/pocketmine/scheduler/TaskHandler.php:		return $this->period;
src/pocketmine/scheduler/TaskHandler.php:			if(!$this->isCancelled()){
src/pocketmine/scheduler/TaskHandler.php:				$this->task->onCancel();
src/pocketmine/scheduler/TaskHandler.php:			$this->remove();
src/pocketmine/scheduler/TaskHandler.php:		$this->cancelled = true;
src/pocketmine/scheduler/TaskHandler.php:		$this->task->setHandler(null);
src/pocketmine/scheduler/TaskHandler.php:		$this->timings->startTiming();
src/pocketmine/scheduler/TaskHandler.php:			$this->task->onRun($currentTick);
src/pocketmine/scheduler/TaskHandler.php:			$this->timings->stopTiming();
src/pocketmine/scheduler/TaskHandler.php:		return $this->taskName;
src/pocketmine/scheduler/TaskHandler.php:		return $this->ownerName;
src/pocketmine/scheduler/AsyncTask.php: * WARNING: Any non-Threaded objects WILL BE SERIALIZED when assigned to members of AsyncTasks or other Threaded object.
src/pocketmine/scheduler/AsyncTask.php: * If you want to store non-serializable objects to access when the task completes, store them using
src/pocketmine/scheduler/AsyncTask.php: * WARNING: Do not call PocketMine-MP API methods from other Threads!!
src/pocketmine/scheduler/AsyncTask.php:	 * @phpstan-var \SplObjectStorage<AsyncTask, mixed>
src/pocketmine/scheduler/AsyncTask.php:		$this->result = null;
src/pocketmine/scheduler/AsyncTask.php:		if(!$this->cancelRun){
src/pocketmine/scheduler/AsyncTask.php:				$this->onRun();
src/pocketmine/scheduler/AsyncTask.php:				$this->crashed = true;
src/pocketmine/scheduler/AsyncTask.php:				$this->worker->handleException($e);
src/pocketmine/scheduler/AsyncTask.php:		$this->setGarbage();
src/pocketmine/scheduler/AsyncTask.php:		return $this->crashed or $this->isTerminated();
src/pocketmine/scheduler/AsyncTask.php:		if($this->serialized){
src/pocketmine/scheduler/AsyncTask.php:			if(!is_string($this->result)) throw new AssumptionFailedError("Result expected to be a serialized string");
src/pocketmine/scheduler/AsyncTask.php:			return unserialize($this->result);
src/pocketmine/scheduler/AsyncTask.php:		return $this->result;
src/pocketmine/scheduler/AsyncTask.php:		$this->cancelRun = true;
src/pocketmine/scheduler/AsyncTask.php:		return $this->cancelRun;
src/pocketmine/scheduler/AsyncTask.php:		return $this->result !== null;
src/pocketmine/scheduler/AsyncTask.php:		$this->result = ($this->serialized = !is_scalar($result)) ? serialize($result) : $result;
src/pocketmine/scheduler/AsyncTask.php:		$this->taskId = $taskId;
src/pocketmine/scheduler/AsyncTask.php:		return $this->taskId;
src/pocketmine/scheduler/AsyncTask.php:		if($this->worker === null or $this->isGarbage()){
src/pocketmine/scheduler/AsyncTask.php:			throw new \BadMethodCallException("Objects stored in AsyncWorker thread-local storage can only be retrieved during task execution");
src/pocketmine/scheduler/AsyncTask.php:		return $this->worker->getFromThreadStore($identifier);
src/pocketmine/scheduler/AsyncTask.php:		if($this->worker === null or $this->isGarbage()){
src/pocketmine/scheduler/AsyncTask.php:			throw new \BadMethodCallException("Objects can only be added to AsyncWorker thread-local storage during task execution");
src/pocketmine/scheduler/AsyncTask.php:		$this->worker->saveToThreadStore($identifier, $value);
src/pocketmine/scheduler/AsyncTask.php:		if($this->worker === null or $this->isGarbage()){
src/pocketmine/scheduler/AsyncTask.php:			throw new \BadMethodCallException("Objects can only be removed from AsyncWorker thread-local storage during task execution");
src/pocketmine/scheduler/AsyncTask.php:		$this->worker->removeFromThreadStore($identifier);
src/pocketmine/scheduler/AsyncTask.php:		$this->progressUpdates[] = serialize($progress);
src/pocketmine/scheduler/AsyncTask.php:		while($this->progressUpdates->count() !== 0){
src/pocketmine/scheduler/AsyncTask.php:			$progress = $this->progressUpdates->shift();
src/pocketmine/scheduler/AsyncTask.php:			$this->onProgressUpdate($server, unserialize($progress));
src/pocketmine/scheduler/AsyncTask.php:	 * Saves mixed data in thread-local storage on the parent thread. You may use this to retain references to objects
src/pocketmine/scheduler/AsyncTask.php:		if($this->worker !== null and $this->worker === \Thread::getCurrentThread()){
src/pocketmine/scheduler/AsyncTask.php:			/** @phpstan-var \SplObjectStorage<AsyncTask, mixed> $storage */
src/pocketmine/scheduler/AsyncTask.php:	 * Returns data previously stored in thread-local storage on the parent thread. Use this during progress updates or
src/pocketmine/scheduler/AsyncTask.php:		if($this->worker !== null and $this->worker === \Thread::getCurrentThread()){
src/pocketmine/scheduler/AsyncTask.php:		return $this->fetchLocal();
src/pocketmine/scheduler/Task.php:		return $this->taskHandler;
src/pocketmine/scheduler/Task.php:		if($this->taskHandler !== null){
src/pocketmine/scheduler/Task.php:			return $this->taskHandler->getTaskId();
src/pocketmine/scheduler/Task.php:		return -1;
src/pocketmine/scheduler/Task.php:		if($this->taskHandler === null or $taskHandler === null){
src/pocketmine/scheduler/Task.php:			$this->taskHandler = $taskHandler;
src/pocketmine/scheduler/AsyncPool.php: * Manages general-purpose worker threads used for processing asynchronous tasks, and the tasks submitted to those
src/pocketmine/scheduler/AsyncPool.php:	 * @phpstan-var array<int, AsyncTask>
src/pocketmine/scheduler/AsyncPool.php:	 * @phpstan-var array<int, int>
src/pocketmine/scheduler/AsyncPool.php:	 * @phpstan-var array<int, AsyncWorker>
src/pocketmine/scheduler/AsyncPool.php:	 * @phpstan-var array<int, int>
src/pocketmine/scheduler/AsyncPool.php:	 * @phpstan-var array<int, int>
src/pocketmine/scheduler/AsyncPool.php:	 * @phpstan-var (\Closure(int $workerId) : void)[]
src/pocketmine/scheduler/AsyncPool.php:		$this->server = $server;
src/pocketmine/scheduler/AsyncPool.php:		$this->size = $size;
src/pocketmine/scheduler/AsyncPool.php:		$this->workerMemoryLimit = $workerMemoryLimit;
src/pocketmine/scheduler/AsyncPool.php:		$this->classLoader = $classLoader;
src/pocketmine/scheduler/AsyncPool.php:		$this->logger = $logger;
src/pocketmine/scheduler/AsyncPool.php:		return $this->size;
src/pocketmine/scheduler/AsyncPool.php:		if($newSize > $this->size){
src/pocketmine/scheduler/AsyncPool.php:			$this->size = $newSize;
src/pocketmine/scheduler/AsyncPool.php:	 * This function will call the hook for every already-running worker.
src/pocketmine/scheduler/AsyncPool.php:	 * @phpstan-param \Closure(int $workerId) : void $hook
src/pocketmine/scheduler/AsyncPool.php:		$this->workerStartHooks[spl_object_hash($hook)] = $hook;
src/pocketmine/scheduler/AsyncPool.php:		foreach($this->workers as $i => $worker){
src/pocketmine/scheduler/AsyncPool.php:	 * Removes a previously-registered callback listening for workers being started.
src/pocketmine/scheduler/AsyncPool.php:	 * @phpstan-param \Closure(int $workerId) : void $hook
src/pocketmine/scheduler/AsyncPool.php:		unset($this->workerStartHooks[spl_object_hash($hook)]);
src/pocketmine/scheduler/AsyncPool.php:		return array_keys($this->workers);
src/pocketmine/scheduler/AsyncPool.php:		if(!isset($this->workers[$worker])){
src/pocketmine/scheduler/AsyncPool.php:			$this->workerUsage[$worker] = 0;
src/pocketmine/scheduler/AsyncPool.php:			$this->workers[$worker] = new AsyncWorker($this->logger, $worker, $this->workerMemoryLimit);
src/pocketmine/scheduler/AsyncPool.php:			$this->workers[$worker]->setClassLoader($this->classLoader);
src/pocketmine/scheduler/AsyncPool.php:			$this->workers[$worker]->start(self::WORKER_START_OPTIONS);
src/pocketmine/scheduler/AsyncPool.php:			foreach($this->workerStartHooks as $hook){
src/pocketmine/scheduler/AsyncPool.php:		return $this->workers[$worker];
src/pocketmine/scheduler/AsyncPool.php:		if($worker < 0 or $worker >= $this->size){
src/pocketmine/scheduler/AsyncPool.php:		if($task->getTaskId() !== null){
src/pocketmine/scheduler/AsyncPool.php:		$task->progressUpdates = new \Threaded;
src/pocketmine/scheduler/AsyncPool.php:		$taskId = $this->nextTaskId++;
src/pocketmine/scheduler/AsyncPool.php:		$task->setTaskId($taskId);
src/pocketmine/scheduler/AsyncPool.php:		$this->tasks[$taskId] = $task;
src/pocketmine/scheduler/AsyncPool.php:		$this->getWorker($worker)->stack($task);
src/pocketmine/scheduler/AsyncPool.php:		$this->workerUsage[$worker]++;
src/pocketmine/scheduler/AsyncPool.php:		$this->taskWorkers[$taskId] = $worker;
src/pocketmine/scheduler/AsyncPool.php:		$this->workerLastUsed[$worker] = time();
src/pocketmine/scheduler/AsyncPool.php:	 * - if an idle worker is found, it will be selected
src/pocketmine/scheduler/AsyncPool.php:	 * - else, if the worker pool is not full, a new worker will be selected
src/pocketmine/scheduler/AsyncPool.php:	 * - else, the worker with the smallest backlog is chosen.
src/pocketmine/scheduler/AsyncPool.php:		foreach($this->workerUsage as $i => $usage){
src/pocketmine/scheduler/AsyncPool.php:		if($worker === null or ($minUsage > 0 and count($this->workers) < $this->size)){
src/pocketmine/scheduler/AsyncPool.php:			for($i = 0; $i < $this->size; ++$i){
src/pocketmine/scheduler/AsyncPool.php:				if(!isset($this->workers[$i])){
src/pocketmine/scheduler/AsyncPool.php:		if($task->getTaskId() !== null){
src/pocketmine/scheduler/AsyncPool.php:		$worker = $this->selectWorker();
src/pocketmine/scheduler/AsyncPool.php:		$this->submitTaskToWorker($task, $worker);
src/pocketmine/scheduler/AsyncPool.php:		if(isset($this->taskWorkers[$task->getTaskId()])){
src/pocketmine/scheduler/AsyncPool.php:			if(!$force and ($task->isRunning() or !$task->isGarbage())){
src/pocketmine/scheduler/AsyncPool.php:			$this->workerUsage[$this->taskWorkers[$task->getTaskId()]]--;
src/pocketmine/scheduler/AsyncPool.php:		$task->removeDanglingStoredObjects();
src/pocketmine/scheduler/AsyncPool.php:		unset($this->tasks[$task->getTaskId()]);
src/pocketmine/scheduler/AsyncPool.php:		unset($this->taskWorkers[$task->getTaskId()]);
src/pocketmine/scheduler/AsyncPool.php:		foreach($this->workers as $worker){
src/pocketmine/scheduler/AsyncPool.php:			while(($task = $worker->unstack()) !== null){
src/pocketmine/scheduler/AsyncPool.php:				$task->cancelRun();
src/pocketmine/scheduler/AsyncPool.php:				$this->removeTask($task, true);
src/pocketmine/scheduler/AsyncPool.php:			foreach($this->tasks as $task){
src/pocketmine/scheduler/AsyncPool.php:				$task->cancelRun();
src/pocketmine/scheduler/AsyncPool.php:				$this->removeTask($task);
src/pocketmine/scheduler/AsyncPool.php:			if(count($this->tasks) > 0){
src/pocketmine/scheduler/AsyncPool.php:		}while(count($this->tasks) > 0);
src/pocketmine/scheduler/AsyncPool.php:		for($i = 0; $i < $this->size; ++$i){
src/pocketmine/scheduler/AsyncPool.php:			$this->workerUsage[$i] = 0;
src/pocketmine/scheduler/AsyncPool.php:		$this->taskWorkers = [];
src/pocketmine/scheduler/AsyncPool.php:		$this->tasks = [];
src/pocketmine/scheduler/AsyncPool.php:		$this->collectWorkers();
src/pocketmine/scheduler/AsyncPool.php:		foreach($this->workers as $worker){
src/pocketmine/scheduler/AsyncPool.php:			$worker->collect();
src/pocketmine/scheduler/AsyncPool.php:	 * Collects finished and/or crashed tasks from the workers, firing their on-completion hooks where appropriate.
src/pocketmine/scheduler/AsyncPool.php:		foreach($this->tasks as $task){
src/pocketmine/scheduler/AsyncPool.php:			$task->checkProgressUpdates($this->server);
src/pocketmine/scheduler/AsyncPool.php:			if($task->isGarbage() and !$task->isRunning() and !$task->isCrashed()){
src/pocketmine/scheduler/AsyncPool.php:				if(!$task->hasCancelledRun()){
src/pocketmine/scheduler/AsyncPool.php:					$task->checkProgressUpdates($this->server);
src/pocketmine/scheduler/AsyncPool.php:					$task->onCompletion($this->server);
src/pocketmine/scheduler/AsyncPool.php:				$this->removeTask($task);
src/pocketmine/scheduler/AsyncPool.php:			}elseif($task->isCrashed()){
src/pocketmine/scheduler/AsyncPool.php:				$this->logger->critical("Could not execute asynchronous task " . (new \ReflectionClass($task))->getShortName() . ": Task crashed");
src/pocketmine/scheduler/AsyncPool.php:				$this->removeTask($task, true);
src/pocketmine/scheduler/AsyncPool.php:		$this->collectWorkers();
src/pocketmine/scheduler/AsyncPool.php:	 * @phpstan-return array<int, int>
src/pocketmine/scheduler/AsyncPool.php:		return $this->workerUsage;
src/pocketmine/scheduler/AsyncPool.php:		foreach($this->workerUsage as $i => $usage){
src/pocketmine/scheduler/AsyncPool.php:			if($usage === 0 and (!isset($this->workerLastUsed[$i]) or $this->workerLastUsed[$i] + 300 < $time)){
src/pocketmine/scheduler/AsyncPool.php:				$this->workers[$i]->quit();
src/pocketmine/scheduler/AsyncPool.php:				unset($this->workers[$i], $this->workerUsage[$i], $this->workerLastUsed[$i]);
src/pocketmine/scheduler/AsyncPool.php:		$this->collectTasks();
src/pocketmine/scheduler/AsyncPool.php:		$this->removeTasks();
src/pocketmine/scheduler/AsyncPool.php:		foreach($this->workers as $worker){
src/pocketmine/scheduler/AsyncPool.php:			$worker->quit();
src/pocketmine/scheduler/AsyncPool.php:		$this->workers = [];
src/pocketmine/scheduler/AsyncPool.php:		$this->workerLastUsed = [];
src/pocketmine/scheduler/AsyncWorker.php:		$this->logger = $logger;
src/pocketmine/scheduler/AsyncWorker.php:		$this->id = $id;
src/pocketmine/scheduler/AsyncWorker.php:		$this->memoryLimit = $memoryLimit;
src/pocketmine/scheduler/AsyncWorker.php:		error_reporting(-1);
src/pocketmine/scheduler/AsyncWorker.php:		$this->registerClassLoader();
src/pocketmine/scheduler/AsyncWorker.php:		if($this->logger instanceof MainLogger){
src/pocketmine/scheduler/AsyncWorker.php:			$this->logger->registerStatic();
src/pocketmine/scheduler/AsyncWorker.php:		if($this->memoryLimit > 0){
src/pocketmine/scheduler/AsyncWorker.php:			ini_set('memory_limit', $this->memoryLimit . 'M');
src/pocketmine/scheduler/AsyncWorker.php:			$this->logger->debug("Set memory limit to " . $this->memoryLimit . " MB");
src/pocketmine/scheduler/AsyncWorker.php:			ini_set('memory_limit', '-1');
src/pocketmine/scheduler/AsyncWorker.php:			$this->logger->debug("No memory limit set");
src/pocketmine/scheduler/AsyncWorker.php:		return $this->logger;
src/pocketmine/scheduler/AsyncWorker.php:		$this->logger->logException($e);
src/pocketmine/scheduler/AsyncWorker.php:		return "Asynchronous Worker #" . $this->id;
src/pocketmine/scheduler/AsyncWorker.php:		return $this->id;
src/pocketmine/scheduler/AsyncWorker.php:	 * Saves mixed data into the worker's thread-local object store. This can be used to store objects which you
src/pocketmine/scheduler/AsyncWorker.php:	 * Retrieves mixed data from the worker's thread-local object store.
src/pocketmine/scheduler/AsyncWorker.php:	 * Note that the thread-local object store could be cleared and your data might not exist, so your code should
src/pocketmine/scheduler/AsyncWorker.php:	 * Removes previously-stored mixed data from the worker's thread-local object store.
src/pocketmine/scheduler/ClosureTask.php: * TaskScheduler->scheduleTask(new ClosureTask(function(int $currentTick) : void{
src/pocketmine/scheduler/ClosureTask.php:	 * @phpstan-var \Closure(int) : void
src/pocketmine/scheduler/ClosureTask.php:	 * @phpstan-param \Closure(int) : void $closure
src/pocketmine/scheduler/ClosureTask.php:		$this->closure = $closure;
src/pocketmine/scheduler/ClosureTask.php:		return Utils::getNiceClosureName($this->closure);
src/pocketmine/scheduler/ClosureTask.php:		($this->closure)($currentTick);
src/pocketmine/scheduler/DumpWorkerMemoryTask.php:		$this->outputFolder = $outputFolder;
src/pocketmine/scheduler/DumpWorkerMemoryTask.php:		$this->maxNesting = $maxNesting;
src/pocketmine/scheduler/DumpWorkerMemoryTask.php:		$this->maxStringSize = $maxStringSize;
src/pocketmine/scheduler/DumpWorkerMemoryTask.php:			$this->worker,
src/pocketmine/scheduler/DumpWorkerMemoryTask.php:			$this->outputFolder . DIRECTORY_SEPARATOR . "AsyncWorker#" . $this->worker->getAsyncWorkerId(),
src/pocketmine/scheduler/DumpWorkerMemoryTask.php:			$this->maxNesting,
src/pocketmine/scheduler/DumpWorkerMemoryTask.php:			$this->maxStringSize,
src/pocketmine/scheduler/DumpWorkerMemoryTask.php:			$this->worker->getLogger()
src/pocketmine/scheduler/TaskScheduler.php:	 * @phpstan-var ReversePriorityQueue<int, TaskHandler>
src/pocketmine/scheduler/TaskScheduler.php:		$this->owner = $owner;
src/pocketmine/scheduler/TaskScheduler.php:		$this->queue = new ReversePriorityQueue();
src/pocketmine/scheduler/TaskScheduler.php:		return $this->addTask($task, -1, -1);
src/pocketmine/scheduler/TaskScheduler.php:		return $this->addTask($task, $delay, -1);
src/pocketmine/scheduler/TaskScheduler.php:		return $this->addTask($task, -1, $period);
src/pocketmine/scheduler/TaskScheduler.php:		return $this->addTask($task, $delay, $period);
src/pocketmine/scheduler/TaskScheduler.php:		if(isset($this->tasks[$taskId])){
src/pocketmine/scheduler/TaskScheduler.php:				$this->tasks[$taskId]->cancel();
src/pocketmine/scheduler/TaskScheduler.php:				unset($this->tasks[$taskId]);
src/pocketmine/scheduler/TaskScheduler.php:		foreach($this->tasks as $id => $task){
src/pocketmine/scheduler/TaskScheduler.php:			$this->cancelTask($id);
src/pocketmine/scheduler/TaskScheduler.php:		$this->tasks = [];
src/pocketmine/scheduler/TaskScheduler.php:		while(!$this->queue->isEmpty()){
src/pocketmine/scheduler/TaskScheduler.php:			$this->queue->extract();
src/pocketmine/scheduler/TaskScheduler.php:		$this->ids = 1;
src/pocketmine/scheduler/TaskScheduler.php:		return isset($this->tasks[$taskId]);
src/pocketmine/scheduler/TaskScheduler.php:		if(!$this->enabled){
src/pocketmine/scheduler/TaskScheduler.php:			$delay = -1;
src/pocketmine/scheduler/TaskScheduler.php:		if($period <= -1){
src/pocketmine/scheduler/TaskScheduler.php:			$period = -1;
src/pocketmine/scheduler/TaskScheduler.php:		return $this->handle(new TaskHandler($task, $this->nextId(), $delay, $period, $this->owner));
src/pocketmine/scheduler/TaskScheduler.php:		if($handler->isDelayed()){
src/pocketmine/scheduler/TaskScheduler.php:			$nextRun = $this->currentTick + $handler->getDelay();
src/pocketmine/scheduler/TaskScheduler.php:			$nextRun = $this->currentTick;
src/pocketmine/scheduler/TaskScheduler.php:		$handler->setNextRun($nextRun);
src/pocketmine/scheduler/TaskScheduler.php:		$this->tasks[$handler->getTaskId()] = $handler;
src/pocketmine/scheduler/TaskScheduler.php:		$this->queue->insert($handler, $nextRun);
src/pocketmine/scheduler/TaskScheduler.php:		$this->enabled = false;
src/pocketmine/scheduler/TaskScheduler.php:		$this->cancelAllTasks();
src/pocketmine/scheduler/TaskScheduler.php:		$this->enabled = $enabled;
src/pocketmine/scheduler/TaskScheduler.php:		$this->currentTick = $currentTick;
src/pocketmine/scheduler/TaskScheduler.php:		while($this->isReady($this->currentTick)){
src/pocketmine/scheduler/TaskScheduler.php:			$task = $this->queue->extract();
src/pocketmine/scheduler/TaskScheduler.php:			if($task->isCancelled()){
src/pocketmine/scheduler/TaskScheduler.php:				unset($this->tasks[$task->getTaskId()]);
src/pocketmine/scheduler/TaskScheduler.php:			$task->run($this->currentTick);
src/pocketmine/scheduler/TaskScheduler.php:			if($task->isRepeating()){
src/pocketmine/scheduler/TaskScheduler.php:				$task->setNextRun($this->currentTick + $task->getPeriod());
src/pocketmine/scheduler/TaskScheduler.php:				$this->queue->insert($task, $this->currentTick + $task->getPeriod());
src/pocketmine/scheduler/TaskScheduler.php:				$task->remove();
src/pocketmine/scheduler/TaskScheduler.php:				unset($this->tasks[$task->getTaskId()]);
src/pocketmine/scheduler/TaskScheduler.php:		return !$this->queue->isEmpty() and $this->queue->current()->getNextRun() <= $currentTick;
src/pocketmine/scheduler/TaskScheduler.php:		return $this->ids++;
src/pocketmine/scheduler/SendUsageTask.php:	 * @phpstan-param array<string, string> $playerList
src/pocketmine/scheduler/SendUsageTask.php:		$endpoint = "http://" . $server->getProperty("anonymous-statistics.host", "stats.pocketmine.net") . "/";
src/pocketmine/scheduler/SendUsageTask.php:		$data["uniqueServerId"] = $server->getServerUniqueId()->toString();
src/pocketmine/scheduler/SendUsageTask.php:		$data["uniqueMachineId"] = Utils::getMachineUniqueId()->toString();
src/pocketmine/scheduler/SendUsageTask.php:		$data["uniqueRequestId"] = UUID::fromData($server->getServerUniqueId()->toString(), microtime(false))->toString();
src/pocketmine/scheduler/SendUsageTask.php:					"port" => $server->getPort(),
src/pocketmine/scheduler/SendUsageTask.php:					"software" => $server->getName(),
src/pocketmine/scheduler/SendUsageTask.php:					"fullVersion" => $version->getFullVersion(true),
src/pocketmine/scheduler/SendUsageTask.php:					"version" => $version->getFullVersion(false),
src/pocketmine/scheduler/SendUsageTask.php:					"build" => $version->getBuild(),
src/pocketmine/scheduler/SendUsageTask.php:					"api" => $server->getApiVersion(),
src/pocketmine/scheduler/SendUsageTask.php:					"minecraftVersion" => $server->getVersion(),
src/pocketmine/scheduler/SendUsageTask.php:					"limit" => $server->getMaxPlayers()
src/pocketmine/scheduler/SendUsageTask.php:				foreach($server->getPluginManager()->getPlugins() as $p){
src/pocketmine/scheduler/SendUsageTask.php:					$d = $p->getDescription();
src/pocketmine/scheduler/SendUsageTask.php:					$plugins[$d->getName()] = [
src/pocketmine/scheduler/SendUsageTask.php:						"name" => $d->getName(),
src/pocketmine/scheduler/SendUsageTask.php:						"version" => $d->getVersion(),
src/pocketmine/scheduler/SendUsageTask.php:						"enabled" => $p->isEnabled()
src/pocketmine/scheduler/SendUsageTask.php:					"ticksPerSecond" => $server->getTicksPerSecondAverage(),
src/pocketmine/scheduler/SendUsageTask.php:					"tickUsage" => $server->getTickUsageAverage(),
src/pocketmine/scheduler/SendUsageTask.php:					"ticks" => $server->getTick()
src/pocketmine/scheduler/SendUsageTask.php:				foreach($server->getOnlinePlayers() as $p){
src/pocketmine/scheduler/SendUsageTask.php:					if($p->isOnline()){
src/pocketmine/scheduler/SendUsageTask.php:						$players[] = md5($p->getUniqueId()->toBinary());
src/pocketmine/scheduler/SendUsageTask.php:					"limit" => $server->getMaxPlayers(),
src/pocketmine/scheduler/SendUsageTask.php:				$data["crashing"] = $server->isRunning();
src/pocketmine/scheduler/SendUsageTask.php:		$this->endpoint = $endpoint . "api/post";
src/pocketmine/scheduler/SendUsageTask.php:		$this->data = $data;
src/pocketmine/scheduler/SendUsageTask.php:		Internet::postURL($this->endpoint, $this->data, 5, [
src/pocketmine/scheduler/SendUsageTask.php:			"Content-Type: application/json",
src/pocketmine/scheduler/SendUsageTask.php:			"Content-Length: " . strlen($this->data)
src/pocketmine/metadata/MetadataStore.php:	 * @phpstan-var array<string, \SplObjectStorage<Plugin, MetadataValue>>
src/pocketmine/metadata/MetadataStore.php:		$owningPlugin = $newMetadataValue->getOwningPlugin();
src/pocketmine/metadata/MetadataStore.php:		if(!isset($this->metadataMap[$key])){
src/pocketmine/metadata/MetadataStore.php:			/** @phpstan-var \SplObjectStorage<Plugin, MetadataValue> $entry */
src/pocketmine/metadata/MetadataStore.php:			$this->metadataMap[$key] = $entry;
src/pocketmine/metadata/MetadataStore.php:			$entry = $this->metadataMap[$key];
src/pocketmine/metadata/MetadataStore.php:		if(isset($this->metadataMap[$key])){
src/pocketmine/metadata/MetadataStore.php:			return $this->metadataMap[$key];
src/pocketmine/metadata/MetadataStore.php:		return isset($this->metadataMap[$key]);
src/pocketmine/metadata/MetadataStore.php:		if(isset($this->metadataMap[$key])){
src/pocketmine/metadata/MetadataStore.php:			unset($this->metadataMap[$key][$owningPlugin]);
src/pocketmine/metadata/MetadataStore.php:			if($this->metadataMap[$key]->count() === 0){
src/pocketmine/metadata/MetadataStore.php:				unset($this->metadataMap[$key]);
src/pocketmine/metadata/MetadataStore.php:		foreach($this->metadataMap as $values){
src/pocketmine/metadata/MetadataStore.php:				$values[$owningPlugin]->invalidate();
src/pocketmine/metadata/LevelMetadataStore.php:		return strtolower($level->getName()) . ":" . $metadataKey;
src/pocketmine/metadata/LevelMetadataStore.php:		return $this->getMetadataInternal($this->disambiguate($subject, $metadataKey));
src/pocketmine/metadata/LevelMetadataStore.php:		return $this->hasMetadataInternal($this->disambiguate($subject, $metadataKey));
src/pocketmine/metadata/LevelMetadataStore.php:		$this->removeMetadataInternal($this->disambiguate($subject, $metadataKey), $owningPlugin);
src/pocketmine/metadata/LevelMetadataStore.php:		$this->setMetadataInternal($this->disambiguate($subject, $metadataKey), $newMetadataValue);
src/pocketmine/metadata/BlockMetadataStore.php:		$this->owningLevel = $owningLevel;
src/pocketmine/metadata/BlockMetadataStore.php:		if($block->getLevel() !== $this->owningLevel){
src/pocketmine/metadata/BlockMetadataStore.php:			throw new \InvalidStateException("Block does not belong to world " . $this->owningLevel->getName());
src/pocketmine/metadata/BlockMetadataStore.php:		return $block->x . ":" . $block->y . ":" . $block->z . ":" . $metadataKey;
src/pocketmine/metadata/BlockMetadataStore.php:		return $this->getMetadataInternal($this->disambiguate($subject, $metadataKey));
src/pocketmine/metadata/BlockMetadataStore.php:		return $this->hasMetadataInternal($this->disambiguate($subject, $metadataKey));
src/pocketmine/metadata/BlockMetadataStore.php:		$this->removeMetadataInternal($this->disambiguate($subject, $metadataKey), $owningPlugin);
src/pocketmine/metadata/BlockMetadataStore.php:		$this->setMetadataInternal($this->disambiguate($subject, $metadataKey), $newMetadataValue);
src/pocketmine/metadata/EntityMetadataStore.php:		return $entity->getId() . ":" . $metadataKey;
src/pocketmine/metadata/EntityMetadataStore.php:		return $this->getMetadataInternal($this->disambiguate($subject, $metadataKey));
src/pocketmine/metadata/EntityMetadataStore.php:		return $this->hasMetadataInternal($this->disambiguate($subject, $metadataKey));
src/pocketmine/metadata/EntityMetadataStore.php:		$this->removeMetadataInternal($this->disambiguate($subject, $metadataKey), $owningPlugin);
src/pocketmine/metadata/EntityMetadataStore.php:		$this->setMetadataInternal($this->disambiguate($subject, $metadataKey), $newMetadataValue);
src/pocketmine/metadata/PlayerMetadataStore.php:		return strtolower($player->getName()) . ":" . $metadataKey;
src/pocketmine/metadata/PlayerMetadataStore.php:		return $this->getMetadataInternal($this->disambiguate($subject, $metadataKey));
src/pocketmine/metadata/PlayerMetadataStore.php:		return $this->hasMetadataInternal($this->disambiguate($subject, $metadataKey));
src/pocketmine/metadata/PlayerMetadataStore.php:		$this->removeMetadataInternal($this->disambiguate($subject, $metadataKey), $owningPlugin);
src/pocketmine/metadata/PlayerMetadataStore.php:		$this->setMetadataInternal($this->disambiguate($subject, $metadataKey), $newMetadataValue);
src/pocketmine/metadata/MetadataValue.php:		$this->owningPlugin = $owningPlugin;
src/pocketmine/metadata/MetadataValue.php:		return $this->owningPlugin;
src/pocketmine/GlobalConstants.php:const INT32_MIN = -0x80000000;
src/pocketmine/item/Armor.php:		if($this->getNamedTag()->hasTag(self::TAG_CUSTOM_COLOR, IntTag::class)){
src/pocketmine/item/Armor.php:			return Color::fromARGB(Binary::unsignInt($this->getNamedTag()->getInt(self::TAG_CUSTOM_COLOR)));
src/pocketmine/item/Armor.php:		$this->setNamedTagEntry(new IntTag(self::TAG_CUSTOM_COLOR, Binary::signInt($color->toARGB())));
src/pocketmine/item/Armor.php:		foreach($this->getEnchantments() as $enchantment){
src/pocketmine/item/Armor.php:			$type = $enchantment->getType();
src/pocketmine/item/Armor.php:			if($type instanceof ProtectionEnchantment and $type->isApplicable($event)){
src/pocketmine/item/Armor.php:				$epf += $type->getProtectionFactor($enchantment->getLevel());
src/pocketmine/item/Armor.php:		if(($unbreakingLevel = $this->getEnchantmentLevel(Enchantment::UNBREAKING)) > 0){
src/pocketmine/item/Sword.php:		return self::getBaseDamageFromTier($this->tier);
src/pocketmine/item/Sword.php:		if($block->getHardness() > 0){
src/pocketmine/item/Sword.php:			return $this->applyDamage(2);
src/pocketmine/item/Sword.php:		return $this->applyDamage(1);
src/pocketmine/item/Item.php:		$data = self::$cachedParser->read($tag);
src/pocketmine/item/Item.php:		return self::$cachedParser->write($tag);
src/pocketmine/item/Item.php:			if($item->getName() === "Unknown"){
src/pocketmine/item/Item.php:		if($index !== -1){
src/pocketmine/item/Item.php:		return Item::getCreativeItemIndex($item) !== -1;
src/pocketmine/item/Item.php:			if($item->equals($d, !($item instanceof Durable))){
src/pocketmine/item/Item.php:		return -1;
src/pocketmine/item/Item.php:		if($id < -0x8000 or $id > 0x7fff){ //signed short range
src/pocketmine/item/Item.php:			throw new \InvalidArgumentException("ID must be in range " . -0x8000 . " - " . 0x7fff);
src/pocketmine/item/Item.php:		$this->id = $id;
src/pocketmine/item/Item.php:		$this->setDamage($meta);
src/pocketmine/item/Item.php:		$this->name = $name;
src/pocketmine/item/Item.php:	 * @deprecated This method accepts NBT serialized in a network-dependent format.
src/pocketmine/item/Item.php:			$this->setNamedTag($tags);
src/pocketmine/item/Item.php:			$this->setNamedTag(self::parseCompoundTag($tags));
src/pocketmine/item/Item.php:			$this->clearNamedTag();
src/pocketmine/item/Item.php:	 * @deprecated This method returns NBT serialized in a network-dependent format. Prefer use of getNamedTag() instead.
src/pocketmine/item/Item.php:		return $this->nbt !== null ? self::writeCompoundTag($this->nbt) : "";
src/pocketmine/item/Item.php:	 * Returns whether this Item has a non-empty NBT.
src/pocketmine/item/Item.php:		return $this->nbt !== null and $this->nbt->getCount() > 0;
src/pocketmine/item/Item.php:		return $this->getNamedTagEntry(self::TAG_BLOCK_ENTITY_TAG) instanceof CompoundTag;
src/pocketmine/item/Item.php:		$this->removeNamedTagEntry(self::TAG_BLOCK_ENTITY_TAG);
src/pocketmine/item/Item.php:		$tags->setName(self::TAG_BLOCK_ENTITY_TAG);
src/pocketmine/item/Item.php:		$this->setNamedTagEntry($tags);
src/pocketmine/item/Item.php:		$tag = $this->getNamedTagEntry(self::TAG_BLOCK_ENTITY_TAG);
src/pocketmine/item/Item.php:		return $this->getNamedTagEntry(self::TAG_ENCH) instanceof ListTag;
src/pocketmine/item/Item.php:	public function hasEnchantment(int $id, int $level = -1) : bool{
src/pocketmine/item/Item.php:		$ench = $this->getNamedTagEntry(self::TAG_ENCH);
src/pocketmine/item/Item.php:			if($entry->getShort("id") === $id and ($level === -1 or $entry->getShort("lvl") === $level)){
src/pocketmine/item/Item.php:		$ench = $this->getNamedTagEntry(self::TAG_ENCH);
src/pocketmine/item/Item.php:			if($entry->getShort("id") === $id){
src/pocketmine/item/Item.php:				$e = Enchantment::getEnchantment($entry->getShort("id"));
src/pocketmine/item/Item.php:					return new EnchantmentInstance($e, $entry->getShort("lvl"));
src/pocketmine/item/Item.php:	public function removeEnchantment(int $id, int $level = -1) : void{
src/pocketmine/item/Item.php:		$ench = $this->getNamedTagEntry(self::TAG_ENCH);
src/pocketmine/item/Item.php:			if($entry->getShort("id") === $id and ($level === -1 or $entry->getShort("lvl") === $level)){
src/pocketmine/item/Item.php:				$ench->remove($k);
src/pocketmine/item/Item.php:		$this->setNamedTagEntry($ench);
src/pocketmine/item/Item.php:		$this->removeNamedTagEntry(self::TAG_ENCH);
src/pocketmine/item/Item.php:		$ench = $this->getNamedTagEntry(self::TAG_ENCH);
src/pocketmine/item/Item.php:				if($entry->getShort("id") === $enchantment->getId()){
src/pocketmine/item/Item.php:					$ench->set($k, new CompoundTag("", [
src/pocketmine/item/Item.php:						new ShortTag("id", $enchantment->getId()),
src/pocketmine/item/Item.php:						new ShortTag("lvl", $enchantment->getLevel())
src/pocketmine/item/Item.php:			$ench->push(new CompoundTag("", [
src/pocketmine/item/Item.php:				new ShortTag("id", $enchantment->getId()),
src/pocketmine/item/Item.php:				new ShortTag("lvl", $enchantment->getLevel())
src/pocketmine/item/Item.php:		$this->setNamedTagEntry($ench);
src/pocketmine/item/Item.php:		$ench = $this->getNamedTagEntry(self::TAG_ENCH);
src/pocketmine/item/Item.php:				$e = Enchantment::getEnchantment($entry->getShort("id"));
src/pocketmine/item/Item.php:					$enchantments[] = new EnchantmentInstance($e, $entry->getShort("lvl"));
src/pocketmine/item/Item.php:		$ench = $this->getNamedTag()->getListTag(self::TAG_ENCH);
src/pocketmine/item/Item.php:				if($entry->getShort("id") === $enchantmentId){
src/pocketmine/item/Item.php:					return $entry->getShort("lvl");
src/pocketmine/item/Item.php:		$display = $this->getNamedTagEntry(self::TAG_DISPLAY);
src/pocketmine/item/Item.php:			return $display->hasTag(self::TAG_DISPLAY_NAME);
src/pocketmine/item/Item.php:		$display = $this->getNamedTagEntry(self::TAG_DISPLAY);
src/pocketmine/item/Item.php:			return $display->getString(self::TAG_DISPLAY_NAME, "");
src/pocketmine/item/Item.php:			return $this->clearCustomName();
src/pocketmine/item/Item.php:		$display = $this->getNamedTagEntry(self::TAG_DISPLAY);
src/pocketmine/item/Item.php:		$display->setString(self::TAG_DISPLAY_NAME, $name);
src/pocketmine/item/Item.php:		$this->setNamedTagEntry($display);
src/pocketmine/item/Item.php:		$display = $this->getNamedTagEntry(self::TAG_DISPLAY);
src/pocketmine/item/Item.php:			$display->removeTag(self::TAG_DISPLAY_NAME);
src/pocketmine/item/Item.php:			if($display->getCount() === 0){
src/pocketmine/item/Item.php:				$this->removeNamedTagEntry($display->getName());
src/pocketmine/item/Item.php:				$this->setNamedTagEntry($display);
src/pocketmine/item/Item.php:		$display = $this->getNamedTagEntry(self::TAG_DISPLAY);
src/pocketmine/item/Item.php:		if($display instanceof CompoundTag and ($lore = $display->getListTag(self::TAG_DISPLAY_LORE)) !== null){
src/pocketmine/item/Item.php:				return $line->getValue();
src/pocketmine/item/Item.php:			}, $lore->getValue());
src/pocketmine/item/Item.php:		$display = $this->getNamedTagEntry(self::TAG_DISPLAY);
src/pocketmine/item/Item.php:		$display->setTag(new ListTag(self::TAG_DISPLAY_LORE, array_map(function(string $str) : StringTag{
src/pocketmine/item/Item.php:		$this->setNamedTagEntry($display);
src/pocketmine/item/Item.php:		return $this->getNamedTag()->getTag($name);
src/pocketmine/item/Item.php:		$tag = $this->getNamedTag();
src/pocketmine/item/Item.php:		$tag->setTag($new);
src/pocketmine/item/Item.php:		$this->setNamedTag($tag);
src/pocketmine/item/Item.php:		$tag = $this->getNamedTag();
src/pocketmine/item/Item.php:		$tag->removeTag($name);
src/pocketmine/item/Item.php:		$this->setNamedTag($tag);
src/pocketmine/item/Item.php:		return $this->nbt ?? ($this->nbt = new CompoundTag());
src/pocketmine/item/Item.php:		if($tag->getCount() === 0){
src/pocketmine/item/Item.php:			return $this->clearNamedTag();
src/pocketmine/item/Item.php:		$this->nbt = clone $tag;
src/pocketmine/item/Item.php:		$this->nbt = null;
src/pocketmine/item/Item.php:		return $this->count;
src/pocketmine/item/Item.php:		$this->count = $count;
src/pocketmine/item/Item.php:		if($count > $this->count){
src/pocketmine/item/Item.php:			throw new \InvalidArgumentException("Cannot pop $count items from a stack of $this->count");
src/pocketmine/item/Item.php:		$item->count = $count;
src/pocketmine/item/Item.php:		$this->count -= $count;
src/pocketmine/item/Item.php:		return $this->count <= 0 or $this->id === Item::AIR;
src/pocketmine/item/Item.php:		return $this->hasCustomName() ? $this->getCustomName() : $this->getVanillaName();
src/pocketmine/item/Item.php:		return $this->name;
src/pocketmine/item/Item.php:		return $this->getBlock()->canBePlaced();
src/pocketmine/item/Item.php:		return $this->id;
src/pocketmine/item/Item.php:		return $this->meta;
src/pocketmine/item/Item.php:		$this->meta = $meta !== -1 ? $meta & 0x7FFF : -1;
src/pocketmine/item/Item.php:		return $this->meta === -1;
src/pocketmine/item/Item.php:		$item->pop();
src/pocketmine/item/Item.php:	 * Returns what type of block-breaking tool this is. Blocks requiring the same tool type as the item will break
src/pocketmine/item/Item.php:	 * This should return 1 for non-tiered tools, and the tool tier for tiered tools.
src/pocketmine/item/Item.php:		return $this->id === $item->getId() and
src/pocketmine/item/Item.php:			(!$checkDamage or $this->getDamage() === $item->getDamage()) and
src/pocketmine/item/Item.php:			(!$checkCompound or $this->getNamedTag()->equals($item->getNamedTag()));
src/pocketmine/item/Item.php:		return $this->equals($other, true, true) and $this->count === $other->count;
src/pocketmine/item/Item.php:		return "Item " . $this->name . " (" . $this->id . ":" . ($this->hasAnyDamageValue() ? "?" : $this->meta) . ")x" . $this->count . ($this->hasCompoundTag() ? " tags:" . base64_encode($this->getCompoundTag()) : "");
src/pocketmine/item/Item.php:	 * @phpstan-return array{id: int, damage?: int, count?: int, nbt_b64?: string}
src/pocketmine/item/Item.php:			"id" => $this->getId()
src/pocketmine/item/Item.php:		if($this->getDamage() !== 0){
src/pocketmine/item/Item.php:			$data["damage"] = $this->getDamage();
src/pocketmine/item/Item.php:		if($this->getCount() !== 1){
src/pocketmine/item/Item.php:			$data["count"] = $this->getCount();
src/pocketmine/item/Item.php:		if($this->hasCompoundTag()){
src/pocketmine/item/Item.php:			$data["nbt_b64"] = base64_encode($this->getCompoundTag());
src/pocketmine/item/Item.php:	 * @phpstan-param array{
src/pocketmine/item/Item.php:	public function nbtSerialize(int $slot = -1, string $tagName = "") : CompoundTag{
src/pocketmine/item/Item.php:			new ShortTag("id", $this->id),
src/pocketmine/item/Item.php:			new ByteTag("Count", Binary::signByte($this->count)),
src/pocketmine/item/Item.php:			new ShortTag("Damage", $this->meta)
src/pocketmine/item/Item.php:		if($this->hasCompoundTag()){
src/pocketmine/item/Item.php:			$itemNBT = clone $this->getNamedTag();
src/pocketmine/item/Item.php:			$itemNBT->setName("tag");
src/pocketmine/item/Item.php:			$result->setTag($itemNBT);
src/pocketmine/item/Item.php:		if($slot !== -1){
src/pocketmine/item/Item.php:			$result->setByte("Slot", $slot);
src/pocketmine/item/Item.php:		if(!$tag->hasTag("id") or !$tag->hasTag("Count")){
src/pocketmine/item/Item.php:		$count = Binary::unsignByte($tag->getByte("Count"));
src/pocketmine/item/Item.php:		$meta = $tag->getShort("Damage", 0);
src/pocketmine/item/Item.php:		$idTag = $tag->getTag("id");
src/pocketmine/item/Item.php:			$item = ItemFactory::get($idTag->getValue(), $meta, $count);
src/pocketmine/item/Item.php:				$item = ItemFactory::fromStringSingle($idTag->getValue());
src/pocketmine/item/Item.php:			$item->setDamage($meta);
src/pocketmine/item/Item.php:			$item->setCount($count);
src/pocketmine/item/Item.php:		$itemNBT = $tag->getCompoundTag("tag");
src/pocketmine/item/Item.php:			$t->setName("");
src/pocketmine/item/Item.php:			$item->setNamedTag($t);
src/pocketmine/item/Item.php:		if($this->nbt !== null){
src/pocketmine/item/Item.php:			$this->nbt = clone $this->nbt;
src/pocketmine/item/WritableBook.php:	public const TAG_PAGE_PHOTONAME = "photoname"; //TAG_String - TODO
src/pocketmine/item/WritableBook.php:		return $this->getPagesTag()->isset($pageId);
src/pocketmine/item/WritableBook.php:		$pages = $this->getNamedTag()->getListTag(self::TAG_PAGES);
src/pocketmine/item/WritableBook.php:		if($pages === null or !$pages->isset($pageId)){
src/pocketmine/item/WritableBook.php:		$page = $pages->get($pageId);
src/pocketmine/item/WritableBook.php:			return $page->getString(self::TAG_PAGE_TEXT, "");
src/pocketmine/item/WritableBook.php:		if(!$this->pageExists($pageId)){
src/pocketmine/item/WritableBook.php:			$this->addPage($pageId);
src/pocketmine/item/WritableBook.php:		$pagesTag = $this->getPagesTag();
src/pocketmine/item/WritableBook.php:		$page = $pagesTag->get($pageId);
src/pocketmine/item/WritableBook.php:		$page->setString(self::TAG_PAGE_TEXT, $pageText);
src/pocketmine/item/WritableBook.php:		$this->setNamedTagEntry($pagesTag);
src/pocketmine/item/WritableBook.php:		$pagesTag = $this->getPagesTag();
src/pocketmine/item/WritableBook.php:		for($current = $pagesTag->count(); $current <= $pageId; $current++){
src/pocketmine/item/WritableBook.php:			$pagesTag->push(new CompoundTag("", [
src/pocketmine/item/WritableBook.php:		$this->setNamedTagEntry($pagesTag);
src/pocketmine/item/WritableBook.php:		$pagesTag = $this->getPagesTag();
src/pocketmine/item/WritableBook.php:		$pagesTag->remove($pageId);
src/pocketmine/item/WritableBook.php:		$this->setNamedTagEntry($pagesTag);
src/pocketmine/item/WritableBook.php:		$pagesTag = $this->getPagesTag();
src/pocketmine/item/WritableBook.php:		$pagesTag->insert($pageId, new CompoundTag("", [
src/pocketmine/item/WritableBook.php:		$this->setNamedTagEntry($pagesTag);
src/pocketmine/item/WritableBook.php:		if(!$this->pageExists($pageId1) or !$this->pageExists($pageId2)){
src/pocketmine/item/WritableBook.php:		$pageContents1 = $this->getPageText($pageId1);
src/pocketmine/item/WritableBook.php:		$pageContents2 = $this->getPageText($pageId2);
src/pocketmine/item/WritableBook.php:		$this->setPageText($pageId1, $pageContents2);
src/pocketmine/item/WritableBook.php:		$this->setPageText($pageId2, $pageContents1);
src/pocketmine/item/WritableBook.php:		$pages = $this->getPagesTag()->getValue();
src/pocketmine/item/WritableBook.php:		$pagesTag = $this->getNamedTag()->getListTag(self::TAG_PAGES);
src/pocketmine/item/WritableBook.php:		if($pagesTag !== null and $pagesTag->getTagType() === NBT::TAG_Compound){
src/pocketmine/item/WritableBook.php:		$nbt = $this->getNamedTag();
src/pocketmine/item/WritableBook.php:		$nbt->setTag(new ListTag(self::TAG_PAGES, $pages, NBT::TAG_Compound));
src/pocketmine/item/WritableBook.php:		$this->setNamedTag($nbt);
src/pocketmine/item/SpawnEgg.php:		$nbt = Entity::createBaseNBT($blockReplace->add(0.5, 0, 0.5), null, lcg_value() * 360, 0);
src/pocketmine/item/SpawnEgg.php:		if($this->hasCustomName()){
src/pocketmine/item/SpawnEgg.php:			$nbt->setString("CustomName", $this->getCustomName());
src/pocketmine/item/SpawnEgg.php:		$entity = Entity::createEntity($this->meta, $player->getLevelNonNull(), $nbt);
src/pocketmine/item/SpawnEgg.php:			$this->pop();
src/pocketmine/item/SpawnEgg.php:			$entity->spawnToAll();
src/pocketmine/item/Bow.php:		if($player->isSurvival() and !$player->getInventory()->contains(ItemFactory::get(Item::ARROW, 0, 1))){
src/pocketmine/item/Bow.php:			$player->getInventory()->sendContents($player);
src/pocketmine/item/Bow.php:			$player->add(0, $player->getEyeHeight(), 0),
src/pocketmine/item/Bow.php:			$player->getDirectionVector(),
src/pocketmine/item/Bow.php:			($player->yaw > 180 ? 360 : 0) - $player->yaw,
src/pocketmine/item/Bow.php:			-$player->pitch
src/pocketmine/item/Bow.php:		$diff = $player->getItemUseDuration();
src/pocketmine/item/Bow.php:		$entity = Entity::createEntity("Arrow", $player->getLevelNonNull(), $nbt, $player, $baseForce >= 1);
src/pocketmine/item/Bow.php:			$infinity = $this->hasEnchantment(Enchantment::INFINITY);
src/pocketmine/item/Bow.php:					$entity->setPickupMode(ArrowEntity::PICKUP_CREATIVE);
src/pocketmine/item/Bow.php:				if(($punchLevel = $this->getEnchantmentLevel(Enchantment::PUNCH)) > 0){
src/pocketmine/item/Bow.php:					$entity->setPunchKnockback($punchLevel);
src/pocketmine/item/Bow.php:			if(($powerLevel = $this->getEnchantmentLevel(Enchantment::POWER)) > 0){
src/pocketmine/item/Bow.php:				$entity->setBaseDamage($entity->getBaseDamage() + (($powerLevel + 1) / 2));
src/pocketmine/item/Bow.php:			if($this->hasEnchantment(Enchantment::FLAME)){
src/pocketmine/item/Bow.php:				$entity->setOnFire(intdiv($entity->getFireTicks(), 20) + 100);
src/pocketmine/item/Bow.php:			if($baseForce < 0.1 or $diff < 5 or $player->isSpectator()){
src/pocketmine/item/Bow.php:				$ev->setCancelled();
src/pocketmine/item/Bow.php:			$ev->call();
src/pocketmine/item/Bow.php:			$entity = $ev->getProjectile(); //This might have been changed by plugins
src/pocketmine/item/Bow.php:			if($ev->isCancelled()){
src/pocketmine/item/Bow.php:				$entity->flagForDespawn();
src/pocketmine/item/Bow.php:				$player->getInventory()->sendContents($player);
src/pocketmine/item/Bow.php:				$entity->setMotion($entity->getMotion()->multiply($ev->getForce()));
src/pocketmine/item/Bow.php:				if($player->isSurvival()){
src/pocketmine/item/Bow.php:						$player->getInventory()->removeItem(ItemFactory::get(Item::ARROW, 0, 1));
src/pocketmine/item/Bow.php:					$this->applyDamage(1);
src/pocketmine/item/Bow.php:					$projectileEv->call();
src/pocketmine/item/Bow.php:					if($projectileEv->isCancelled()){
src/pocketmine/item/Bow.php:						$ev->getProjectile()->flagForDespawn();
src/pocketmine/item/Bow.php:						$ev->getProjectile()->spawnToAll();
src/pocketmine/item/Bow.php:						$player->getLevelNonNull()->broadcastLevelSoundEvent($player, LevelSoundEventPacket::SOUND_BOW);
src/pocketmine/item/Bow.php:					$entity->spawnToAll();
src/pocketmine/item/Bow.php:			$entity->spawnToAll();
src/pocketmine/item/Hoe.php:		return $this->applyDamage(1);
src/pocketmine/item/Hoe.php:		if($block->getHardness() > 0){
src/pocketmine/item/Hoe.php:			return $this->applyDamage(1);
src/pocketmine/item/Tool.php:		if(($block->getToolType() & $this->getBlockToolType()) !== 0){
src/pocketmine/item/Tool.php:			$efficiency = $this->getBaseMiningEfficiency();
src/pocketmine/item/Tool.php:			if(($enchantmentLevel = $this->getEnchantmentLevel(Enchantment::EFFICIENCY)) > 0){
src/pocketmine/item/enchantment/KnockbackEnchantment.php:			$victim->knockBack($attacker, 0, $victim->x - $attacker->x, $victim->z - $attacker->z, $enchantmentLevel * 0.5);
src/pocketmine/item/enchantment/EnchantmentEntry.php:		$this->enchantments = $enchantments;
src/pocketmine/item/enchantment/EnchantmentEntry.php:		$this->cost = $cost;
src/pocketmine/item/enchantment/EnchantmentEntry.php:		$this->randomName = $randomName;
src/pocketmine/item/enchantment/EnchantmentEntry.php:		return $this->enchantments;
src/pocketmine/item/enchantment/EnchantmentEntry.php:		return $this->cost;
src/pocketmine/item/enchantment/EnchantmentEntry.php:		return $this->randomName;
src/pocketmine/item/enchantment/EnchantmentList.php:	 * @phpstan-var \SplFixedArray<EnchantmentEntry>
src/pocketmine/item/enchantment/EnchantmentList.php:		$this->enchantments = new \SplFixedArray($size);
src/pocketmine/item/enchantment/EnchantmentList.php:		$this->enchantments[$slot] = $entry;
src/pocketmine/item/enchantment/EnchantmentList.php:		return $this->enchantments[$slot];
src/pocketmine/item/enchantment/EnchantmentList.php:		return $this->enchantments->getSize();
src/pocketmine/item/enchantment/EnchantmentInstance.php:		$this->enchantment = $enchantment;
src/pocketmine/item/enchantment/EnchantmentInstance.php:		$this->level = $level;
src/pocketmine/item/enchantment/EnchantmentInstance.php:		return $this->enchantment;
src/pocketmine/item/enchantment/EnchantmentInstance.php:		return $this->enchantment->getId();
src/pocketmine/item/enchantment/EnchantmentInstance.php:		return $this->level;
src/pocketmine/item/enchantment/EnchantmentInstance.php:		$this->level = $level;
src/pocketmine/item/enchantment/Enchantment.php:	 * @phpstan-var \SplFixedArray<Enchantment>
src/pocketmine/item/enchantment/Enchantment.php:		self::$enchantments[$enchantment->getId()] = clone $enchantment;
src/pocketmine/item/enchantment/Enchantment.php:		if($id < 0 or $id >= self::$enchantments->getSize()){
src/pocketmine/item/enchantment/Enchantment.php:		$this->id = $id;
src/pocketmine/item/enchantment/Enchantment.php:		$this->name = $name;
src/pocketmine/item/enchantment/Enchantment.php:		$this->rarity = $rarity;
src/pocketmine/item/enchantment/Enchantment.php:		$this->primaryItemFlags = $primaryItemFlags;
src/pocketmine/item/enchantment/Enchantment.php:		$this->secondaryItemFlags = $secondaryItemFlags;
src/pocketmine/item/enchantment/Enchantment.php:		$this->maxLevel = $maxLevel;
src/pocketmine/item/enchantment/Enchantment.php:		return $this->id;
src/pocketmine/item/enchantment/Enchantment.php:		return $this->name;
src/pocketmine/item/enchantment/Enchantment.php:		return $this->rarity;
src/pocketmine/item/enchantment/Enchantment.php:		return $this->primaryItemFlags;
src/pocketmine/item/enchantment/Enchantment.php:		return $this->secondaryItemFlags;
src/pocketmine/item/enchantment/Enchantment.php:		return ($this->primaryItemFlags & $flag) !== 0;
src/pocketmine/item/enchantment/Enchantment.php:		return ($this->secondaryItemFlags & $flag) !== 0;
src/pocketmine/item/enchantment/Enchantment.php:		return $this->maxLevel;
src/pocketmine/item/enchantment/Enchantment.php:	//TODO: methods for min/max XP cost bounds based on enchantment level (not needed yet - enchanting is client-side)
src/pocketmine/item/enchantment/FireAspectEnchantment.php:		$victim->setOnFire($enchantmentLevel * 4);
src/pocketmine/item/enchantment/ProtectionEnchantment.php:		$this->typeModifier = $typeModifier;
src/pocketmine/item/enchantment/ProtectionEnchantment.php:			$this->applicableDamageTypes = array_flip($applicableDamageTypes);
src/pocketmine/item/enchantment/ProtectionEnchantment.php:		return $this->typeModifier;
src/pocketmine/item/enchantment/ProtectionEnchantment.php:		return (int) floor((6 + $level ** 2) * $this->typeModifier / 3);
src/pocketmine/item/enchantment/ProtectionEnchantment.php:		return $this->applicableDamageTypes === null or isset($this->applicableDamageTypes[$event->getCause()]);
src/pocketmine/item/Pickaxe.php:		return $this->tier;
src/pocketmine/item/Pickaxe.php:		return self::getBaseDamageFromTier($this->tier) - 2;
src/pocketmine/item/Pickaxe.php:		if($block->getHardness() > 0){
src/pocketmine/item/Pickaxe.php:			return $this->applyDamage(1);
src/pocketmine/item/Pickaxe.php:		return $this->applyDamage(2);
src/pocketmine/item/ChorusFruit.php:		$level = $consumer->getLevelNonNull();
src/pocketmine/item/ChorusFruit.php:		$minX = $consumer->getFloorX() - 8;
src/pocketmine/item/ChorusFruit.php:		$minY = min($consumer->getFloorY(), $consumer->getLevelNonNull()->getWorldHeight()) - 8;
src/pocketmine/item/ChorusFruit.php:		$minZ = $consumer->getFloorZ() - 8;
src/pocketmine/item/ChorusFruit.php:			while($y >= 0 and !$level->getBlockAt($x, $y, $z)->isSolid()){
src/pocketmine/item/ChorusFruit.php:				$y--;
src/pocketmine/item/ChorusFruit.php:			$blockUp = $level->getBlockAt($x, $y + 1, $z);
src/pocketmine/item/ChorusFruit.php:			$blockUp2 = $level->getBlockAt($x, $y + 2, $z);
src/pocketmine/item/ChorusFruit.php:			if($blockUp->isSolid() or $blockUp instanceof Liquid or $blockUp2->isSolid() or $blockUp2 instanceof Liquid){
src/pocketmine/item/ChorusFruit.php:			$level->addSound(new EndermanTeleportSound($consumer->asVector3()));
src/pocketmine/item/ChorusFruit.php:			$consumer->teleport(new Vector3($x + 0.5, $y + 1, $z + 0.5));
src/pocketmine/item/ChorusFruit.php:			$level->addSound(new EndermanTeleportSound($consumer->asVector3()));
src/pocketmine/item/Shears.php:		if($block->getHardness() === 0.0 or $block->isCompatibleWithTool($this)){
src/pocketmine/item/Shears.php:			return $this->applyDamage(1);
src/pocketmine/item/Potion.php:		return self::getPotionEffectsById($this->meta);
src/pocketmine/item/Coal.php:		if($this->meta === 1){
src/pocketmine/item/Coal.php:			$this->name = "Charcoal";
src/pocketmine/item/PaintingItem.php:			$currentTotalDimension = $motive->getHeight() + $motive->getWidth();
src/pocketmine/item/PaintingItem.php:			if(Painting::canFit($player->level, $blockReplace, $face, true, $motive)){
src/pocketmine/item/PaintingItem.php:					 * when there is an L-shape of space available.
src/pocketmine/item/PaintingItem.php:		$direction = $directions[$face] ?? -1;
src/pocketmine/item/PaintingItem.php:		if($direction === -1){
src/pocketmine/item/PaintingItem.php:		$nbt->setByte("Direction", $direction);
src/pocketmine/item/PaintingItem.php:		$nbt->setString("Motive", $motive->getName());
src/pocketmine/item/PaintingItem.php:		$nbt->setInt("TileX", $blockClicked->getFloorX());
src/pocketmine/item/PaintingItem.php:		$nbt->setInt("TileY", $blockClicked->getFloorY());
src/pocketmine/item/PaintingItem.php:		$nbt->setInt("TileZ", $blockClicked->getFloorZ());
src/pocketmine/item/PaintingItem.php:		$entity = Entity::createEntity("Painting", $blockReplace->getLevelNonNull(), $nbt);
src/pocketmine/item/PaintingItem.php:			$this->pop();
src/pocketmine/item/PaintingItem.php:			$entity->spawnToAll();
src/pocketmine/item/PaintingItem.php:			$player->getLevelNonNull()->broadcastLevelEvent($blockReplace->add(0.5, 0.5, 0.5), LevelEventPacket::EVENT_SOUND_ITEMFRAME_PLACE); //item frame and painting have the same sound
src/pocketmine/item/Shovel.php:		return $this->tier;
src/pocketmine/item/Shovel.php:		return self::getBaseDamageFromTier($this->tier) - 3;
src/pocketmine/item/Shovel.php:		if($block->getHardness() > 0){
src/pocketmine/item/Shovel.php:			return $this->applyDamage(1);
src/pocketmine/item/Shovel.php:		return $this->applyDamage(2);
src/pocketmine/item/Axe.php:		return $this->tier;
src/pocketmine/item/Axe.php:		return self::getBaseDamageFromTier($this->tier) - 1;
src/pocketmine/item/Axe.php:		if($block->getHardness() > 0){
src/pocketmine/item/Axe.php:			return $this->applyDamage(1);
src/pocketmine/item/Axe.php:		return $this->applyDamage(2);
src/pocketmine/item/WrittenBook.php:		return $this->getNamedTag()->getInt(self::TAG_GENERATION, -1);
src/pocketmine/item/WrittenBook.php:		$namedTag = $this->getNamedTag();
src/pocketmine/item/WrittenBook.php:		$namedTag->setInt(self::TAG_GENERATION, $generation);
src/pocketmine/item/WrittenBook.php:		$this->setNamedTag($namedTag);
src/pocketmine/item/WrittenBook.php:		return $this->getNamedTag()->getString(self::TAG_AUTHOR, "");
src/pocketmine/item/WrittenBook.php:		$namedTag = $this->getNamedTag();
src/pocketmine/item/WrittenBook.php:		$namedTag->setString(self::TAG_AUTHOR, $authorName);
src/pocketmine/item/WrittenBook.php:		$this->setNamedTag($namedTag);
src/pocketmine/item/WrittenBook.php:		return $this->getNamedTag()->getString(self::TAG_TITLE, "");
src/pocketmine/item/WrittenBook.php:		$namedTag = $this->getNamedTag();
src/pocketmine/item/WrittenBook.php:		$namedTag->setString(self::TAG_TITLE, $title);
src/pocketmine/item/WrittenBook.php:		$this->setNamedTag($namedTag);
src/pocketmine/item/TieredTool.php:		$this->tier = $tier;
src/pocketmine/item/TieredTool.php:		return self::getDurabilityFromTier($this->tier);
src/pocketmine/item/TieredTool.php:		return $this->tier;
src/pocketmine/item/TieredTool.php:		return self::getBaseMiningEfficiencyFromTier($this->tier);
src/pocketmine/item/TieredTool.php:		if($this->tier === self::TIER_WOODEN){
src/pocketmine/item/FoodSource.php:	 * Returns whether a Human eating this FoodSource must have a non-full hunger bar.
src/pocketmine/item/Durable.php:		return $this->getNamedTag()->getByte("Unbreakable", 0) !== 0;
src/pocketmine/item/Durable.php:		$this->setNamedTagEntry(new ByteTag("Unbreakable", $value ? 1 : 0));
src/pocketmine/item/Durable.php:		if($this->isUnbreakable() or $this->isBroken()){
src/pocketmine/item/Durable.php:		$amount -= $this->getUnbreakingDamageReduction($amount);
src/pocketmine/item/Durable.php:		$this->meta = min($this->meta + $amount, $this->getMaxDurability());
src/pocketmine/item/Durable.php:		if($this->isBroken()){
src/pocketmine/item/Durable.php:			$this->onBroken();
src/pocketmine/item/Durable.php:		if(($unbreakingLevel = $this->getEnchantmentLevel(Enchantment::UNBREAKING)) > 0){
src/pocketmine/item/Durable.php:		$this->pop();
src/pocketmine/item/Durable.php:		return $this->meta >= $this->getMaxDurability();
src/pocketmine/item/SplashPotion.php:		$tag->setShort("PotionId", $this->meta);
src/pocketmine/item/FlintSteel.php:		if($blockReplace->getId() === self::AIR){
src/pocketmine/item/FlintSteel.php:			$level = $player->getLevelNonNull();
src/pocketmine/item/FlintSteel.php:			$level->setBlock($blockReplace, BlockFactory::get(Block::FIRE), true);
src/pocketmine/item/FlintSteel.php:			$level->broadcastLevelSoundEvent($blockReplace->add(0.5, 0.5, 0.5), LevelSoundEventPacket::SOUND_IGNITE);
src/pocketmine/item/FlintSteel.php:			$this->applyDamage(1);
src/pocketmine/item/Banner.php:		return $this->getNamedTag()->getInt(self::TAG_BASE, 0);
src/pocketmine/item/Banner.php:		$namedTag = $this->getNamedTag();
src/pocketmine/item/Banner.php:		$namedTag->setInt(self::TAG_BASE, $color & 0x0f);
src/pocketmine/item/Banner.php:		$this->setNamedTag($namedTag);
src/pocketmine/item/Banner.php:		$patternsTag = $this->getNamedTag()->getListTag(self::TAG_PATTERNS);
src/pocketmine/item/Banner.php:		$patternsTag->push(new CompoundTag("", [
src/pocketmine/item/Banner.php:		$this->setNamedTagEntry($patternsTag);
src/pocketmine/item/Banner.php:		return $patternsTag->count() - 1;
src/pocketmine/item/Banner.php:		$this->correctNBT();
src/pocketmine/item/Banner.php:		return $this->getNamedTag()->getListTag(self::TAG_PATTERNS)->isset($patternId);
src/pocketmine/item/Banner.php:	 * @phpstan-return array{Color?: int, Pattern?: string}
src/pocketmine/item/Banner.php:		if(!$this->patternExists($patternId)){
src/pocketmine/item/Banner.php:		$patternsTag = $this->getNamedTag()->getListTag(self::TAG_PATTERNS);
src/pocketmine/item/Banner.php:		$pattern = $patternsTag->get($patternId);
src/pocketmine/item/Banner.php:			self::TAG_PATTERN_COLOR => $pattern->getInt(self::TAG_PATTERN_COLOR),
src/pocketmine/item/Banner.php:			self::TAG_PATTERN_NAME => $pattern->getString(self::TAG_PATTERN_NAME)
src/pocketmine/item/Banner.php:		if(!$this->patternExists($patternId)){
src/pocketmine/item/Banner.php:		$patternsTag = $this->getNamedTag()->getListTag(self::TAG_PATTERNS);
src/pocketmine/item/Banner.php:		$patternsTag->set($patternId, new CompoundTag("", [
src/pocketmine/item/Banner.php:		$this->setNamedTagEntry($patternsTag);
src/pocketmine/item/Banner.php:		if(!$this->patternExists($patternId)){
src/pocketmine/item/Banner.php:		$patternsTag = $this->getNamedTag()->getListTag(self::TAG_PATTERNS);
src/pocketmine/item/Banner.php:			$patternsTag->remove($patternId);
src/pocketmine/item/Banner.php:			$this->setNamedTagEntry($patternsTag);
src/pocketmine/item/Banner.php:		return $this->deletePattern($this->getPatternCount() - 1);
src/pocketmine/item/Banner.php:		return $this->deletePattern(0);
src/pocketmine/item/Banner.php:		return $this->getNamedTag()->getListTag(self::TAG_PATTERNS)->count();
src/pocketmine/item/Banner.php:		$tag = $this->getNamedTag();
src/pocketmine/item/Banner.php:		if(!$tag->hasTag(self::TAG_BASE, IntTag::class)){
src/pocketmine/item/Banner.php:			$tag->setInt(self::TAG_BASE, 0);
src/pocketmine/item/Banner.php:		if(!$tag->hasTag(self::TAG_PATTERNS, ListTag::class)){
src/pocketmine/item/Banner.php:			$tag->setTag(new ListTag(self::TAG_PATTERNS));
src/pocketmine/item/Banner.php:		$this->setNamedTag($tag);
src/pocketmine/item/Bucket.php:		return $this->meta === Block::AIR ? 16 : 1; //empty buckets stack to 16
src/pocketmine/item/Bucket.php:		if($this->meta === Block::LAVA or $this->meta === Block::FLOWING_LAVA){
src/pocketmine/item/Bucket.php:		if($this->meta === Block::LAVA or $this->meta === Block::FLOWING_LAVA){
src/pocketmine/item/Bucket.php:		$resultBlock = BlockFactory::get($this->meta);
src/pocketmine/item/Bucket.php:			if($blockClicked instanceof Liquid and $blockClicked->getDamage() === 0){
src/pocketmine/item/Bucket.php:				$stack->pop();
src/pocketmine/item/Bucket.php:				$resultItem = ItemFactory::get(Item::BUCKET, $blockClicked->getFlowingForm()->getId());
src/pocketmine/item/Bucket.php:				$ev->call();
src/pocketmine/item/Bucket.php:				if(!$ev->isCancelled()){
src/pocketmine/item/Bucket.php:					$player->getLevelNonNull()->setBlock($blockClicked, BlockFactory::get(Block::AIR), true, true);
src/pocketmine/item/Bucket.php:					$player->getLevelNonNull()->broadcastLevelSoundEvent($blockClicked->add(0.5, 0.5, 0.5), $blockClicked->getBucketFillSound());
src/pocketmine/item/Bucket.php:					if($player->isSurvival()){
src/pocketmine/item/Bucket.php:						if($stack->getCount() === 0){
src/pocketmine/item/Bucket.php:							$player->getInventory()->setItemInHand($ev->getItem());
src/pocketmine/item/Bucket.php:							$player->getInventory()->setItemInHand($stack);
src/pocketmine/item/Bucket.php:							$player->getInventory()->addItem($ev->getItem());
src/pocketmine/item/Bucket.php:						$player->getInventory()->addItem($ev->getItem());
src/pocketmine/item/Bucket.php:					$player->getInventory()->sendContents($player);
src/pocketmine/item/Bucket.php:		}elseif($resultBlock instanceof Liquid and $blockReplace->canBeReplaced()){
src/pocketmine/item/Bucket.php:			$ev->call();
src/pocketmine/item/Bucket.php:			if(!$ev->isCancelled()){
src/pocketmine/item/Bucket.php:				$player->getLevelNonNull()->setBlock($blockReplace, $resultBlock->getFlowingForm(), true, true);
src/pocketmine/item/Bucket.php:				$player->getLevelNonNull()->broadcastLevelSoundEvent($blockReplace->add(0.5, 0.5, 0.5), $resultBlock->getBucketEmptySound());
src/pocketmine/item/Bucket.php:				if($player->isSurvival()){
src/pocketmine/item/Bucket.php:					$player->getInventory()->setItemInHand($ev->getItem());
src/pocketmine/item/Bucket.php:				$player->getInventory()->sendContents($player);
src/pocketmine/item/Bucket.php:		return $this->meta === 1; //Milk
src/pocketmine/item/Bucket.php:		$consumer->removeAllEffects();
src/pocketmine/item/ItemFactory.php:	 * @phpstan-var \SplFixedArray<Item>
src/pocketmine/item/ItemFactory.php:	 * NOTE: If you are registering a new item type, you will need to add it to the creative inventory yourself - it
src/pocketmine/item/ItemFactory.php:	 * @throws \RuntimeException if something attempted to override an already-registered item without specifying the
src/pocketmine/item/ItemFactory.php:		$id = $item->getId();
src/pocketmine/item/ItemFactory.php:				/* Blocks must have a damage value 0-15, but items can have damage value -1 to indicate that they are
src/pocketmine/item/ItemFactory.php:				 * crafting ingredients with any-damage. */
src/pocketmine/item/ItemFactory.php:		$item->setDamage($meta);
src/pocketmine/item/ItemFactory.php:		$item->setCount($count);
src/pocketmine/item/ItemFactory.php:		$item->setCompoundTag($tags);
src/pocketmine/item/ItemFactory.php:	 * - `diamond_pickaxe:5`
src/pocketmine/item/ItemFactory.php:	 * - `minecraft:string`
src/pocketmine/item/ItemFactory.php:	 * - `351:4 (lapis lazuli ID:meta)`
src/pocketmine/item/ItemFactory.php:	 * If multiple item instances are to be created, their identifiers must be comma-separated, for example:
src/pocketmine/item/ItemFactory.php:		if($id < -0x8000 or $id > 0x7fff){
src/pocketmine/item/ItemFactory.php:			throw new \InvalidArgumentException("ID must be in range " . -0x8000 . " - " . 0x7fff);
src/pocketmine/item/ItemBlock.php:	 * @param int      $meta usually 0-15 (placed blocks may only have meta values 0-15)
src/pocketmine/item/ItemBlock.php:		$this->blockId = $blockId;
src/pocketmine/item/ItemBlock.php:		parent::__construct($itemId ?? $blockId, $meta, $this->getBlock()->getName());
src/pocketmine/item/ItemBlock.php:		return BlockFactory::get($this->blockId, $this->meta === -1 ? 0 : $this->meta & 0xf);
src/pocketmine/item/ItemBlock.php:		return $this->getBlock()->getName();
src/pocketmine/item/ItemBlock.php:		return $this->getBlock()->getFuelTime();
src/pocketmine/item/ProjectileItem.php:		$nbt = Entity::createBaseNBT($player->add(0, $player->getEyeHeight(), 0), $directionVector, $player->yaw, $player->pitch);
src/pocketmine/item/ProjectileItem.php:		$this->addExtraTags($nbt);
src/pocketmine/item/ProjectileItem.php:		$projectile = Entity::createEntity($this->getProjectileEntityType(), $player->getLevelNonNull(), $nbt, $player);
src/pocketmine/item/ProjectileItem.php:			$projectile->setMotion($projectile->getMotion()->multiply($this->getThrowForce()));
src/pocketmine/item/ProjectileItem.php:		$this->pop();
src/pocketmine/item/ProjectileItem.php:			$projectileEv->call();
src/pocketmine/item/ProjectileItem.php:			if($projectileEv->isCancelled()){
src/pocketmine/item/ProjectileItem.php:				$projectile->flagForDespawn();
src/pocketmine/item/ProjectileItem.php:				$projectile->spawnToAll();
src/pocketmine/item/ProjectileItem.php:				$player->getLevelNonNull()->broadcastLevelSoundEvent($player, LevelSoundEventPacket::SOUND_THROW, 0, EntityIds::PLAYER);
src/pocketmine/item/ProjectileItem.php:			$projectile->spawnToAll();
src/pocketmine/Server.php: * PocketMine-MP is the Minecraft: PE multiplayer server software
src/pocketmine/Server.php:	 * @phpstan-var array<string, string>
src/pocketmine/Server.php:		return $this->isRunning;
src/pocketmine/Server.php:		return $this->dataPath;
src/pocketmine/Server.php:		return $this->pluginPath;
src/pocketmine/Server.php:		return $this->maxPlayers;
src/pocketmine/Server.php:		return $this->onlineMode;
src/pocketmine/Server.php:		return $this->getOnlineMode();
src/pocketmine/Server.php:		return $this->getConfigInt("server-port", 19132);
src/pocketmine/Server.php:		return max(2, $this->getConfigInt("view-distance", 8));
src/pocketmine/Server.php:	 * Returns a view distance up to the currently-allowed limit.
src/pocketmine/Server.php:		return max(2, min($distance, $this->memoryManager->getViewDistance($this->getViewDistance())));
src/pocketmine/Server.php:		$str = $this->getConfigString("server-ip");
src/pocketmine/Server.php:		return $this->serverID;
src/pocketmine/Server.php:		return $this->autoSave;
src/pocketmine/Server.php:		$this->autoSave = $value;
src/pocketmine/Server.php:		foreach($this->getLevels() as $level){
src/pocketmine/Server.php:			$level->setAutoSave($this->autoSave);
src/pocketmine/Server.php:		return $this->getConfigString("level-type", "DEFAULT");
src/pocketmine/Server.php:		return $this->getConfigBool("generate-structures", true);
src/pocketmine/Server.php:		return $this->getConfigInt("gamemode", 0) & 0b11;
src/pocketmine/Server.php:		return $this->getConfigBool("force-gamemode", false);
src/pocketmine/Server.php:	 * Parses a string and returns a gamemode integer, -1 if not found
src/pocketmine/Server.php:		return -1;
src/pocketmine/Server.php:		return $this->getConfigInt("difficulty", Level::DIFFICULTY_NORMAL);
src/pocketmine/Server.php:		return $this->getConfigBool("white-list", false);
src/pocketmine/Server.php:		return $this->getConfigInt("spawn-protection", 16);
src/pocketmine/Server.php:		return $this->getConfigBool("hardcore", false);
src/pocketmine/Server.php:		return $this->getConfigInt("gamemode", 0) & 0b11;
src/pocketmine/Server.php:		return $this->getConfigString("motd", \pocketmine\NAME . " Server");
src/pocketmine/Server.php:		return $this->autoloader;
src/pocketmine/Server.php:		return $this->logger;
src/pocketmine/Server.php:		return $this->entityMetadata;
src/pocketmine/Server.php:		return $this->playerMetadata;
src/pocketmine/Server.php:		return $this->levelMetadata;
src/pocketmine/Server.php:		return $this->updater;
src/pocketmine/Server.php:		return $this->pluginManager;
src/pocketmine/Server.php:		return $this->craftingManager;
src/pocketmine/Server.php:		return $this->resourceManager;
src/pocketmine/Server.php:		return $this->asyncPool;
src/pocketmine/Server.php:		return $this->tickCounter;
src/pocketmine/Server.php:		return round($this->currentTPS, 2);
src/pocketmine/Server.php:		return round(array_sum($this->tickAverage) / count($this->tickAverage), 2);
src/pocketmine/Server.php:		return round($this->currentUse * 100, 2);
src/pocketmine/Server.php:		return round((array_sum($this->useAverage) / count($this->useAverage)) * 100, 2);
src/pocketmine/Server.php:		return $this->commandMap;
src/pocketmine/Server.php:		return $this->loggedInPlayers;
src/pocketmine/Server.php:		return $this->playerList;
src/pocketmine/Server.php:		return (bool) $this->getProperty("player.save-player-data", true);
src/pocketmine/Server.php:		$result = $this->getPlayerExact($name);
src/pocketmine/Server.php:		return $this->getDataPath() . '/players/' . strtolower($username) . '.dat';
src/pocketmine/Server.php:		return file_exists($this->getPlayerDataPath($name));
src/pocketmine/Server.php:		$path = $this->getPlayerDataPath($name);
src/pocketmine/Server.php:		if($this->shouldSavePlayerData()){
src/pocketmine/Server.php:					$compound = $nbt->readCompressed(file_get_contents($path));
src/pocketmine/Server.php:					$this->logger->notice($this->getLanguage()->translateString("pocketmine.data.playerCorrupted", [$name]));
src/pocketmine/Server.php:				$this->logger->notice($this->getLanguage()->translateString("pocketmine.data.playerNotFound", [$name]));
src/pocketmine/Server.php:		$spawn = $this->getDefaultLevel()->getSafeSpawn();
src/pocketmine/Server.php:				new DoubleTag("", $spawn->x),
src/pocketmine/Server.php:				new DoubleTag("", $spawn->y),
src/pocketmine/Server.php:				new DoubleTag("", $spawn->z)
src/pocketmine/Server.php:			new StringTag("Level", $this->getDefaultLevel()->getFolderName()),
src/pocketmine/Server.php:			//new StringTag("SpawnLevel", $this->getDefaultLevel()->getFolderName()),
src/pocketmine/Server.php:			//new IntTag("SpawnX", $spawn->getFloorX()),
src/pocketmine/Server.php:			//new IntTag("SpawnY", $spawn->getFloorY()),
src/pocketmine/Server.php:			//new IntTag("SpawnZ", $spawn->getFloorZ()),
src/pocketmine/Server.php:			new IntTag("playerGameType", $this->getGamemode()),
src/pocketmine/Server.php:		$ev->setCancelled(!$this->shouldSavePlayerData());
src/pocketmine/Server.php:		$ev->call();
src/pocketmine/Server.php:		if(!$ev->isCancelled()){
src/pocketmine/Server.php:				file_put_contents($this->getPlayerDataPath($name), $nbt->writeCompressed($ev->getSaveData()));
src/pocketmine/Server.php:				$this->logger->critical($this->getLanguage()->translateString("pocketmine.data.saveError", [$name, $e->getMessage()]));
src/pocketmine/Server.php:				$this->logger->logException($e);
src/pocketmine/Server.php:		foreach($this->getOnlinePlayers() as $player){
src/pocketmine/Server.php:			if(stripos($player->getName(), $name) === 0){
src/pocketmine/Server.php:				$curDelta = strlen($player->getName()) - strlen($name);
src/pocketmine/Server.php:		foreach($this->getOnlinePlayers() as $player){
src/pocketmine/Server.php:			if($player->getLowerCaseName() === $name){
src/pocketmine/Server.php:		foreach($this->getOnlinePlayers() as $player){
src/pocketmine/Server.php:			if($player->getLowerCaseName() === $partialName){
src/pocketmine/Server.php:			}elseif(stripos($player->getName(), $partialName) !== false){
src/pocketmine/Server.php:		return $this->playerList[$rawUUID] ?? null;
src/pocketmine/Server.php:		return $this->getPlayerByRawUUID($uuid->toBinary());
src/pocketmine/Server.php:		return $this->levels;
src/pocketmine/Server.php:		return $this->levelDefault;
src/pocketmine/Server.php:	 * This won't change the level-name property,
src/pocketmine/Server.php:		if($level === null or ($this->isLevelLoaded($level->getFolderName()) and $level !== $this->levelDefault)){
src/pocketmine/Server.php:			$this->levelDefault = $level;
src/pocketmine/Server.php:		return $this->getLevelByName($name) instanceof Level;
src/pocketmine/Server.php:		return $this->levels[$levelId] ?? null;
src/pocketmine/Server.php:		foreach($this->getLevels() as $level){
src/pocketmine/Server.php:			if($level->getFolderName() === $name){
src/pocketmine/Server.php:		if($level === $this->getDefaultLevel() and !$forceUnload){
src/pocketmine/Server.php:		return $level->unload($forceUnload);
src/pocketmine/Server.php:		unset($this->levels[$level->getId()]);
src/pocketmine/Server.php:		if($this->isLevelLoaded($name)){
src/pocketmine/Server.php:		}elseif(!$this->isLevelGenerated($name)){
src/pocketmine/Server.php:			$this->logger->notice($this->getLanguage()->translateString("pocketmine.level.notFound", [$name]));
src/pocketmine/Server.php:		$path = $this->getDataPath() . "worlds/" . $name . "/";
src/pocketmine/Server.php:			$this->logger->error($this->getLanguage()->translateString("pocketmine.level.loadError", [$name, "Cannot identify format of world"]));
src/pocketmine/Server.php:			$this->logger->error($this->getLanguage()->translateString("pocketmine.level.loadError", [$name, $e->getMessage()]));
src/pocketmine/Server.php:			GeneratorManager::getGenerator($provider->getGenerator(), true);
src/pocketmine/Server.php:			$this->logger->error($this->getLanguage()->translateString("pocketmine.level.loadError", [$name, "Unknown generator \"" . $provider->getGenerator() . "\""]));
src/pocketmine/Server.php:		$this->levels[$level->getId()] = $level;
src/pocketmine/Server.php:		(new LevelLoadEvent($level))->call();
src/pocketmine/Server.php:	 * @phpstan-param class-string<Generator> $generator
src/pocketmine/Server.php:	 * @phpstan-param array<string, mixed>    $options
src/pocketmine/Server.php:		if(trim($name) === "" or $this->isLevelGenerated($name)){
src/pocketmine/Server.php:			$options["preset"] = $this->getConfigString("generator-settings", "");
src/pocketmine/Server.php:			$generator = GeneratorManager::getGenerator($this->getLevelType());
src/pocketmine/Server.php:		if(($providerClass = LevelProviderManager::getProviderByName($this->getProperty("level-settings.default-format", "pmanvil"))) === null){
src/pocketmine/Server.php:		$path = $this->getDataPath() . "worlds/" . $name . "/";
src/pocketmine/Server.php:		$this->levels[$level->getId()] = $level;
src/pocketmine/Server.php:		(new LevelInitEvent($level))->call();
src/pocketmine/Server.php:		(new LevelLoadEvent($level))->call();
src/pocketmine/Server.php:		$this->getLogger()->notice($this->getLanguage()->translateString("pocketmine.level.backgroundGeneration", [$name]));
src/pocketmine/Server.php:		$spawnLocation = $level->getSpawnLocation();
src/pocketmine/Server.php:		$centerX = $spawnLocation->getFloorX() >> 4;
src/pocketmine/Server.php:		$centerZ = $spawnLocation->getFloorZ() >> 4;
src/pocketmine/Server.php:		for($X = -3; $X <= 3; ++$X){
src/pocketmine/Server.php:			for($Z = -3; $Z <= 3; ++$Z){
src/pocketmine/Server.php:			$level->populateChunk($chunkX, $chunkZ, true);
src/pocketmine/Server.php:		$path = $this->getDataPath() . "worlds/" . $name . "/";
src/pocketmine/Server.php:		if(!($this->getLevelByName($name) instanceof Level)){
src/pocketmine/Server.php:		foreach($this->levels as $level){
src/pocketmine/Server.php:			assert(!$level->isClosed());
src/pocketmine/Server.php:			if(($entity = $level->getEntity($entityId)) instanceof Entity){
src/pocketmine/Server.php:		if(!array_key_exists($variable, $this->propertyCache)){
src/pocketmine/Server.php:				$this->propertyCache[$variable] = $v[$variable];
src/pocketmine/Server.php:				$this->propertyCache[$variable] = $this->config->getNested($variable);
src/pocketmine/Server.php:		return $this->propertyCache[$variable] ?? $defaultValue;
src/pocketmine/Server.php:		return $this->properties->exists($variable) ? (string) $this->properties->get($variable) : $defaultValue;
src/pocketmine/Server.php:		$this->properties->set($variable, $value);
src/pocketmine/Server.php:		return $this->properties->exists($variable) ? (int) $this->properties->get($variable) : $defaultValue;
src/pocketmine/Server.php:		$this->properties->set($variable, $value);
src/pocketmine/Server.php:			$value = $this->properties->exists($variable) ? $this->properties->get($variable) : $defaultValue;
src/pocketmine/Server.php:		$this->properties->set($variable, $value ? "1" : "0");
src/pocketmine/Server.php:		if(($command = $this->commandMap->getCommand($name)) instanceof PluginIdentifiableCommand){
src/pocketmine/Server.php:		return $this->banByName;
src/pocketmine/Server.php:		return $this->banByIP;
src/pocketmine/Server.php:		$this->operators->set(strtolower($name), true);
src/pocketmine/Server.php:		if(($player = $this->getPlayerExact($name)) !== null){
src/pocketmine/Server.php:			$player->recalculatePermissions();
src/pocketmine/Server.php:		$this->operators->save();
src/pocketmine/Server.php:		$this->operators->remove(strtolower($name));
src/pocketmine/Server.php:		if(($player = $this->getPlayerExact($name)) !== null){
src/pocketmine/Server.php:			$player->recalculatePermissions();
src/pocketmine/Server.php:		$this->operators->save();
src/pocketmine/Server.php:		$this->whitelist->set(strtolower($name), true);
src/pocketmine/Server.php:		$this->whitelist->save();
src/pocketmine/Server.php:		$this->whitelist->remove(strtolower($name));
src/pocketmine/Server.php:		$this->whitelist->save();
src/pocketmine/Server.php:		return !$this->hasWhitelist() or $this->operators->exists($name, true) or $this->whitelist->exists($name, true);
src/pocketmine/Server.php:		return $this->operators->exists($name, true);
src/pocketmine/Server.php:		return $this->whitelist;
src/pocketmine/Server.php:		return $this->operators;
src/pocketmine/Server.php:		$this->whitelist->reload();
src/pocketmine/Server.php:		$section = $this->getProperty("aliases");
src/pocketmine/Server.php:		self::$sleeper->synchronized(function(int $ms) : void{
src/pocketmine/Server.php:			Server::$sleeper->wait($ms);
src/pocketmine/Server.php:		$this->tickSleeper = new SleeperHandler();
src/pocketmine/Server.php:		$this->autoloader = $autoloader;
src/pocketmine/Server.php:		$this->logger = $logger;
src/pocketmine/Server.php:			$this->dataPath = realpath($dataPath) . DIRECTORY_SEPARATOR;
src/pocketmine/Server.php:			$this->pluginPath = realpath($pluginPath) . DIRECTORY_SEPARATOR;
src/pocketmine/Server.php:			$this->logger->info("Loading pocketmine.yml...");
src/pocketmine/Server.php:			if(!file_exists($this->dataPath . "pocketmine.yml")){
src/pocketmine/Server.php:					$content = str_replace("preferred-channel: stable", "preferred-channel: beta", $content);
src/pocketmine/Server.php:				@file_put_contents($this->dataPath . "pocketmine.yml", $content);
src/pocketmine/Server.php:			$this->config = new Config($this->dataPath . "pocketmine.yml", Config::YAML, []);
src/pocketmine/Server.php:			$this->logger->info("Loading server properties...");
src/pocketmine/Server.php:			$this->properties = new Config($this->dataPath . "server.properties", Config::PROPERTIES, [
src/pocketmine/Server.php:				"server-port" => 19132,
src/pocketmine/Server.php:				"white-list" => false,
src/pocketmine/Server.php:				"announce-player-achievements" => true,
src/pocketmine/Server.php:				"spawn-protection" => 16,
src/pocketmine/Server.php:				"max-players" => 20,
src/pocketmine/Server.php:				"force-gamemode" => false,
src/pocketmine/Server.php:				"generator-settings" => "",
src/pocketmine/Server.php:				"level-name" => "world",
src/pocketmine/Server.php:				"level-seed" => "",
src/pocketmine/Server.php:				"level-type" => "DEFAULT",
src/pocketmine/Server.php:				"enable-query" => true,
src/pocketmine/Server.php:				"enable-rcon" => false,
src/pocketmine/Server.php:				"auto-save" => true,
src/pocketmine/Server.php:				"view-distance" => 8,
src/pocketmine/Server.php:				"xbox-auth" => true,
src/pocketmine/Server.php:			define('pocketmine\DEBUG', (int) $this->getProperty("debug.level", 1));
src/pocketmine/Server.php:			$this->forceLanguage = (bool) $this->getProperty("settings.force-language", false);
src/pocketmine/Server.php:			$this->baseLang = new BaseLang($this->getConfigString("language", $this->getProperty("settings.language", BaseLang::FALLBACK_LANGUAGE)));
src/pocketmine/Server.php:			$this->logger->info($this->getLanguage()->translateString("language.selected", [$this->getLanguage()->getName(), $this->getLanguage()->getLang()]));
src/pocketmine/Server.php:			if(\pocketmine\IS_DEVELOPMENT_BUILD and !((bool) $this->getProperty("settings.enable-dev-builds", false))){
src/pocketmine/Server.php:				$this->logger->emergency($this->baseLang->translateString("pocketmine.server.devBuild.error1", [\pocketmine\NAME]));
src/pocketmine/Server.php:				$this->logger->emergency($this->baseLang->translateString("pocketmine.server.devBuild.error2"));
src/pocketmine/Server.php:				$this->logger->emergency($this->baseLang->translateString("pocketmine.server.devBuild.error3"));
src/pocketmine/Server.php:				$this->logger->emergency($this->baseLang->translateString("pocketmine.server.devBuild.error4", ["settings.enable-dev-builds"]));
src/pocketmine/Server.php:				$this->logger->emergency($this->baseLang->translateString("pocketmine.server.devBuild.error5", ["https://github.com/pmmp/PocketMine-MP/releases"]));
src/pocketmine/Server.php:				$this->forceShutdown();
src/pocketmine/Server.php:			if($this->logger instanceof MainLogger){
src/pocketmine/Server.php:				$this->logger->setLogDebug(\pocketmine\DEBUG > 1);
src/pocketmine/Server.php:			$this->memoryManager = new MemoryManager($this);
src/pocketmine/Server.php:			$this->logger->info($this->getLanguage()->translateString("pocketmine.server.start", [TextFormat::AQUA . $this->getVersion() . TextFormat::RESET]));
src/pocketmine/Server.php:			if(($poolSize = $this->getProperty("settings.async-workers", "auto")) === "auto"){
src/pocketmine/Server.php:				$processors = Utils::getCoreCount() - 2;
src/pocketmine/Server.php:			$this->asyncPool = new AsyncPool($this, $poolSize, max(-1, (int) $this->getProperty("memory.async-worker-hard-limit", 256)), $this->autoloader, $this->logger);
src/pocketmine/Server.php:			if($this->getProperty("network.batch-threshold", 256) >= 0){
src/pocketmine/Server.php:				Network::$BATCH_THRESHOLD = (int) $this->getProperty("network.batch-threshold", 256);
src/pocketmine/Server.php:				Network::$BATCH_THRESHOLD = -1;
src/pocketmine/Server.php:			$this->networkCompressionLevel = (int) $this->getProperty("network.compression-level", 6);
src/pocketmine/Server.php:			if($this->networkCompressionLevel < 1 or $this->networkCompressionLevel > 9){
src/pocketmine/Server.php:				$this->logger->warning("Invalid network compression level $this->networkCompressionLevel set, setting to default 6");
src/pocketmine/Server.php:				$this->networkCompressionLevel = 6;
src/pocketmine/Server.php:			$this->networkCompressionAsync = (bool) $this->getProperty("network.async-compression", true);
src/pocketmine/Server.php:			$this->doTitleTick = ((bool) $this->getProperty("console.title-tick", true)) && Terminal::hasFormattingCodes();
src/pocketmine/Server.php:			PermissionManager::getInstance()->subscribeToPermission(Server::BROADCAST_CHANNEL_ADMINISTRATIVE, $consoleSender);
src/pocketmine/Server.php:			$this->console = new CommandReader($consoleNotifier);
src/pocketmine/Server.php:			$this->tickSleeper->addNotifier($consoleNotifier, function() use ($consoleSender) : void{
src/pocketmine/Server.php:				Timings::$serverCommandTimer->startTiming();
src/pocketmine/Server.php:				while(($line = $this->console->getLine()) !== null){
src/pocketmine/Server.php:					$ev->call();
src/pocketmine/Server.php:					if(!$ev->isCancelled()){
src/pocketmine/Server.php:						$this->dispatchCommand($ev->getSender(), $ev->getCommand());
src/pocketmine/Server.php:				Timings::$serverCommandTimer->stopTiming();
src/pocketmine/Server.php:			$this->console->start(PTHREADS_INHERIT_NONE);
src/pocketmine/Server.php:			if($this->getConfigBool("enable-rcon", false)){
src/pocketmine/Server.php:					$this->rcon = new RCON(
src/pocketmine/Server.php:						$this->getConfigString("rcon.password", ""),
src/pocketmine/Server.php:						$this->getConfigInt("rcon.port", $this->getPort()),
src/pocketmine/Server.php:						$this->getIp(),
src/pocketmine/Server.php:						$this->getConfigInt("rcon.max-clients", 50)
src/pocketmine/Server.php:					$this->getLogger()->critical("RCON can't be started: " . $e->getMessage());
src/pocketmine/Server.php:			$this->entityMetadata = new EntityMetadataStore();
src/pocketmine/Server.php:			$this->playerMetadata = new PlayerMetadataStore();
src/pocketmine/Server.php:			$this->levelMetadata = new LevelMetadataStore();
src/pocketmine/Server.php:			$this->operators = new Config($this->dataPath . "ops.txt", Config::ENUM);
src/pocketmine/Server.php:			$this->whitelist = new Config($this->dataPath . "white-list.txt", Config::ENUM);
src/pocketmine/Server.php:			if(file_exists($this->dataPath . "banned.txt") and !file_exists($this->dataPath . "banned-players.txt")){
src/pocketmine/Server.php:				@rename($this->dataPath . "banned.txt", $this->dataPath . "banned-players.txt");
src/pocketmine/Server.php:			@touch($this->dataPath . "banned-players.txt");
src/pocketmine/Server.php:			$this->banByName = new BanList($this->dataPath . "banned-players.txt");
src/pocketmine/Server.php:			$this->banByName->load();
src/pocketmine/Server.php:			@touch($this->dataPath . "banned-ips.txt");
src/pocketmine/Server.php:			$this->banByIP = new BanList($this->dataPath . "banned-ips.txt");
src/pocketmine/Server.php:			$this->banByIP->load();
src/pocketmine/Server.php:			$this->maxPlayers = $this->getConfigInt("max-players", 20);
src/pocketmine/Server.php:			$this->setAutoSave($this->getConfigBool("auto-save", true));
src/pocketmine/Server.php:			$this->onlineMode = $this->getConfigBool("xbox-auth", true);
src/pocketmine/Server.php:			if($this->onlineMode){
src/pocketmine/Server.php:				$this->logger->notice($this->getLanguage()->translateString("pocketmine.server.auth.enabled"));
src/pocketmine/Server.php:				$this->logger->notice($this->getLanguage()->translateString("pocketmine.server.authProperty.enabled"));
src/pocketmine/Server.php:				$this->logger->warning($this->getLanguage()->translateString("pocketmine.server.auth.disabled"));
src/pocketmine/Server.php:				$this->logger->warning($this->getLanguage()->translateString("pocketmine.server.authWarning"));
src/pocketmine/Server.php:				$this->logger->warning($this->getLanguage()->translateString("pocketmine.server.authProperty.disabled"));
src/pocketmine/Server.php:			if($this->getConfigBool("hardcore", false) and $this->getDifficulty() < Level::DIFFICULTY_HARD){
src/pocketmine/Server.php:				$this->setConfigInt("difficulty", Level::DIFFICULTY_HARD);
src/pocketmine/Server.php:				@cli_set_process_title($this->getName() . " " . $this->getPocketMineVersion());
src/pocketmine/Server.php:			$this->logger->info($this->getLanguage()->translateString("pocketmine.server.networkStart", [$this->getIp(), $this->getPort()]));
src/pocketmine/Server.php:			$this->serverID = Utils::getMachineUniqueId($this->getIp() . $this->getPort());
src/pocketmine/Server.php:			$this->getLogger()->debug("Server unique id: " . $this->getServerUniqueId());
src/pocketmine/Server.php:			$this->getLogger()->debug("Machine unique id: " . Utils::getMachineUniqueId());
src/pocketmine/Server.php:			$this->network = new Network($this);
src/pocketmine/Server.php:			$this->network->setName($this->getMotd());
src/pocketmine/Server.php:			$this->logger->info($this->getLanguage()->translateString("pocketmine.server.info", [
src/pocketmine/Server.php:				$this->getName(),
src/pocketmine/Server.php:				(\pocketmine\IS_DEVELOPMENT_BUILD ? TextFormat::YELLOW : "") . $this->getPocketMineVersion() . TextFormat::RESET
src/pocketmine/Server.php:			$this->logger->info($this->getLanguage()->translateString("pocketmine.server.license", [$this->getName()]));
src/pocketmine/Server.php:			TimingsHandler::setEnabled((bool) $this->getProperty("settings.enable-profiling", false));
src/pocketmine/Server.php:			$this->commandMap = new SimpleCommandMap($this);
src/pocketmine/Server.php:				$this->logger->debug($this->getLanguage()->translateString("pocketmine.debug.enable"));
src/pocketmine/Server.php:			$this->craftingManager = new CraftingManager();
src/pocketmine/Server.php:			$this->resourceManager = new ResourcePackManager($this->getDataPath() . "resource_packs" . DIRECTORY_SEPARATOR, $this->logger);
src/pocketmine/Server.php:			$this->pluginManager = new PluginManager($this, $this->commandMap, ((bool) $this->getProperty("plugins.legacy-data-dir", true)) ? null : $this->getDataPath() . "plugin_data" . DIRECTORY_SEPARATOR);
src/pocketmine/Server.php:			$this->profilingTickRate = (float) $this->getProperty("settings.profile-report-trigger", 20);
src/pocketmine/Server.php:			$this->pluginManager->registerInterface(new PharPluginLoader($this->autoloader));
src/pocketmine/Server.php:			$this->pluginManager->registerInterface(new ScriptPluginLoader());
src/pocketmine/Server.php:			$this->queryRegenerateTask = new QueryRegenerateEvent($this);
src/pocketmine/Server.php:			$this->updater = new AutoUpdater($this, $this->getProperty("auto-updater.host", "update.pmmp.io"));
src/pocketmine/Server.php:			$this->pluginManager->loadPlugins($this->pluginPath);
src/pocketmine/Server.php:			$this->enablePlugins(PluginLoadOrder::STARTUP);
src/pocketmine/Server.php:			$this->network->registerInterface(new RakLibInterface($this));
src/pocketmine/Server.php:			foreach((array) $this->getProperty("worlds", []) as $name => $options){
src/pocketmine/Server.php:				if(!$this->loadLevel($name)){
src/pocketmine/Server.php:					$this->generateLevel($name, Generator::convertSeed((string) ($options["seed"] ?? "")), $generator, $options);
src/pocketmine/Server.php:			if($this->getDefaultLevel() === null){
src/pocketmine/Server.php:				$default = $this->getConfigString("level-name", "world");
src/pocketmine/Server.php:					$this->getLogger()->warning("level-name cannot be null, using default");
src/pocketmine/Server.php:					$this->setConfigString("level-name", "world");
src/pocketmine/Server.php:				if(!$this->loadLevel($default)){
src/pocketmine/Server.php:					$this->generateLevel($default, Generator::convertSeed($this->getConfigString("level-seed")));
src/pocketmine/Server.php:				$this->setDefaultLevel($this->getLevelByName($default));
src/pocketmine/Server.php:			if($this->properties->hasChanged()){
src/pocketmine/Server.php:				$this->properties->save();
src/pocketmine/Server.php:			if(!($this->getDefaultLevel() instanceof Level)){
src/pocketmine/Server.php:				$this->getLogger()->emergency($this->getLanguage()->translateString("pocketmine.level.defaultError"));
src/pocketmine/Server.php:				$this->forceShutdown();
src/pocketmine/Server.php:			if($this->getProperty("ticks-per.autosave", 6000) > 0){
src/pocketmine/Server.php:				$this->autoSaveTicks = (int) $this->getProperty("ticks-per.autosave", 6000);
src/pocketmine/Server.php:			$this->enablePlugins(PluginLoadOrder::POSTWORLD);
src/pocketmine/Server.php:			$this->start();
src/pocketmine/Server.php:			$this->exceptionHandler($e);
src/pocketmine/Server.php:			return $this->broadcast($message, self::BROADCAST_CHANNEL_USERS);
src/pocketmine/Server.php:			$recipient->sendMessage($message);
src/pocketmine/Server.php:			foreach(PermissionManager::getInstance()->getPermissionSubscriptions(self::BROADCAST_CHANNEL_USERS) as $permissible){
src/pocketmine/Server.php:				if($permissible instanceof Player and $permissible->hasPermission(self::BROADCAST_CHANNEL_USERS)){
src/pocketmine/Server.php:			$recipient->sendTip($tip);
src/pocketmine/Server.php:			foreach(PermissionManager::getInstance()->getPermissionSubscriptions(self::BROADCAST_CHANNEL_USERS) as $permissible){
src/pocketmine/Server.php:				if($permissible instanceof Player and $permissible->hasPermission(self::BROADCAST_CHANNEL_USERS)){
src/pocketmine/Server.php:			$recipient->sendPopup($popup);
src/pocketmine/Server.php:	 * @param int           $fadeIn Duration in ticks for fade-in. If -1 is given, client-sided defaults will be used.
src/pocketmine/Server.php:	 * @param int           $fadeOut Duration in ticks for fade-out.
src/pocketmine/Server.php:	public function broadcastTitle(string $title, string $subtitle = "", int $fadeIn = -1, int $stay = -1, int $fadeOut = -1, array $recipients = null) : int{
src/pocketmine/Server.php:			foreach(PermissionManager::getInstance()->getPermissionSubscriptions(self::BROADCAST_CHANNEL_USERS) as $permissible){
src/pocketmine/Server.php:				if($permissible instanceof Player and $permissible->hasPermission(self::BROADCAST_CHANNEL_USERS)){
src/pocketmine/Server.php:			$recipient->sendTitle($title, $subtitle, $fadeIn, $stay, $fadeOut);
src/pocketmine/Server.php:			foreach(PermissionManager::getInstance()->getPermissionSubscriptions($permission) as $permissible){
src/pocketmine/Server.php:				if($permissible instanceof CommandSender and $permissible->hasPermission($permission)){
src/pocketmine/Server.php:			$recipient->sendMessage($message);
src/pocketmine/Server.php:		$packet->encode();
src/pocketmine/Server.php:		$this->batchPackets($players, [$packet], false);
src/pocketmine/Server.php:		Timings::$playerNetworkTimer->startTiming();
src/pocketmine/Server.php:		$targets = array_filter($players, function(Player $player) : bool{ return $player->isConnected(); });
src/pocketmine/Server.php:				$pk->addPacket($p);
src/pocketmine/Server.php:			if(Network::$BATCH_THRESHOLD >= 0 and strlen($pk->payload) >= Network::$BATCH_THRESHOLD){
src/pocketmine/Server.php:				$pk->setCompressionLevel($this->networkCompressionLevel);
src/pocketmine/Server.php:				$pk->setCompressionLevel(0); //Do not compress packets under the threshold
src/pocketmine/Server.php:			if(!$forceSync and !$immediate and $this->networkCompressionAsync){
src/pocketmine/Server.php:				$this->asyncPool->submitTask($task);
src/pocketmine/Server.php:				$this->broadcastPacketsCallback($pk, $targets, $immediate);
src/pocketmine/Server.php:		Timings::$playerNetworkTimer->stopTiming();
src/pocketmine/Server.php:		if(!$pk->isEncoded){
src/pocketmine/Server.php:			$pk->encode();
src/pocketmine/Server.php:			$i->sendDataPacket($pk, false, $immediate);
src/pocketmine/Server.php:		foreach($this->pluginManager->getPlugins() as $plugin){
src/pocketmine/Server.php:			if(!$plugin->isEnabled() and $plugin->getDescription()->getOrder() === $type){
src/pocketmine/Server.php:				$this->enablePlugin($plugin);
src/pocketmine/Server.php:			$this->commandMap->registerServerAliases();
src/pocketmine/Server.php:		$this->pluginManager->enablePlugin($plugin);
src/pocketmine/Server.php:		$this->pluginManager->disablePlugins();
src/pocketmine/Server.php:			$ev->call();
src/pocketmine/Server.php:			if($ev->isCancelled()){
src/pocketmine/Server.php:			$commandLine = $ev->getCommand();
src/pocketmine/Server.php:		if($this->commandMap->dispatch($sender, $commandLine)){
src/pocketmine/Server.php:		$sender->sendMessage($this->getLanguage()->translateString(TextFormat::RED . "%commands.generic.notFound"));
src/pocketmine/Server.php:		$this->logger->info("Saving worlds...");
src/pocketmine/Server.php:		foreach($this->levels as $level){
src/pocketmine/Server.php:			$level->save();
src/pocketmine/Server.php:		$this->pluginManager->disablePlugins();
src/pocketmine/Server.php:		$this->pluginManager->clearPlugins();
src/pocketmine/Server.php:		PermissionManager::getInstance()->clearPermissions();
src/pocketmine/Server.php:		$this->commandMap->clearCommands();
src/pocketmine/Server.php:		$this->logger->info("Reloading properties...");
src/pocketmine/Server.php:		$this->properties->reload();
src/pocketmine/Server.php:		$this->maxPlayers = $this->getConfigInt("max-players", 20);
src/pocketmine/Server.php:		if($this->getConfigBool("hardcore", false) and $this->getDifficulty() < Level::DIFFICULTY_HARD){
src/pocketmine/Server.php:			$this->setConfigInt("difficulty", Level::DIFFICULTY_HARD);
src/pocketmine/Server.php:		$this->banByIP->load();
src/pocketmine/Server.php:		$this->banByName->load();
src/pocketmine/Server.php:		$this->reloadWhitelist();
src/pocketmine/Server.php:		$this->operators->reload();
src/pocketmine/Server.php:		foreach($this->getIPBans()->getEntries() as $entry){
src/pocketmine/Server.php:			$this->getNetwork()->blockAddress($entry->getName(), -1);
src/pocketmine/Server.php:		$this->pluginManager->registerInterface(new PharPluginLoader($this->autoloader));
src/pocketmine/Server.php:		$this->pluginManager->registerInterface(new ScriptPluginLoader());
src/pocketmine/Server.php:		$this->pluginManager->loadPlugins($this->pluginPath);
src/pocketmine/Server.php:		$this->enablePlugins(PluginLoadOrder::STARTUP);
src/pocketmine/Server.php:		$this->enablePlugins(PluginLoadOrder::POSTWORLD);
src/pocketmine/Server.php:		$this->isRunning = false;
src/pocketmine/Server.php:		if($this->hasStopped){
src/pocketmine/Server.php:		if($this->doTitleTick){
src/pocketmine/Server.php:			if(!$this->isRunning()){
src/pocketmine/Server.php:				$this->sendUsage(SendUsageTask::TYPE_CLOSE);
src/pocketmine/Server.php:			$this->hasStopped = true;
src/pocketmine/Server.php:			$this->shutdown();
src/pocketmine/Server.php:			if($this->rcon instanceof RCON){
src/pocketmine/Server.php:				$this->rcon->stop();
src/pocketmine/Server.php:			if((bool) $this->getProperty("network.upnp-forwarding", false)){
src/pocketmine/Server.php:				$this->logger->info("[UPnP] Removing port forward...");
src/pocketmine/Server.php:				UPnP::RemovePortForward($this->getPort());
src/pocketmine/Server.php:			if($this->pluginManager instanceof PluginManager){
src/pocketmine/Server.php:				$this->getLogger()->debug("Disabling all plugins");
src/pocketmine/Server.php:				$this->pluginManager->disablePlugins();
src/pocketmine/Server.php:			foreach($this->players as $player){
src/pocketmine/Server.php:				$player->close($player->getLeaveMessage(), $this->getProperty("settings.shutdown-message", "Server closed"));
src/pocketmine/Server.php:			$this->getLogger()->debug("Unloading all worlds");
src/pocketmine/Server.php:			foreach($this->getLevels() as $level){
src/pocketmine/Server.php:				$this->unloadLevel($level, true);
src/pocketmine/Server.php:			$this->getLogger()->debug("Removing event handlers");
src/pocketmine/Server.php:			if($this->asyncPool instanceof AsyncPool){
src/pocketmine/Server.php:				$this->getLogger()->debug("Shutting down async task worker pool");
src/pocketmine/Server.php:				$this->asyncPool->shutdown();
src/pocketmine/Server.php:			if($this->properties !== null and $this->properties->hasChanged()){
src/pocketmine/Server.php:				$this->getLogger()->debug("Saving properties");
src/pocketmine/Server.php:				$this->properties->save();
src/pocketmine/Server.php:			if($this->console instanceof CommandReader){
src/pocketmine/Server.php:				$this->getLogger()->debug("Closing console");
src/pocketmine/Server.php:				$this->console->shutdown();
src/pocketmine/Server.php:				$this->console->notify();
src/pocketmine/Server.php:			if($this->network instanceof Network){
src/pocketmine/Server.php:				$this->getLogger()->debug("Stopping network interfaces");
src/pocketmine/Server.php:				foreach($this->network->getInterfaces() as $interface){
src/pocketmine/Server.php:					$this->getLogger()->debug("Stopping network interface " . get_class($interface));
src/pocketmine/Server.php:					$interface->shutdown();
src/pocketmine/Server.php:					$this->network->unregisterInterface($interface);
src/pocketmine/Server.php:			$this->logger->logException($e);
src/pocketmine/Server.php:			$this->logger->emergency("Crashed while crashing, killing process");
src/pocketmine/Server.php:		return $this->queryRegenerateTask;
src/pocketmine/Server.php:	 * Starts the PocketMine-MP server and starts processing ticks and packets
src/pocketmine/Server.php:		if($this->getConfigBool("enable-query", true)){
src/pocketmine/Server.php:			$this->queryHandler = new QueryHandler();
src/pocketmine/Server.php:		foreach($this->getIPBans()->getEntries() as $entry){
src/pocketmine/Server.php:			$this->network->blockAddress($entry->getName(), -1);
src/pocketmine/Server.php:		if((bool) $this->getProperty("settings.send-usage", true)){
src/pocketmine/Server.php:			$this->sendUsageTicker = 6000;
src/pocketmine/Server.php:			$this->sendUsage(SendUsageTask::TYPE_OPEN);
src/pocketmine/Server.php:		if((bool) $this->getProperty("network.upnp-forwarding", false)){
src/pocketmine/Server.php:			$this->logger->info("[UPnP] Trying to port forward...");
src/pocketmine/Server.php:				UPnP::PortForward($this->getPort());
src/pocketmine/Server.php:				$this->logger->alert("UPnP portforward failed: " . $e->getMessage());
src/pocketmine/Server.php:		$this->tickCounter = 0;
src/pocketmine/Server.php:			$this->dispatchSignals = true;
src/pocketmine/Server.php:		$this->logger->info($this->getLanguage()->translateString("pocketmine.server.defaultGameMode", [self::getGamemodeString($this->getGamemode())]));
src/pocketmine/Server.php:		$this->logger->info($this->getLanguage()->translateString("pocketmine.server.donate", [TextFormat::AQUA . "https://patreon.com/pocketminemp" . TextFormat::RESET]));
src/pocketmine/Server.php:		$this->logger->info($this->getLanguage()->translateString("pocketmine.server.startFinished", [round(microtime(true) - \pocketmine\START_TIME, 3)]));
src/pocketmine/Server.php:		$this->tickProcessor();
src/pocketmine/Server.php:		$this->forceShutdown();
src/pocketmine/Server.php:			$this->shutdown();
src/pocketmine/Server.php:	 * @phpstan-param list<array<string, mixed>>|null $trace
src/pocketmine/Server.php:			$trace = $e->getTrace();
src/pocketmine/Server.php:		$errstr = $e->getMessage();
src/pocketmine/Server.php:		$errfile = $e->getFile();
src/pocketmine/Server.php:		$errline = $e->getLine();
src/pocketmine/Server.php:		$this->logger->logException($e, $trace);
src/pocketmine/Server.php:			"fullFile" => $e->getFile(),
src/pocketmine/Server.php:		$this->crashDump();
src/pocketmine/Server.php:		if(!$this->isRunning){
src/pocketmine/Server.php:		if($this->sendUsageTicker > 0){
src/pocketmine/Server.php:			$this->sendUsage(SendUsageTask::TYPE_CLOSE);
src/pocketmine/Server.php:		$this->hasStopped = false;
src/pocketmine/Server.php:		ini_set("memory_limit", '-1'); //Fix error dump not dumped on memory problems
src/pocketmine/Server.php:			$this->logger->emergency($this->getLanguage()->translateString("pocketmine.crash.create"));
src/pocketmine/Server.php:			$this->logger->emergency($this->getLanguage()->translateString("pocketmine.crash.submit", [$dump->getPath()]));
src/pocketmine/Server.php:			if($this->getProperty("auto-report.enabled", true) !== false){
src/pocketmine/Server.php:				$stamp = $this->getDataPath() . "crashdumps/.last_crash";
src/pocketmine/Server.php:					$this->logger->debug("Not sending crashdump due to last crash less than $crashInterval seconds ago");
src/pocketmine/Server.php:				$plugin = $dump->getData()["plugin"];
src/pocketmine/Server.php:					$p = $this->pluginManager->getPlugin($plugin);
src/pocketmine/Server.php:					if($p instanceof Plugin and !($p->getPluginLoader() instanceof PharPluginLoader)){
src/pocketmine/Server.php:						$this->logger->debug("Not sending crashdump due to caused by non-phar plugin");
src/pocketmine/Server.php:				if($dump->getData()["error"]["type"] === \ParseError::class){
src/pocketmine/Server.php:				if(strrpos(\pocketmine\GIT_COMMIT, "-dirty") !== false or \pocketmine\GIT_COMMIT === str_repeat("00", 20)){
src/pocketmine/Server.php:					$this->logger->debug("Not sending crashdump due to locally modified");
src/pocketmine/Server.php:					$url = ((bool) $this->getProperty("auto-report.use-https", true) ? "https" : "http") . "://" . $this->getProperty("auto-report.host", "crash.pmmp.io") . "/submit/api";
src/pocketmine/Server.php:						"name" => $this->getName() . " " . $this->getPocketMineVersion(),
src/pocketmine/Server.php:						"reportPaste" => base64_encode($dump->getEncodedData())
src/pocketmine/Server.php:						if(isset($data->crashId) and isset($data->crashUrl)){
src/pocketmine/Server.php:							$reportId = $data->crashId;
src/pocketmine/Server.php:							$reportUrl = $data->crashUrl;
src/pocketmine/Server.php:							$this->logger->emergency($this->getLanguage()->translateString("pocketmine.crash.archive", [$reportUrl, $reportId]));
src/pocketmine/Server.php:						}elseif(isset($data->error)){
src/pocketmine/Server.php:							$this->logger->emergency("Automatic crash report submission failed: $data->error");
src/pocketmine/Server.php:						$this->logger->emergency("Failed to communicate with crash archive: $postUrlError");
src/pocketmine/Server.php:			$this->logger->logException($e);
src/pocketmine/Server.php:				$this->logger->critical($this->getLanguage()->translateString("pocketmine.crash.error", [$e->getMessage()]));
src/pocketmine/Server.php:		$this->forceShutdown();
src/pocketmine/Server.php:		$this->isRunning = false;
src/pocketmine/Server.php:		$spacing = ((int) \pocketmine\START_TIME) - time() + 120;
src/pocketmine/Server.php:			echo "--- Waiting $spacing seconds to throttle automatic restart (you can kill the process safely now) ---" . PHP_EOL;
src/pocketmine/Server.php:		return $this->tickSleeper;
src/pocketmine/Server.php:		$this->nextTick = microtime(true);
src/pocketmine/Server.php:		while($this->isRunning){
src/pocketmine/Server.php:			$this->tick();
src/pocketmine/Server.php:			//sleeps are self-correcting - if we undersleep 1ms on this tick, we'll sleep an extra ms on the next tick
src/pocketmine/Server.php:			$this->tickSleeper->sleepUntil($this->nextTick);
src/pocketmine/Server.php:		if($this->sendUsageTicker > 0){
src/pocketmine/Server.php:			$this->uniquePlayers[$player->getRawUniqueId()] = $player->getRawUniqueId();
src/pocketmine/Server.php:		$this->loggedInPlayers[$player->getRawUniqueId()] = $player;
src/pocketmine/Server.php:		unset($this->loggedInPlayers[$player->getRawUniqueId()]);
src/pocketmine/Server.php:		$this->players[spl_object_hash($player)] = $player;
src/pocketmine/Server.php:		unset($this->players[spl_object_hash($player)]);
src/pocketmine/Server.php:		$this->updatePlayerListData($player->getUniqueId(), $player->getId(), $player->getDisplayName(), $player->getSkin(), $player->getXuid());
src/pocketmine/Server.php:		$this->playerList[$player->getRawUniqueId()] = $player;
src/pocketmine/Server.php:		if(isset($this->playerList[$player->getRawUniqueId()])){
src/pocketmine/Server.php:			unset($this->playerList[$player->getRawUniqueId()]);
src/pocketmine/Server.php:			$this->removePlayerListData($player->getUniqueId());
src/pocketmine/Server.php:		$pk->type = PlayerListPacket::TYPE_ADD;
src/pocketmine/Server.php:		$pk->entries[] = PlayerListEntry::createAdditionEntry($uuid, $entityId, $name, SkinAdapterSingleton::get()->toSkinData($skin), $xboxUserId);
src/pocketmine/Server.php:		$this->broadcastPacket($players ?? $this->playerList, $pk);
src/pocketmine/Server.php:		$pk->type = PlayerListPacket::TYPE_REMOVE;
src/pocketmine/Server.php:		$pk->entries[] = PlayerListEntry::createRemovalEntry($uuid);
src/pocketmine/Server.php:		$this->broadcastPacket($players ?? $this->playerList, $pk);
src/pocketmine/Server.php:		$pk->type = PlayerListPacket::TYPE_ADD;
src/pocketmine/Server.php:		foreach($this->playerList as $player){
src/pocketmine/Server.php:			$pk->entries[] = PlayerListEntry::createAdditionEntry($player->getUniqueId(), $player->getId(), $player->getDisplayName(), SkinAdapterSingleton::get()->toSkinData($player->getSkin()), $player->getXuid());
src/pocketmine/Server.php:		$p->dataPacket($pk);
src/pocketmine/Server.php:		foreach($this->players as $p){
src/pocketmine/Server.php:			if(!$p->loggedIn and ($tickTime - $p->creationTime) >= 10){
src/pocketmine/Server.php:				$p->close("", "Login timeout");
src/pocketmine/Server.php:		foreach($this->levels as $k => $level){
src/pocketmine/Server.php:			if(!isset($this->levels[$k])){
src/pocketmine/Server.php:			$level->doTick($currentTick);
src/pocketmine/Server.php:			$tickMs = (microtime(true) - $levelTime) * 1000;
src/pocketmine/Server.php:			$level->tickRateTime = $tickMs;
src/pocketmine/Server.php:				$this->getLogger()->debug(sprintf("World \"%s\" took too long to tick: %gms (%g ticks)", $level->getName(), $tickMs, round($tickMs / 50, 2)));
src/pocketmine/Server.php:		if($this->getAutoSave()){
src/pocketmine/Server.php:			Timings::$worldSaveTimer->startTiming();
src/pocketmine/Server.php:			foreach($this->players as $index => $player){
src/pocketmine/Server.php:				if($player->spawned){
src/pocketmine/Server.php:					$player->save();
src/pocketmine/Server.php:				}elseif(!$player->isConnected()){
src/pocketmine/Server.php:					$this->removePlayer($player);
src/pocketmine/Server.php:			foreach($this->getLevels() as $level){
src/pocketmine/Server.php:				$level->save(false);
src/pocketmine/Server.php:			Timings::$worldSaveTimer->stopTiming();
src/pocketmine/Server.php:		if((bool) $this->getProperty("anonymous-statistics.enabled", true)){
src/pocketmine/Server.php:			$this->asyncPool->submitTask(new SendUsageTask($this, $type, $this->uniquePlayers));
src/pocketmine/Server.php:		$this->uniquePlayers = [];
src/pocketmine/Server.php:		return $this->baseLang;
src/pocketmine/Server.php:		return $this->forceLanguage;
src/pocketmine/Server.php:		return $this->network;
src/pocketmine/Server.php:		return $this->memoryManager;
src/pocketmine/Server.php:		Timings::$titleTickTimer->startTiming();
src/pocketmine/Server.php:		echo "\x1b]0;" . $this->getName() . " " .
src/pocketmine/Server.php:			$this->getPocketMineVersion() .
src/pocketmine/Server.php:			" | Online " . count($this->players) . "/" . $this->getMaxPlayers() .
src/pocketmine/Server.php:			" | U " . round($this->network->getUpload() / 1024, 2) .
src/pocketmine/Server.php:			" D " . round($this->network->getDownload() / 1024, 2) .
src/pocketmine/Server.php:			" kB/s | TPS " . $this->getTicksPerSecondAverage() .
src/pocketmine/Server.php:			" | Load " . $this->getTickUsageAverage() . "%\x07";
src/pocketmine/Server.php:		Timings::$titleTickTimer->stopTiming();
src/pocketmine/Server.php:			if(strlen($payload) > 2 and substr($payload, 0, 2) === "\xfe\xfd" and $this->queryHandler instanceof QueryHandler){
src/pocketmine/Server.php:				$this->queryHandler->handle($interface, $address, $port, $payload);
src/pocketmine/Server.php:				$this->logger->debug("Unhandled raw packet from $address $port: " . base64_encode($payload));
src/pocketmine/Server.php:			$this->logger->logException($e);
src/pocketmine/Server.php:			$this->getNetwork()->blockAddress($address, 600);
src/pocketmine/Server.php:		if(($tickTime - $this->nextTick) < -0.025){ //Allow half a tick of diff
src/pocketmine/Server.php:		Timings::$serverTickTimer->startTiming();
src/pocketmine/Server.php:		++$this->tickCounter;
src/pocketmine/Server.php:		Timings::$connectionTimer->startTiming();
src/pocketmine/Server.php:		$this->network->processInterfaces();
src/pocketmine/Server.php:		Timings::$connectionTimer->stopTiming();
src/pocketmine/Server.php:		Timings::$schedulerTimer->startTiming();
src/pocketmine/Server.php:		$this->pluginManager->tickSchedulers($this->tickCounter);
src/pocketmine/Server.php:		Timings::$schedulerTimer->stopTiming();
src/pocketmine/Server.php:		Timings::$schedulerAsyncTimer->startTiming();
src/pocketmine/Server.php:		$this->asyncPool->collectTasks();
src/pocketmine/Server.php:		Timings::$schedulerAsyncTimer->stopTiming();
src/pocketmine/Server.php:		$this->checkTickUpdates($this->tickCounter, $tickTime);
src/pocketmine/Server.php:		foreach($this->players as $player){
src/pocketmine/Server.php:			$player->checkNetwork();
src/pocketmine/Server.php:		if(($this->tickCounter % 20) === 0){
src/pocketmine/Server.php:			if($this->doTitleTick){
src/pocketmine/Server.php:				$this->titleTick();
src/pocketmine/Server.php:			$this->currentTPS = 20;
src/pocketmine/Server.php:			$this->currentUse = 0;
src/pocketmine/Server.php:			($this->queryRegenerateTask = new QueryRegenerateEvent($this))->call();
src/pocketmine/Server.php:			$this->network->updateName();
src/pocketmine/Server.php:			$this->network->resetStatistics();
src/pocketmine/Server.php:		if($this->autoSave and ++$this->autoSaveTicker >= $this->autoSaveTicks){
src/pocketmine/Server.php:			$this->autoSaveTicker = 0;
src/pocketmine/Server.php:			$this->getLogger()->debug("[Auto Save] Saving worlds...");
src/pocketmine/Server.php:			$this->doAutoSave();
src/pocketmine/Server.php:			$time = (microtime(true) - $start);
src/pocketmine/Server.php:			$this->getLogger()->debug("[Auto Save] Save completed in " . ($time >= 1 ? round($time, 3) . "s" : round($time * 1000) . "ms"));
src/pocketmine/Server.php:		if($this->sendUsageTicker > 0 and --$this->sendUsageTicker === 0){
src/pocketmine/Server.php:			$this->sendUsageTicker = 6000;
src/pocketmine/Server.php:			$this->sendUsage(SendUsageTask::TYPE_STATUS);
src/pocketmine/Server.php:		if(($this->tickCounter % 100) === 0){
src/pocketmine/Server.php:			foreach($this->levels as $level){
src/pocketmine/Server.php:				$level->clearCache();
src/pocketmine/Server.php:			if($this->getTicksPerSecondAverage() < 12){
src/pocketmine/Server.php:				$this->logger->warning($this->getLanguage()->translateString("pocketmine.server.tickOverload"));
src/pocketmine/Server.php:		if($this->dispatchSignals and $this->tickCounter % 5 === 0){
src/pocketmine/Server.php:		$this->getMemoryManager()->check();
src/pocketmine/Server.php:		Timings::$serverTickTimer->stopTiming();
src/pocketmine/Server.php:		$this->currentTPS = min(20, 1 / max(0.001, $now - $tickTime));
src/pocketmine/Server.php:		$this->currentUse = min(1, ($now - $tickTime) / 0.05);
src/pocketmine/Server.php:		TimingsHandler::tick($this->currentTPS <= $this->profilingTickRate);
src/pocketmine/Server.php:		$idx = $this->tickCounter % 20;
src/pocketmine/Server.php:		$this->tickAverage[$idx] = $this->currentTPS;
src/pocketmine/Server.php:		$this->useAverage[$idx] = $this->currentUse;
src/pocketmine/Server.php:		if(($this->nextTick - $tickTime) < -1){
src/pocketmine/Server.php:			$this->nextTick = $tickTime;
src/pocketmine/Server.php:			$this->nextTick += 0.05;
src/pocketmine/command/defaults/BanListCommand.php:		$this->setPermission("pocketmine.command.ban.list");
src/pocketmine/command/defaults/BanListCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/BanListCommand.php:				$list = $sender->getServer()->getIPBans();
src/pocketmine/command/defaults/BanListCommand.php:				$list = $sender->getServer()->getNameBans();
src/pocketmine/command/defaults/BanListCommand.php:			$list = $sender->getServer()->getNameBans();
src/pocketmine/command/defaults/BanListCommand.php:			return $entry->getName();
src/pocketmine/command/defaults/BanListCommand.php:		}, $list->getEntries());
src/pocketmine/command/defaults/BanListCommand.php:			$sender->sendMessage(new TranslationContainer("commands.banlist.ips", [count($list)]));
src/pocketmine/command/defaults/BanListCommand.php:			$sender->sendMessage(new TranslationContainer("commands.banlist.players", [count($list)]));
src/pocketmine/command/defaults/BanListCommand.php:		$sender->sendMessage($message);
src/pocketmine/command/defaults/MeCommand.php:		$this->setPermission("pocketmine.command.me");
src/pocketmine/command/defaults/MeCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/MeCommand.php:		$sender->getServer()->broadcastMessage(new TranslationContainer("chat.type.emote", [$sender instanceof Player ? $sender->getDisplayName() : $sender->getName(), TextFormat::WHITE . implode(" ", $args)]));
src/pocketmine/command/defaults/PardonCommand.php:		$this->setPermission("pocketmine.command.unban.player");
src/pocketmine/command/defaults/PardonCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/PardonCommand.php:		$sender->getServer()->getNameBans()->remove($args[0]);
src/pocketmine/command/defaults/DifficultyCommand.php:		$this->setPermission("pocketmine.command.difficulty");
src/pocketmine/command/defaults/DifficultyCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/DifficultyCommand.php:		if($sender->getServer()->isHardcore()){
src/pocketmine/command/defaults/DifficultyCommand.php:		if($difficulty !== -1){
src/pocketmine/command/defaults/DifficultyCommand.php:			$sender->getServer()->setConfigInt("difficulty", $difficulty);
src/pocketmine/command/defaults/DifficultyCommand.php:			//TODO: add per-world support
src/pocketmine/command/defaults/DifficultyCommand.php:			foreach($sender->getServer()->getLevels() as $level){
src/pocketmine/command/defaults/DifficultyCommand.php:				$level->setDifficulty($difficulty);
src/pocketmine/command/defaults/GarbageCollectorCommand.php:		$this->setPermission("pocketmine.command.gc");
src/pocketmine/command/defaults/GarbageCollectorCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/GarbageCollectorCommand.php:		foreach($sender->getServer()->getLevels() as $level){
src/pocketmine/command/defaults/GarbageCollectorCommand.php:			$diff = [count($level->getChunks()), count($level->getEntities()), count($level->getTiles())];
src/pocketmine/command/defaults/GarbageCollectorCommand.php:			$level->doChunkGarbageCollection();
src/pocketmine/command/defaults/GarbageCollectorCommand.php:			$level->unloadChunks(true);
src/pocketmine/command/defaults/GarbageCollectorCommand.php:			$chunksCollected += $diff[0] - count($level->getChunks());
src/pocketmine/command/defaults/GarbageCollectorCommand.php:			$entitiesCollected += $diff[1] - count($level->getEntities());
src/pocketmine/command/defaults/GarbageCollectorCommand.php:			$tilesCollected += $diff[2] - count($level->getTiles());
src/pocketmine/command/defaults/GarbageCollectorCommand.php:			$level->clearCache(true);
src/pocketmine/command/defaults/GarbageCollectorCommand.php:		$cyclesCollected = $sender->getServer()->getMemoryManager()->triggerGarbageCollector();
src/pocketmine/command/defaults/GarbageCollectorCommand.php:		$sender->sendMessage(TextFormat::GREEN . "---- " . TextFormat::WHITE . "Garbage collection result" . TextFormat::GREEN . " ----");
src/pocketmine/command/defaults/GarbageCollectorCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Chunks: " . TextFormat::RED . number_format($chunksCollected));
src/pocketmine/command/defaults/GarbageCollectorCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Entities: " . TextFormat::RED . number_format($entitiesCollected));
src/pocketmine/command/defaults/GarbageCollectorCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Tiles: " . TextFormat::RED . number_format($tilesCollected));
src/pocketmine/command/defaults/GarbageCollectorCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Cycles: " . TextFormat::RED . number_format($cyclesCollected));
src/pocketmine/command/defaults/GarbageCollectorCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Memory freed: " . TextFormat::RED . number_format(round((($memory - memory_get_usage()) / 1024) / 1024, 2), 2) . " MB");
src/pocketmine/command/defaults/SaveOffCommand.php:			"%commands.save-off.usage"
src/pocketmine/command/defaults/SaveOffCommand.php:		$this->setPermission("pocketmine.command.save.disable");
src/pocketmine/command/defaults/SaveOffCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/SaveOffCommand.php:		$sender->getServer()->setAutoSave(false);
src/pocketmine/command/defaults/EffectCommand.php:		$this->setPermission("pocketmine.command.effect");
src/pocketmine/command/defaults/EffectCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/EffectCommand.php:		$player = $sender->getServer()->getPlayer($args[0]);
src/pocketmine/command/defaults/EffectCommand.php:			$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.generic.player.notFound"));
src/pocketmine/command/defaults/EffectCommand.php:			foreach($player->getEffects() as $effect){
src/pocketmine/command/defaults/EffectCommand.php:				$player->removeEffect($effect->getId());
src/pocketmine/command/defaults/EffectCommand.php:			$sender->sendMessage(new TranslationContainer("commands.effect.success.removed.all", [$player->getDisplayName()]));
src/pocketmine/command/defaults/EffectCommand.php:			$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.effect.notFound", [$args[1]]));
src/pocketmine/command/defaults/EffectCommand.php:			if(($d = $this->getBoundedInt($sender, $args[2], 0, (int) (INT32_MAX / 20))) === null){
src/pocketmine/command/defaults/EffectCommand.php:			$amplification = $this->getBoundedInt($sender, $args[3], 0, 255);
src/pocketmine/command/defaults/EffectCommand.php:			if(!$player->hasEffect($effect->getId())){
src/pocketmine/command/defaults/EffectCommand.php:				if(count($player->getEffects()) === 0){
src/pocketmine/command/defaults/EffectCommand.php:					$sender->sendMessage(new TranslationContainer("commands.effect.failure.notActive.all", [$player->getDisplayName()]));
src/pocketmine/command/defaults/EffectCommand.php:					$sender->sendMessage(new TranslationContainer("commands.effect.failure.notActive", [$effect->getName(), $player->getDisplayName()]));
src/pocketmine/command/defaults/EffectCommand.php:			$player->removeEffect($effect->getId());
src/pocketmine/command/defaults/EffectCommand.php:			$sender->sendMessage(new TranslationContainer("commands.effect.success.removed", [$effect->getName(), $player->getDisplayName()]));
src/pocketmine/command/defaults/EffectCommand.php:			$player->addEffect($instance);
src/pocketmine/command/defaults/EffectCommand.php:			self::broadcastCommandMessage($sender, new TranslationContainer("%commands.effect.success", [$effect->getName(), $instance->getAmplifier(), $player->getDisplayName(), $instance->getDuration() / 20, $effect->getId()]));
src/pocketmine/command/defaults/SpawnpointCommand.php:		$this->setPermission("pocketmine.command.spawnpoint");
src/pocketmine/command/defaults/SpawnpointCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/SpawnpointCommand.php:				$sender->sendMessage(TextFormat::RED . "Please provide a player!");
src/pocketmine/command/defaults/SpawnpointCommand.php:			$target = $sender->getServer()->getPlayer($args[0]);
src/pocketmine/command/defaults/SpawnpointCommand.php:				$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.generic.player.notFound"));
src/pocketmine/command/defaults/SpawnpointCommand.php:			if($target->isValid()){
src/pocketmine/command/defaults/SpawnpointCommand.php:				$level = $target->getLevelNonNull();
src/pocketmine/command/defaults/SpawnpointCommand.php:				$pos = $sender instanceof Player ? $sender->getPosition() : $level->getSpawnLocation();
src/pocketmine/command/defaults/SpawnpointCommand.php:				$x = $this->getRelativeDouble($pos->x, $sender, $args[1]);
src/pocketmine/command/defaults/SpawnpointCommand.php:				$y = $this->getRelativeDouble($pos->y, $sender, $args[2], 0, Level::Y_MAX);
src/pocketmine/command/defaults/SpawnpointCommand.php:				$z = $this->getRelativeDouble($pos->z, $sender, $args[3]);
src/pocketmine/command/defaults/SpawnpointCommand.php:				$target->setSpawn(new Position($x, $y, $z, $level));
src/pocketmine/command/defaults/SpawnpointCommand.php:				Command::broadcastCommandMessage($sender, new TranslationContainer("commands.spawnpoint.success", [$target->getName(), round($x, 2), round($y, 2), round($z, 2)]));
src/pocketmine/command/defaults/SpawnpointCommand.php:				$pos = new Position($sender->getFloorX(), $sender->getFloorY(), $sender->getFloorZ(), $sender->getLevelNonNull());
src/pocketmine/command/defaults/SpawnpointCommand.php:				$target->setSpawn($pos);
src/pocketmine/command/defaults/SpawnpointCommand.php:				Command::broadcastCommandMessage($sender, new TranslationContainer("commands.spawnpoint.success", [$target->getName(), round($pos->x, 2), round($pos->y, 2), round($pos->z, 2)]));
src/pocketmine/command/defaults/SpawnpointCommand.php:				$sender->sendMessage(TextFormat::RED . "Please provide a player!");
src/pocketmine/command/defaults/PluginsCommand.php:		$this->setPermission("pocketmine.command.plugins");
src/pocketmine/command/defaults/PluginsCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/PluginsCommand.php:			return ($plugin->isEnabled() ? TextFormat::GREEN : TextFormat::RED) . $plugin->getDescription()->getFullName();
src/pocketmine/command/defaults/PluginsCommand.php:		}, $sender->getServer()->getPluginManager()->getPlugins());
src/pocketmine/command/defaults/PluginsCommand.php:		$sender->sendMessage(new TranslationContainer("pocketmine.command.plugins.success", [count($list), implode(TextFormat::WHITE . ", ", $list)]));
src/pocketmine/command/defaults/SetWorldSpawnCommand.php:		$this->setPermission("pocketmine.command.setworldspawn");
src/pocketmine/command/defaults/SetWorldSpawnCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/SetWorldSpawnCommand.php:				$level = $sender->getLevelNonNull();
src/pocketmine/command/defaults/SetWorldSpawnCommand.php:				$pos = (new Vector3($sender->x, $sender->y, $sender->z))->round();
src/pocketmine/command/defaults/SetWorldSpawnCommand.php:				$sender->sendMessage(TextFormat::RED . "You can only perform this command as a player");
src/pocketmine/command/defaults/SetWorldSpawnCommand.php:			$level = $sender->getServer()->getDefaultLevel();
src/pocketmine/command/defaults/SetWorldSpawnCommand.php:			$pos = new Vector3($this->getInteger($sender, $args[0]), $this->getInteger($sender, $args[1]), $this->getInteger($sender, $args[2]));
src/pocketmine/command/defaults/SetWorldSpawnCommand.php:		$level->setSpawnLocation($pos);
src/pocketmine/command/defaults/SetWorldSpawnCommand.php:		Command::broadcastCommandMessage($sender, new TranslationContainer("commands.setworldspawn.success", [round($pos->x, 2), round($pos->y, 2), round($pos->z, 2)]));
src/pocketmine/command/defaults/DumpMemoryCommand.php:		$this->setPermission("pocketmine.command.dumpmemory");
src/pocketmine/command/defaults/DumpMemoryCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/DumpMemoryCommand.php:		$sender->getServer()->getMemoryManager()->dumpServerMemory($args[0] ?? ($sender->getServer()->getDataPath() . "/memory_dumps/" . date("D_M_j-H.i.s-T_Y")), 48, 80);
src/pocketmine/command/defaults/TimeCommand.php:		$this->setPermission("pocketmine.command.time.add;pocketmine.command.time.set;pocketmine.command.time.start;pocketmine.command.time.stop");
src/pocketmine/command/defaults/TimeCommand.php:			if(!$sender->hasPermission("pocketmine.command.time.start")){
src/pocketmine/command/defaults/TimeCommand.php:				$sender->sendMessage($sender->getServer()->getLanguage()->translateString(TextFormat::RED . "%commands.generic.permission"));
src/pocketmine/command/defaults/TimeCommand.php:			foreach($sender->getServer()->getLevels() as $level){
src/pocketmine/command/defaults/TimeCommand.php:				$level->startTime();
src/pocketmine/command/defaults/TimeCommand.php:			if(!$sender->hasPermission("pocketmine.command.time.stop")){
src/pocketmine/command/defaults/TimeCommand.php:				$sender->sendMessage($sender->getServer()->getLanguage()->translateString(TextFormat::RED . "%commands.generic.permission"));
src/pocketmine/command/defaults/TimeCommand.php:			foreach($sender->getServer()->getLevels() as $level){
src/pocketmine/command/defaults/TimeCommand.php:				$level->stopTime();
src/pocketmine/command/defaults/TimeCommand.php:			if(!$sender->hasPermission("pocketmine.command.time.query")){
src/pocketmine/command/defaults/TimeCommand.php:				$sender->sendMessage($sender->getServer()->getLanguage()->translateString(TextFormat::RED . "%commands.generic.permission"));
src/pocketmine/command/defaults/TimeCommand.php:				$level = $sender->getLevelNonNull();
src/pocketmine/command/defaults/TimeCommand.php:				$level = $sender->getServer()->getDefaultLevel();
src/pocketmine/command/defaults/TimeCommand.php:			$sender->sendMessage($sender->getServer()->getLanguage()->translateString("commands.time.query", [$level->getTime()]));
src/pocketmine/command/defaults/TimeCommand.php:			if(!$sender->hasPermission("pocketmine.command.time.set")){
src/pocketmine/command/defaults/TimeCommand.php:				$sender->sendMessage($sender->getServer()->getLanguage()->translateString(TextFormat::RED . "%commands.generic.permission"));
src/pocketmine/command/defaults/TimeCommand.php:					$value = $this->getInteger($sender, $args[1], 0);
src/pocketmine/command/defaults/TimeCommand.php:			foreach($sender->getServer()->getLevels() as $level){
src/pocketmine/command/defaults/TimeCommand.php:				$level->setTime($value);
src/pocketmine/command/defaults/TimeCommand.php:			if(!$sender->hasPermission("pocketmine.command.time.add")){
src/pocketmine/command/defaults/TimeCommand.php:				$sender->sendMessage($sender->getServer()->getLanguage()->translateString(TextFormat::RED . "%commands.generic.permission"));
src/pocketmine/command/defaults/TimeCommand.php:			$value = $this->getInteger($sender, $args[1], 0);
src/pocketmine/command/defaults/TimeCommand.php:			foreach($sender->getServer()->getLevels() as $level){
src/pocketmine/command/defaults/TimeCommand.php:				$level->setTime($level->getTime() + $value);
src/pocketmine/command/defaults/DeopCommand.php:		$this->setPermission("pocketmine.command.op.take");
src/pocketmine/command/defaults/DeopCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/DeopCommand.php:		$player = $sender->getServer()->getOfflinePlayer($name);
src/pocketmine/command/defaults/DeopCommand.php:		$player->setOp(false);
src/pocketmine/command/defaults/DeopCommand.php:			$player->sendMessage(TextFormat::GRAY . "You are no longer op!");
src/pocketmine/command/defaults/DeopCommand.php:		Command::broadcastCommandMessage($sender, new TranslationContainer("commands.deop.success", [$player->getName()]));
src/pocketmine/command/defaults/SeedCommand.php:		$this->setPermission("pocketmine.command.seed");
src/pocketmine/command/defaults/SeedCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/SeedCommand.php:			$seed = $sender->getLevelNonNull()->getSeed();
src/pocketmine/command/defaults/SeedCommand.php:			$seed = $sender->getServer()->getDefaultLevel()->getSeed();
src/pocketmine/command/defaults/SeedCommand.php:		$sender->sendMessage(new TranslationContainer("commands.seed.success", [$seed]));
src/pocketmine/command/defaults/VanillaCommand.php:	public const MIN_COORD = -30000000;
src/pocketmine/command/defaults/VanillaCommand.php:			$value = $this->getDouble($sender, substr($input, 1));
src/pocketmine/command/defaults/VanillaCommand.php:		return $this->getDouble($sender, $input, $min, $max);
src/pocketmine/command/defaults/VanillaCommand.php:			$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.generic.num.tooBig", [$input, (string) $max]));
src/pocketmine/command/defaults/VanillaCommand.php:			$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.generic.num.tooSmall", [$input, (string) $min]));
src/pocketmine/command/defaults/WhitelistCommand.php:		$this->setPermission("pocketmine.command.whitelist.reload;pocketmine.command.whitelist.enable;pocketmine.command.whitelist.disable;pocketmine.command.whitelist.list;pocketmine.command.whitelist.add;pocketmine.command.whitelist.remove");
src/pocketmine/command/defaults/WhitelistCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/WhitelistCommand.php:			if($this->badPerm($sender, strtolower($args[0]))){
src/pocketmine/command/defaults/WhitelistCommand.php:					$sender->getServer()->reloadWhitelist();
src/pocketmine/command/defaults/WhitelistCommand.php:					$sender->getServer()->setConfigBool("white-list", true);
src/pocketmine/command/defaults/WhitelistCommand.php:					$sender->getServer()->setConfigBool("white-list", false);
src/pocketmine/command/defaults/WhitelistCommand.php:					$entries = $sender->getServer()->getWhitelisted()->getAll(true);
src/pocketmine/command/defaults/WhitelistCommand.php:					$sender->sendMessage(new TranslationContainer("commands.whitelist.list", [$count, $count]));
src/pocketmine/command/defaults/WhitelistCommand.php:					$sender->sendMessage($result);
src/pocketmine/command/defaults/WhitelistCommand.php:					$sender->sendMessage(new TranslationContainer("commands.generic.usage", ["%commands.whitelist.add.usage"]));
src/pocketmine/command/defaults/WhitelistCommand.php:					$sender->sendMessage(new TranslationContainer("commands.generic.usage", ["%commands.whitelist.remove.usage"]));
src/pocketmine/command/defaults/WhitelistCommand.php:			if($this->badPerm($sender, strtolower($args[0]))){
src/pocketmine/command/defaults/WhitelistCommand.php:					$sender->getServer()->getOfflinePlayer($args[1])->setWhitelisted(true);
src/pocketmine/command/defaults/WhitelistCommand.php:					$sender->getServer()->getOfflinePlayer($args[1])->setWhitelisted(false);
src/pocketmine/command/defaults/WhitelistCommand.php:		if(!$sender->hasPermission("pocketmine.command.whitelist." . ($map[$subcommand] ?? $subcommand))){
src/pocketmine/command/defaults/WhitelistCommand.php:			$sender->sendMessage($sender->getServer()->getLanguage()->translateString(TextFormat::RED . "%commands.generic.permission"));
src/pocketmine/command/defaults/TransferServerCommand.php:		$this->setPermission("pocketmine.command.transferserver");
src/pocketmine/command/defaults/TransferServerCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/TransferServerCommand.php:			$sender->sendMessage("This command must be executed as a player");
src/pocketmine/command/defaults/TransferServerCommand.php:		$sender->transfer($args[0], (int) ($args[1] ?? 19132));
src/pocketmine/command/defaults/TitleCommand.php:		$this->setPermission("pocketmine.command.title");
src/pocketmine/command/defaults/TitleCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/TitleCommand.php:		$player = $sender->getServer()->getPlayer($args[0]);
src/pocketmine/command/defaults/TitleCommand.php:			$sender->sendMessage(new TranslationContainer("commands.generic.player.notFound"));
src/pocketmine/command/defaults/TitleCommand.php:				$player->removeTitles();
src/pocketmine/command/defaults/TitleCommand.php:				$player->resetTitles();
src/pocketmine/command/defaults/TitleCommand.php:				$player->sendTitle(implode(" ", array_slice($args, 2)));
src/pocketmine/command/defaults/TitleCommand.php:				$player->sendSubTitle(implode(" ", array_slice($args, 2)));
src/pocketmine/command/defaults/TitleCommand.php:				$player->sendActionBarMessage(implode(" ", array_slice($args, 2)));
src/pocketmine/command/defaults/TitleCommand.php:				$player->setTitleDuration($this->getInteger($sender, $args[2]), $this->getInteger($sender, $args[3]), $this->getInteger($sender, $args[4]));
src/pocketmine/command/defaults/TitleCommand.php:		$sender->sendMessage(new TranslationContainer("commands.title.success"));
src/pocketmine/command/defaults/BanIpCommand.php:		$this->setPermission("pocketmine.command.ban.ip");
src/pocketmine/command/defaults/BanIpCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/BanIpCommand.php:		if(preg_match("/^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$/", $value)){
src/pocketmine/command/defaults/BanIpCommand.php:			$this->processIPBan($value, $sender, $reason);
src/pocketmine/command/defaults/BanIpCommand.php:			if(($player = $sender->getServer()->getPlayer($value)) instanceof Player){
src/pocketmine/command/defaults/BanIpCommand.php:				$this->processIPBan($player->getAddress(), $sender, $reason);
src/pocketmine/command/defaults/BanIpCommand.php:				Command::broadcastCommandMessage($sender, new TranslationContainer("commands.banip.success.players", [$player->getAddress(), $player->getName()]));
src/pocketmine/command/defaults/BanIpCommand.php:				$sender->sendMessage(new TranslationContainer("commands.banip.invalid"));
src/pocketmine/command/defaults/BanIpCommand.php:		$sender->getServer()->getIPBans()->addBan($ip, $reason, null, $sender->getName());
src/pocketmine/command/defaults/BanIpCommand.php:		foreach($sender->getServer()->getOnlinePlayers() as $player){
src/pocketmine/command/defaults/BanIpCommand.php:			if($player->getAddress() === $ip){
src/pocketmine/command/defaults/BanIpCommand.php:				$player->kick($reason !== "" ? $reason : "IP banned.");
src/pocketmine/command/defaults/BanIpCommand.php:		$sender->getServer()->getNetwork()->blockAddress($ip, -1);
src/pocketmine/command/defaults/DefaultGamemodeCommand.php:		$this->setPermission("pocketmine.command.defaultgamemode");
src/pocketmine/command/defaults/DefaultGamemodeCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/DefaultGamemodeCommand.php:		if($gameMode !== -1){
src/pocketmine/command/defaults/DefaultGamemodeCommand.php:			$sender->getServer()->setConfigInt("gamemode", $gameMode);
src/pocketmine/command/defaults/DefaultGamemodeCommand.php:			$sender->sendMessage(new TranslationContainer("commands.defaultgamemode.success", [Server::getGamemodeString($gameMode)]));
src/pocketmine/command/defaults/DefaultGamemodeCommand.php:			$sender->sendMessage("Unknown game mode");
src/pocketmine/command/defaults/BanCommand.php:		$this->setPermission("pocketmine.command.ban.player");
src/pocketmine/command/defaults/BanCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/BanCommand.php:		$sender->getServer()->getNameBans()->addBan($name, $reason, null, $sender->getName());
src/pocketmine/command/defaults/BanCommand.php:		if(($player = $sender->getServer()->getPlayerExact($name)) instanceof Player){
src/pocketmine/command/defaults/BanCommand.php:			$player->kick($reason !== "" ? "Banned by admin. Reason: " . $reason : "Banned by admin.");
src/pocketmine/command/defaults/BanCommand.php:		Command::broadcastCommandMessage($sender, new TranslationContainer("%commands.ban.success", [$player !== null ? $player->getName() : $name]));
src/pocketmine/command/defaults/GamemodeCommand.php:		$this->setPermission("pocketmine.command.gamemode");
src/pocketmine/command/defaults/GamemodeCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/GamemodeCommand.php:		if($gameMode === -1){
src/pocketmine/command/defaults/GamemodeCommand.php:			$sender->sendMessage("Unknown game mode");
src/pocketmine/command/defaults/GamemodeCommand.php:			$target = $sender->getServer()->getPlayer($args[1]);
src/pocketmine/command/defaults/GamemodeCommand.php:				$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.generic.player.notFound"));
src/pocketmine/command/defaults/GamemodeCommand.php:		$target->setGamemode($gameMode);
src/pocketmine/command/defaults/GamemodeCommand.php:		if($gameMode !== $target->getGamemode()){
src/pocketmine/command/defaults/GamemodeCommand.php:			$sender->sendMessage("Game mode change for " . $target->getName() . " failed!");
src/pocketmine/command/defaults/GamemodeCommand.php:				$target->sendMessage(new TranslationContainer("gameMode.changed", [Server::getGamemodeString($gameMode)]));
src/pocketmine/command/defaults/GamemodeCommand.php:				Command::broadcastCommandMessage($sender, new TranslationContainer("commands.gamemode.success.other", [Server::getGamemodeString($gameMode), $target->getName()]));
src/pocketmine/command/defaults/PardonIpCommand.php:			["unban-ip"]
src/pocketmine/command/defaults/PardonIpCommand.php:		$this->setPermission("pocketmine.command.unban.ip");
src/pocketmine/command/defaults/PardonIpCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/PardonIpCommand.php:		if(preg_match("/^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$/", $args[0])){
src/pocketmine/command/defaults/PardonIpCommand.php:			$sender->getServer()->getIPBans()->remove($args[0]);
src/pocketmine/command/defaults/PardonIpCommand.php:			$sender->getServer()->getNetwork()->unblockAddress($args[0]);
src/pocketmine/command/defaults/PardonIpCommand.php:			$sender->sendMessage(new TranslationContainer("commands.unbanip.invalid"));
src/pocketmine/command/defaults/SaveOnCommand.php:			"%commands.save-on.usage"
src/pocketmine/command/defaults/SaveOnCommand.php:		$this->setPermission("pocketmine.command.save.enable");
src/pocketmine/command/defaults/SaveOnCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/SaveOnCommand.php:		$sender->getServer()->setAutoSave(true);
src/pocketmine/command/defaults/HelpCommand.php:		$this->setPermission("pocketmine.command.help");
src/pocketmine/command/defaults/HelpCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/HelpCommand.php:		}elseif(is_numeric($args[count($args) - 1])){
src/pocketmine/command/defaults/HelpCommand.php:		$pageHeight = $sender->getScreenLineHeight();
src/pocketmine/command/defaults/HelpCommand.php:			foreach($sender->getServer()->getCommandMap()->getCommands() as $command){
src/pocketmine/command/defaults/HelpCommand.php:				if($command->testPermissionSilent($sender)){
src/pocketmine/command/defaults/HelpCommand.php:					$commands[$command->getName()] = $command;
src/pocketmine/command/defaults/HelpCommand.php:			$sender->sendMessage(new TranslationContainer("commands.help.header", [$pageNumber, count($commands)]));
src/pocketmine/command/defaults/HelpCommand.php:			if(isset($commands[$pageNumber - 1])){
src/pocketmine/command/defaults/HelpCommand.php:				foreach($commands[$pageNumber - 1] as $command){
src/pocketmine/command/defaults/HelpCommand.php:					$sender->sendMessage(TextFormat::DARK_GREEN . "/" . $command->getName() . ": " . TextFormat::WHITE . $command->getDescription());
src/pocketmine/command/defaults/HelpCommand.php:			if(($cmd = $sender->getServer()->getCommandMap()->getCommand(strtolower($commandName))) instanceof Command){
src/pocketmine/command/defaults/HelpCommand.php:				if($cmd->testPermissionSilent($sender)){
src/pocketmine/command/defaults/HelpCommand.php:					$message = TextFormat::YELLOW . "--------- " . TextFormat::WHITE . " Help: /" . $cmd->getName() . TextFormat::YELLOW . " ---------\n";
src/pocketmine/command/defaults/HelpCommand.php:					$message .= TextFormat::GOLD . "Description: " . TextFormat::WHITE . $cmd->getDescription() . "\n";
src/pocketmine/command/defaults/HelpCommand.php:					$message .= TextFormat::GOLD . "Usage: " . TextFormat::WHITE . implode("\n" . TextFormat::WHITE, explode("\n", $cmd->getUsage())) . "\n";
src/pocketmine/command/defaults/HelpCommand.php:					$sender->sendMessage($message);
src/pocketmine/command/defaults/HelpCommand.php:			$sender->sendMessage(TextFormat::RED . "No help for " . strtolower($commandName));
src/pocketmine/command/defaults/ListCommand.php:		$this->setPermission("pocketmine.command.list");
src/pocketmine/command/defaults/ListCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/ListCommand.php:			return $player->getName();
src/pocketmine/command/defaults/ListCommand.php:		}, array_filter($sender->getServer()->getOnlinePlayers(), function(Player $player) use ($sender) : bool{
src/pocketmine/command/defaults/ListCommand.php:			return $player->isOnline() and (!($sender instanceof Player) or $sender->canSee($player));
src/pocketmine/command/defaults/ListCommand.php:		$sender->sendMessage(new TranslationContainer("commands.players.list", [count($playerNames), $sender->getServer()->getMaxPlayers()]));
src/pocketmine/command/defaults/ListCommand.php:		$sender->sendMessage(implode(", ", $playerNames));
src/pocketmine/command/defaults/VersionCommand.php:		$this->setPermission("pocketmine.command.version");
src/pocketmine/command/defaults/VersionCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/VersionCommand.php:			$sender->sendMessage(new TranslationContainer("pocketmine.server.info.extended", [
src/pocketmine/command/defaults/VersionCommand.php:				$sender->getServer()->getName(),
src/pocketmine/command/defaults/VersionCommand.php:				$sender->getServer()->getPocketMineVersion(),
src/pocketmine/command/defaults/VersionCommand.php:				$sender->getServer()->getVersion(),
src/pocketmine/command/defaults/VersionCommand.php:			$exactPlugin = $sender->getServer()->getPluginManager()->getPlugin($pluginName);
src/pocketmine/command/defaults/VersionCommand.php:				$this->describeToSender($exactPlugin, $sender);
src/pocketmine/command/defaults/VersionCommand.php:			foreach($sender->getServer()->getPluginManager()->getPlugins() as $plugin){
src/pocketmine/command/defaults/VersionCommand.php:				if(stripos($plugin->getName(), $pluginName) !== false){
src/pocketmine/command/defaults/VersionCommand.php:					$this->describeToSender($plugin, $sender);
src/pocketmine/command/defaults/VersionCommand.php:				$sender->sendMessage(new TranslationContainer("pocketmine.command.version.noSuchPlugin"));
src/pocketmine/command/defaults/VersionCommand.php:		$desc = $plugin->getDescription();
src/pocketmine/command/defaults/VersionCommand.php:		$sender->sendMessage(TextFormat::DARK_GREEN . $desc->getName() . TextFormat::WHITE . " version " . TextFormat::DARK_GREEN . $desc->getVersion());
src/pocketmine/command/defaults/VersionCommand.php:		if($desc->getDescription() !== ""){
src/pocketmine/command/defaults/VersionCommand.php:			$sender->sendMessage($desc->getDescription());
src/pocketmine/command/defaults/VersionCommand.php:		if($desc->getWebsite() !== ""){
src/pocketmine/command/defaults/VersionCommand.php:			$sender->sendMessage("Website: " . $desc->getWebsite());
src/pocketmine/command/defaults/VersionCommand.php:		if(count($authors = $desc->getAuthors()) > 0){
src/pocketmine/command/defaults/VersionCommand.php:				$sender->sendMessage("Author: " . implode(", ", $authors));
src/pocketmine/command/defaults/VersionCommand.php:				$sender->sendMessage("Authors: " . implode(", ", $authors));
src/pocketmine/command/defaults/SayCommand.php:		$this->setPermission("pocketmine.command.say");
src/pocketmine/command/defaults/SayCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/SayCommand.php:		$sender->getServer()->broadcastMessage(new TranslationContainer(TextFormat::LIGHT_PURPLE . "%chat.type.announcement", [$sender instanceof Player ? $sender->getDisplayName() : ($sender instanceof ConsoleCommandSender ? "Server" : $sender->getName()), TextFormat::LIGHT_PURPLE . implode(" ", $args)]));
src/pocketmine/command/defaults/StatusCommand.php:		$this->setPermission("pocketmine.command.status");
src/pocketmine/command/defaults/StatusCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/StatusCommand.php:		$server = $sender->getServer();
src/pocketmine/command/defaults/StatusCommand.php:		$sender->sendMessage(TextFormat::GREEN . "---- " . TextFormat::WHITE . "Server status" . TextFormat::GREEN . " ----");
src/pocketmine/command/defaults/StatusCommand.php:		$time = (int) (microtime(true) - \pocketmine\START_TIME);
src/pocketmine/command/defaults/StatusCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Uptime: " . TextFormat::RED . $uptime);
src/pocketmine/command/defaults/StatusCommand.php:		if($server->getTicksPerSecond() < 17){
src/pocketmine/command/defaults/StatusCommand.php:		}elseif($server->getTicksPerSecond() < 12){
src/pocketmine/command/defaults/StatusCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Current TPS: {$tpsColor}{$server->getTicksPerSecond()} ({$server->getTickUsage()}%)");
src/pocketmine/command/defaults/StatusCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Average TPS: {$tpsColor}{$server->getTicksPerSecondAverage()} ({$server->getTickUsageAverage()}%)");
src/pocketmine/command/defaults/StatusCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Network upload: " . TextFormat::RED . round($server->getNetwork()->getUpload() / 1024, 2) . " kB/s");
src/pocketmine/command/defaults/StatusCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Network download: " . TextFormat::RED . round($server->getNetwork()->getDownload() / 1024, 2) . " kB/s");
src/pocketmine/command/defaults/StatusCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Thread count: " . TextFormat::RED . Process::getThreadCount());
src/pocketmine/command/defaults/StatusCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Main thread memory: " . TextFormat::RED . number_format(round(($mUsage[0] / 1024) / 1024, 2), 2) . " MB.");
src/pocketmine/command/defaults/StatusCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Total memory: " . TextFormat::RED . number_format(round(($mUsage[1] / 1024) / 1024, 2), 2) . " MB.");
src/pocketmine/command/defaults/StatusCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Total virtual memory: " . TextFormat::RED . number_format(round(($mUsage[2] / 1024) / 1024, 2), 2) . " MB.");
src/pocketmine/command/defaults/StatusCommand.php:		$sender->sendMessage(TextFormat::GOLD . "Heap memory: " . TextFormat::RED . number_format(round(($rUsage[0] / 1024) / 1024, 2), 2) . " MB.");
src/pocketmine/command/defaults/StatusCommand.php:		if($server->getProperty("memory.global-limit") > 0){
src/pocketmine/command/defaults/StatusCommand.php:			$sender->sendMessage(TextFormat::GOLD . "Maximum memory (manager): " . TextFormat::RED . number_format(round($server->getProperty("memory.global-limit"), 2), 2) . " MB.");
src/pocketmine/command/defaults/StatusCommand.php:		foreach($server->getLevels() as $level){
src/pocketmine/command/defaults/StatusCommand.php:			$levelName = $level->getFolderName() !== $level->getName() ? " (" . $level->getName() . ")" : "";
src/pocketmine/command/defaults/StatusCommand.php:			$timeColor = $level->getTickRateTime() > 40 ? TextFormat::RED : TextFormat::YELLOW;
src/pocketmine/command/defaults/StatusCommand.php:			$sender->sendMessage(TextFormat::GOLD . "World \"{$level->getFolderName()}\"$levelName: " .
src/pocketmine/command/defaults/StatusCommand.php:				TextFormat::RED . number_format(count($level->getChunks())) . TextFormat::GREEN . " chunks, " .
src/pocketmine/command/defaults/StatusCommand.php:				TextFormat::RED . number_format(count($level->getEntities())) . TextFormat::GREEN . " entities. " .
src/pocketmine/command/defaults/StatusCommand.php:				"Time $timeColor" . round($level->getTickRateTime(), 2) . "ms"
src/pocketmine/command/defaults/TeleportCommand.php:		$this->setPermission("pocketmine.command.teleport");
src/pocketmine/command/defaults/TeleportCommand.php:		$subject = $sender->getServer()->getPlayer($playerName);
src/pocketmine/command/defaults/TeleportCommand.php:			$sender->sendMessage(TextFormat::RED . "Can't find player " . $playerName);
src/pocketmine/command/defaults/TeleportCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/TeleportCommand.php:			case 5: // /tp x y z yaw pitch - TODO: 5 args could be target x y z yaw :(
src/pocketmine/command/defaults/TeleportCommand.php:					$sender->sendMessage(TextFormat::RED . "Please provide a player!");
src/pocketmine/command/defaults/TeleportCommand.php:			case 4: // /tp player1 x y z - TODO: 4 args could be x y z yaw :(
src/pocketmine/command/defaults/TeleportCommand.php:				$subject = $this->findPlayer($sender, $args[0]);
src/pocketmine/command/defaults/TeleportCommand.php:				$targetPlayer = $this->findPlayer($sender, $targetArgs[0]);
src/pocketmine/command/defaults/TeleportCommand.php:				$subject->teleport($targetPlayer->getLocation());
src/pocketmine/command/defaults/TeleportCommand.php:				Command::broadcastCommandMessage($sender, new TranslationContainer("commands.tp.success", [$subject->getName(), $targetPlayer->getName()]));
src/pocketmine/command/defaults/TeleportCommand.php:				$base = $subject->getLocation();
src/pocketmine/command/defaults/TeleportCommand.php:					$yaw = $base->yaw;
src/pocketmine/command/defaults/TeleportCommand.php:					$pitch = $base->pitch;
src/pocketmine/command/defaults/TeleportCommand.php:				$x = $this->getRelativeDouble($base->x, $sender, $targetArgs[0]);
src/pocketmine/command/defaults/TeleportCommand.php:				$y = $this->getRelativeDouble($base->y, $sender, $targetArgs[1], 0, 256);
src/pocketmine/command/defaults/TeleportCommand.php:				$z = $this->getRelativeDouble($base->z, $sender, $targetArgs[2]);
src/pocketmine/command/defaults/TeleportCommand.php:				$targetLocation = new Location($x, $y, $z, $yaw, $pitch, $base->getLevelNonNull());
src/pocketmine/command/defaults/TeleportCommand.php:				$subject->teleport($targetLocation);
src/pocketmine/command/defaults/TeleportCommand.php:					$subject->getName(),
src/pocketmine/command/defaults/TeleportCommand.php:					round($targetLocation->x, 2),
src/pocketmine/command/defaults/TeleportCommand.php:					round($targetLocation->y, 2),
src/pocketmine/command/defaults/TeleportCommand.php:					round($targetLocation->z, 2)
src/pocketmine/command/defaults/OpCommand.php:		$this->setPermission("pocketmine.command.op.give");
src/pocketmine/command/defaults/OpCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/OpCommand.php:		$player = $sender->getServer()->getOfflinePlayer($name);
src/pocketmine/command/defaults/OpCommand.php:		Command::broadcastCommandMessage($sender, new TranslationContainer("commands.op.success", [$player->getName()]));
src/pocketmine/command/defaults/OpCommand.php:			$player->sendMessage(TextFormat::GRAY . "You are now op!");
src/pocketmine/command/defaults/OpCommand.php:		$player->setOp(true);
src/pocketmine/command/defaults/KickCommand.php:		$this->setPermission("pocketmine.command.kick");
src/pocketmine/command/defaults/KickCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/KickCommand.php:		if(($player = $sender->getServer()->getPlayer($name)) instanceof Player){
src/pocketmine/command/defaults/KickCommand.php:			$player->kick($reason);
src/pocketmine/command/defaults/KickCommand.php:				Command::broadcastCommandMessage($sender, new TranslationContainer("commands.kick.success.reason", [$player->getName(), $reason]));
src/pocketmine/command/defaults/KickCommand.php:				Command::broadcastCommandMessage($sender, new TranslationContainer("commands.kick.success", [$player->getName()]));
src/pocketmine/command/defaults/KickCommand.php:			$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.generic.player.notFound"));
src/pocketmine/command/defaults/TimingsCommand.php:		$this->setPermission("pocketmine.command.timings");
src/pocketmine/command/defaults/TimingsCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/TimingsCommand.php:			$sender->sendMessage(new TranslationContainer("pocketmine.command.timings.timingsDisabled"));
src/pocketmine/command/defaults/TimingsCommand.php:				$timingFolder = $sender->getServer()->getDataPath() . "timings/";
src/pocketmine/command/defaults/TimingsCommand.php:					"browser" => $agent = $sender->getServer()->getName() . " " . $sender->getServer()->getPocketMineVersion(),
src/pocketmine/command/defaults/TimingsCommand.php:				$host = $sender->getServer()->getProperty("timings.host", "timings.pmmp.io");
src/pocketmine/command/defaults/TimingsCommand.php:				$sender->getServer()->getAsyncPool()->submitTask(new class($sender, $host, $agent, $data) extends BulkCurlTask{
src/pocketmine/command/defaults/TimingsCommand.php:					 * @phpstan-param array<string, string> $data
src/pocketmine/command/defaults/TimingsCommand.php:										"User-Agent: $agent",
src/pocketmine/command/defaults/TimingsCommand.php:										"Content-Type: application/x-www-form-urlencoded"
src/pocketmine/command/defaults/TimingsCommand.php:						$this->host = $host;
src/pocketmine/command/defaults/TimingsCommand.php:						$sender = $this->fetchLocal();
src/pocketmine/command/defaults/TimingsCommand.php:						if($sender instanceof Player and !$sender->isOnline()){ // TODO replace with a more generic API method for checking availability of CommandSender
src/pocketmine/command/defaults/TimingsCommand.php:						$result = $this->getResult()[0];
src/pocketmine/command/defaults/TimingsCommand.php:							$server->getLogger()->logException($result);
src/pocketmine/command/defaults/TimingsCommand.php:								["https://" . $this->host . "/?id=" . $response["id"]]));
src/pocketmine/command/defaults/GiveCommand.php:		$this->setPermission("pocketmine.command.give");
src/pocketmine/command/defaults/GiveCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/GiveCommand.php:		$player = $sender->getServer()->getPlayer($args[0]);
src/pocketmine/command/defaults/GiveCommand.php:			$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.generic.player.notFound"));
src/pocketmine/command/defaults/GiveCommand.php:			$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.give.item.notFound", [$args[1]]));
src/pocketmine/command/defaults/GiveCommand.php:			$item->setCount($item->getMaxStackSize());
src/pocketmine/command/defaults/GiveCommand.php:			$item->setCount((int) $args[2]);
src/pocketmine/command/defaults/GiveCommand.php:				$sender->sendMessage(new TranslationContainer("commands.give.tagError", [$exception !== null ? $exception->getMessage() : "Invalid tag conversion"]));
src/pocketmine/command/defaults/GiveCommand.php:			$item->setNamedTag($tags);
src/pocketmine/command/defaults/GiveCommand.php:		$player->getInventory()->addItem(clone $item);
src/pocketmine/command/defaults/GiveCommand.php:			$item->getName() . " (" . $item->getId() . ":" . $item->getDamage() . ")",
src/pocketmine/command/defaults/GiveCommand.php:			(string) $item->getCount(),
src/pocketmine/command/defaults/GiveCommand.php:			$player->getName()
src/pocketmine/command/defaults/TellCommand.php:		$this->setPermission("pocketmine.command.tell");
src/pocketmine/command/defaults/TellCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/TellCommand.php:		$player = $sender->getServer()->getPlayer(array_shift($args));
src/pocketmine/command/defaults/TellCommand.php:			$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.message.sameTarget"));
src/pocketmine/command/defaults/TellCommand.php:			$sender->sendMessage("[{$sender->getName()} -> {$player->getDisplayName()}] " . implode(" ", $args));
src/pocketmine/command/defaults/TellCommand.php:			$name = $sender instanceof Player ? $sender->getDisplayName() : $sender->getName();
src/pocketmine/command/defaults/TellCommand.php:			$player->sendMessage("[$name -> {$player->getName()}] " . implode(" ", $args));
src/pocketmine/command/defaults/TellCommand.php:			$sender->sendMessage(new TranslationContainer("commands.generic.player.notFound"));
src/pocketmine/command/defaults/StopCommand.php:		$this->setPermission("pocketmine.command.stop");
src/pocketmine/command/defaults/StopCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/StopCommand.php:		$sender->getServer()->shutdown();
src/pocketmine/command/defaults/EnchantCommand.php:		$this->setPermission("pocketmine.command.enchant");
src/pocketmine/command/defaults/EnchantCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/EnchantCommand.php:		$player = $sender->getServer()->getPlayer($args[0]);
src/pocketmine/command/defaults/EnchantCommand.php:			$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.generic.player.notFound"));
src/pocketmine/command/defaults/EnchantCommand.php:		$item = $player->getInventory()->getItemInHand();
src/pocketmine/command/defaults/EnchantCommand.php:		if($item->isNull()){
src/pocketmine/command/defaults/EnchantCommand.php:			$sender->sendMessage(new TranslationContainer("commands.enchant.noItem"));
src/pocketmine/command/defaults/EnchantCommand.php:			$sender->sendMessage(new TranslationContainer("commands.enchant.notFound", [$args[1]]));
src/pocketmine/command/defaults/EnchantCommand.php:			$level = $this->getBoundedInt($sender, $args[2], 1, $enchantment->getMaxLevel());
src/pocketmine/command/defaults/EnchantCommand.php:		$item->addEnchantment(new EnchantmentInstance($enchantment, $level));
src/pocketmine/command/defaults/EnchantCommand.php:		$player->getInventory()->setItemInHand($item);
src/pocketmine/command/defaults/EnchantCommand.php:		self::broadcastCommandMessage($sender, new TranslationContainer("%commands.enchant.success", [$player->getName()]));
src/pocketmine/command/defaults/ParticleCommand.php:		$this->setPermission("pocketmine.command.particle");
src/pocketmine/command/defaults/ParticleCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/ParticleCommand.php:			$level = $sender->getLevelNonNull();
src/pocketmine/command/defaults/ParticleCommand.php:				$this->getRelativeDouble($sender->getX(), $sender, $args[1]),
src/pocketmine/command/defaults/ParticleCommand.php:				$this->getRelativeDouble($sender->getY(), $sender, $args[2], 0, Level::Y_MAX),
src/pocketmine/command/defaults/ParticleCommand.php:				$this->getRelativeDouble($sender->getZ(), $sender, $args[3])
src/pocketmine/command/defaults/ParticleCommand.php:			$level = $sender->getServer()->getDefaultLevel();
src/pocketmine/command/defaults/ParticleCommand.php:		$particle = $this->getParticle($name, $pos, $xd, $yd, $zd, $data);
src/pocketmine/command/defaults/ParticleCommand.php:			$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.particle.notFound", [$name]));
src/pocketmine/command/defaults/ParticleCommand.php:		$sender->sendMessage(new TranslationContainer("commands.particle.success", [$name, $count]));
src/pocketmine/command/defaults/ParticleCommand.php:			$particle->setComponents(
src/pocketmine/command/defaults/ParticleCommand.php:				$pos->x + $random->nextSignedFloat() * $xd,
src/pocketmine/command/defaults/ParticleCommand.php:				$pos->y + $random->nextSignedFloat() * $yd,
src/pocketmine/command/defaults/ParticleCommand.php:				$pos->z + $random->nextSignedFloat() * $zd
src/pocketmine/command/defaults/ParticleCommand.php:			$level->addParticle($particle);
src/pocketmine/command/defaults/ReloadCommand.php:		$this->setPermission("pocketmine.command.reload");
src/pocketmine/command/defaults/ReloadCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/ReloadCommand.php:		$sender->getServer()->reload();
src/pocketmine/command/defaults/KillCommand.php:		$this->setPermission("pocketmine.command.kill.self;pocketmine.command.kill.other");
src/pocketmine/command/defaults/KillCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/KillCommand.php:			if(!$sender->hasPermission("pocketmine.command.kill.other")){
src/pocketmine/command/defaults/KillCommand.php:				$sender->sendMessage($sender->getServer()->getLanguage()->translateString(TextFormat::RED . "%commands.generic.permission"));
src/pocketmine/command/defaults/KillCommand.php:			$player = $sender->getServer()->getPlayer($args[0]);
src/pocketmine/command/defaults/KillCommand.php:				$player->attack(new EntityDamageEvent($player, EntityDamageEvent::CAUSE_SUICIDE, 1000));
src/pocketmine/command/defaults/KillCommand.php:				Command::broadcastCommandMessage($sender, new TranslationContainer("commands.kill.successful", [$player->getName()]));
src/pocketmine/command/defaults/KillCommand.php:				$sender->sendMessage(new TranslationContainer(TextFormat::RED . "%commands.generic.player.notFound"));
src/pocketmine/command/defaults/KillCommand.php:			if(!$sender->hasPermission("pocketmine.command.kill.self")){
src/pocketmine/command/defaults/KillCommand.php:				$sender->sendMessage($sender->getServer()->getLanguage()->translateString(TextFormat::RED . "%commands.generic.permission"));
src/pocketmine/command/defaults/KillCommand.php:			$sender->attack(new EntityDamageEvent($sender, EntityDamageEvent::CAUSE_SUICIDE, 1000));
src/pocketmine/command/defaults/KillCommand.php:			$sender->sendMessage(new TranslationContainer("commands.kill.successful", [$sender->getName()]));
src/pocketmine/command/defaults/SaveCommand.php:		$this->setPermission("pocketmine.command.save.perform");
src/pocketmine/command/defaults/SaveCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/defaults/SaveCommand.php:		foreach($sender->getServer()->getOnlinePlayers() as $player){
src/pocketmine/command/defaults/SaveCommand.php:			$player->save();
src/pocketmine/command/defaults/SaveCommand.php:		foreach($sender->getServer()->getLevels() as $level){
src/pocketmine/command/defaults/SaveCommand.php:			$level->save(true);
src/pocketmine/command/defaults/SaveCommand.php:		Command::broadcastCommandMessage($sender, new TranslationContainer("pocketmine.save.success", [round(microtime(true) - $start, 3)]));
src/pocketmine/command/SimpleCommandMap.php:		$this->server = $server;
src/pocketmine/command/SimpleCommandMap.php:		$this->setDefaultCommands();
src/pocketmine/command/SimpleCommandMap.php:		$this->registerAll("pocketmine", [
src/pocketmine/command/SimpleCommandMap.php:			new BanIpCommand("ban-ip"),
src/pocketmine/command/SimpleCommandMap.php:			new PardonIpCommand("pardon-ip"),
src/pocketmine/command/SimpleCommandMap.php:			new SaveCommand("save-all"),
src/pocketmine/command/SimpleCommandMap.php:			new SaveOffCommand("save-off"),
src/pocketmine/command/SimpleCommandMap.php:			new SaveOnCommand("save-on"),
src/pocketmine/command/SimpleCommandMap.php:			$this->register($fallbackPrefix, $command);
src/pocketmine/command/SimpleCommandMap.php:			$label = $command->getName();
src/pocketmine/command/SimpleCommandMap.php:		$registered = $this->registerAlias($command, false, $fallbackPrefix, $label);
src/pocketmine/command/SimpleCommandMap.php:		$aliases = $command->getAliases();
src/pocketmine/command/SimpleCommandMap.php:			if(!$this->registerAlias($command, true, $fallbackPrefix, $alias)){
src/pocketmine/command/SimpleCommandMap.php:		$command->setAliases($aliases);
src/pocketmine/command/SimpleCommandMap.php:			$command->setLabel($fallbackPrefix . ":" . $label);
src/pocketmine/command/SimpleCommandMap.php:		$command->register($this);
src/pocketmine/command/SimpleCommandMap.php:		foreach($this->knownCommands as $lbl => $cmd){
src/pocketmine/command/SimpleCommandMap.php:				unset($this->knownCommands[$lbl]);
src/pocketmine/command/SimpleCommandMap.php:		$command->unregister($this);
src/pocketmine/command/SimpleCommandMap.php:		$this->knownCommands[$fallbackPrefix . ":" . $label] = $command;
src/pocketmine/command/SimpleCommandMap.php:		if(($command instanceof VanillaCommand or $isAlias) and isset($this->knownCommands[$label])){
src/pocketmine/command/SimpleCommandMap.php:		if(isset($this->knownCommands[$label]) and $this->knownCommands[$label]->getLabel() === $label){
src/pocketmine/command/SimpleCommandMap.php:			$command->setLabel($label);
src/pocketmine/command/SimpleCommandMap.php:		$this->knownCommands[$label] = $command;
src/pocketmine/command/SimpleCommandMap.php:			if(($command = $this->getCommand($commandName)) instanceof Command){
src/pocketmine/command/SimpleCommandMap.php:		$target = $this->matchCommand($sentCommandLabel, $args);
src/pocketmine/command/SimpleCommandMap.php:		$target->timings->startTiming();
src/pocketmine/command/SimpleCommandMap.php:			$target->execute($sender, $sentCommandLabel, $args);
src/pocketmine/command/SimpleCommandMap.php:			$sender->sendMessage($this->server->getLanguage()->translateString("commands.generic.usage", [$target->getUsage()]));
src/pocketmine/command/SimpleCommandMap.php:			$target->timings->stopTiming();
src/pocketmine/command/SimpleCommandMap.php:		foreach($this->knownCommands as $command){
src/pocketmine/command/SimpleCommandMap.php:			$command->unregister($this);
src/pocketmine/command/SimpleCommandMap.php:		$this->knownCommands = [];
src/pocketmine/command/SimpleCommandMap.php:		$this->setDefaultCommands();
src/pocketmine/command/SimpleCommandMap.php:		return $this->knownCommands[$name] ?? null;
src/pocketmine/command/SimpleCommandMap.php:		return $this->knownCommands;
src/pocketmine/command/SimpleCommandMap.php:		$values = $this->server->getCommandAliases();
src/pocketmine/command/SimpleCommandMap.php:				$this->server->getLogger()->warning($this->server->getLanguage()->translateString("pocketmine.command.alias.illegal", [$alias]));
src/pocketmine/command/SimpleCommandMap.php:				$command = $this->matchCommand($commandName, $args);
src/pocketmine/command/SimpleCommandMap.php:				$this->server->getLogger()->warning($this->server->getLanguage()->translateString("pocketmine.command.alias.recursive", [$alias, implode(", ", $recursive)]));
src/pocketmine/command/SimpleCommandMap.php:				$this->server->getLogger()->warning($this->server->getLanguage()->translateString("pocketmine.command.alias.notFound", [$alias, implode(", ", $bad)]));
src/pocketmine/command/SimpleCommandMap.php:				$this->knownCommands[strtolower($alias)] = new FormattedCommandAlias(strtolower($alias), $targets);
src/pocketmine/command/SimpleCommandMap.php:				unset($this->knownCommands[strtolower($alias)]);
src/pocketmine/command/CommandReader.php:		$this->buffer = new \Threaded;
src/pocketmine/command/CommandReader.php:		$this->notifier = $notifier;
src/pocketmine/command/CommandReader.php:		$this->shutdown = true;
src/pocketmine/command/CommandReader.php:			if($this->isRunning()){
src/pocketmine/command/CommandReader.php:		if($this->type === self::TYPE_PIPED){
src/pocketmine/command/CommandReader.php:		if($this->isPipe(self::$stdin)){
src/pocketmine/command/CommandReader.php:			$this->type = self::TYPE_PIPED;
src/pocketmine/command/CommandReader.php:			$this->type = self::TYPE_STREAM;
src/pocketmine/command/CommandReader.php:			$this->initStdin();
src/pocketmine/command/CommandReader.php:		switch($this->type){
src/pocketmine/command/CommandReader.php:					$this->initStdin();
src/pocketmine/command/CommandReader.php:					$this->initStdin();
src/pocketmine/command/CommandReader.php:					$this->synchronized(function() : void{
src/pocketmine/command/CommandReader.php:						$this->wait(200000);
src/pocketmine/command/CommandReader.php:			$this->buffer[] = preg_replace("#\\x1b\\x5b([^\\x1b]*\\x7e|[\\x40-\\x50])#", "", $line);
src/pocketmine/command/CommandReader.php:			if($this->notifier !== null){
src/pocketmine/command/CommandReader.php:				$this->notifier->wakeupSleeper();
src/pocketmine/command/CommandReader.php:		if($this->buffer->count() !== 0){
src/pocketmine/command/CommandReader.php:			return (string) $this->buffer->shift();
src/pocketmine/command/CommandReader.php:		$this->registerClassLoader();
src/pocketmine/command/CommandReader.php:		$this->initStdin();
src/pocketmine/command/CommandReader.php:		while(!$this->shutdown and $this->readLine());
src/pocketmine/command/CommandSender.php:	 * Returns the line height of the command-sender's screen. Used for determining sizes for command output pagination
src/pocketmine/command/ConsoleCommandSender.php:		$this->perm = new PermissibleBase($this);
src/pocketmine/command/ConsoleCommandSender.php:		return $this->perm->isPermissionSet($name);
src/pocketmine/command/ConsoleCommandSender.php:		return $this->perm->hasPermission($name);
src/pocketmine/command/ConsoleCommandSender.php:		return $this->perm->addAttachment($plugin, $name, $value);
src/pocketmine/command/ConsoleCommandSender.php:		$this->perm->removeAttachment($attachment);
src/pocketmine/command/ConsoleCommandSender.php:		$this->perm->recalculatePermissions();
src/pocketmine/command/ConsoleCommandSender.php:		return $this->perm->getEffectivePermissions();
src/pocketmine/command/ConsoleCommandSender.php:			$message = $this->getServer()->getLanguage()->translate($message);
src/pocketmine/command/ConsoleCommandSender.php:			$message = $this->getServer()->getLanguage()->translateString($message);
src/pocketmine/command/ConsoleCommandSender.php:			MainLogger::getLogger()->info($line);
src/pocketmine/command/ConsoleCommandSender.php:		return $this->lineHeight ?? PHP_INT_MAX;
src/pocketmine/command/ConsoleCommandSender.php:		$this->lineHeight = $height;
src/pocketmine/command/FormattedCommandAlias.php:		$this->formatStrings = $formatStrings;
src/pocketmine/command/FormattedCommandAlias.php:		foreach($this->formatStrings as $formatString){
src/pocketmine/command/FormattedCommandAlias.php:				$commands[] = $this->buildCommand($formatString, $args);
src/pocketmine/command/FormattedCommandAlias.php:				$sender->sendMessage(TextFormat::RED . $e->getMessage());
src/pocketmine/command/FormattedCommandAlias.php:			$result |= Server::getInstance()->dispatchCommand($sender, $command, true);
src/pocketmine/command/FormattedCommandAlias.php:			if($index > 0 and $formatString[$start - 1] === "\\"){
src/pocketmine/command/FormattedCommandAlias.php:				$formatString = substr($formatString, 0, $start - 1) . substr($formatString, $start);
src/pocketmine/command/FormattedCommandAlias.php:			while($index < strlen($formatString) and self::inRange(ord($formatString[$index]) - 48, 0, 9)){
src/pocketmine/command/FormattedCommandAlias.php:			--$position;
src/pocketmine/command/FormattedCommandAlias.php:			if($index < strlen($formatString) and $formatString[$index] === "-"){
src/pocketmine/command/Command.php:		$this->name = $name;
src/pocketmine/command/Command.php:		$this->setLabel($name);
src/pocketmine/command/Command.php:		$this->setDescription($description);
src/pocketmine/command/Command.php:		$this->usageMessage = $usageMessage ?? ("/" . $name);
src/pocketmine/command/Command.php:		$this->setAliases($aliases);
src/pocketmine/command/Command.php:		return $this->name;
src/pocketmine/command/Command.php:		return $this->permission;
src/pocketmine/command/Command.php:		$this->permission = $permission;
src/pocketmine/command/Command.php:		if($this->testPermissionSilent($target)){
src/pocketmine/command/Command.php:		if($this->permissionMessage === null){
src/pocketmine/command/Command.php:			$target->sendMessage($target->getServer()->getLanguage()->translateString(TextFormat::RED . "%commands.generic.permission"));
src/pocketmine/command/Command.php:		}elseif($this->permissionMessage !== ""){
src/pocketmine/command/Command.php:			$target->sendMessage(str_replace("<permission>", $this->permission, $this->permissionMessage));
src/pocketmine/command/Command.php:		if($this->permission === null or $this->permission === ""){
src/pocketmine/command/Command.php:		foreach(explode(";", $this->permission) as $permission){
src/pocketmine/command/Command.php:			if($target->hasPermission($permission)){
src/pocketmine/command/Command.php:		return $this->label;
src/pocketmine/command/Command.php:		$this->nextLabel = $name;
src/pocketmine/command/Command.php:		if(!$this->isRegistered()){
src/pocketmine/command/Command.php:			if($this->timings instanceof TimingsHandler){
src/pocketmine/command/Command.php:				$this->timings->remove();
src/pocketmine/command/Command.php:			$this->timings = new TimingsHandler("** Command: " . $name);
src/pocketmine/command/Command.php:			$this->label = $name;
src/pocketmine/command/Command.php:		if($this->allowChangesFrom($commandMap)){
src/pocketmine/command/Command.php:			$this->commandMap = $commandMap;
src/pocketmine/command/Command.php:		if($this->allowChangesFrom($commandMap)){
src/pocketmine/command/Command.php:			$this->commandMap = null;
src/pocketmine/command/Command.php:			$this->activeAliases = $this->aliases;
src/pocketmine/command/Command.php:			$this->label = $this->nextLabel;
src/pocketmine/command/Command.php:		return $this->commandMap === null or $this->commandMap === $commandMap;
src/pocketmine/command/Command.php:		return $this->commandMap !== null;
src/pocketmine/command/Command.php:		return $this->activeAliases;
src/pocketmine/command/Command.php:		return $this->permissionMessage;
src/pocketmine/command/Command.php:		return $this->description;
src/pocketmine/command/Command.php:		return $this->usageMessage;
src/pocketmine/command/Command.php:		$this->aliases = $aliases;
src/pocketmine/command/Command.php:		if(!$this->isRegistered()){
src/pocketmine/command/Command.php:			$this->activeAliases = $aliases;
src/pocketmine/command/Command.php:		$this->description = $description;
src/pocketmine/command/Command.php:		$this->permissionMessage = $permissionMessage;
src/pocketmine/command/Command.php:		$this->usageMessage = $usage;
src/pocketmine/command/Command.php:			$result = "[" . $source->getName() . ": " . ($source->getServer()->getLanguage()->get($m->getText()) !== $m->getText() ? "%" : "") . $m->getText() . "]";
src/pocketmine/command/Command.php:			$users = PermissionManager::getInstance()->getPermissionSubscriptions(Server::BROADCAST_CHANNEL_ADMINISTRATIVE);
src/pocketmine/command/Command.php:			$m->setText($result);
src/pocketmine/command/Command.php:			$m->setText($colored);
src/pocketmine/command/Command.php:			$users = PermissionManager::getInstance()->getPermissionSubscriptions(Server::BROADCAST_CHANNEL_ADMINISTRATIVE);
src/pocketmine/command/Command.php:			$result = new TranslationContainer("chat.type.admin", [$source->getName(), $message]);
src/pocketmine/command/Command.php:			$colored = new TranslationContainer(TextFormat::GRAY . TextFormat::ITALIC . "%chat.type.admin", [$source->getName(), $message]);
src/pocketmine/command/Command.php:			$source->sendMessage($message);
src/pocketmine/command/Command.php:					$user->sendMessage($result);
src/pocketmine/command/Command.php:					$user->sendMessage($colored);
src/pocketmine/command/Command.php:		return $this->name;
src/pocketmine/command/PluginCommand.php:		$this->owningPlugin = $owner;
src/pocketmine/command/PluginCommand.php:		$this->executor = $owner;
src/pocketmine/command/PluginCommand.php:		$this->usageMessage = "";
src/pocketmine/command/PluginCommand.php:		if(!$this->owningPlugin->isEnabled()){
src/pocketmine/command/PluginCommand.php:		if(!$this->testPermission($sender)){
src/pocketmine/command/PluginCommand.php:		$success = $this->executor->onCommand($sender, $this, $commandLabel, $args);
src/pocketmine/command/PluginCommand.php:		if(!$success and $this->usageMessage !== ""){
src/pocketmine/command/PluginCommand.php:		return $this->executor;
src/pocketmine/command/PluginCommand.php:		$this->executor = $executor;
src/pocketmine/command/PluginCommand.php:		return $this->owningPlugin;
src/pocketmine/command/RemoteConsoleCommandSender.php:			$message = $this->getServer()->getLanguage()->translate($message);
src/pocketmine/command/RemoteConsoleCommandSender.php:			$message = $this->getServer()->getLanguage()->translateString($message);
src/pocketmine/command/RemoteConsoleCommandSender.php:		$this->messages .= trim($message, "\r\n") . "\n";
src/pocketmine/command/RemoteConsoleCommandSender.php:		return $this->messages;
src/pocketmine/entity/EffectInstance.php:		$this->effectType = $effectType;
src/pocketmine/entity/EffectInstance.php:		$this->setDuration($duration ?? $effectType->getDefaultDuration());
src/pocketmine/entity/EffectInstance.php:		$this->amplifier = $amplifier;
src/pocketmine/entity/EffectInstance.php:		$this->visible = $visible;
src/pocketmine/entity/EffectInstance.php:		$this->ambient = $ambient;
src/pocketmine/entity/EffectInstance.php:		$this->color = $overrideColor ?? $effectType->getColor();
src/pocketmine/entity/EffectInstance.php:		return $this->effectType->getId();
src/pocketmine/entity/EffectInstance.php:		return $this->effectType;
src/pocketmine/entity/EffectInstance.php:		return $this->duration;
src/pocketmine/entity/EffectInstance.php:			throw new \InvalidArgumentException("Effect duration must be in range 0 - " . INT32_MAX . ", got $duration");
src/pocketmine/entity/EffectInstance.php:		$this->duration = $duration;
src/pocketmine/entity/EffectInstance.php:		$this->duration = max(0, $this->duration - $ticks);
src/pocketmine/entity/EffectInstance.php:		return $this->duration <= 0;
src/pocketmine/entity/EffectInstance.php:		return $this->amplifier;
src/pocketmine/entity/EffectInstance.php:		return $this->amplifier + 1;
src/pocketmine/entity/EffectInstance.php:		$this->amplifier = $amplifier;
src/pocketmine/entity/EffectInstance.php:		return $this->visible;
src/pocketmine/entity/EffectInstance.php:		$this->visible = $visible;
src/pocketmine/entity/EffectInstance.php:		return $this->ambient;
src/pocketmine/entity/EffectInstance.php:		$this->ambient = $ambient;
src/pocketmine/entity/EffectInstance.php:	 * Returns the particle colour of this effect instance. This can be overridden on a per-EffectInstance basis, so it
src/pocketmine/entity/EffectInstance.php:		return clone $this->color;
src/pocketmine/entity/EffectInstance.php:		$this->color = clone $color;
src/pocketmine/entity/EffectInstance.php:		$this->color = $this->effectType->getColor();
src/pocketmine/entity/Effect.php:		self::$effects[$effect->getId()] = $effect;
src/pocketmine/entity/Effect.php:		$this->id = $id;
src/pocketmine/entity/Effect.php:		$this->name = $name;
src/pocketmine/entity/Effect.php:		$this->color = $color;
src/pocketmine/entity/Effect.php:		$this->bad = $isBad;
src/pocketmine/entity/Effect.php:		$this->defaultDuration = $defaultDuration;
src/pocketmine/entity/Effect.php:		$this->hasBubbles = $hasBubbles;
src/pocketmine/entity/Effect.php:		return $this->id;
src/pocketmine/entity/Effect.php:		return $this->name;
src/pocketmine/entity/Effect.php:		return clone $this->color;
src/pocketmine/entity/Effect.php:		return $this->bad;
src/pocketmine/entity/Effect.php:		return $this->defaultDuration <= 1;
src/pocketmine/entity/Effect.php:		return $this->defaultDuration;
src/pocketmine/entity/Effect.php:		return $this->hasBubbles;
src/pocketmine/entity/Effect.php:		switch($this->id){
src/pocketmine/entity/Effect.php:				if(($interval = (25 >> $instance->getAmplifier())) > 0){
src/pocketmine/entity/Effect.php:					return ($instance->getDuration() % $interval) === 0;
src/pocketmine/entity/Effect.php:				if(($interval = (50 >> $instance->getAmplifier())) > 0){
src/pocketmine/entity/Effect.php:					return ($instance->getDuration() % $interval) === 0;
src/pocketmine/entity/Effect.php:				if(($interval = (40 >> $instance->getAmplifier())) > 0){
src/pocketmine/entity/Effect.php:					return ($instance->getDuration() % $interval) === 0;
src/pocketmine/entity/Effect.php:		switch($this->id){
src/pocketmine/entity/Effect.php:				if($entity->getHealth() <= 1){
src/pocketmine/entity/Effect.php:				$entity->attack($ev);
src/pocketmine/entity/Effect.php:				$entity->attack($ev);
src/pocketmine/entity/Effect.php:				if($entity->getHealth() < $entity->getMaxHealth()){
src/pocketmine/entity/Effect.php:					$entity->heal($ev);
src/pocketmine/entity/Effect.php:					$entity->exhaust(0.025 * $instance->getEffectLevel(), PlayerExhaustEvent::CAUSE_POTION);
src/pocketmine/entity/Effect.php:				if($entity->getHealth() < $entity->getMaxHealth()){
src/pocketmine/entity/Effect.php:					$entity->heal(new EntityRegainHealthEvent($entity, (4 << $instance->getAmplifier()) * $potency, EntityRegainHealthEvent::CAUSE_MAGIC));
src/pocketmine/entity/Effect.php:				$damage = (4 << $instance->getAmplifier()) * $potency;
src/pocketmine/entity/Effect.php:				$entity->attack($ev);
src/pocketmine/entity/Effect.php:					$entity->addFood($instance->getEffectLevel());
src/pocketmine/entity/Effect.php:					$entity->addSaturation($instance->getEffectLevel() * 2);
src/pocketmine/entity/Effect.php:		switch($this->id){
src/pocketmine/entity/Effect.php:				$entity->setInvisible();
src/pocketmine/entity/Effect.php:				$entity->setNameTagVisible(false);
src/pocketmine/entity/Effect.php:				$attr = $entity->getAttributeMap()->getAttribute(Attribute::MOVEMENT_SPEED);
src/pocketmine/entity/Effect.php:				$attr->setValue($attr->getValue() * (1 + 0.2 * $instance->getEffectLevel()));
src/pocketmine/entity/Effect.php:				$attr = $entity->getAttributeMap()->getAttribute(Attribute::MOVEMENT_SPEED);
src/pocketmine/entity/Effect.php:				$attr->setValue($attr->getValue() * (1 - 0.15 * $instance->getEffectLevel()), true);
src/pocketmine/entity/Effect.php:				$entity->setMaxHealth($entity->getMaxHealth() + 4 * $instance->getEffectLevel());
src/pocketmine/entity/Effect.php:				$new = (4 * $instance->getEffectLevel());
src/pocketmine/entity/Effect.php:				if($new > $entity->getAbsorption()){
src/pocketmine/entity/Effect.php:					$entity->setAbsorption($new);
src/pocketmine/entity/Effect.php:		switch($this->id){
src/pocketmine/entity/Effect.php:				$entity->setInvisible(false);
src/pocketmine/entity/Effect.php:				$entity->setNameTagVisible(true);
src/pocketmine/entity/Effect.php:				$attr = $entity->getAttributeMap()->getAttribute(Attribute::MOVEMENT_SPEED);
src/pocketmine/entity/Effect.php:				$attr->setValue($attr->getValue() / (1 + 0.2 * $instance->getEffectLevel()));
src/pocketmine/entity/Effect.php:				$attr = $entity->getAttributeMap()->getAttribute(Attribute::MOVEMENT_SPEED);
src/pocketmine/entity/Effect.php:				$attr->setValue($attr->getValue() / (1 - 0.15 * $instance->getEffectLevel()));
src/pocketmine/entity/Effect.php:				$entity->setMaxHealth($entity->getMaxHealth() - 4 * $instance->getEffectLevel());
src/pocketmine/entity/Effect.php:				$entity->setAbsorption(0);
src/pocketmine/entity/Effect.php:		$this->color = clone $this->color;
src/pocketmine/entity/AttributeMap.php: * @phpstan-implements \ArrayAccess<int, float>
src/pocketmine/entity/AttributeMap.php:		$this->attributes[$attribute->getId()] = $attribute;
src/pocketmine/entity/AttributeMap.php:		return $this->attributes[$id] ?? null;
src/pocketmine/entity/AttributeMap.php:		return $this->attributes;
src/pocketmine/entity/AttributeMap.php:		return array_filter($this->attributes, function(Attribute $attribute) : bool{
src/pocketmine/entity/AttributeMap.php:			return $attribute->isSyncable() and $attribute->isDesynchronized();
src/pocketmine/entity/AttributeMap.php:		return isset($this->attributes[$offset]);
src/pocketmine/entity/AttributeMap.php:		return $this->attributes[$offset]->getValue();
src/pocketmine/entity/AttributeMap.php:		$this->attributes[$offset]->setValue($value);
src/pocketmine/entity/WaterAnimal.php:		return $this->getGenericFlag(self::DATA_FLAG_BABY);
src/pocketmine/entity/WaterAnimal.php:		return $this->isUnderwater();
src/pocketmine/entity/WaterAnimal.php:		$this->attack($ev);
src/pocketmine/entity/Animal.php:		return $this->getGenericFlag(self::DATA_FLAG_BABY);
src/pocketmine/entity/projectile/Snowball.php:			$this->level->addParticle(new SnowballPoofParticle($this));
src/pocketmine/entity/projectile/ExperienceBottle.php:		return -1;
src/pocketmine/entity/projectile/ExperienceBottle.php:		$this->level->broadcastLevelEvent($this, LevelEventPacket::EVENT_PARTICLE_SPLASH, (new Color(0x38, 0x5d, 0xc6))->toARGB());
src/pocketmine/entity/projectile/ExperienceBottle.php:		$this->level->broadcastLevelSoundEvent($this, LevelSoundEventPacket::SOUND_GLASS);
src/pocketmine/entity/projectile/ExperienceBottle.php:		$this->level->dropExperience($this, mt_rand(3, 11));
src/pocketmine/entity/projectile/Throwable.php:		$this->flagForDespawn();
src/pocketmine/entity/projectile/Arrow.php:		$this->setCritical($critical);
src/pocketmine/entity/projectile/Arrow.php:		$this->pickupMode = $this->namedtag->getByte(self::TAG_PICKUP, self::PICKUP_ANY, true);
src/pocketmine/entity/projectile/Arrow.php:		$this->collideTicks = $this->namedtag->getShort("life", $this->collideTicks);
src/pocketmine/entity/projectile/Arrow.php:		$this->namedtag->setByte(self::TAG_PICKUP, $this->pickupMode, true);
src/pocketmine/entity/projectile/Arrow.php:		$this->namedtag->setShort("life", $this->collideTicks);
src/pocketmine/entity/projectile/Arrow.php:		return $this->getGenericFlag(self::DATA_FLAG_CRITICAL);
src/pocketmine/entity/projectile/Arrow.php:		$this->setGenericFlag(self::DATA_FLAG_CRITICAL, $value);
src/pocketmine/entity/projectile/Arrow.php:		if($this->isCritical()){
src/pocketmine/entity/projectile/Arrow.php:		return $this->punchKnockback;
src/pocketmine/entity/projectile/Arrow.php:		$this->punchKnockback = $punchKnockback;
src/pocketmine/entity/projectile/Arrow.php:		if($this->closed){
src/pocketmine/entity/projectile/Arrow.php:		if($this->blockHit !== null){
src/pocketmine/entity/projectile/Arrow.php:			$this->collideTicks += $tickDiff;
src/pocketmine/entity/projectile/Arrow.php:			if($this->collideTicks > 1200){
src/pocketmine/entity/projectile/Arrow.php:				$this->flagForDespawn();
src/pocketmine/entity/projectile/Arrow.php:			$this->collideTicks = 0;
src/pocketmine/entity/projectile/Arrow.php:		$this->setCritical(false);
src/pocketmine/entity/projectile/Arrow.php:		$this->level->broadcastLevelSoundEvent($this, LevelSoundEventPacket::SOUND_BOW_HIT);
src/pocketmine/entity/projectile/Arrow.php:		$this->broadcastEntityEvent(ActorEventPacket::ARROW_SHAKE, 7); //7 ticks
src/pocketmine/entity/projectile/Arrow.php:		if($this->punchKnockback > 0){
src/pocketmine/entity/projectile/Arrow.php:			$horizontalSpeed = sqrt($this->motion->x ** 2 + $this->motion->z ** 2);
src/pocketmine/entity/projectile/Arrow.php:				$multiplier = $this->punchKnockback * 0.6 / $horizontalSpeed;
src/pocketmine/entity/projectile/Arrow.php:				$entityHit->setMotion($entityHit->getMotion()->add($this->motion->x * $multiplier, 0.1, $this->motion->z * $multiplier));
src/pocketmine/entity/projectile/Arrow.php:		return $this->pickupMode;
src/pocketmine/entity/projectile/Arrow.php:		$this->pickupMode = $pickupMode;
src/pocketmine/entity/projectile/Arrow.php:		if($this->blockHit === null){
src/pocketmine/entity/projectile/Arrow.php:		$playerInventory = $player->getInventory();
src/pocketmine/entity/projectile/Arrow.php:		if($player->isSurvival() and !$playerInventory->canAddItem($item)){
src/pocketmine/entity/projectile/Arrow.php:		if($this->pickupMode === self::PICKUP_NONE or ($this->pickupMode === self::PICKUP_CREATIVE and !$player->isCreative())){
src/pocketmine/entity/projectile/Arrow.php:			$ev->setCancelled();
src/pocketmine/entity/projectile/Arrow.php:		$ev->call();
src/pocketmine/entity/projectile/Arrow.php:		if($ev->isCancelled()){
src/pocketmine/entity/projectile/Arrow.php:		$pk->eid = $player->getId();
src/pocketmine/entity/projectile/Arrow.php:		$pk->target = $this->getId();
src/pocketmine/entity/projectile/Arrow.php:		$this->server->broadcastPacket($this->getViewers(), $pk);
src/pocketmine/entity/projectile/Arrow.php:		$playerInventory->addItem(clone $item);
src/pocketmine/entity/projectile/Arrow.php:		$this->flagForDespawn();
src/pocketmine/entity/projectile/SplashPotion.php:		$this->setPotionId($this->namedtag->getShort("PotionId", 0));
src/pocketmine/entity/projectile/SplashPotion.php:		$this->namedtag->setShort("PotionId", $this->getPotionId());
src/pocketmine/entity/projectile/SplashPotion.php:		return -1; //no damage
src/pocketmine/entity/projectile/SplashPotion.php:		$effects = $this->getPotionEffects();
src/pocketmine/entity/projectile/SplashPotion.php:				$level = $effect->getEffectLevel();
src/pocketmine/entity/projectile/SplashPotion.php:					$colors[] = $effect->getColor();
src/pocketmine/entity/projectile/SplashPotion.php:		$this->level->broadcastLevelEvent($this, LevelEventPacket::EVENT_PARTICLE_SPLASH, Color::mix(...$colors)->toARGB());
src/pocketmine/entity/projectile/SplashPotion.php:		$this->level->broadcastLevelSoundEvent($this, LevelSoundEventPacket::SOUND_GLASS);
src/pocketmine/entity/projectile/SplashPotion.php:			if(!$this->willLinger()){
src/pocketmine/entity/projectile/SplashPotion.php:				foreach($this->level->getNearbyEntities($this->boundingBox->expandedCopy(4.125, 2.125, 4.125), $this) as $entity){
src/pocketmine/entity/projectile/SplashPotion.php:					if($entity instanceof Living and $entity->isAlive()){
src/pocketmine/entity/projectile/SplashPotion.php:						$distanceSquared = $entity->add(0, $entity->getEyeHeight(), 0)->distanceSquared($this);
src/pocketmine/entity/projectile/SplashPotion.php:						$distanceMultiplier = 1 - (sqrt($distanceSquared) / 4);
src/pocketmine/entity/projectile/SplashPotion.php:						if($event instanceof ProjectileHitEntityEvent and $entity === $event->getEntityHit()){
src/pocketmine/entity/projectile/SplashPotion.php:						foreach($this->getPotionEffects() as $effect){
src/pocketmine/entity/projectile/SplashPotion.php:							if(!$effect->getType()->isInstantEffect()){
src/pocketmine/entity/projectile/SplashPotion.php:								$newDuration = (int) round($effect->getDuration() * 0.75 * $distanceMultiplier);
src/pocketmine/entity/projectile/SplashPotion.php:								$effect->setDuration($newDuration);
src/pocketmine/entity/projectile/SplashPotion.php:								$entity->addEffect($effect);
src/pocketmine/entity/projectile/SplashPotion.php:								$effect->getType()->applyEffect($entity, $effect, $distanceMultiplier, $this, $this->getOwningEntity());
src/pocketmine/entity/projectile/SplashPotion.php:		}elseif($event instanceof ProjectileHitBlockEvent and $this->getPotionId() === Potion::WATER){
src/pocketmine/entity/projectile/SplashPotion.php:			$blockIn = $event->getBlockHit()->getSide($event->getRayTraceResult()->getHitFace());
src/pocketmine/entity/projectile/SplashPotion.php:			if($blockIn->getId() === Block::FIRE){
src/pocketmine/entity/projectile/SplashPotion.php:				$this->level->setBlock($blockIn, BlockFactory::get(Block::AIR));
src/pocketmine/entity/projectile/SplashPotion.php:			foreach($blockIn->getHorizontalSides() as $horizontalSide){
src/pocketmine/entity/projectile/SplashPotion.php:				if($horizontalSide->getId() === Block::FIRE){
src/pocketmine/entity/projectile/SplashPotion.php:					$this->level->setBlock($horizontalSide, BlockFactory::get(Block::AIR));
src/pocketmine/entity/projectile/SplashPotion.php:		return $this->propertyManager->getShort(self::DATA_POTION_AUX_VALUE) ?? 0;
src/pocketmine/entity/projectile/SplashPotion.php:		$this->propertyManager->setShort(self::DATA_POTION_AUX_VALUE, $id);
src/pocketmine/entity/projectile/SplashPotion.php:	 * Returns whether this splash potion will create an area-effect cloud when it lands.
src/pocketmine/entity/projectile/SplashPotion.php:		return $this->getDataFlag(self::DATA_FLAGS, self::DATA_FLAG_LINGER);
src/pocketmine/entity/projectile/SplashPotion.php:	 * Sets whether this splash potion will create an area-effect-cloud when it lands.
src/pocketmine/entity/projectile/SplashPotion.php:		$this->setDataFlag(self::DATA_FLAGS, self::DATA_FLAG_LINGER, $value);
src/pocketmine/entity/projectile/SplashPotion.php:		return Potion::getPotionEffectsById($this->getPotionId());
src/pocketmine/entity/projectile/EnderPearl.php:		$owner = $this->getOwningEntity();
src/pocketmine/entity/projectile/EnderPearl.php:			$this->level->broadcastLevelEvent($owner, LevelEventPacket::EVENT_PARTICLE_ENDERMAN_TELEPORT);
src/pocketmine/entity/projectile/EnderPearl.php:			$this->level->addSound(new EndermanTeleportSound($owner));
src/pocketmine/entity/projectile/EnderPearl.php:			$owner->teleport($event->getRayTraceResult()->getHitVector());
src/pocketmine/entity/projectile/EnderPearl.php:			$this->level->addSound(new EndermanTeleportSound($owner));
src/pocketmine/entity/projectile/EnderPearl.php:			$owner->attack(new EntityDamageEvent($owner, EntityDamageEvent::CAUSE_FALL, 5));
src/pocketmine/entity/projectile/Projectile.php:			$this->setOwningEntity($shootingEntity);
src/pocketmine/entity/projectile/Projectile.php:		if($source->getCause() === EntityDamageEvent::CAUSE_VOID){
src/pocketmine/entity/projectile/Projectile.php:		$this->setMaxHealth(1);
src/pocketmine/entity/projectile/Projectile.php:		$this->setHealth(1);
src/pocketmine/entity/projectile/Projectile.php:		$this->damage = $this->namedtag->getDouble("damage", $this->damage);
src/pocketmine/entity/projectile/Projectile.php:			if($this->namedtag->hasTag("tileX", IntTag::class) and $this->namedtag->hasTag("tileY", IntTag::class) and $this->namedtag->hasTag("tileZ", IntTag::class)){
src/pocketmine/entity/projectile/Projectile.php:				$blockHit = new Vector3($this->namedtag->getInt("tileX"), $this->namedtag->getInt("tileY"), $this->namedtag->getInt("tileZ"));
src/pocketmine/entity/projectile/Projectile.php:			if($this->namedtag->hasTag("blockId", IntTag::class)){
src/pocketmine/entity/projectile/Projectile.php:				$blockId = $this->namedtag->getInt("blockId");
src/pocketmine/entity/projectile/Projectile.php:			if($this->namedtag->hasTag("blockData", ByteTag::class)){
src/pocketmine/entity/projectile/Projectile.php:				$blockData = $this->namedtag->getByte("blockData");
src/pocketmine/entity/projectile/Projectile.php:			$this->blockHit = $blockHit;
src/pocketmine/entity/projectile/Projectile.php:			$this->blockHitId = $blockId;
src/pocketmine/entity/projectile/Projectile.php:			$this->blockHitData = $blockData;
src/pocketmine/entity/projectile/Projectile.php:		return $entity instanceof Living and !$this->onGround;
src/pocketmine/entity/projectile/Projectile.php:		return $this->damage;
src/pocketmine/entity/projectile/Projectile.php:		$this->damage = $damage;
src/pocketmine/entity/projectile/Projectile.php:		return (int) ceil($this->motion->length() * $this->damage);
src/pocketmine/entity/projectile/Projectile.php:		$this->namedtag->setDouble("damage", $this->damage);
src/pocketmine/entity/projectile/Projectile.php:		if($this->blockHit !== null){
src/pocketmine/entity/projectile/Projectile.php:			$this->namedtag->setInt("tileX", $this->blockHit->x);
src/pocketmine/entity/projectile/Projectile.php:			$this->namedtag->setInt("tileY", $this->blockHit->y);
src/pocketmine/entity/projectile/Projectile.php:			$this->namedtag->setInt("tileZ", $this->blockHit->z);
src/pocketmine/entity/projectile/Projectile.php:			$this->namedtag->setInt("blockId", $this->blockHitId);
src/pocketmine/entity/projectile/Projectile.php:			$this->namedtag->setByte("blockData", $this->blockHitData);
src/pocketmine/entity/projectile/Projectile.php:		if($this->blockHit !== null){
src/pocketmine/entity/projectile/Projectile.php:			$blockIn = $this->level->getBlockAt($this->blockHit->x, $this->blockHit->y, $this->blockHit->z);
src/pocketmine/entity/projectile/Projectile.php:			if($blockIn->getId() !== $this->blockHitId or $blockIn->getDamage() !== $this->blockHitData){
src/pocketmine/entity/projectile/Projectile.php:				$this->blockHit = $this->blockHitId = $this->blockHitData = null;
src/pocketmine/entity/projectile/Projectile.php:		return $this->blockHit === null and parent::hasMovementUpdate();
src/pocketmine/entity/projectile/Projectile.php:		$this->blocksAround = null;
src/pocketmine/entity/projectile/Projectile.php:		Timings::$entityMoveTimer->startTiming();
src/pocketmine/entity/projectile/Projectile.php:		$start = $this->asVector3();
src/pocketmine/entity/projectile/Projectile.php:		$end = $start->add($this->motion);
src/pocketmine/entity/projectile/Projectile.php:			$block = $this->level->getBlockAt($vector3->x, $vector3->y, $vector3->z);
src/pocketmine/entity/projectile/Projectile.php:			$blockHitResult = $this->calculateInterceptWithBlock($block, $start, $end);
src/pocketmine/entity/projectile/Projectile.php:				$end = $blockHitResult->hitVector;
src/pocketmine/entity/projectile/Projectile.php:		$newDiff = $end->subtract($start);
src/pocketmine/entity/projectile/Projectile.php:		foreach($this->level->getCollidingEntities($this->boundingBox->addCoord($newDiff->x, $newDiff->y, $newDiff->z)->expand(1, 1, 1), $this) as $entity){
src/pocketmine/entity/projectile/Projectile.php:			if($entity->getId() === $this->getOwningEntityId() and $this->ticksLived < 5){
src/pocketmine/entity/projectile/Projectile.php:			$entityBB = $entity->boundingBox->expandedCopy(0.3, 0.3, 0.3);
src/pocketmine/entity/projectile/Projectile.php:			$entityHitResult = $entityBB->calculateIntercept($start, $end);
src/pocketmine/entity/projectile/Projectile.php:			$distance = $this->distanceSquared($entityHitResult->hitVector);
src/pocketmine/entity/projectile/Projectile.php:				$end = $entityHitResult->hitVector;
src/pocketmine/entity/projectile/Projectile.php:		$this->x = $end->x;
src/pocketmine/entity/projectile/Projectile.php:		$this->y = $end->y;
src/pocketmine/entity/projectile/Projectile.php:		$this->z = $end->z;
src/pocketmine/entity/projectile/Projectile.php:		$this->recalculateBoundingBox();
src/pocketmine/entity/projectile/Projectile.php:				$ev->call();
src/pocketmine/entity/projectile/Projectile.php:				$this->onHit($ev);
src/pocketmine/entity/projectile/Projectile.php:					$this->onHitEntity($ev->getEntityHit(), $ev->getRayTraceResult());
src/pocketmine/entity/projectile/Projectile.php:					$this->onHitBlock($ev->getBlockHit(), $ev->getRayTraceResult());
src/pocketmine/entity/projectile/Projectile.php:			$this->isCollided = $this->onGround = true;
src/pocketmine/entity/projectile/Projectile.php:			$this->motion->x = $this->motion->y = $this->motion->z = 0;
src/pocketmine/entity/projectile/Projectile.php:			$this->isCollided = $this->onGround = false;
src/pocketmine/entity/projectile/Projectile.php:			$this->blockHit = $this->blockHitId = $this->blockHitData = null;
src/pocketmine/entity/projectile/Projectile.php:			$f = sqrt(($this->motion->x ** 2) + ($this->motion->z ** 2));
src/pocketmine/entity/projectile/Projectile.php:			$this->yaw = (atan2($this->motion->x, $this->motion->z) * 180 / M_PI);
src/pocketmine/entity/projectile/Projectile.php:			$this->pitch = (atan2($this->motion->y, $f) * 180 / M_PI);
src/pocketmine/entity/projectile/Projectile.php:		$this->checkChunks();
src/pocketmine/entity/projectile/Projectile.php:		$this->checkBlockCollision();
src/pocketmine/entity/projectile/Projectile.php:		Timings::$entityMoveTimer->stopTiming();
src/pocketmine/entity/projectile/Projectile.php:	 * some projectiles collide with any non-air block).
src/pocketmine/entity/projectile/Projectile.php:		return $block->calculateIntercept($start, $end);
src/pocketmine/entity/projectile/Projectile.php:	 * Called when the projectile hits something. Override this to perform non-target-specific effects when the
src/pocketmine/entity/projectile/Projectile.php:		$damage = $this->getResultDamage();
src/pocketmine/entity/projectile/Projectile.php:			if($this->getOwningEntity() === null){
src/pocketmine/entity/projectile/Projectile.php:				$ev = new EntityDamageByChildEntityEvent($this->getOwningEntity(), $this, $entityHit, EntityDamageEvent::CAUSE_PROJECTILE, $damage);
src/pocketmine/entity/projectile/Projectile.php:			$entityHit->attack($ev);
src/pocketmine/entity/projectile/Projectile.php:			if($this->isOnFire()){
src/pocketmine/entity/projectile/Projectile.php:				$ev->call();
src/pocketmine/entity/projectile/Projectile.php:				if(!$ev->isCancelled()){
src/pocketmine/entity/projectile/Projectile.php:					$entityHit->setOnFire($ev->getDuration());
src/pocketmine/entity/projectile/Projectile.php:		$this->flagForDespawn();
src/pocketmine/entity/projectile/Projectile.php:		$this->blockHit = $blockHit->asVector3();
src/pocketmine/entity/projectile/Projectile.php:		$this->blockHitId = $blockHit->getId();
src/pocketmine/entity/projectile/Projectile.php:		$this->blockHitData = $blockHit->getDamage();
src/pocketmine/entity/projectile/Egg.php:			$this->level->addParticle(new ItemBreakParticle($this, ItemFactory::get(Item::EGG)));
src/pocketmine/entity/object/PrimedTNT.php:		if($source->getCause() === EntityDamageEvent::CAUSE_VOID){
src/pocketmine/entity/object/PrimedTNT.php:		if($this->namedtag->hasTag("Fuse", ShortTag::class)){
src/pocketmine/entity/object/PrimedTNT.php:			$this->fuse = $this->namedtag->getShort("Fuse");
src/pocketmine/entity/object/PrimedTNT.php:			$this->fuse = 80;
src/pocketmine/entity/object/PrimedTNT.php:		$this->setGenericFlag(self::DATA_FLAG_IGNITED, true);
src/pocketmine/entity/object/PrimedTNT.php:		$this->propertyManager->setInt(self::DATA_FUSE_LENGTH, $this->fuse);
src/pocketmine/entity/object/PrimedTNT.php:		$this->level->broadcastLevelEvent($this, LevelEventPacket::EVENT_SOUND_IGNITE);
src/pocketmine/entity/object/PrimedTNT.php:		$this->namedtag->setShort("Fuse", $this->fuse, true); //older versions incorrectly saved this as a byte
src/pocketmine/entity/object/PrimedTNT.php:		if($this->closed){
src/pocketmine/entity/object/PrimedTNT.php:		if($this->fuse % 5 === 0){ //don't spam it every tick, it's not necessary
src/pocketmine/entity/object/PrimedTNT.php:			$this->propertyManager->setInt(self::DATA_FUSE_LENGTH, $this->fuse);
src/pocketmine/entity/object/PrimedTNT.php:		if(!$this->isFlaggedForDespawn()){
src/pocketmine/entity/object/PrimedTNT.php:			$this->fuse -= $tickDiff;
src/pocketmine/entity/object/PrimedTNT.php:			if($this->fuse <= 0){
src/pocketmine/entity/object/PrimedTNT.php:				$this->flagForDespawn();
src/pocketmine/entity/object/PrimedTNT.php:				$this->explode();
src/pocketmine/entity/object/PrimedTNT.php:		return $hasUpdate or $this->fuse >= 0;
src/pocketmine/entity/object/PrimedTNT.php:		$ev->call();
src/pocketmine/entity/object/PrimedTNT.php:		if(!$ev->isCancelled()){
src/pocketmine/entity/object/PrimedTNT.php:			$explosion = new Explosion(Position::fromObject($this->add(0, $this->height / 2, 0), $this->level), $ev->getForce(), $this);
src/pocketmine/entity/object/PrimedTNT.php:			if($ev->isBlockBreaking()){
src/pocketmine/entity/object/PrimedTNT.php:				$explosion->explodeA();
src/pocketmine/entity/object/PrimedTNT.php:			$explosion->explodeB();
src/pocketmine/entity/object/ExperienceOrb.php:			$amount -= $size;
src/pocketmine/entity/object/ExperienceOrb.php:		$this->age = $this->namedtag->getShort("Age", 0);
src/pocketmine/entity/object/ExperienceOrb.php:		if($this->namedtag->hasTag(self::TAG_VALUE_PC, ShortTag::class)){ //PC
src/pocketmine/entity/object/ExperienceOrb.php:			$value = $this->namedtag->getShort(self::TAG_VALUE_PC);
src/pocketmine/entity/object/ExperienceOrb.php:		}elseif($this->namedtag->hasTag(self::TAG_VALUE_PE, IntTag::class)){ //PE save format
src/pocketmine/entity/object/ExperienceOrb.php:			$value = $this->namedtag->getInt(self::TAG_VALUE_PE);
src/pocketmine/entity/object/ExperienceOrb.php:		$this->setXpValue($value);
src/pocketmine/entity/object/ExperienceOrb.php:		$this->namedtag->setShort("Age", $this->age);
src/pocketmine/entity/object/ExperienceOrb.php:		$this->namedtag->setShort(self::TAG_VALUE_PC, $this->getXpValue());
src/pocketmine/entity/object/ExperienceOrb.php:		$this->namedtag->setInt(self::TAG_VALUE_PE, $this->getXpValue());
src/pocketmine/entity/object/ExperienceOrb.php:		return $this->propertyManager->getInt(self::DATA_EXPERIENCE_VALUE) ?? 0;
src/pocketmine/entity/object/ExperienceOrb.php:		$this->propertyManager->setInt(self::DATA_EXPERIENCE_VALUE, $amount);
src/pocketmine/entity/object/ExperienceOrb.php:		return $this->targetPlayerRuntimeId !== null;
src/pocketmine/entity/object/ExperienceOrb.php:		if($this->targetPlayerRuntimeId === null){
src/pocketmine/entity/object/ExperienceOrb.php:		$entity = $this->level->getEntity($this->targetPlayerRuntimeId);
src/pocketmine/entity/object/ExperienceOrb.php:		$this->targetPlayerRuntimeId = $player !== null ? $player->getId() : null;
src/pocketmine/entity/object/ExperienceOrb.php:		$this->age += $tickDiff;
src/pocketmine/entity/object/ExperienceOrb.php:		if($this->age > 6000){
src/pocketmine/entity/object/ExperienceOrb.php:			$this->flagForDespawn();
src/pocketmine/entity/object/ExperienceOrb.php:		$currentTarget = $this->getTargetPlayer();
src/pocketmine/entity/object/ExperienceOrb.php:		if($currentTarget !== null and (!$currentTarget->isAlive() or $currentTarget->distanceSquared($this) > self::MAX_TARGET_DISTANCE ** 2)){
src/pocketmine/entity/object/ExperienceOrb.php:		if($this->lookForTargetTime >= 20){
src/pocketmine/entity/object/ExperienceOrb.php:				$newTarget = $this->level->getNearestEntity($this, self::MAX_TARGET_DISTANCE, Human::class);
src/pocketmine/entity/object/ExperienceOrb.php:				if($newTarget instanceof Human and !($newTarget instanceof Player and $newTarget->isSpectator())){
src/pocketmine/entity/object/ExperienceOrb.php:			$this->lookForTargetTime = 0;
src/pocketmine/entity/object/ExperienceOrb.php:			$this->lookForTargetTime += $tickDiff;
src/pocketmine/entity/object/ExperienceOrb.php:		$this->setTargetPlayer($currentTarget);
src/pocketmine/entity/object/ExperienceOrb.php:			$vector = $currentTarget->add(0, $currentTarget->getEyeHeight() / 2, 0)->subtract($this)->divide(self::MAX_TARGET_DISTANCE);
src/pocketmine/entity/object/ExperienceOrb.php:			$distance = $vector->lengthSquared();
src/pocketmine/entity/object/ExperienceOrb.php:				$diff = $vector->normalize()->multiply(0.2 * (1 - sqrt($distance)) ** 2);
src/pocketmine/entity/object/ExperienceOrb.php:				$this->motion->x += $diff->x;
src/pocketmine/entity/object/ExperienceOrb.php:				$this->motion->y += $diff->y;
src/pocketmine/entity/object/ExperienceOrb.php:				$this->motion->z += $diff->z;
src/pocketmine/entity/object/ExperienceOrb.php:			if($currentTarget->canPickupXp() and $this->boundingBox->intersectsWith($currentTarget->getBoundingBox())){
src/pocketmine/entity/object/ExperienceOrb.php:				$this->flagForDespawn();
src/pocketmine/entity/object/ExperienceOrb.php:				$currentTarget->onPickupXp($this->getXpValue());
src/pocketmine/entity/object/ExperienceOrb.php:		$this->checkObstruction($this->x, $this->y, $this->z);
src/pocketmine/entity/object/ItemEntity.php:		$this->setMaxHealth(5);
src/pocketmine/entity/object/ItemEntity.php:		$this->setHealth($this->namedtag->getShort("Health", (int) $this->getHealth()));
src/pocketmine/entity/object/ItemEntity.php:		$this->age = $this->namedtag->getShort("Age", $this->age);
src/pocketmine/entity/object/ItemEntity.php:		$this->pickupDelay = $this->namedtag->getShort("PickupDelay", $this->pickupDelay);
src/pocketmine/entity/object/ItemEntity.php:		$this->owner = $this->namedtag->getString("Owner", $this->owner);
src/pocketmine/entity/object/ItemEntity.php:		$this->thrower = $this->namedtag->getString("Thrower", $this->thrower);
src/pocketmine/entity/object/ItemEntity.php:		$itemTag = $this->namedtag->getCompoundTag("Item");
src/pocketmine/entity/object/ItemEntity.php:		$this->item = Item::nbtDeserialize($itemTag);
src/pocketmine/entity/object/ItemEntity.php:		if($this->item->isNull()){
src/pocketmine/entity/object/ItemEntity.php:		(new ItemSpawnEvent($this))->call();
src/pocketmine/entity/object/ItemEntity.php:		if($this->closed){
src/pocketmine/entity/object/ItemEntity.php:		if(!$this->isFlaggedForDespawn() and $this->pickupDelay > -1 and $this->pickupDelay < 32767){ //Infinite delay
src/pocketmine/entity/object/ItemEntity.php:			$this->pickupDelay -= $tickDiff;
src/pocketmine/entity/object/ItemEntity.php:			if($this->pickupDelay < 0){
src/pocketmine/entity/object/ItemEntity.php:				$this->pickupDelay = 0;
src/pocketmine/entity/object/ItemEntity.php:			$this->age += $tickDiff;
src/pocketmine/entity/object/ItemEntity.php:			if($this->age > 6000){
src/pocketmine/entity/object/ItemEntity.php:				$ev->call();
src/pocketmine/entity/object/ItemEntity.php:				if($ev->isCancelled()){
src/pocketmine/entity/object/ItemEntity.php:					$this->age = 0;
src/pocketmine/entity/object/ItemEntity.php:					$this->flagForDespawn();
src/pocketmine/entity/object/ItemEntity.php:		$this->checkObstruction($this->x, $this->y, $this->z);
src/pocketmine/entity/object/ItemEntity.php:		$this->namedtag->setTag($this->item->nbtSerialize(-1, "Item"));
src/pocketmine/entity/object/ItemEntity.php:		$this->namedtag->setShort("Health", (int) $this->getHealth());
src/pocketmine/entity/object/ItemEntity.php:		$this->namedtag->setShort("Age", $this->age);
src/pocketmine/entity/object/ItemEntity.php:		$this->namedtag->setShort("PickupDelay", $this->pickupDelay);
src/pocketmine/entity/object/ItemEntity.php:		if($this->owner !== null){
src/pocketmine/entity/object/ItemEntity.php:			$this->namedtag->setString("Owner", $this->owner);
src/pocketmine/entity/object/ItemEntity.php:		if($this->thrower !== null){
src/pocketmine/entity/object/ItemEntity.php:			$this->namedtag->setString("Thrower", $this->thrower);
src/pocketmine/entity/object/ItemEntity.php:		return $this->item;
src/pocketmine/entity/object/ItemEntity.php:		return $this->pickupDelay;
src/pocketmine/entity/object/ItemEntity.php:		$this->pickupDelay = $delay;
src/pocketmine/entity/object/ItemEntity.php:		return $this->owner;
src/pocketmine/entity/object/ItemEntity.php:		$this->owner = $owner;
src/pocketmine/entity/object/ItemEntity.php:		return $this->thrower;
src/pocketmine/entity/object/ItemEntity.php:		$this->thrower = $thrower;
src/pocketmine/entity/object/ItemEntity.php:		$pk->entityRuntimeId = $this->getId();
src/pocketmine/entity/object/ItemEntity.php:		$pk->position = $this->asVector3();
src/pocketmine/entity/object/ItemEntity.php:		$pk->motion = $this->getMotion();
src/pocketmine/entity/object/ItemEntity.php:		$pk->item = $this->getItem();
src/pocketmine/entity/object/ItemEntity.php:		$pk->metadata = $this->propertyManager->getAll();
src/pocketmine/entity/object/ItemEntity.php:		$player->dataPacket($pk);
src/pocketmine/entity/object/ItemEntity.php:		if($this->getPickupDelay() !== 0){
src/pocketmine/entity/object/ItemEntity.php:		$item = $this->getItem();
src/pocketmine/entity/object/ItemEntity.php:		$playerInventory = $player->getInventory();
src/pocketmine/entity/object/ItemEntity.php:		if($player->isSurvival() and !$playerInventory->canAddItem($item)){
src/pocketmine/entity/object/ItemEntity.php:		$ev->call();
src/pocketmine/entity/object/ItemEntity.php:		if($ev->isCancelled()){
src/pocketmine/entity/object/ItemEntity.php:		switch($item->getId()){
src/pocketmine/entity/object/ItemEntity.php:				$player->awardAchievement("mineWood");
src/pocketmine/entity/object/ItemEntity.php:				$player->awardAchievement("diamond");
src/pocketmine/entity/object/ItemEntity.php:		$pk->eid = $player->getId();
src/pocketmine/entity/object/ItemEntity.php:		$pk->target = $this->getId();
src/pocketmine/entity/object/ItemEntity.php:		$this->server->broadcastPacket($this->getViewers(), $pk);
src/pocketmine/entity/object/ItemEntity.php:		$playerInventory->addItem(clone $item);
src/pocketmine/entity/object/ItemEntity.php:		$this->flagForDespawn();
src/pocketmine/entity/object/PaintingMotive.php:		self::$motives[$motive->getName()] = $motive;
src/pocketmine/entity/object/PaintingMotive.php:		$this->name = $name;
src/pocketmine/entity/object/PaintingMotive.php:		$this->width = $width;
src/pocketmine/entity/object/PaintingMotive.php:		$this->height = $height;
src/pocketmine/entity/object/PaintingMotive.php:		return $this->name;
src/pocketmine/entity/object/PaintingMotive.php:		return $this->width;
src/pocketmine/entity/object/PaintingMotive.php:		return $this->height;
src/pocketmine/entity/object/PaintingMotive.php:		return "PaintingMotive(name: " . $this->getName() . ", height: " . $this->getHeight() . ", width: " . $this->getWidth() . ")";
src/pocketmine/entity/object/FallingBlock.php:		if($this->namedtag->hasTag("TileID", IntTag::class)){
src/pocketmine/entity/object/FallingBlock.php:			$blockId = $this->namedtag->getInt("TileID");
src/pocketmine/entity/object/FallingBlock.php:		}elseif($this->namedtag->hasTag("Tile", ByteTag::class)){
src/pocketmine/entity/object/FallingBlock.php:			$blockId = $this->namedtag->getByte("Tile");
src/pocketmine/entity/object/FallingBlock.php:			$this->namedtag->removeTag("Tile");
src/pocketmine/entity/object/FallingBlock.php:		$damage = $this->namedtag->getByte("Data", 0);
src/pocketmine/entity/object/FallingBlock.php:		$this->block = BlockFactory::get($blockId, $damage);
src/pocketmine/entity/object/FallingBlock.php:		$this->propertyManager->setInt(self::DATA_VARIANT, $this->block->getRuntimeId());
src/pocketmine/entity/object/FallingBlock.php:		if($source->getCause() === EntityDamageEvent::CAUSE_VOID){
src/pocketmine/entity/object/FallingBlock.php:		if($this->closed){
src/pocketmine/entity/object/FallingBlock.php:		if(!$this->isFlaggedForDespawn()){
src/pocketmine/entity/object/FallingBlock.php:			$pos = Position::fromObject($this->add(-$this->width / 2, $this->height, -$this->width / 2)->floor(), $this->getLevelNonNull());
src/pocketmine/entity/object/FallingBlock.php:			$this->block->position($pos);
src/pocketmine/entity/object/FallingBlock.php:			if($this->block instanceof Fallable){
src/pocketmine/entity/object/FallingBlock.php:				$blockTarget = $this->block->tickFalling();
src/pocketmine/entity/object/FallingBlock.php:			if($this->onGround or $blockTarget !== null){
src/pocketmine/entity/object/FallingBlock.php:				$this->flagForDespawn();
src/pocketmine/entity/object/FallingBlock.php:				$block = $this->level->getBlock($pos);
src/pocketmine/entity/object/FallingBlock.php:				if(!$block->canBeReplaced() or ($this->onGround and abs($this->y - $this->getFloorY()) > 0.001)){
src/pocketmine/entity/object/FallingBlock.php:					$this->getLevelNonNull()->dropItem($this, ItemFactory::get($this->getBlock(), $this->getDamage()));
src/pocketmine/entity/object/FallingBlock.php:					$ev = new EntityBlockChangeEvent($this, $block, $blockTarget ?? $this->block);
src/pocketmine/entity/object/FallingBlock.php:					$ev->call();
src/pocketmine/entity/object/FallingBlock.php:					if(!$ev->isCancelled()){
src/pocketmine/entity/object/FallingBlock.php:						$this->getLevelNonNull()->setBlock($pos, $ev->getTo(), true);
src/pocketmine/entity/object/FallingBlock.php:		return $this->block->getId();
src/pocketmine/entity/object/FallingBlock.php:		return $this->block->getDamage();
src/pocketmine/entity/object/FallingBlock.php:		$this->namedtag->setInt("TileID", $this->block->getId(), true);
src/pocketmine/entity/object/FallingBlock.php:		$this->namedtag->setByte("Data", $this->block->getDamage());
src/pocketmine/entity/object/Painting.php:		$this->motive = $nbt->getString("Motive");
src/pocketmine/entity/object/Painting.php:		$this->blockIn = new Vector3($nbt->getInt("TileX"), $nbt->getInt("TileY"), $nbt->getInt("TileZ"));
src/pocketmine/entity/object/Painting.php:		if($nbt->hasTag("Direction", ByteTag::class)){
src/pocketmine/entity/object/Painting.php:			$this->direction = $nbt->getByte("Direction");
src/pocketmine/entity/object/Painting.php:		}elseif($nbt->hasTag("Facing", ByteTag::class)){
src/pocketmine/entity/object/Painting.php:			$this->direction = $nbt->getByte("Facing");
src/pocketmine/entity/object/Painting.php:		$this->setMaxHealth(1);
src/pocketmine/entity/object/Painting.php:		$this->setHealth(1);
src/pocketmine/entity/object/Painting.php:		$this->namedtag->setInt("TileX", (int) $this->blockIn->x);
src/pocketmine/entity/object/Painting.php:		$this->namedtag->setInt("TileY", (int) $this->blockIn->y);
src/pocketmine/entity/object/Painting.php:		$this->namedtag->setInt("TileZ", (int) $this->blockIn->z);
src/pocketmine/entity/object/Painting.php:		$this->namedtag->setByte("Facing", $this->direction);
src/pocketmine/entity/object/Painting.php:		$this->namedtag->setByte("Direction", $this->direction); //Save both for full compatibility
src/pocketmine/entity/object/Painting.php:		$this->namedtag->setString("Motive", $this->motive);
src/pocketmine/entity/object/Painting.php:		if(!$this->isAlive()){
src/pocketmine/entity/object/Painting.php:		if($this->lastDamageCause instanceof EntityDamageByEntityEvent){
src/pocketmine/entity/object/Painting.php:			$killer = $this->lastDamageCause->getDamager();
src/pocketmine/entity/object/Painting.php:			if($killer instanceof Player and $killer->isCreative()){
src/pocketmine/entity/object/Painting.php:			//non-living entities don't have a way to create drops generically yet
src/pocketmine/entity/object/Painting.php:			$this->level->dropItem($this, ItemFactory::get(Item::PAINTING));
src/pocketmine/entity/object/Painting.php:		$this->level->addParticle(new DestroyBlockParticle($this->add(0.5, 0.5, 0.5), BlockFactory::get(Block::PLANKS)));
src/pocketmine/entity/object/Painting.php:		$facing = $directions[$this->direction];
src/pocketmine/entity/object/Painting.php:		$this->boundingBox->setBB(self::getPaintingBB($this->blockIn->getSide($facing), $facing, $this->getMotive()));
src/pocketmine/entity/object/Painting.php:		$face = $directions[$this->direction];
src/pocketmine/entity/object/Painting.php:		if(!self::canFit($this->level, $this->blockIn->getSide($face), $face, false, $this->getMotive())){
src/pocketmine/entity/object/Painting.php:			$this->kill();
src/pocketmine/entity/object/Painting.php:		$pk->entityRuntimeId = $this->getId();
src/pocketmine/entity/object/Painting.php:		$pk->position = new Vector3(
src/pocketmine/entity/object/Painting.php:			($this->boundingBox->minX + $this->boundingBox->maxX) / 2,
src/pocketmine/entity/object/Painting.php:			($this->boundingBox->minY + $this->boundingBox->maxY) / 2,
src/pocketmine/entity/object/Painting.php:			($this->boundingBox->minZ + $this->boundingBox->maxZ) / 2
src/pocketmine/entity/object/Painting.php:		$pk->direction = $this->direction;
src/pocketmine/entity/object/Painting.php:		$pk->title = $this->motive;
src/pocketmine/entity/object/Painting.php:		$player->dataPacket($pk);
src/pocketmine/entity/object/Painting.php:		return PaintingMotive::getMotiveByName($this->motive);
src/pocketmine/entity/object/Painting.php:		return $this->direction;
src/pocketmine/entity/object/Painting.php:	 * Returns the bounding-box a painting with the specified motive would have at the given position and direction.
src/pocketmine/entity/object/Painting.php:		$width = $motive->getWidth();
src/pocketmine/entity/object/Painting.php:		$height = $motive->getHeight();
src/pocketmine/entity/object/Painting.php:		$horizontalStart = (int) (ceil($width / 2) - 1);
src/pocketmine/entity/object/Painting.php:		$verticalStart = (int) (ceil($height / 2) - 1);
src/pocketmine/entity/object/Painting.php:		$minY = -$verticalStart;
src/pocketmine/entity/object/Painting.php:				$minZ = 1 - $thickness;
src/pocketmine/entity/object/Painting.php:				$minX = $maxX - $width;
src/pocketmine/entity/object/Painting.php:				$minX = -$horizontalStart;
src/pocketmine/entity/object/Painting.php:				$minX = 1 - $thickness;
src/pocketmine/entity/object/Painting.php:				$minZ = -$horizontalStart;
src/pocketmine/entity/object/Painting.php:				$minZ = $maxZ - $width;
src/pocketmine/entity/object/Painting.php:			$blockIn->x + $minX,
src/pocketmine/entity/object/Painting.php:			$blockIn->y + $minY,
src/pocketmine/entity/object/Painting.php:			$blockIn->z + $minZ,
src/pocketmine/entity/object/Painting.php:			$blockIn->x + $maxX,
src/pocketmine/entity/object/Painting.php:			$blockIn->y + $maxY,
src/pocketmine/entity/object/Painting.php:			$blockIn->z + $maxZ
src/pocketmine/entity/object/Painting.php:		$width = $motive->getWidth();
src/pocketmine/entity/object/Painting.php:		$height = $motive->getHeight();
src/pocketmine/entity/object/Painting.php:		$horizontalStart = (int) (ceil($width / 2) - 1);
src/pocketmine/entity/object/Painting.php:		$verticalStart = (int) (ceil($height / 2) - 1);
src/pocketmine/entity/object/Painting.php:		$startPos = $blockIn->asVector3()->getSide(Vector3::getOppositeSide($rotatedFace), $horizontalStart)->getSide(Vector3::SIDE_DOWN, $verticalStart);
src/pocketmine/entity/object/Painting.php:				$pos = $startPos->getSide($rotatedFace, $w)->getSide(Vector3::SIDE_UP, $h);
src/pocketmine/entity/object/Painting.php:				$block = $level->getBlockAt($pos->x, $pos->y, $pos->z);
src/pocketmine/entity/object/Painting.php:				if($block->isSolid() or !$block->getSide($oppositeSide)->isSolid()){
src/pocketmine/entity/object/Painting.php:			foreach($level->getNearbyEntities($bb) as $entity){
src/pocketmine/entity/Living.php:		$this->armorInventory = new ArmorInventory($this);
src/pocketmine/entity/Living.php:		$this->armorInventory->setEventProcessor(new ArmorInventoryEventProcessor($this));
src/pocketmine/entity/Living.php:		if($this->namedtag->hasTag("HealF", FloatTag::class)){
src/pocketmine/entity/Living.php:			$health = $this->namedtag->getFloat("HealF");
src/pocketmine/entity/Living.php:			$this->namedtag->removeTag("HealF");
src/pocketmine/entity/Living.php:		}elseif($this->namedtag->hasTag("Health", ShortTag::class)){
src/pocketmine/entity/Living.php:			//Older versions of PocketMine-MP incorrectly saved this as a short instead of a float
src/pocketmine/entity/Living.php:			$health = $this->namedtag->getShort("Health");
src/pocketmine/entity/Living.php:			$this->namedtag->removeTag("Health");
src/pocketmine/entity/Living.php:			$health = $this->namedtag->getFloat("Health", $this->getMaxHealth());
src/pocketmine/entity/Living.php:		$this->setHealth($health);
src/pocketmine/entity/Living.php:		$activeEffectsTag = $this->namedtag->getListTag("ActiveEffects");
src/pocketmine/entity/Living.php:				$effect = Effect::getEffect($e->getByte("Id"));
src/pocketmine/entity/Living.php:				$this->addEffect(new EffectInstance(
src/pocketmine/entity/Living.php:					$e->getInt("Duration"),
src/pocketmine/entity/Living.php:					Binary::unsignByte($e->getByte("Amplifier")),
src/pocketmine/entity/Living.php:					$e->getByte("ShowParticles", 1) !== 0,
src/pocketmine/entity/Living.php:					$e->getByte("Ambient", 0) !== 0
src/pocketmine/entity/Living.php:		$this->attributeMap->addAttribute(Attribute::getAttribute(Attribute::HEALTH));
src/pocketmine/entity/Living.php:		$this->attributeMap->addAttribute(Attribute::getAttribute(Attribute::FOLLOW_RANGE));
src/pocketmine/entity/Living.php:		$this->attributeMap->addAttribute(Attribute::getAttribute(Attribute::KNOCKBACK_RESISTANCE));
src/pocketmine/entity/Living.php:		$this->attributeMap->addAttribute(Attribute::getAttribute(Attribute::MOVEMENT_SPEED));
src/pocketmine/entity/Living.php:		$this->attributeMap->addAttribute(Attribute::getAttribute(Attribute::ATTACK_DAMAGE));
src/pocketmine/entity/Living.php:		$this->attributeMap->addAttribute(Attribute::getAttribute(Attribute::ABSORPTION));
src/pocketmine/entity/Living.php:		$wasAlive = $this->isAlive();
src/pocketmine/entity/Living.php:		$this->attributeMap->getAttribute(Attribute::HEALTH)->setValue(ceil($this->getHealth()), true);
src/pocketmine/entity/Living.php:		if($this->isAlive() and !$wasAlive){
src/pocketmine/entity/Living.php:			$this->broadcastEntityEvent(ActorEventPacket::RESPAWN);
src/pocketmine/entity/Living.php:		return (int) $this->attributeMap->getAttribute(Attribute::HEALTH)->getMaxValue();
src/pocketmine/entity/Living.php:		$this->attributeMap->getAttribute(Attribute::HEALTH)->setMaxValue($amount)->setDefaultValue($amount);
src/pocketmine/entity/Living.php:		return $this->attributeMap->getAttribute(Attribute::ABSORPTION)->getValue();
src/pocketmine/entity/Living.php:		$this->attributeMap->getAttribute(Attribute::ABSORPTION)->setValue($absorption);
src/pocketmine/entity/Living.php:		$this->namedtag->setFloat("Health", $this->getHealth(), true);
src/pocketmine/entity/Living.php:		if(count($this->effects) > 0){
src/pocketmine/entity/Living.php:			foreach($this->effects as $effect){
src/pocketmine/entity/Living.php:					new ByteTag("Id", $effect->getId()),
src/pocketmine/entity/Living.php:					new ByteTag("Amplifier", Binary::signByte($effect->getAmplifier())),
src/pocketmine/entity/Living.php:					new IntTag("Duration", $effect->getDuration()),
src/pocketmine/entity/Living.php:					new ByteTag("Ambient", $effect->isAmbient() ? 1 : 0),
src/pocketmine/entity/Living.php:					new ByteTag("ShowParticles", $effect->isVisible() ? 1 : 0)
src/pocketmine/entity/Living.php:			$this->namedtag->setTag(new ListTag("ActiveEffects", $effects));
src/pocketmine/entity/Living.php:			$this->namedtag->removeTag("ActiveEffects");
src/pocketmine/entity/Living.php:		//return $this->getLevelNonNull()->rayTraceBlocks(Vector3::createVector($this->x, $this->y + $this->height, $this->z), Vector3::createVector($entity->x, $entity->y + $entity->height, $entity->z)) === null;
src/pocketmine/entity/Living.php:		return $this->effects;
src/pocketmine/entity/Living.php:		foreach($this->effects as $effect){
src/pocketmine/entity/Living.php:			$this->removeEffect($effect->getId());
src/pocketmine/entity/Living.php:		if(isset($this->effects[$effectId])){
src/pocketmine/entity/Living.php:			$effect = $this->effects[$effectId];
src/pocketmine/entity/Living.php:			$hasExpired = $effect->hasExpired();
src/pocketmine/entity/Living.php:			$ev->call();
src/pocketmine/entity/Living.php:			if($ev->isCancelled()){
src/pocketmine/entity/Living.php:				if($hasExpired and !$ev->getEffect()->hasExpired()){ //altered duration of an expired effect to make it not get removed
src/pocketmine/entity/Living.php:					$this->sendEffectAdd($ev->getEffect(), true);
src/pocketmine/entity/Living.php:			unset($this->effects[$effectId]);
src/pocketmine/entity/Living.php:			$effect->getType()->remove($this, $effect);
src/pocketmine/entity/Living.php:			$this->sendEffectRemove($effect);
src/pocketmine/entity/Living.php:			$this->recalculateEffectColor();
src/pocketmine/entity/Living.php:		return $this->effects[$effectId] ?? null;
src/pocketmine/entity/Living.php:		return isset($this->effects[$effectId]);
src/pocketmine/entity/Living.php:		return count($this->effects) > 0;
src/pocketmine/entity/Living.php:	 * If a weaker or equal-strength effect is already applied but has a shorter duration, it will be replaced.
src/pocketmine/entity/Living.php:		if(isset($this->effects[$effect->getId()])){
src/pocketmine/entity/Living.php:			$oldEffect = $this->effects[$effect->getId()];
src/pocketmine/entity/Living.php:				abs($effect->getAmplifier()) < $oldEffect->getAmplifier()
src/pocketmine/entity/Living.php:				or (abs($effect->getAmplifier()) === abs($oldEffect->getAmplifier()) and $effect->getDuration() < $oldEffect->getDuration())
src/pocketmine/entity/Living.php:		$ev->setCancelled($cancelled);
src/pocketmine/entity/Living.php:		$ev->call();
src/pocketmine/entity/Living.php:		if($ev->isCancelled()){
src/pocketmine/entity/Living.php:			$oldEffect->getType()->remove($this, $oldEffect);
src/pocketmine/entity/Living.php:		$effect->getType()->add($this, $effect);
src/pocketmine/entity/Living.php:		$this->sendEffectAdd($effect, $oldEffect !== null);
src/pocketmine/entity/Living.php:		$this->effects[$effect->getId()] = $effect;
src/pocketmine/entity/Living.php:		$this->recalculateEffectColor();
src/pocketmine/entity/Living.php:		foreach($this->effects as $effect){
src/pocketmine/entity/Living.php:			if($effect->isVisible() and $effect->getType()->hasBubbles()){
src/pocketmine/entity/Living.php:				$level = $effect->getEffectLevel();
src/pocketmine/entity/Living.php:				$color = $effect->getColor();
src/pocketmine/entity/Living.php:				if(!$effect->isAmbient()){
src/pocketmine/entity/Living.php:			$this->propertyManager->setInt(Entity::DATA_POTION_COLOR, Color::mix(...$colors)->toARGB());
src/pocketmine/entity/Living.php:			$this->propertyManager->setByte(Entity::DATA_POTION_AMBIENT, $ambient ? 1 : 0);
src/pocketmine/entity/Living.php:			$this->propertyManager->setInt(Entity::DATA_POTION_COLOR, 0);
src/pocketmine/entity/Living.php:			$this->propertyManager->setByte(Entity::DATA_POTION_AMBIENT, 0);
src/pocketmine/entity/Living.php:		foreach($this->effects as $effect){
src/pocketmine/entity/Living.php:			$pk->entityRuntimeId = $this->id;
src/pocketmine/entity/Living.php:			$pk->effectId = $effect->getId();
src/pocketmine/entity/Living.php:			$pk->amplifier = $effect->getAmplifier();
src/pocketmine/entity/Living.php:			$pk->particles = $effect->isVisible();
src/pocketmine/entity/Living.php:			$pk->duration = $effect->getDuration();
src/pocketmine/entity/Living.php:			$pk->eventId = MobEffectPacket::EVENT_ADD;
src/pocketmine/entity/Living.php:			$player->dataPacket($pk);
src/pocketmine/entity/Living.php:		if($consumable instanceof MaybeConsumable and !$consumable->canBeConsumed()){
src/pocketmine/entity/Living.php:		$this->applyConsumptionResults($consumable);
src/pocketmine/entity/Living.php:	 * Applies effects from consuming the object. This shouldn't do any can-consume checks (those are expected to be
src/pocketmine/entity/Living.php:		foreach($consumable->getAdditionalEffects() as $effect){
src/pocketmine/entity/Living.php:			$this->addEffect($effect);
src/pocketmine/entity/Living.php:		$consumable->onConsume($this);
src/pocketmine/entity/Living.php:		return $this->jumpVelocity + ($this->hasEffect(Effect::JUMP) ? ($this->getEffect(Effect::JUMP)->getEffectLevel() / 10) : 0);
src/pocketmine/entity/Living.php:		if($this->onGround){
src/pocketmine/entity/Living.php:			$this->motion->y = $this->getJumpVelocity(); //Y motion should already be 0 if we're jumping from the ground.
src/pocketmine/entity/Living.php:		$damage = ceil($fallDistance - 3 - ($this->hasEffect(Effect::JUMP) ? $this->getEffect(Effect::JUMP)->getEffectLevel() : 0));
src/pocketmine/entity/Living.php:			$this->attack($ev);
src/pocketmine/entity/Living.php:		foreach($this->armorInventory->getContents() as $item){
src/pocketmine/entity/Living.php:			$total += $item->getDefensePoints();
src/pocketmine/entity/Living.php:		foreach($this->armorInventory->getContents() as $item){
src/pocketmine/entity/Living.php:			$result = max($result, $item->getEnchantmentLevel($enchantmentId));
src/pocketmine/entity/Living.php:		return $this->armorInventory;
src/pocketmine/entity/Living.php:		parent::setOnFire($seconds - (int) min($seconds, $seconds * $this->getHighestArmorEnchantmentLevel(Enchantment::FIRE_PROTECTION) * 0.15));
src/pocketmine/entity/Living.php:		if($this->lastDamageCause !== null and $this->attackTime > 0){
src/pocketmine/entity/Living.php:			if($this->lastDamageCause->getBaseDamage() >= $source->getBaseDamage()){
src/pocketmine/entity/Living.php:				$source->setCancelled();
src/pocketmine/entity/Living.php:			$source->setModifier(-$this->lastDamageCause->getBaseDamage(), EntityDamageEvent::MODIFIER_PREVIOUS_DAMAGE_COOLDOWN);
src/pocketmine/entity/Living.php:		if($source->canBeReducedByArmor()){
src/pocketmine/entity/Living.php:			//MCPE uses the same system as PC did pre-1.9
src/pocketmine/entity/Living.php:			$source->setModifier(-$source->getFinalDamage() * $this->getArmorPoints() * 0.04, EntityDamageEvent::MODIFIER_ARMOR);
src/pocketmine/entity/Living.php:		$cause = $source->getCause();
src/pocketmine/entity/Living.php:		if($this->hasEffect(Effect::DAMAGE_RESISTANCE) and $cause !== EntityDamageEvent::CAUSE_VOID and $cause !== EntityDamageEvent::CAUSE_SUICIDE){
src/pocketmine/entity/Living.php:			$source->setModifier(-$source->getFinalDamage() * min(1, 0.2 * $this->getEffect(Effect::DAMAGE_RESISTANCE)->getEffectLevel()), EntityDamageEvent::MODIFIER_RESISTANCE);
src/pocketmine/entity/Living.php:		foreach($this->armorInventory->getContents() as $item){
src/pocketmine/entity/Living.php:				$totalEpf += $item->getEnchantmentProtectionFactor($source);
src/pocketmine/entity/Living.php:		$source->setModifier(-$source->getFinalDamage() * min(ceil(min($totalEpf, 25) * (mt_rand(50, 100) / 100)), 20) * 0.04, EntityDamageEvent::MODIFIER_ARMOR_ENCHANTMENTS);
src/pocketmine/entity/Living.php:		$source->setModifier(-min($this->getAbsorption(), $source->getFinalDamage()), EntityDamageEvent::MODIFIER_ABSORPTION);
src/pocketmine/entity/Living.php:	 * Called after EntityDamageEvent execution to apply post-hurt effects, such as reducing absorption or modifying
src/pocketmine/entity/Living.php:		$this->setAbsorption(max(0, $this->getAbsorption() + $source->getModifier(EntityDamageEvent::MODIFIER_ABSORPTION)));
src/pocketmine/entity/Living.php:		$this->damageArmor($source->getBaseDamage());
src/pocketmine/entity/Living.php:			foreach($this->armorInventory->getContents() as $k => $item){
src/pocketmine/entity/Living.php:				if($item instanceof Armor and ($thornsLevel = $item->getEnchantmentLevel(Enchantment::THORNS)) > 0){
src/pocketmine/entity/Living.php:						$this->damageItem($item, 3);
src/pocketmine/entity/Living.php:						$damage += ($thornsLevel > 10 ? $thornsLevel - 10 : 1 + mt_rand(0, 3));
src/pocketmine/entity/Living.php:						$this->damageItem($item, 1); //thorns causes an extra +1 durability loss even if it didn't activate
src/pocketmine/entity/Living.php:					$this->armorInventory->setItem($k, $item);
src/pocketmine/entity/Living.php:				$source->getDamager()->attack(new EntityDamageByEntityEvent($this, $source->getDamager(), EntityDamageEvent::CAUSE_MAGIC, $damage));
src/pocketmine/entity/Living.php:		$armor = $this->armorInventory->getContents(true);
src/pocketmine/entity/Living.php:				$this->damageItem($item, $durabilityRemoved);
src/pocketmine/entity/Living.php:		$this->armorInventory->setContents($armor);
src/pocketmine/entity/Living.php:		$item->applyDamage($durabilityRemoved);
src/pocketmine/entity/Living.php:		if($item->isBroken()){
src/pocketmine/entity/Living.php:			$this->level->broadcastLevelSoundEvent($this, LevelSoundEventPacket::SOUND_BREAK);
src/pocketmine/entity/Living.php:		if($this->noDamageTicks > 0){
src/pocketmine/entity/Living.php:			$source->setCancelled();
src/pocketmine/entity/Living.php:		if($this->hasEffect(Effect::FIRE_RESISTANCE) and (
src/pocketmine/entity/Living.php:				$source->getCause() === EntityDamageEvent::CAUSE_FIRE
src/pocketmine/entity/Living.php:				or $source->getCause() === EntityDamageEvent::CAUSE_FIRE_TICK
src/pocketmine/entity/Living.php:				or $source->getCause() === EntityDamageEvent::CAUSE_LAVA
src/pocketmine/entity/Living.php:			$source->setCancelled();
src/pocketmine/entity/Living.php:		$this->applyDamageModifiers($source);
src/pocketmine/entity/Living.php:			$source->getCause() === EntityDamageEvent::CAUSE_BLOCK_EXPLOSION or
src/pocketmine/entity/Living.php:			$source->getCause() === EntityDamageEvent::CAUSE_ENTITY_EXPLOSION)
src/pocketmine/entity/Living.php:			$base = $source->getKnockBack();
src/pocketmine/entity/Living.php:			$source->setKnockBack($base - min($base, $base * $this->getHighestArmorEnchantmentLevel(Enchantment::BLAST_PROTECTION) * 0.15));
src/pocketmine/entity/Living.php:		if($source->isCancelled()){
src/pocketmine/entity/Living.php:		$this->attackTime = $source->getAttackCooldown();
src/pocketmine/entity/Living.php:			$e = $source->getChild();
src/pocketmine/entity/Living.php:				$motion = $e->getMotion();
src/pocketmine/entity/Living.php:				$this->knockBack($e, $source->getBaseDamage(), $motion->x, $motion->z, $source->getKnockBack());
src/pocketmine/entity/Living.php:			$e = $source->getDamager();
src/pocketmine/entity/Living.php:				$deltaX = $this->x - $e->x;
src/pocketmine/entity/Living.php:				$deltaZ = $this->z - $e->z;
src/pocketmine/entity/Living.php:				$this->knockBack($e, $source->getBaseDamage(), $deltaX, $deltaZ, $source->getKnockBack());
src/pocketmine/entity/Living.php:		if($this->isAlive()){
src/pocketmine/entity/Living.php:			$this->applyPostDamageEffects($source);
src/pocketmine/entity/Living.php:			$this->doHitAnimation();
src/pocketmine/entity/Living.php:		$this->broadcastEntityEvent(ActorEventPacket::HURT_ANIMATION);
src/pocketmine/entity/Living.php:		if(mt_rand() / mt_getrandmax() > $this->getAttributeMap()->getAttribute(Attribute::KNOCKBACK_RESISTANCE)->getValue()){
src/pocketmine/entity/Living.php:			$motion = clone $this->motion;
src/pocketmine/entity/Living.php:			$motion->x /= 2;
src/pocketmine/entity/Living.php:			$motion->y /= 2;
src/pocketmine/entity/Living.php:			$motion->z /= 2;
src/pocketmine/entity/Living.php:			$motion->x += $x * $f * $base;
src/pocketmine/entity/Living.php:			$motion->y += $base;
src/pocketmine/entity/Living.php:			$motion->z += $z * $f * $base;
src/pocketmine/entity/Living.php:			if($motion->y > $base){
src/pocketmine/entity/Living.php:				$motion->y = $base;
src/pocketmine/entity/Living.php:			$this->setMotion($motion);
src/pocketmine/entity/Living.php:		$this->onDeath();
src/pocketmine/entity/Living.php:		$this->startDeathAnimation();
src/pocketmine/entity/Living.php:		$ev = new EntityDeathEvent($this, $this->getDrops(), $this->getXpDropAmount());
src/pocketmine/entity/Living.php:		$ev->call();
src/pocketmine/entity/Living.php:		foreach($ev->getDrops() as $item){
src/pocketmine/entity/Living.php:			$this->getLevelNonNull()->dropItem($this, $item);
src/pocketmine/entity/Living.php:		$this->level->dropExperience($this, $ev->getXpDropAmount());
src/pocketmine/entity/Living.php:		if($this->deadTicks < $this->maxDeadTicks){
src/pocketmine/entity/Living.php:			$this->deadTicks += $tickDiff;
src/pocketmine/entity/Living.php:			if($this->deadTicks >= $this->maxDeadTicks){
src/pocketmine/entity/Living.php:				$this->endDeathAnimation();
src/pocketmine/entity/Living.php:		return $this->deadTicks >= $this->maxDeadTicks;
src/pocketmine/entity/Living.php:		$this->broadcastEntityEvent(ActorEventPacket::DEATH_ANIMATION);
src/pocketmine/entity/Living.php:		$this->despawnFromAll();
src/pocketmine/entity/Living.php:		Timings::$timerLivingEntityBaseTick->startTiming();
src/pocketmine/entity/Living.php:		if($this->isAlive()){
src/pocketmine/entity/Living.php:			if($this->doEffectsTick($tickDiff)){
src/pocketmine/entity/Living.php:			if($this->isInsideOfSolid()){
src/pocketmine/entity/Living.php:				$this->attack($ev);
src/pocketmine/entity/Living.php:			if($this->doAirSupplyTick($tickDiff)){
src/pocketmine/entity/Living.php:		if($this->attackTime > 0){
src/pocketmine/entity/Living.php:			$this->attackTime -= $tickDiff;
src/pocketmine/entity/Living.php:		Timings::$timerLivingEntityBaseTick->stopTiming();
src/pocketmine/entity/Living.php:		foreach($this->effects as $instance){
src/pocketmine/entity/Living.php:			$type = $instance->getType();
src/pocketmine/entity/Living.php:			if($type->canTick($instance)){
src/pocketmine/entity/Living.php:				$type->applyEffect($this, $instance);
src/pocketmine/entity/Living.php:			$instance->decreaseDuration($tickDiff);
src/pocketmine/entity/Living.php:			if($instance->hasExpired()){
src/pocketmine/entity/Living.php:				$this->removeEffect($instance->getId());
src/pocketmine/entity/Living.php:		return count($this->effects) > 0;
src/pocketmine/entity/Living.php:		$ticks = $this->getAirSupplyTicks();
src/pocketmine/entity/Living.php:		if(!$this->canBreathe()){
src/pocketmine/entity/Living.php:			$this->setBreathing(false);
src/pocketmine/entity/Living.php:			if(($respirationLevel = $this->armorInventory->getHelmet()->getEnchantmentLevel(Enchantment::RESPIRATION)) <= 0 or
src/pocketmine/entity/Living.php:				$ticks -= $tickDiff;
src/pocketmine/entity/Living.php:				if($ticks <= -20){
src/pocketmine/entity/Living.php:					$this->onAirExpired();
src/pocketmine/entity/Living.php:		}elseif(!$this->isBreathing()){
src/pocketmine/entity/Living.php:			if($ticks < ($max = $this->getMaxAirSupplyTicks())){
src/pocketmine/entity/Living.php:				$this->setBreathing(true);
src/pocketmine/entity/Living.php:			$this->setAirSupplyTicks($ticks);
src/pocketmine/entity/Living.php:		return $this->hasEffect(Effect::WATER_BREATHING) or $this->hasEffect(Effect::CONDUIT_POWER) or !$this->isUnderwater();
src/pocketmine/entity/Living.php:		return $this->getGenericFlag(self::DATA_FLAG_BREATHING);
src/pocketmine/entity/Living.php:		$this->setGenericFlag(self::DATA_FLAG_BREATHING, $value);
src/pocketmine/entity/Living.php:		return $this->propertyManager->getShort(self::DATA_AIR);
src/pocketmine/entity/Living.php:		$this->propertyManager->setShort(self::DATA_AIR, $ticks);
src/pocketmine/entity/Living.php:		return $this->propertyManager->getShort(self::DATA_MAX_AIR);
src/pocketmine/entity/Living.php:		$this->propertyManager->setShort(self::DATA_MAX_AIR, $ticks);
src/pocketmine/entity/Living.php:	 * Called when the entity's air supply ticks reaches -20 or lower. The entity will usually take damage at this point
src/pocketmine/entity/Living.php:		$this->attack($ev);
src/pocketmine/entity/Living.php:	 * @phpstan-param array<int, true> $transparent
src/pocketmine/entity/Living.php:		foreach(VoxelRayTrace::inDirection($this->add(0, $this->eyeHeight, 0), $this->getDirectionVector(), $maxDistance) as $vector3){
src/pocketmine/entity/Living.php:			$block = $this->level->getBlockAt($vector3->x, $vector3->y, $vector3->z);
src/pocketmine/entity/Living.php:				--$nextIndex;
src/pocketmine/entity/Living.php:			$id = $block->getId();
src/pocketmine/entity/Living.php:	 * @phpstan-param array<int, true> $transparent
src/pocketmine/entity/Living.php:		$line = $this->getLineOfSight($maxDistance, 1, $transparent);
src/pocketmine/entity/Living.php:		$horizontal = sqrt(($target->x - $this->x) ** 2 + ($target->z - $this->z) ** 2);
src/pocketmine/entity/Living.php:		$vertical = $target->y - $this->y;
src/pocketmine/entity/Living.php:		$this->pitch = -atan2($vertical, $horizontal) / M_PI * 180; //negative is up, positive is down
src/pocketmine/entity/Living.php:		$xDist = $target->x - $this->x;
src/pocketmine/entity/Living.php:		$zDist = $target->z - $this->z;
src/pocketmine/entity/Living.php:		$this->yaw = atan2($zDist, $xDist) / M_PI * 180 - 90;
src/pocketmine/entity/Living.php:		if($this->yaw < 0){
src/pocketmine/entity/Living.php:			$this->yaw += 360.0;
src/pocketmine/entity/Living.php:		$this->armorInventory->sendContents($player);
src/pocketmine/entity/Living.php:		if(!$this->closed){
src/pocketmine/entity/Living.php:			if($this->armorInventory !== null){
src/pocketmine/entity/Living.php:				$this->armorInventory->removeAllViewers(true);
src/pocketmine/entity/Living.php:				$this->armorInventory = null;
src/pocketmine/entity/Villager.php:		$profession = $this->namedtag->getInt("Profession", self::PROFESSION_FARMER);
src/pocketmine/entity/Villager.php:		$this->setProfession($profession);
src/pocketmine/entity/Villager.php:		$this->namedtag->setInt("Profession", $this->getProfession());
src/pocketmine/entity/Villager.php:		$this->propertyManager->setInt(self::DATA_VARIANT, $profession);
src/pocketmine/entity/Villager.php:		return $this->propertyManager->getInt(self::DATA_VARIANT);
src/pocketmine/entity/Villager.php:		return $this->getGenericFlag(self::DATA_FLAG_BABY);
src/pocketmine/entity/DataPropertyManager.php:	 * @phpstan-var array<int, array{0: int, 1: mixed}>
src/pocketmine/entity/DataPropertyManager.php:	 * @phpstan-var array<int, array{0: int, 1: mixed}>
src/pocketmine/entity/DataPropertyManager.php:		$value = $this->getPropertyValue($key, Entity::DATA_TYPE_BYTE);
src/pocketmine/entity/DataPropertyManager.php:		$this->setPropertyValue($key, Entity::DATA_TYPE_BYTE, $value, $force);
src/pocketmine/entity/DataPropertyManager.php:		$value = $this->getPropertyValue($key, Entity::DATA_TYPE_SHORT);
src/pocketmine/entity/DataPropertyManager.php:		$this->setPropertyValue($key, Entity::DATA_TYPE_SHORT, $value, $force);
src/pocketmine/entity/DataPropertyManager.php:		$value = $this->getPropertyValue($key, Entity::DATA_TYPE_INT);
src/pocketmine/entity/DataPropertyManager.php:		$this->setPropertyValue($key, Entity::DATA_TYPE_INT, $value, $force);
src/pocketmine/entity/DataPropertyManager.php:		$value = $this->getPropertyValue($key, Entity::DATA_TYPE_FLOAT);
src/pocketmine/entity/DataPropertyManager.php:		$this->setPropertyValue($key, Entity::DATA_TYPE_FLOAT, $value, $force);
src/pocketmine/entity/DataPropertyManager.php:		$value = $this->getPropertyValue($key, Entity::DATA_TYPE_STRING);
src/pocketmine/entity/DataPropertyManager.php:		$this->setPropertyValue($key, Entity::DATA_TYPE_STRING, $value, $force);
src/pocketmine/entity/DataPropertyManager.php:		$value = $this->getPropertyValue($key, Entity::DATA_TYPE_COMPOUND_TAG);
src/pocketmine/entity/DataPropertyManager.php:		$this->setPropertyValue($key, Entity::DATA_TYPE_COMPOUND_TAG, $value, $force);
src/pocketmine/entity/DataPropertyManager.php:		$value = $this->getPropertyValue($key, Entity::DATA_TYPE_POS);
src/pocketmine/entity/DataPropertyManager.php:		$this->setPropertyValue($key, Entity::DATA_TYPE_POS, $value !== null ? $value->floor() : null, $force);
src/pocketmine/entity/DataPropertyManager.php:		$value = $this->getPropertyValue($key, Entity::DATA_TYPE_LONG);
src/pocketmine/entity/DataPropertyManager.php:		$this->setPropertyValue($key, Entity::DATA_TYPE_LONG, $value, $force);
src/pocketmine/entity/DataPropertyManager.php:		$value = $this->getPropertyValue($key, Entity::DATA_TYPE_VECTOR3F);
src/pocketmine/entity/DataPropertyManager.php:		$this->setPropertyValue($key, Entity::DATA_TYPE_VECTOR3F, $value !== null ? $value->asVector3() : null, $force);
src/pocketmine/entity/DataPropertyManager.php:		unset($this->properties[$key]);
src/pocketmine/entity/DataPropertyManager.php:		return isset($this->properties[$key]);
src/pocketmine/entity/DataPropertyManager.php:		if(isset($this->properties[$key])){
src/pocketmine/entity/DataPropertyManager.php:			return $this->properties[$key][0];
src/pocketmine/entity/DataPropertyManager.php:		return -1;
src/pocketmine/entity/DataPropertyManager.php:		if(isset($this->properties[$key]) and $this->properties[$key][0] !== $type){
src/pocketmine/entity/DataPropertyManager.php:			throw new \RuntimeException("Expected type $type, but have " . $this->properties[$key][0]);
src/pocketmine/entity/DataPropertyManager.php:		if($type !== -1){
src/pocketmine/entity/DataPropertyManager.php:			$this->checkType($key, $type);
src/pocketmine/entity/DataPropertyManager.php:		return isset($this->properties[$key]) ? $this->properties[$key][1] : null;
src/pocketmine/entity/DataPropertyManager.php:			$this->checkType($key, $type);
src/pocketmine/entity/DataPropertyManager.php:		$this->properties[$key] = $this->dirtyProperties[$key] = [$type, $value];
src/pocketmine/entity/DataPropertyManager.php:	 * @phpstan-return array<int, array{0: int, 1: mixed}>
src/pocketmine/entity/DataPropertyManager.php:		return $this->properties;
src/pocketmine/entity/DataPropertyManager.php:	 * @phpstan-return array<int, array{0: int, 1: mixed}>
src/pocketmine/entity/DataPropertyManager.php:		return $this->dirtyProperties;
src/pocketmine/entity/DataPropertyManager.php:		$this->dirtyProperties = [];
src/pocketmine/entity/Skin.php:		$this->skinId = $skinId;
src/pocketmine/entity/Skin.php:		$this->skinData = $skinData;
src/pocketmine/entity/Skin.php:		$this->capeData = $capeData;
src/pocketmine/entity/Skin.php:		$this->geometryName = $geometryName;
src/pocketmine/entity/Skin.php:		$this->geometryData = $geometryData;
src/pocketmine/entity/Skin.php:			$this->validate();
src/pocketmine/entity/Skin.php:		if($this->skinId === ""){
src/pocketmine/entity/Skin.php:		$len = strlen($this->skinData);
src/pocketmine/entity/Skin.php:		if($this->capeData !== "" and strlen($this->capeData) !== 8192){
src/pocketmine/entity/Skin.php:			throw new InvalidSkinException("Invalid cape data size " . strlen($this->capeData) . " bytes (must be exactly 8192 bytes)");
src/pocketmine/entity/Skin.php:		return $this->skinId;
src/pocketmine/entity/Skin.php:		return $this->skinData;
src/pocketmine/entity/Skin.php:		return $this->capeData;
src/pocketmine/entity/Skin.php:		return $this->geometryName;
src/pocketmine/entity/Skin.php:		return $this->geometryData;
src/pocketmine/entity/Skin.php:	 * Hack to cut down on network overhead due to skins, by un-pretty-printing geometry JSON.
src/pocketmine/entity/Skin.php:	 * Mojang, some stupid reason, send every single model for every single skin in the selected skin-pack.
src/pocketmine/entity/Skin.php:	 * Not only that, they are pretty-printed.
src/pocketmine/entity/Skin.php:		if($this->geometryData !== ""){
src/pocketmine/entity/Skin.php:			$this->geometryData = (string) json_encode((new CommentedJsonDecoder())->decode($this->geometryData));
src/pocketmine/entity/utils/ExperienceUtils.php:			return (int) ($level ** 2 * 2.5 - 40.5 * $level + 360);
src/pocketmine/entity/utils/ExperienceUtils.php:		return (int) ($level ** 2 * 4.5 - 162.5 * $level + 2220);
src/pocketmine/entity/utils/ExperienceUtils.php:			return 5 * $level - 38;
src/pocketmine/entity/utils/ExperienceUtils.php:			return 9 * $level - 158;
src/pocketmine/entity/utils/ExperienceUtils.php:	 * This returns a floating-point number, the decimal part being the progress through the resulting level.
src/pocketmine/entity/utils/ExperienceUtils.php:			$b = -40.5;
src/pocketmine/entity/utils/ExperienceUtils.php:			$b = -162.5;
src/pocketmine/entity/utils/ExperienceUtils.php:		$x = Math::solveQuadratic($a, $b, $c - $xp);
src/pocketmine/entity/Entity.php:    public const NETWORK_ID = -1;
src/pocketmine/entity/Entity.php:    /* 63 (int) shulker-related */
src/pocketmine/entity/Entity.php:    /* 65 (short) shulker-related */
src/pocketmine/entity/Entity.php:    /* 69 (byte) command-block */
src/pocketmine/entity/Entity.php:    public const DATA_ALWAYS_SHOW_NAMETAG = 80; //byte: -1 = default, 0 = only when looked at, 1 = always
src/pocketmine/entity/Entity.php:     * @phpstan-var array<int|string, class-string<Entity>>
src/pocketmine/entity/Entity.php:     * @phpstan-var array<class-string<Entity>, string>
src/pocketmine/entity/Entity.php:        //define legacy save IDs first - use them for saving for maximum compatibility with Minecraft PC
src/pocketmine/entity/Entity.php:        //TODO: index them by version to allow proper multi-save compatibility
src/pocketmine/entity/Entity.php:     * @phpstan-param class-string<Entity> $className
src/pocketmine/entity/Entity.php:        if (is_a($className, Entity::class, true) and !$class->isAbstract()) {
src/pocketmine/entity/Entity.php:            if (-1 !== $className::NETWORK_ID) {
src/pocketmine/entity/Entity.php:            $shortName = $class->getShortName();
src/pocketmine/entity/Entity.php:                new DoubleTag('', $pos->x),
src/pocketmine/entity/Entity.php:                new DoubleTag('', $pos->y),
src/pocketmine/entity/Entity.php:                new DoubleTag('', $pos->z),
src/pocketmine/entity/Entity.php:                new DoubleTag('', null !== $motion ? $motion->x : 0.0),
src/pocketmine/entity/Entity.php:                new DoubleTag('', null !== $motion ? $motion->y : 0.0),
src/pocketmine/entity/Entity.php:                new DoubleTag('', null !== $motion ? $motion->z : 0.0),
src/pocketmine/entity/Entity.php:        $this->constructed = true;
src/pocketmine/entity/Entity.php:        $this->timings = Timings::getEntityTimings($this);
src/pocketmine/entity/Entity.php:        $this->temporalVector = new Vector3();
src/pocketmine/entity/Entity.php:        if (null === $this->eyeHeight) {
src/pocketmine/entity/Entity.php:            $this->eyeHeight = $this->height / 2 + 0.1;
src/pocketmine/entity/Entity.php:        $this->id = Entity::$entityCount++;
src/pocketmine/entity/Entity.php:        $this->namedtag = $nbt;
src/pocketmine/entity/Entity.php:        $this->server = $level->getServer();
src/pocketmine/entity/Entity.php:        $pos = $this->namedtag->getListTag('Pos')->getAllValues();
src/pocketmine/entity/Entity.php:        $rotation = $this->namedtag->getListTag('Rotation')->getAllValues();
src/pocketmine/entity/Entity.php:        assert(!is_nan($this->x) and !is_infinite($this->x) and !is_nan($this->y) and !is_infinite($this->y) and !is_nan($this->z) and !is_infinite($this->z));
src/pocketmine/entity/Entity.php:        $this->boundingBox = new AxisAlignedBB(0, 0, 0, 0, 0, 0);
src/pocketmine/entity/Entity.php:        $this->recalculateBoundingBox();
src/pocketmine/entity/Entity.php:        $this->chunk = $this->level->getChunkAtPosition($this, false);
src/pocketmine/entity/Entity.php:        if (null === $this->chunk) {
src/pocketmine/entity/Entity.php:        $this->motion = new Vector3(0, 0, 0);
src/pocketmine/entity/Entity.php:        if ($this->namedtag->hasTag('Motion', ListTag::class)) {
src/pocketmine/entity/Entity.php:            $motion = $this->namedtag->getListTag('Motion')->getAllValues();
src/pocketmine/entity/Entity.php:            $this->setMotion($this->temporalVector->setComponents(...$motion));
src/pocketmine/entity/Entity.php:        $this->resetLastMovements();
src/pocketmine/entity/Entity.php:        $this->fallDistance = $this->namedtag->getFloat('FallDistance', 0.0);
src/pocketmine/entity/Entity.php:        $this->propertyManager = new DataPropertyManager();
src/pocketmine/entity/Entity.php:        $this->propertyManager->setLong(self::DATA_FLAGS, 0);
src/pocketmine/entity/Entity.php:        $this->propertyManager->setShort(self::DATA_MAX_AIR, 400);
src/pocketmine/entity/Entity.php:        $this->propertyManager->setString(self::DATA_NAMETAG, '');
src/pocketmine/entity/Entity.php:        $this->propertyManager->setLong(self::DATA_LEAD_HOLDER_EID, -1);
src/pocketmine/entity/Entity.php:        $this->propertyManager->setFloat(self::DATA_SCALE, 1);
src/pocketmine/entity/Entity.php:        $this->propertyManager->setFloat(self::DATA_BOUNDING_BOX_WIDTH, $this->width);
src/pocketmine/entity/Entity.php:        $this->propertyManager->setFloat(self::DATA_BOUNDING_BOX_HEIGHT, $this->height);
src/pocketmine/entity/Entity.php:        $this->fireTicks = $this->namedtag->getShort('Fire', 0);
src/pocketmine/entity/Entity.php:        if ($this->isOnFire()) {
src/pocketmine/entity/Entity.php:            $this->setGenericFlag(self::DATA_FLAG_ONFIRE);
src/pocketmine/entity/Entity.php:        $this->propertyManager->setShort(self::DATA_AIR, $this->namedtag->getShort('Air', 300));
src/pocketmine/entity/Entity.php:        $this->onGround = 0 !== $this->namedtag->getByte('OnGround', 0);
src/pocketmine/entity/Entity.php:        $this->invulnerable = 0 !== $this->namedtag->getByte('Invulnerable', 0);
src/pocketmine/entity/Entity.php:        $this->attributeMap = new AttributeMap();
src/pocketmine/entity/Entity.php:        $this->addAttributes();
src/pocketmine/entity/Entity.php:        $this->setGenericFlag(self::DATA_FLAG_AFFECTED_BY_GRAVITY, true);
src/pocketmine/entity/Entity.php:        $this->setGenericFlag(self::DATA_FLAG_HAS_COLLISION, true);
src/pocketmine/entity/Entity.php:        $this->initEntity();
src/pocketmine/entity/Entity.php:        $this->propertyManager->clearDirtyProperties(); //Prevents resending properties that were set during construction
src/pocketmine/entity/Entity.php:        $this->chunk->addEntity($this);
src/pocketmine/entity/Entity.php:        $this->level->addEntity($this);
src/pocketmine/entity/Entity.php:        $this->lastUpdate = $this->server->getTick();
src/pocketmine/entity/Entity.php:        (new EntitySpawnEvent($this))->call();
src/pocketmine/entity/Entity.php:        $this->scheduleUpdate();
src/pocketmine/entity/Entity.php:        return $this->propertyManager->getString(self::DATA_NAMETAG);
src/pocketmine/entity/Entity.php:        return $this->getGenericFlag(self::DATA_FLAG_CAN_SHOW_NAMETAG);
src/pocketmine/entity/Entity.php:        return 1 === $this->propertyManager->getByte(self::DATA_ALWAYS_SHOW_NAMETAG);
src/pocketmine/entity/Entity.php:        $this->propertyManager->setString(self::DATA_NAMETAG, $name);
src/pocketmine/entity/Entity.php:        $this->setGenericFlag(self::DATA_FLAG_CAN_SHOW_NAMETAG, $value);
src/pocketmine/entity/Entity.php:        $this->propertyManager->setByte(self::DATA_ALWAYS_SHOW_NAMETAG, $value ? 1 : 0);
src/pocketmine/entity/Entity.php:        return $this->propertyManager->getString(self::DATA_SCORE_TAG);
src/pocketmine/entity/Entity.php:        $this->propertyManager->setString(self::DATA_SCORE_TAG, $score);
src/pocketmine/entity/Entity.php:        return $this->propertyManager->getFloat(self::DATA_SCALE);
src/pocketmine/entity/Entity.php:        $multiplier = $value / $this->getScale();
src/pocketmine/entity/Entity.php:        $this->width *= $multiplier;
src/pocketmine/entity/Entity.php:        $this->height *= $multiplier;
src/pocketmine/entity/Entity.php:        $this->eyeHeight *= $multiplier;
src/pocketmine/entity/Entity.php:        $this->recalculateBoundingBox();
src/pocketmine/entity/Entity.php:        $this->propertyManager->setFloat(self::DATA_SCALE, $value);
src/pocketmine/entity/Entity.php:        return $this->boundingBox;
src/pocketmine/entity/Entity.php:        $halfWidth = $this->width / 2;
src/pocketmine/entity/Entity.php:        $this->boundingBox->setBounds(
src/pocketmine/entity/Entity.php:            $this->x - $halfWidth,
src/pocketmine/entity/Entity.php:            $this->y + $this->ySize,
src/pocketmine/entity/Entity.php:            $this->z - $halfWidth,
src/pocketmine/entity/Entity.php:            $this->x + $halfWidth,
src/pocketmine/entity/Entity.php:            $this->y + $this->height + $this->ySize,
src/pocketmine/entity/Entity.php:            $this->z + $halfWidth
src/pocketmine/entity/Entity.php:        return $this->getGenericFlag(self::DATA_FLAG_SNEAKING);
src/pocketmine/entity/Entity.php:        $this->setGenericFlag(self::DATA_FLAG_SNEAKING, $value);
src/pocketmine/entity/Entity.php:        return $this->getGenericFlag(self::DATA_FLAG_SPRINTING);
src/pocketmine/entity/Entity.php:        if ($value !== $this->isSprinting()) {
src/pocketmine/entity/Entity.php:            $this->setGenericFlag(self::DATA_FLAG_SPRINTING, $value);
src/pocketmine/entity/Entity.php:            $attr = $this->attributeMap->getAttribute(Attribute::MOVEMENT_SPEED);
src/pocketmine/entity/Entity.php:            $attr->setValue($value ? ($attr->getValue() * 1.3) : ($attr->getValue() / 1.3), false, true);
src/pocketmine/entity/Entity.php:        return $this->getGenericFlag(self::DATA_FLAG_IMMOBILE);
src/pocketmine/entity/Entity.php:        $this->setGenericFlag(self::DATA_FLAG_IMMOBILE, $value);
src/pocketmine/entity/Entity.php:        return $this->getGenericFlag(self::DATA_FLAG_INVISIBLE);
src/pocketmine/entity/Entity.php:        $this->setGenericFlag(self::DATA_FLAG_INVISIBLE, $value);
src/pocketmine/entity/Entity.php:        return $this->getGenericFlag(self::DATA_FLAG_CAN_CLIMB);
src/pocketmine/entity/Entity.php:        $this->setGenericFlag(self::DATA_FLAG_CAN_CLIMB, $value);
src/pocketmine/entity/Entity.php:        return $this->getGenericFlag(self::DATA_FLAG_WALLCLIMBING);
src/pocketmine/entity/Entity.php:        $this->setGenericFlag(self::DATA_FLAG_WALLCLIMBING, $value);
src/pocketmine/entity/Entity.php:        return $this->propertyManager->getLong(self::DATA_OWNER_EID);
src/pocketmine/entity/Entity.php:        $eid = $this->getOwningEntityId();
src/pocketmine/entity/Entity.php:            return $this->server->findEntity($eid);
src/pocketmine/entity/Entity.php:            $this->propertyManager->removeProperty(self::DATA_OWNER_EID);
src/pocketmine/entity/Entity.php:        } elseif ($owner->closed) {
src/pocketmine/entity/Entity.php:            $this->propertyManager->setLong(self::DATA_OWNER_EID, $owner->getId());
src/pocketmine/entity/Entity.php:        return $this->propertyManager->getLong(self::DATA_TARGET_EID);
src/pocketmine/entity/Entity.php:        $eid = $this->getTargetEntityId();
src/pocketmine/entity/Entity.php:            return $this->server->findEntity($eid);
src/pocketmine/entity/Entity.php:            $this->propertyManager->removeProperty(self::DATA_TARGET_EID);
src/pocketmine/entity/Entity.php:        } elseif ($target->closed) {
src/pocketmine/entity/Entity.php:            $this->propertyManager->setLong(self::DATA_TARGET_EID, $target->getId());
src/pocketmine/entity/Entity.php:        return $this->savedWithChunk;
src/pocketmine/entity/Entity.php:        $this->savedWithChunk = $value;
src/pocketmine/entity/Entity.php:            $this->namedtag->setString('id', $this->getSaveId(), true);
src/pocketmine/entity/Entity.php:            if ('' !== $this->getNameTag()) {
src/pocketmine/entity/Entity.php:                $this->namedtag->setString('CustomName', $this->getNameTag());
src/pocketmine/entity/Entity.php:                $this->namedtag->setByte('CustomNameVisible', $this->isNameTagVisible() ? 1 : 0);
src/pocketmine/entity/Entity.php:                $this->namedtag->removeTag('CustomName', 'CustomNameVisible');
src/pocketmine/entity/Entity.php:        $this->namedtag->setTag(new ListTag('Pos', [
src/pocketmine/entity/Entity.php:            new DoubleTag('', $this->x),
src/pocketmine/entity/Entity.php:            new DoubleTag('', $this->y),
src/pocketmine/entity/Entity.php:            new DoubleTag('', $this->z),
src/pocketmine/entity/Entity.php:        $this->namedtag->setTag(new ListTag('Motion', [
src/pocketmine/entity/Entity.php:            new DoubleTag('', $this->motion->x),
src/pocketmine/entity/Entity.php:            new DoubleTag('', $this->motion->y),
src/pocketmine/entity/Entity.php:            new DoubleTag('', $this->motion->z),
src/pocketmine/entity/Entity.php:        $this->namedtag->setTag(new ListTag('Rotation', [
src/pocketmine/entity/Entity.php:            new FloatTag('', $this->yaw),
src/pocketmine/entity/Entity.php:            new FloatTag('', $this->pitch),
src/pocketmine/entity/Entity.php:        $this->namedtag->setFloat('FallDistance', $this->fallDistance);
src/pocketmine/entity/Entity.php:        $this->namedtag->setShort('Fire', $this->fireTicks);
src/pocketmine/entity/Entity.php:        $this->namedtag->setShort('Air', $this->propertyManager->getShort(self::DATA_AIR));
src/pocketmine/entity/Entity.php:        $this->namedtag->setByte('OnGround', $this->onGround ? 1 : 0);
src/pocketmine/entity/Entity.php:        $this->namedtag->setByte('Invulnerable', $this->invulnerable ? 1 : 0);
src/pocketmine/entity/Entity.php:        if ($this->namedtag->hasTag('CustomName', StringTag::class)) {
src/pocketmine/entity/Entity.php:            $this->setNameTag($this->namedtag->getString('CustomName'));
src/pocketmine/entity/Entity.php:            if ($this->namedtag->hasTag('CustomNameVisible', StringTag::class)) {
src/pocketmine/entity/Entity.php:                $this->setNameTagVisible('' !== $this->namedtag->getString('CustomNameVisible'));
src/pocketmine/entity/Entity.php:                $this->namedtag->removeTag('CustomNameVisible');
src/pocketmine/entity/Entity.php:                $this->setNameTagVisible(0 !== $this->namedtag->getByte('CustomNameVisible', 1));
src/pocketmine/entity/Entity.php:        $source->call();
src/pocketmine/entity/Entity.php:        if ($source->isCancelled()) {
src/pocketmine/entity/Entity.php:        $this->setLastDamageCause($source);
src/pocketmine/entity/Entity.php:        $this->setHealth($this->getHealth() - $source->getFinalDamage());
src/pocketmine/entity/Entity.php:        $source->call();
src/pocketmine/entity/Entity.php:        if ($source->isCancelled()) {
src/pocketmine/entity/Entity.php:        $this->setHealth($this->getHealth() + $source->getAmount());
src/pocketmine/entity/Entity.php:        $this->health = 0;
src/pocketmine/entity/Entity.php:        $this->scheduleUpdate();
src/pocketmine/entity/Entity.php:        return $this->health > 0;
src/pocketmine/entity/Entity.php:        return $this->health;
src/pocketmine/entity/Entity.php:        if ($amount == $this->health) {
src/pocketmine/entity/Entity.php:            if ($this->isAlive()) {
src/pocketmine/entity/Entity.php:                $this->health = 0;
src/pocketmine/entity/Entity.php:                $this->kill();
src/pocketmine/entity/Entity.php:        } elseif ($amount <= $this->getMaxHealth() or $amount < $this->health) {
src/pocketmine/entity/Entity.php:            $this->health = $amount;
src/pocketmine/entity/Entity.php:            $this->health = $this->getMaxHealth();
src/pocketmine/entity/Entity.php:        return $this->maxHealth;
src/pocketmine/entity/Entity.php:        $this->maxHealth = $amount;
src/pocketmine/entity/Entity.php:        $this->lastDamageCause = $type;
src/pocketmine/entity/Entity.php:        return $this->lastDamageCause;
src/pocketmine/entity/Entity.php:        return $this->attributeMap;
src/pocketmine/entity/Entity.php:        return $this->propertyManager;
src/pocketmine/entity/Entity.php:        $this->justCreated = false;
src/pocketmine/entity/Entity.php:        $changedProperties = $this->propertyManager->getDirty();
src/pocketmine/entity/Entity.php:            $this->sendData($this->hasSpawned, $changedProperties);
src/pocketmine/entity/Entity.php:            $this->propertyManager->clearDirtyProperties();
src/pocketmine/entity/Entity.php:        $this->checkBlockCollision();
src/pocketmine/entity/Entity.php:        if ($this->y <= -16 and $this->isAlive()) {
src/pocketmine/entity/Entity.php:            $this->attack($ev);
src/pocketmine/entity/Entity.php:        if ($this->isOnFire() and $this->doOnFireTick($tickDiff)) {
src/pocketmine/entity/Entity.php:        if ($this->noDamageTicks > 0) {
src/pocketmine/entity/Entity.php:            $this->noDamageTicks -= $tickDiff;
src/pocketmine/entity/Entity.php:            if ($this->noDamageTicks < 0) {
src/pocketmine/entity/Entity.php:                $this->noDamageTicks = 0;
src/pocketmine/entity/Entity.php:        $this->ticksLived += $tickDiff;
src/pocketmine/entity/Entity.php:        return $this->fireTicks > 0;
src/pocketmine/entity/Entity.php:        if ($ticks > $this->getFireTicks()) {
src/pocketmine/entity/Entity.php:            $this->setFireTicks($ticks);
src/pocketmine/entity/Entity.php:        $this->setGenericFlag(self::DATA_FLAG_ONFIRE, $this->isOnFire());
src/pocketmine/entity/Entity.php:        return $this->fireTicks;
src/pocketmine/entity/Entity.php:        $this->fireTicks = $fireTicks;
src/pocketmine/entity/Entity.php:        $this->fireTicks = 0;
src/pocketmine/entity/Entity.php:        $this->setGenericFlag(self::DATA_FLAG_ONFIRE, false);
src/pocketmine/entity/Entity.php:        if ($this->isFireProof() and $this->fireTicks > 1) {
src/pocketmine/entity/Entity.php:            $this->fireTicks = 1;
src/pocketmine/entity/Entity.php:            $this->fireTicks -= $tickDiff;
src/pocketmine/entity/Entity.php:        if ((0 === $this->fireTicks % 20) or $tickDiff > 20) {
src/pocketmine/entity/Entity.php:            $this->dealFireDamage();
src/pocketmine/entity/Entity.php:        if (!$this->isOnFire()) {
src/pocketmine/entity/Entity.php:            $this->extinguish();
src/pocketmine/entity/Entity.php:        $this->attack($ev);
src/pocketmine/entity/Entity.php:        return !$this->justCreated and $entity !== $this;
src/pocketmine/entity/Entity.php:        return $this->isAlive();
src/pocketmine/entity/Entity.php:        $diffPosition = ($this->x - $this->lastX) ** 2 + ($this->y - $this->lastY) ** 2 + ($this->z - $this->lastZ) ** 2;
src/pocketmine/entity/Entity.php:        $diffRotation = ($this->yaw - $this->lastYaw) ** 2 + ($this->pitch - $this->lastPitch) ** 2;
src/pocketmine/entity/Entity.php:        $diffMotion = $this->motion->subtract($this->lastMotion)->lengthSquared();
src/pocketmine/entity/Entity.php:        $still = 0.0 == $this->motion->lengthSquared();
src/pocketmine/entity/Entity.php:        $wasStill = 0.0 == $this->lastMotion->lengthSquared();
src/pocketmine/entity/Entity.php:            //TODO: hack for client-side AI interference: prevent client sided movement when motion is 0
src/pocketmine/entity/Entity.php:            $this->setImmobile($still);
src/pocketmine/entity/Entity.php:            $this->lastX = $this->x;
src/pocketmine/entity/Entity.php:            $this->lastY = $this->y;
src/pocketmine/entity/Entity.php:            $this->lastZ = $this->z;
src/pocketmine/entity/Entity.php:            $this->lastYaw = $this->yaw;
src/pocketmine/entity/Entity.php:            $this->lastPitch = $this->pitch;
src/pocketmine/entity/Entity.php:            $this->broadcastMovement($teleport);
src/pocketmine/entity/Entity.php:            $this->lastMotion = clone $this->motion;
src/pocketmine/entity/Entity.php:            $this->broadcastMotion();
src/pocketmine/entity/Entity.php:        return new Vector3($vector3->x, $vector3->y + $this->baseOffset, $vector3->z);
src/pocketmine/entity/Entity.php:        $pk->entityRuntimeId = $this->id;
src/pocketmine/entity/Entity.php:        $pk->position = $this->getOffsetPosition($this);
src/pocketmine/entity/Entity.php:        $pk->xRot = $this->pitch;
src/pocketmine/entity/Entity.php:        $pk->yRot = $this->yaw; //TODO: head yaw
src/pocketmine/entity/Entity.php:        $pk->zRot = $this->yaw;
src/pocketmine/entity/Entity.php:            $pk->flags |= MoveActorAbsolutePacket::FLAG_TELEPORT;
src/pocketmine/entity/Entity.php:        if ($this->onGround) {
src/pocketmine/entity/Entity.php:            $pk->flags |= MoveActorAbsolutePacket::FLAG_GROUND;
src/pocketmine/entity/Entity.php:        $this->level->broadcastPacketToViewers($this, $pk);
src/pocketmine/entity/Entity.php:        $pk->entityRuntimeId = $this->id;
src/pocketmine/entity/Entity.php:        $pk->motion = $this->getMotion();
src/pocketmine/entity/Entity.php:        $this->level->broadcastPacketToViewers($this, $pk);
src/pocketmine/entity/Entity.php:        $this->motion->y -= $this->gravity;
src/pocketmine/entity/Entity.php:        $friction = 1 - $this->drag;
src/pocketmine/entity/Entity.php:        if ($this->applyDragBeforeGravity()) {
src/pocketmine/entity/Entity.php:            $this->motion->y *= $friction;
src/pocketmine/entity/Entity.php:        $this->applyGravity();
src/pocketmine/entity/Entity.php:        if (!$this->applyDragBeforeGravity()) {
src/pocketmine/entity/Entity.php:            $this->motion->y *= $friction;
src/pocketmine/entity/Entity.php:        if ($this->onGround) {
src/pocketmine/entity/Entity.php:            $friction *= $this->level->getBlockAt((int) floor($this->x), (int) floor($this->y - 1), (int) floor($this->z))->getFrictionFactor();
src/pocketmine/entity/Entity.php:        $this->motion->x *= $friction;
src/pocketmine/entity/Entity.php:        $this->motion->z *= $friction;
src/pocketmine/entity/Entity.php:        if (0 === count($this->level->getCollisionCubes($this, $this->getBoundingBox(), false))) {
src/pocketmine/entity/Entity.php:        $diffX = $x - $floorX;
src/pocketmine/entity/Entity.php:        $diffY = $y - $floorY;
src/pocketmine/entity/Entity.php:        $diffZ = $z - $floorZ;
src/pocketmine/entity/Entity.php:        if (BlockFactory::$solid[$this->level->getBlockIdAt($floorX, $floorY, $floorZ)]) {
src/pocketmine/entity/Entity.php:            $westNonSolid = !BlockFactory::$solid[$this->level->getBlockIdAt($floorX - 1, $floorY, $floorZ)];
src/pocketmine/entity/Entity.php:            $eastNonSolid = !BlockFactory::$solid[$this->level->getBlockIdAt($floorX + 1, $floorY, $floorZ)];
src/pocketmine/entity/Entity.php:            $downNonSolid = !BlockFactory::$solid[$this->level->getBlockIdAt($floorX, $floorY - 1, $floorZ)];
src/pocketmine/entity/Entity.php:            $upNonSolid = !BlockFactory::$solid[$this->level->getBlockIdAt($floorX, $floorY + 1, $floorZ)];
src/pocketmine/entity/Entity.php:            $northNonSolid = !BlockFactory::$solid[$this->level->getBlockIdAt($floorX, $floorY, $floorZ - 1)];
src/pocketmine/entity/Entity.php:            $southNonSolid = !BlockFactory::$solid[$this->level->getBlockIdAt($floorX, $floorY, $floorZ + 1)];
src/pocketmine/entity/Entity.php:            $direction = -1;
src/pocketmine/entity/Entity.php:            if ($eastNonSolid and 1 - $diffX < $limit) {
src/pocketmine/entity/Entity.php:                $limit = 1 - $diffX;
src/pocketmine/entity/Entity.php:            if ($upNonSolid and 1 - $diffY < $limit) {
src/pocketmine/entity/Entity.php:                $limit = 1 - $diffY;
src/pocketmine/entity/Entity.php:            if ($southNonSolid and 1 - $diffZ < $limit) {
src/pocketmine/entity/Entity.php:                $this->motion->x = -$force;
src/pocketmine/entity/Entity.php:                $this->motion->x = $force;
src/pocketmine/entity/Entity.php:                $this->motion->y = -$force;
src/pocketmine/entity/Entity.php:                $this->motion->y = $force;
src/pocketmine/entity/Entity.php:                $this->motion->z = -$force;
src/pocketmine/entity/Entity.php:                $this->motion->z = $force;
src/pocketmine/entity/Entity.php:        $rotation = fmod($this->yaw - 90, 360);
src/pocketmine/entity/Entity.php:        $y = -sin(deg2rad($this->pitch));
src/pocketmine/entity/Entity.php:        $xz = cos(deg2rad($this->pitch));
src/pocketmine/entity/Entity.php:        $x = -$xz * sin(deg2rad($this->yaw));
src/pocketmine/entity/Entity.php:        $z = $xz * cos(deg2rad($this->yaw));
src/pocketmine/entity/Entity.php:        return $this->temporalVector->setComponents($x, $y, $z)->normalize();
src/pocketmine/entity/Entity.php:        return (new Vector2(-cos(deg2rad($this->yaw) - M_PI_2), -sin(deg2rad($this->yaw) - M_PI_2)))->normalize();
src/pocketmine/entity/Entity.php:        if ($this->closed) {
src/pocketmine/entity/Entity.php:        $tickDiff = $currentTick - $this->lastUpdate;
src/pocketmine/entity/Entity.php:            if (!$this->justCreated) {
src/pocketmine/entity/Entity.php:                $this->server->getLogger()->debug("Expected tick difference of at least 1, got $tickDiff for ".get_class($this));
src/pocketmine/entity/Entity.php:        $this->lastUpdate = $currentTick;
src/pocketmine/entity/Entity.php:        if (!$this->isAlive()) {
src/pocketmine/entity/Entity.php:            if ($this->onDeathUpdate($tickDiff)) {
src/pocketmine/entity/Entity.php:                $this->flagForDespawn();
src/pocketmine/entity/Entity.php:        $this->timings->startTiming();
src/pocketmine/entity/Entity.php:        if ($this->hasMovementUpdate()) {
src/pocketmine/entity/Entity.php:            $this->tryChangeMovement();
src/pocketmine/entity/Entity.php:            if (abs($this->motion->x) <= self::MOTION_THRESHOLD) {
src/pocketmine/entity/Entity.php:                $this->motion->x = 0;
src/pocketmine/entity/Entity.php:            if (abs($this->motion->y) <= self::MOTION_THRESHOLD) {
src/pocketmine/entity/Entity.php:                $this->motion->y = 0;
src/pocketmine/entity/Entity.php:            if (abs($this->motion->z) <= self::MOTION_THRESHOLD) {
src/pocketmine/entity/Entity.php:                $this->motion->z = 0;
src/pocketmine/entity/Entity.php:            if (0 != $this->motion->x or 0 != $this->motion->y or 0 != $this->motion->z) {
src/pocketmine/entity/Entity.php:                $this->move($this->motion->x, $this->motion->y, $this->motion->z);
src/pocketmine/entity/Entity.php:            $this->forceMovementUpdate = false;
src/pocketmine/entity/Entity.php:        $this->updateMovement();
src/pocketmine/entity/Entity.php:        Timings::$timerEntityBaseTick->startTiming();
src/pocketmine/entity/Entity.php:        $hasUpdate = $this->entityBaseTick($tickDiff);
src/pocketmine/entity/Entity.php:        Timings::$timerEntityBaseTick->stopTiming();
src/pocketmine/entity/Entity.php:        $this->timings->stopTiming();
src/pocketmine/entity/Entity.php:        //if($this->isStatic())
src/pocketmine/entity/Entity.php:        return $hasUpdate or $this->hasMovementUpdate();
src/pocketmine/entity/Entity.php:        if ($this->closed) {
src/pocketmine/entity/Entity.php:        $this->level->updateEntities[$this->id] = $this;
src/pocketmine/entity/Entity.php:        $this->setForceMovementUpdate();
src/pocketmine/entity/Entity.php:        $this->scheduleUpdate();
src/pocketmine/entity/Entity.php:        $this->forceMovementUpdate = $value;
src/pocketmine/entity/Entity.php:        $this->blocksAround = null;
src/pocketmine/entity/Entity.php:            $this->forceMovementUpdate or
src/pocketmine/entity/Entity.php:            0 != $this->motion->x or
src/pocketmine/entity/Entity.php:            0 != $this->motion->y or
src/pocketmine/entity/Entity.php:            0 != $this->motion->z or
src/pocketmine/entity/Entity.php:            !$this->onGround
src/pocketmine/entity/Entity.php:        $this->fallDistance = 0.0;
src/pocketmine/entity/Entity.php:            if ($this->fallDistance > 0) {
src/pocketmine/entity/Entity.php:                $this->fall($this->fallDistance);
src/pocketmine/entity/Entity.php:                $this->resetFallDistance();
src/pocketmine/entity/Entity.php:        } elseif ($distanceThisTick < $this->fallDistance) {
src/pocketmine/entity/Entity.php:            $this->fallDistance -= $distanceThisTick;
src/pocketmine/entity/Entity.php:            $this->fallDistance = 0;
src/pocketmine/entity/Entity.php:        return $this->eyeHeight;
src/pocketmine/entity/Entity.php:        $block = $this->level->getBlockAt((int) floor($this->x), (int) floor($y = ($this->y + $this->getEyeHeight())), (int) floor($this->z));
src/pocketmine/entity/Entity.php:            $f = ($block->y + 1) - ($block->getFluidHeightPercent() - 0.1111111);
src/pocketmine/entity/Entity.php:        $block = $this->level->getBlockAt((int) floor($this->x), (int) floor($y = ($this->y + $this->getEyeHeight())), (int) floor($this->z));
src/pocketmine/entity/Entity.php:        return $block->isSolid() and !$block->isTransparent() and $block->collidesWithBB($this->getBoundingBox());
src/pocketmine/entity/Entity.php:        $this->blocksAround = null;
src/pocketmine/entity/Entity.php:        Timings::$entityMoveTimer->startTiming();
src/pocketmine/entity/Entity.php:        $newBB = $this->boundingBox->offsetCopy($dx, $dy, $dz);
src/pocketmine/entity/Entity.php:        $list = $this->level->getCollisionCubes($this, $newBB, false);
src/pocketmine/entity/Entity.php:            $this->boundingBox = $newBB;
src/pocketmine/entity/Entity.php:        $this->x = ($this->boundingBox->minX + $this->boundingBox->maxX) / 2;
src/pocketmine/entity/Entity.php:        $this->y = $this->boundingBox->minY - $this->ySize;
src/pocketmine/entity/Entity.php:        $this->z = ($this->boundingBox->minZ + $this->boundingBox->maxZ) / 2;
src/pocketmine/entity/Entity.php:        $this->checkChunks();
src/pocketmine/entity/Entity.php:        if (!$this->onGround or 0 != $dy) {
src/pocketmine/entity/Entity.php:            $bb = clone $this->boundingBox;
src/pocketmine/entity/Entity.php:            $bb->minY -= 0.75;
src/pocketmine/entity/Entity.php:            $this->onGround = false;
src/pocketmine/entity/Entity.php:            if (count($this->level->getCollisionBlocks($bb)) > 0) {
src/pocketmine/entity/Entity.php:                $this->onGround = true;
src/pocketmine/entity/Entity.php:        $this->isCollided = $this->onGround;
src/pocketmine/entity/Entity.php:        $this->updateFallState($dy, $this->onGround);
src/pocketmine/entity/Entity.php:        Timings::$entityMoveTimer->stopTiming();
src/pocketmine/entity/Entity.php:        $this->blocksAround = null;
src/pocketmine/entity/Entity.php:        Timings::$entityMoveTimer->startTiming();
src/pocketmine/entity/Entity.php:        if ($this->keepMovement) {
src/pocketmine/entity/Entity.php:            $this->boundingBox->offset($dx, $dy, $dz);
src/pocketmine/entity/Entity.php:            $this->ySize *= self::STEP_CLIP_MULTIPLIER;
src/pocketmine/entity/Entity.php:            if($this->isColliding){ //With cobweb?
src/pocketmine/entity/Entity.php:                $this->isColliding = false;
src/pocketmine/entity/Entity.php:                $this->motionX = 0;
src/pocketmine/entity/Entity.php:                $this->motionY = 0;
src/pocketmine/entity/Entity.php:                $this->motionZ = 0;
src/pocketmine/entity/Entity.php:            $axisalignedbb = clone $this->boundingBox;
src/pocketmine/entity/Entity.php:            /*$sneakFlag = $this->onGround and $this instanceof Player;
src/pocketmine/entity/Entity.php:                for($mov = 0.05; $dx != 0.0 and count($this->level->getCollisionCubes($this, $this->boundingBox->getOffsetBoundingBox($dx, -1, 0))) === 0; $movX = $dx){
src/pocketmine/entity/Entity.php:                    if($dx < $mov and $dx >= -$mov){
src/pocketmine/entity/Entity.php:                        $dx -= $mov;
src/pocketmine/entity/Entity.php:                for(; $dz != 0.0 and count($this->level->getCollisionCubes($this, $this->boundingBox->getOffsetBoundingBox(0, -1, $dz))) === 0; $movZ = $dz){
src/pocketmine/entity/Entity.php:                    if($dz < $mov and $dz >= -$mov){
src/pocketmine/entity/Entity.php:                        $dz -= $mov;
src/pocketmine/entity/Entity.php:            $list = $this->level->getCollisionCubes($this, $this->level->getTickRateTime() > 50 ? $this->boundingBox->offsetCopy($dx, $dy, $dz) : $this->boundingBox->addCoord($dx, $dy, $dz), false);
src/pocketmine/entity/Entity.php:                $dy = $bb->calculateYOffset($this->boundingBox, $dy);
src/pocketmine/entity/Entity.php:            $this->boundingBox->offset(0, $dy, 0);
src/pocketmine/entity/Entity.php:            $fallingFlag = ($this->onGround or ($dy != $movY and $movY < 0));
src/pocketmine/entity/Entity.php:                $dx = $bb->calculateXOffset($this->boundingBox, $dx);
src/pocketmine/entity/Entity.php:            $this->boundingBox->offset($dx, 0, 0);
src/pocketmine/entity/Entity.php:                $dz = $bb->calculateZOffset($this->boundingBox, $dz);
src/pocketmine/entity/Entity.php:            $this->boundingBox->offset(0, 0, $dz);
src/pocketmine/entity/Entity.php:            if ($this->stepHeight > 0 and $fallingFlag and ($movX != $dx or $movZ != $dz)) {
src/pocketmine/entity/Entity.php:                $dy = $this->stepHeight;
src/pocketmine/entity/Entity.php:                $axisalignedbb1 = clone $this->boundingBox;
src/pocketmine/entity/Entity.php:                $this->boundingBox->setBB($axisalignedbb);
src/pocketmine/entity/Entity.php:                $list = $this->level->getCollisionCubes($this, $this->boundingBox->addCoord($dx, $dy, $dz), false);
src/pocketmine/entity/Entity.php:                    $dy = $bb->calculateYOffset($this->boundingBox, $dy);
src/pocketmine/entity/Entity.php:                $this->boundingBox->offset(0, $dy, 0);
src/pocketmine/entity/Entity.php:                    $dx = $bb->calculateXOffset($this->boundingBox, $dx);
src/pocketmine/entity/Entity.php:                $this->boundingBox->offset($dx, 0, 0);
src/pocketmine/entity/Entity.php:                    $dz = $bb->calculateZOffset($this->boundingBox, $dz);
src/pocketmine/entity/Entity.php:                $this->boundingBox->offset(0, 0, $dz);
src/pocketmine/entity/Entity.php:                $reverseDY = -$dy;
src/pocketmine/entity/Entity.php:                    $reverseDY = $bb->calculateYOffset($this->boundingBox, $reverseDY);
src/pocketmine/entity/Entity.php:                $this->boundingBox->offset(0, $reverseDY, 0);
src/pocketmine/entity/Entity.php:                    $this->boundingBox->setBB($axisalignedbb1);
src/pocketmine/entity/Entity.php:                    $this->ySize += $dy;
src/pocketmine/entity/Entity.php:        $this->x = ($this->boundingBox->minX + $this->boundingBox->maxX) / 2;
src/pocketmine/entity/Entity.php:        $this->y = $this->boundingBox->minY - $this->ySize;
src/pocketmine/entity/Entity.php:        $this->z = ($this->boundingBox->minZ + $this->boundingBox->maxZ) / 2;
src/pocketmine/entity/Entity.php:        $this->checkChunks();
src/pocketmine/entity/Entity.php:        $this->checkBlockCollision();
src/pocketmine/entity/Entity.php:        $this->checkGroundState($movX, $movY, $movZ, $dx, $dy, $dz);
src/pocketmine/entity/Entity.php:        $this->updateFallState($dy, $this->onGround);
src/pocketmine/entity/Entity.php:            $this->motion->x = 0;
src/pocketmine/entity/Entity.php:            $this->motion->y = 0;
src/pocketmine/entity/Entity.php:            $this->motion->z = 0;
src/pocketmine/entity/Entity.php:        Timings::$entityMoveTimer->stopTiming();
src/pocketmine/entity/Entity.php:        $this->isCollidedVertically = $movY != $dy;
src/pocketmine/entity/Entity.php:        $this->isCollidedHorizontally = ($movX != $dx or $movZ != $dz);
src/pocketmine/entity/Entity.php:        $this->isCollided = ($this->isCollidedHorizontally or $this->isCollidedVertically);
src/pocketmine/entity/Entity.php:        $this->onGround = ($movY != $dy and $movY < 0);
src/pocketmine/entity/Entity.php:        if (null === $this->blocksAround) {
src/pocketmine/entity/Entity.php:            $inset = 0.001; //Offset against floating-point errors
src/pocketmine/entity/Entity.php:            $minX = (int) floor($this->boundingBox->minX + $inset);
src/pocketmine/entity/Entity.php:            $minY = (int) floor($this->boundingBox->minY + $inset);
src/pocketmine/entity/Entity.php:            $minZ = (int) floor($this->boundingBox->minZ + $inset);
src/pocketmine/entity/Entity.php:            $maxX = (int) floor($this->boundingBox->maxX - $inset);
src/pocketmine/entity/Entity.php:            $maxY = (int) floor($this->boundingBox->maxY - $inset);
src/pocketmine/entity/Entity.php:            $maxZ = (int) floor($this->boundingBox->maxZ - $inset);
src/pocketmine/entity/Entity.php:            $this->blocksAround = [];
src/pocketmine/entity/Entity.php:                        $block = $this->level->getBlockAt($x, $y, $z);
src/pocketmine/entity/Entity.php:                        if ($block->hasEntityCollision()) {
src/pocketmine/entity/Entity.php:                            $this->blocksAround[] = $block;
src/pocketmine/entity/Entity.php:        return $this->blocksAround;
src/pocketmine/entity/Entity.php:        $vector = $this->temporalVector->setComponents(0, 0, 0);
src/pocketmine/entity/Entity.php:        foreach ($this->getBlocksAround() as $block) {
src/pocketmine/entity/Entity.php:            $block->onEntityCollide($this);
src/pocketmine/entity/Entity.php:            $block->addVelocityToEntity($this, $vector);
src/pocketmine/entity/Entity.php:        if ($vector->lengthSquared() > 0) {
src/pocketmine/entity/Entity.php:            $vector = $vector->normalize();
src/pocketmine/entity/Entity.php:            $this->motion->x += $vector->x * $d;
src/pocketmine/entity/Entity.php:            $this->motion->y += $vector->y * $d;
src/pocketmine/entity/Entity.php:            $this->motion->z += $vector->z * $d;
src/pocketmine/entity/Entity.php:        return $this->asPosition();
src/pocketmine/entity/Entity.php:        return $this->asLocation();
src/pocketmine/entity/Entity.php:        if ($this->closed) {
src/pocketmine/entity/Entity.php:        if ($pos instanceof Position and null !== $pos->level and $pos->level !== $this->level) {
src/pocketmine/entity/Entity.php:            if (!$this->switchLevel($pos->getLevelNonNull())) {
src/pocketmine/entity/Entity.php:        $this->x = $pos->x;
src/pocketmine/entity/Entity.php:        $this->y = $pos->y;
src/pocketmine/entity/Entity.php:        $this->z = $pos->z;
src/pocketmine/entity/Entity.php:        $this->recalculateBoundingBox();
src/pocketmine/entity/Entity.php:        $this->blocksAround = null;
src/pocketmine/entity/Entity.php:        $this->checkChunks();
src/pocketmine/entity/Entity.php:        $this->yaw = $yaw;
src/pocketmine/entity/Entity.php:        $this->pitch = $pitch;
src/pocketmine/entity/Entity.php:        $this->scheduleUpdate();
src/pocketmine/entity/Entity.php:        if ($this->setPosition($pos)) {
src/pocketmine/entity/Entity.php:            $this->setRotation($yaw, $pitch);
src/pocketmine/entity/Entity.php:        $chunkX = $this->getFloorX() >> 4;
src/pocketmine/entity/Entity.php:        $chunkZ = $this->getFloorZ() >> 4;
src/pocketmine/entity/Entity.php:        if (null === $this->chunk or ($this->chunk->getX() !== $chunkX or $this->chunk->getZ() !== $chunkZ)) {
src/pocketmine/entity/Entity.php:            if (null !== $this->chunk) {
src/pocketmine/entity/Entity.php:                $this->chunk->removeEntity($this);
src/pocketmine/entity/Entity.php:            $this->chunk = $this->level->getChunk($chunkX, $chunkZ, true);
src/pocketmine/entity/Entity.php:            if (!$this->justCreated) {
src/pocketmine/entity/Entity.php:                $newChunk = $this->level->getViewersForPosition($this);
src/pocketmine/entity/Entity.php:                foreach ($this->hasSpawned as $player) {
src/pocketmine/entity/Entity.php:                    if (!isset($newChunk[$player->getLoaderId()])) {
src/pocketmine/entity/Entity.php:                        $this->despawnFrom($player);
src/pocketmine/entity/Entity.php:                        unset($newChunk[$player->getLoaderId()]);
src/pocketmine/entity/Entity.php:                    $this->spawnTo($player);
src/pocketmine/entity/Entity.php:            if (null === $this->chunk) {
src/pocketmine/entity/Entity.php:            $this->chunk->addEntity($this);
src/pocketmine/entity/Entity.php:        list($this->lastX, $this->lastY, $this->lastZ) = [$this->x, $this->y, $this->z];
src/pocketmine/entity/Entity.php:        list($this->lastYaw, $this->lastPitch) = [$this->yaw, $this->pitch];
src/pocketmine/entity/Entity.php:        $this->lastMotion = clone $this->motion;
src/pocketmine/entity/Entity.php:        return clone $this->motion;
src/pocketmine/entity/Entity.php:        if (!$this->justCreated) {
src/pocketmine/entity/Entity.php:            $ev->call();
src/pocketmine/entity/Entity.php:            if ($ev->isCancelled()) {
src/pocketmine/entity/Entity.php:        $this->motion = clone $motion;
src/pocketmine/entity/Entity.php:        if (!$this->justCreated) {
src/pocketmine/entity/Entity.php:            $this->updateMovement();
src/pocketmine/entity/Entity.php:        return $this->onGround;
src/pocketmine/entity/Entity.php:            $yaw = $yaw ?? $pos->yaw;
src/pocketmine/entity/Entity.php:            $pitch = $pitch ?? $pos->pitch;
src/pocketmine/entity/Entity.php:        $from = Position::fromObject($this, $this->level);
src/pocketmine/entity/Entity.php:        $to = Position::fromObject($pos, $pos instanceof Position ? $pos->getLevelNonNull() : $this->level);
src/pocketmine/entity/Entity.php:        $ev->call();
src/pocketmine/entity/Entity.php:        if ($ev->isCancelled()) {
src/pocketmine/entity/Entity.php:        $this->ySize = 0;
src/pocketmine/entity/Entity.php:        $pos = $ev->getTo();
src/pocketmine/entity/Entity.php:        $this->setMotion($this->temporalVector->setComponents(0, 0, 0));
src/pocketmine/entity/Entity.php:        if ($this->setPositionAndRotation($pos, $yaw ?? $this->yaw, $pitch ?? $this->pitch)) {
src/pocketmine/entity/Entity.php:            $this->resetFallDistance();
src/pocketmine/entity/Entity.php:            $this->setForceMovementUpdate();
src/pocketmine/entity/Entity.php:            $this->updateMovement(true);
src/pocketmine/entity/Entity.php:        if ($this->closed) {
src/pocketmine/entity/Entity.php:        if ($this->isValid()) {
src/pocketmine/entity/Entity.php:            $ev = new EntityLevelChangeEvent($this, $this->level, $targetLevel);
src/pocketmine/entity/Entity.php:            $ev->call();
src/pocketmine/entity/Entity.php:            if ($ev->isCancelled()) {
src/pocketmine/entity/Entity.php:            $this->level->removeEntity($this);
src/pocketmine/entity/Entity.php:            if (null !== $this->chunk) {
src/pocketmine/entity/Entity.php:                $this->chunk->removeEntity($this);
src/pocketmine/entity/Entity.php:            $this->despawnFromAll();
src/pocketmine/entity/Entity.php:        $this->setLevel($targetLevel);
src/pocketmine/entity/Entity.php:        $this->level->addEntity($this);
src/pocketmine/entity/Entity.php:        $this->chunk = null;
src/pocketmine/entity/Entity.php:        return $this->id;
src/pocketmine/entity/Entity.php:        return $this->hasSpawned;
src/pocketmine/entity/Entity.php:        $pk->entityRuntimeId = $this->getId();
src/pocketmine/entity/Entity.php:        $pk->type = AddActorPacket::LEGACY_ID_MAP_BC[static::NETWORK_ID];
src/pocketmine/entity/Entity.php:        $pk->position = $this->asVector3();
src/pocketmine/entity/Entity.php:        $pk->motion = $this->getMotion();
src/pocketmine/entity/Entity.php:        $pk->yaw = $this->yaw;
src/pocketmine/entity/Entity.php:        $pk->headYaw = $this->yaw; //TODO
src/pocketmine/entity/Entity.php:        $pk->pitch = $this->pitch;
src/pocketmine/entity/Entity.php:        $pk->attributes = $this->attributeMap->getAll();
src/pocketmine/entity/Entity.php:        $pk->metadata = $this->propertyManager->getAll();
src/pocketmine/entity/Entity.php:        $player->dataPacket($pk);
src/pocketmine/entity/Entity.php:        if (!isset($this->hasSpawned[$player->getLoaderId()]) and
src/pocketmine/entity/Entity.php:            null !== $this->chunk and
src/pocketmine/entity/Entity.php:            isset($player->usedChunks[$chunkHash = Level::chunkHash($this->chunk->getX(), $this->chunk->getZ())]) and
src/pocketmine/entity/Entity.php:            true === $player->usedChunks[$chunkHash]
src/pocketmine/entity/Entity.php:            $this->hasSpawned[$player->getLoaderId()] = $player;
src/pocketmine/entity/Entity.php:            $this->sendSpawnPacket($player);
src/pocketmine/entity/Entity.php:        if (null === $this->chunk or $this->closed) {
src/pocketmine/entity/Entity.php:        foreach ($this->level->getViewersForPosition($this) as $player) {
src/pocketmine/entity/Entity.php:            if ($player->isOnline()) {
src/pocketmine/entity/Entity.php:                $this->spawnTo($player);
src/pocketmine/entity/Entity.php:        foreach ($this->hasSpawned as $key => $player) {
src/pocketmine/entity/Entity.php:            unset($this->hasSpawned[$key]);
src/pocketmine/entity/Entity.php:            $this->spawnTo($player);
src/pocketmine/entity/Entity.php:        if (isset($this->hasSpawned[$player->getLoaderId()])) {
src/pocketmine/entity/Entity.php:                $pk->entityUniqueId = $this->id;
src/pocketmine/entity/Entity.php:                $player->dataPacket($pk);
src/pocketmine/entity/Entity.php:            unset($this->hasSpawned[$player->getLoaderId()]);
src/pocketmine/entity/Entity.php:        foreach ($this->hasSpawned as $player) {
src/pocketmine/entity/Entity.php:            $this->despawnFrom($player);
src/pocketmine/entity/Entity.php:        $this->needsDespawn = true;
src/pocketmine/entity/Entity.php:        $this->scheduleUpdate();
src/pocketmine/entity/Entity.php:        return $this->needsDespawn;
src/pocketmine/entity/Entity.php:        return $this->closed;
src/pocketmine/entity/Entity.php:        if ($this->closeInFlight) {
src/pocketmine/entity/Entity.php:        if (!$this->closed) {
src/pocketmine/entity/Entity.php:            $this->closeInFlight = true;
src/pocketmine/entity/Entity.php:            (new EntityDespawnEvent($this))->call();
src/pocketmine/entity/Entity.php:            $this->closed = true;
src/pocketmine/entity/Entity.php:            $this->despawnFromAll();
src/pocketmine/entity/Entity.php:            $this->hasSpawned = [];
src/pocketmine/entity/Entity.php:            if (null !== $this->chunk) {
src/pocketmine/entity/Entity.php:                $this->chunk->removeEntity($this);
src/pocketmine/entity/Entity.php:                $this->chunk = null;
src/pocketmine/entity/Entity.php:            if ($this->isValid()) {
src/pocketmine/entity/Entity.php:                $this->level->removeEntity($this);
src/pocketmine/entity/Entity.php:                $this->setLevel(null);
src/pocketmine/entity/Entity.php:            $this->namedtag = null;
src/pocketmine/entity/Entity.php:            $this->lastDamageCause = null;
src/pocketmine/entity/Entity.php:            $this->closeInFlight = false;
src/pocketmine/entity/Entity.php:        if ($this->getDataFlag($propertyId, $flagId) !== $value) {
src/pocketmine/entity/Entity.php:            $flags = (int) $this->propertyManager->getPropertyValue($propertyId, $propertyType);
src/pocketmine/entity/Entity.php:            $this->propertyManager->setPropertyValue($propertyId, $propertyType, $flags);
src/pocketmine/entity/Entity.php:        return (((int) $this->propertyManager->getPropertyValue($propertyId, -1)) & (1 << $flagId)) > 0;
src/pocketmine/entity/Entity.php:        return $this->getDataFlag($flagId >= 64 ? self::DATA_FLAGS2 : self::DATA_FLAGS, $flagId % 64);
src/pocketmine/entity/Entity.php:        $this->setDataFlag($flagId >= 64 ? self::DATA_FLAGS2 : self::DATA_FLAGS, $flagId % 64, $value, self::DATA_TYPE_LONG);
src/pocketmine/entity/Entity.php:     * @phpstan-param array<int, array{0: int, 1: mixed}> $data
src/pocketmine/entity/Entity.php:        $pk->entityRuntimeId = $this->getId();
src/pocketmine/entity/Entity.php:        $pk->metadata = $data ?? $this->propertyManager->getAll();
src/pocketmine/entity/Entity.php:            $p->dataPacket(clone $pk);
src/pocketmine/entity/Entity.php:            $this->dataPacket($pk);
src/pocketmine/entity/Entity.php:        $pk->entityRuntimeId = $this->id;
src/pocketmine/entity/Entity.php:        $pk->event = $eventId;
src/pocketmine/entity/Entity.php:        $pk->data = $eventData ?? 0;
src/pocketmine/entity/Entity.php:        $this->server->broadcastPacket($players ?? $this->getViewers(), $pk);
src/pocketmine/entity/Entity.php:        $this->close();
src/pocketmine/entity/Entity.php:        $this->server->getEntityMetadata()->setMetadata($this, $metadataKey, $newMetadataValue);
src/pocketmine/entity/Entity.php:        return $this->server->getEntityMetadata()->getMetadata($this, $metadataKey);
src/pocketmine/entity/Entity.php:        return $this->server->getEntityMetadata()->hasMetadata($this, $metadataKey);
src/pocketmine/entity/Entity.php:        $this->server->getEntityMetadata()->removeMetadata($this, $metadataKey, $owningPlugin);
src/pocketmine/entity/Entity.php:        return (new \ReflectionClass($this))->getShortName().'('.$this->getId().')';
src/pocketmine/entity/Entity.php:            return $this->fireTicks;
src/pocketmine/entity/Entity.php:            $this->setFireTicks($value);
src/pocketmine/entity/Human.php:		if($this->skin === null){
src/pocketmine/entity/Human.php:			$skinTag = $nbt->getCompoundTag("Skin");
src/pocketmine/entity/Human.php:				throw new \InvalidStateException((new \ReflectionClass($this))->getShortName() . " must have a valid skin set");
src/pocketmine/entity/Human.php:			$this->skin = self::deserializeSkinNBT($skinTag); //this throws if the skin is invalid
src/pocketmine/entity/Human.php:			$skinTag->getString("Name"),
src/pocketmine/entity/Human.php:			$skinTag->hasTag("Data", StringTag::class) ? $skinTag->getString("Data") : $skinTag->getByteArray("Data"), //old data (this used to be saved as a StringTag in older versions of PM)
src/pocketmine/entity/Human.php:			$skinTag->getByteArray("CapeData", ""),
src/pocketmine/entity/Human.php:			$skinTag->getString("GeometryName", ""),
src/pocketmine/entity/Human.php:			$skinTag->getByteArray("GeometryData", "")
src/pocketmine/entity/Human.php:		$skin->validate();
src/pocketmine/entity/Human.php:		return $this->uuid;
src/pocketmine/entity/Human.php:		return $this->rawUUID;
src/pocketmine/entity/Human.php:		return $this->skin;
src/pocketmine/entity/Human.php:		$skin->validate();
src/pocketmine/entity/Human.php:		$this->skin = $skin;
src/pocketmine/entity/Human.php:		$this->skin->debloatGeometryData();
src/pocketmine/entity/Human.php:		$pk->uuid = $this->getUniqueId();
src/pocketmine/entity/Human.php:		$pk->skin = SkinAdapterSingleton::get()->toSkinData($this->skin);
src/pocketmine/entity/Human.php:		$this->server->broadcastPacket($targets ?? $this->hasSpawned, $pk);
src/pocketmine/entity/Human.php:		if($this->isSprinting()){
src/pocketmine/entity/Human.php:			$this->exhaust(0.8, PlayerExhaustEvent::CAUSE_SPRINT_JUMPING);
src/pocketmine/entity/Human.php:			$this->exhaust(0.2, PlayerExhaustEvent::CAUSE_JUMPING);
src/pocketmine/entity/Human.php:		return $this->attributeMap->getAttribute(Attribute::HUNGER)->getValue();
src/pocketmine/entity/Human.php:		$attr = $this->attributeMap->getAttribute(Attribute::HUNGER);
src/pocketmine/entity/Human.php:		$old = $attr->getValue();
src/pocketmine/entity/Human.php:		$attr->setValue($new);
src/pocketmine/entity/Human.php:		// ranges: 18-20 (regen), 7-17 (none), 1-6 (no sprint), 0 (health depletion)
src/pocketmine/entity/Human.php:				$this->foodTickTimer = 0;
src/pocketmine/entity/Human.php:		return $this->attributeMap->getAttribute(Attribute::HUNGER)->getMaxValue();
src/pocketmine/entity/Human.php:		$attr = $this->attributeMap->getAttribute(Attribute::HUNGER);
src/pocketmine/entity/Human.php:		$amount += $attr->getValue();
src/pocketmine/entity/Human.php:		$amount = max(min($amount, $attr->getMaxValue()), $attr->getMinValue());
src/pocketmine/entity/Human.php:		$this->setFood($amount);
src/pocketmine/entity/Human.php:		return $this->getFood() < $this->getMaxFood();
src/pocketmine/entity/Human.php:		return $this->attributeMap->getAttribute(Attribute::SATURATION)->getValue();
src/pocketmine/entity/Human.php:		$this->attributeMap->getAttribute(Attribute::SATURATION)->setValue($saturation);
src/pocketmine/entity/Human.php:		$attr = $this->attributeMap->getAttribute(Attribute::SATURATION);
src/pocketmine/entity/Human.php:		$attr->setValue($attr->getValue() + $amount, true);
src/pocketmine/entity/Human.php:		return $this->attributeMap->getAttribute(Attribute::EXHAUSTION)->getValue();
src/pocketmine/entity/Human.php:		$this->attributeMap->getAttribute(Attribute::EXHAUSTION)->setValue($exhaustion);
src/pocketmine/entity/Human.php:		$ev->call();
src/pocketmine/entity/Human.php:		if($ev->isCancelled()){
src/pocketmine/entity/Human.php:		$exhaustion = $this->getExhaustion();
src/pocketmine/entity/Human.php:		$exhaustion += $ev->getAmount();
src/pocketmine/entity/Human.php:			$exhaustion -= 4.0;
src/pocketmine/entity/Human.php:			$saturation = $this->getSaturation();
src/pocketmine/entity/Human.php:				$saturation = max(0, $saturation - 1.0);
src/pocketmine/entity/Human.php:				$this->setSaturation($saturation);
src/pocketmine/entity/Human.php:				$food = $this->getFood();
src/pocketmine/entity/Human.php:					$food--;
src/pocketmine/entity/Human.php:					$this->setFood(max($food, 0));
src/pocketmine/entity/Human.php:		$this->setExhaustion($exhaustion);
src/pocketmine/entity/Human.php:		return $ev->getAmount();
src/pocketmine/entity/Human.php:		if($consumable instanceof MaybeConsumable and !$consumable->canBeConsumed()){
src/pocketmine/entity/Human.php:		if($consumable instanceof FoodSource && $consumable->requiresHunger() and !$this->isHungry()){
src/pocketmine/entity/Human.php:			$this->addFood($consumable->getFoodRestore());
src/pocketmine/entity/Human.php:			$this->addSaturation($consumable->getSaturationRestore());
src/pocketmine/entity/Human.php:		return (int) $this->attributeMap->getAttribute(Attribute::EXPERIENCE_LEVEL)->getValue();
src/pocketmine/entity/Human.php:		return $this->setXpAndProgress($level, null);
src/pocketmine/entity/Human.php:		$oldLevel = $this->getXpLevel();
src/pocketmine/entity/Human.php:		if($this->setXpLevel($oldLevel + $amount)){
src/pocketmine/entity/Human.php:				$newLevel = $this->getXpLevel();
src/pocketmine/entity/Human.php:					$this->playLevelUpSound($newLevel);
src/pocketmine/entity/Human.php:		return $this->addXpLevels(-$amount);
src/pocketmine/entity/Human.php:		return $this->attributeMap->getAttribute(Attribute::EXPERIENCE)->getValue();
src/pocketmine/entity/Human.php:		return $this->setXpAndProgress(null, $progress);
src/pocketmine/entity/Human.php:		return (int) (ExperienceUtils::getXpToCompleteLevel($this->getXpLevel()) * $this->getXpProgress());
src/pocketmine/entity/Human.php:		return ExperienceUtils::getXpToReachLevel($this->getXpLevel()) + $this->getRemainderXp();
src/pocketmine/entity/Human.php:		return $this->setXpAndProgress((int) $newLevel, $newLevel - ((int) $newLevel));
src/pocketmine/entity/Human.php:	 * @param bool $playSound Whether to play level-up and XP gained sounds.
src/pocketmine/entity/Human.php:		$oldLevel = $this->getXpLevel();
src/pocketmine/entity/Human.php:		$oldTotal = $this->getCurrentTotalXp();
src/pocketmine/entity/Human.php:		if($this->setCurrentTotalXp($oldTotal + $amount)){
src/pocketmine/entity/Human.php:				$this->totalXp += $amount;
src/pocketmine/entity/Human.php:				$newLevel = $this->getXpLevel();
src/pocketmine/entity/Human.php:					$this->playLevelUpSound($newLevel);
src/pocketmine/entity/Human.php:				}elseif($this->getCurrentTotalXp() > $oldTotal){
src/pocketmine/entity/Human.php:					$this->level->broadcastLevelEvent($this, LevelEventPacket::EVENT_SOUND_ORB, mt_rand());
src/pocketmine/entity/Human.php:		$this->level->broadcastLevelSoundEvent($this, LevelSoundEventPacket::SOUND_LEVELUP, (int) $volume);
src/pocketmine/entity/Human.php:		return $this->addXp(-$amount);
src/pocketmine/entity/Human.php:		if(!$this->justCreated){
src/pocketmine/entity/Human.php:			$ev = new PlayerExperienceChangeEvent($this, $this->getXpLevel(), $this->getXpProgress(), $level, $progress);
src/pocketmine/entity/Human.php:			$ev->call();
src/pocketmine/entity/Human.php:			if($ev->isCancelled()){
src/pocketmine/entity/Human.php:			$level = $ev->getNewLevel();
src/pocketmine/entity/Human.php:			$progress = $ev->getNewProgress();
src/pocketmine/entity/Human.php:			$this->getAttributeMap()->getAttribute(Attribute::EXPERIENCE_LEVEL)->setValue($level);
src/pocketmine/entity/Human.php:			$this->getAttributeMap()->getAttribute(Attribute::EXPERIENCE)->setValue($progress);
src/pocketmine/entity/Human.php:		return $this->totalXp;
src/pocketmine/entity/Human.php:		$this->totalXp = $amount;
src/pocketmine/entity/Human.php:		return $this->xpCooldown === 0;
src/pocketmine/entity/Human.php:		static $mainHandIndex = -1;
src/pocketmine/entity/Human.php:		if(($item = $this->inventory->getItemInHand()) instanceof Durable and $item->hasEnchantment(Enchantment::MENDING)){
src/pocketmine/entity/Human.php:		foreach($this->armorInventory->getContents() as $k => $armorItem){
src/pocketmine/entity/Human.php:			if($armorItem instanceof Durable and $armorItem->hasEnchantment(Enchantment::MENDING)){
src/pocketmine/entity/Human.php:			if($repairItem->getDamage() > 0){
src/pocketmine/entity/Human.php:				$repairAmount = min($repairItem->getDamage(), $xpValue * 2);
src/pocketmine/entity/Human.php:				$repairItem->setDamage($repairItem->getDamage() - $repairAmount);
src/pocketmine/entity/Human.php:				$xpValue -= (int) ceil($repairAmount / 2);
src/pocketmine/entity/Human.php:					$this->inventory->setItemInHand($repairItem);
src/pocketmine/entity/Human.php:					$this->armorInventory->setItem($k, $repairItem);
src/pocketmine/entity/Human.php:		$this->addXp($xpValue); //this will still get fired even if the value is 0 due to mending, to play sounds
src/pocketmine/entity/Human.php:		$this->resetXpCooldown();
src/pocketmine/entity/Human.php:		$this->xpCooldown = $value;
src/pocketmine/entity/Human.php:		return min(100, 7 * $this->getXpLevel());
src/pocketmine/entity/Human.php:		return $this->inventory;
src/pocketmine/entity/Human.php:		return $this->enderChestInventory;
src/pocketmine/entity/Human.php:		if($this->namedtag->hasTag("NameTag", StringTag::class)){
src/pocketmine/entity/Human.php:			$this->setNameTag($this->namedtag->getString("NameTag"));
src/pocketmine/entity/Human.php:		$this->uuid = UUID::fromData((string) $this->getId(), $this->skin->getSkinData(), $this->getNameTag());
src/pocketmine/entity/Human.php:		$this->setPlayerFlag(self::DATA_PLAYER_FLAG_SLEEP, false);
src/pocketmine/entity/Human.php:		$this->propertyManager->setBlockPos(self::DATA_PLAYER_BED_POSITION, null);
src/pocketmine/entity/Human.php:		$this->inventory = new PlayerInventory($this);
src/pocketmine/entity/Human.php:		$this->enderChestInventory = new EnderChestInventory();
src/pocketmine/entity/Human.php:		$this->initHumanData();
src/pocketmine/entity/Human.php:		$inventoryTag = $this->namedtag->getListTag("Inventory");
src/pocketmine/entity/Human.php:			$armorListener = $this->armorInventory->getEventProcessor();
src/pocketmine/entity/Human.php:			$this->armorInventory->setEventProcessor(null);
src/pocketmine/entity/Human.php:				$slot = $item->getByte("Slot");
src/pocketmine/entity/Human.php:					$this->armorInventory->setItem($slot - 100, Item::nbtDeserialize($item));
src/pocketmine/entity/Human.php:				}elseif($slot >= 9 and $slot < $this->inventory->getSize() + 9){
src/pocketmine/entity/Human.php:					$this->inventory->setItem($slot - 9, Item::nbtDeserialize($item));
src/pocketmine/entity/Human.php:			$this->armorInventory->setEventProcessor($armorListener);
src/pocketmine/entity/Human.php:		$enderChestInventoryTag = $this->namedtag->getListTag("EnderChestInventory");
src/pocketmine/entity/Human.php:				$this->enderChestInventory->setItem($item->getByte("Slot"), Item::nbtDeserialize($item));
src/pocketmine/entity/Human.php:		$this->inventory->setHeldItemIndex($this->namedtag->getInt("SelectedInventorySlot", 0), false);
src/pocketmine/entity/Human.php:		$this->inventory->setEventProcessor(new EntityInventoryEventProcessor($this));
src/pocketmine/entity/Human.php:		$this->setFood((float) $this->namedtag->getInt("foodLevel", (int) $this->getFood(), true));
src/pocketmine/entity/Human.php:		$this->setExhaustion($this->namedtag->getFloat("foodExhaustionLevel", $this->getExhaustion(), true));
src/pocketmine/entity/Human.php:		$this->setSaturation($this->namedtag->getFloat("foodSaturationLevel", $this->getSaturation(), true));
src/pocketmine/entity/Human.php:		$this->foodTickTimer = $this->namedtag->getInt("foodTickTimer", $this->foodTickTimer, true);
src/pocketmine/entity/Human.php:		$this->setXpLevel($this->namedtag->getInt("XpLevel", $this->getXpLevel(), true));
src/pocketmine/entity/Human.php:		$this->setXpProgress($this->namedtag->getFloat("XpP", $this->getXpProgress(), true));
src/pocketmine/entity/Human.php:		$this->totalXp = $this->namedtag->getInt("XpTotal", $this->totalXp, true);
src/pocketmine/entity/Human.php:		if($this->namedtag->hasTag("XpSeed", IntTag::class)){
src/pocketmine/entity/Human.php:			$this->xpSeed = $this->namedtag->getInt("XpSeed");
src/pocketmine/entity/Human.php:			$this->xpSeed = random_int(INT32_MIN, INT32_MAX);
src/pocketmine/entity/Human.php:		$this->attributeMap->addAttribute(Attribute::getAttribute(Attribute::SATURATION));
src/pocketmine/entity/Human.php:		$this->attributeMap->addAttribute(Attribute::getAttribute(Attribute::EXHAUSTION));
src/pocketmine/entity/Human.php:		$this->attributeMap->addAttribute(Attribute::getAttribute(Attribute::HUNGER));
src/pocketmine/entity/Human.php:		$this->attributeMap->addAttribute(Attribute::getAttribute(Attribute::EXPERIENCE_LEVEL));
src/pocketmine/entity/Human.php:		$this->attributeMap->addAttribute(Attribute::getAttribute(Attribute::EXPERIENCE));
src/pocketmine/entity/Human.php:		$this->doFoodTick($tickDiff);
src/pocketmine/entity/Human.php:		if($this->xpCooldown > 0){
src/pocketmine/entity/Human.php:			$this->xpCooldown--;
src/pocketmine/entity/Human.php:		if($this->isAlive()){
src/pocketmine/entity/Human.php:			$food = $this->getFood();
src/pocketmine/entity/Human.php:			$health = $this->getHealth();
src/pocketmine/entity/Human.php:			$difficulty = $this->level->getDifficulty();
src/pocketmine/entity/Human.php:			$this->foodTickTimer += $tickDiff;
src/pocketmine/entity/Human.php:			if($this->foodTickTimer >= 80){
src/pocketmine/entity/Human.php:				$this->foodTickTimer = 0;
src/pocketmine/entity/Human.php:			if($difficulty === Level::DIFFICULTY_PEACEFUL and $this->foodTickTimer % 10 === 0){
src/pocketmine/entity/Human.php:				if($food < $this->getMaxFood()){
src/pocketmine/entity/Human.php:					$this->addFood(1.0);
src/pocketmine/entity/Human.php:					$food = $this->getFood();
src/pocketmine/entity/Human.php:				if($this->foodTickTimer % 20 === 0 and $health < $this->getMaxHealth()){
src/pocketmine/entity/Human.php:					$this->heal(new EntityRegainHealthEvent($this, 1, EntityRegainHealthEvent::CAUSE_SATURATION));
src/pocketmine/entity/Human.php:			if($this->foodTickTimer === 0){
src/pocketmine/entity/Human.php:					if($health < $this->getMaxHealth()){
src/pocketmine/entity/Human.php:						$this->heal(new EntityRegainHealthEvent($this, 1, EntityRegainHealthEvent::CAUSE_SATURATION));
src/pocketmine/entity/Human.php:						$this->exhaust(3.0, PlayerExhaustEvent::CAUSE_HEALTH_REGEN);
src/pocketmine/entity/Human.php:						$this->attack(new EntityDamageEvent($this, EntityDamageEvent::CAUSE_STARVATION, 1));
src/pocketmine/entity/Human.php:				$this->setSprinting(false);
src/pocketmine/entity/Human.php:		return $this->getNameTag();
src/pocketmine/entity/Human.php:		$type = $source->getCause();
src/pocketmine/entity/Human.php:			and $this->inventory->getItemInHand() instanceof Totem){ //TODO: check offhand as well (when it's implemented)
src/pocketmine/entity/Human.php:			$compensation = $this->getHealth() - $source->getFinalDamage() - 1;
src/pocketmine/entity/Human.php:				$source->setModifier($compensation, EntityDamageEvent::MODIFIER_TOTEM);
src/pocketmine/entity/Human.php:		$totemModifier = $source->getModifier(EntityDamageEvent::MODIFIER_TOTEM);
src/pocketmine/entity/Human.php:			$this->removeAllEffects();
src/pocketmine/entity/Human.php:			$this->addEffect(new EffectInstance(Effect::getEffect(Effect::REGENERATION), 40 * 20, 1));
src/pocketmine/entity/Human.php:			$this->addEffect(new EffectInstance(Effect::getEffect(Effect::FIRE_RESISTANCE), 40 * 20, 1));
src/pocketmine/entity/Human.php:			$this->addEffect(new EffectInstance(Effect::getEffect(Effect::ABSORPTION), 5 * 20, 1));
src/pocketmine/entity/Human.php:			$this->broadcastEntityEvent(ActorEventPacket::CONSUME_TOTEM);
src/pocketmine/entity/Human.php:			$this->level->broadcastLevelEvent($this->add(0, $this->eyeHeight, 0), LevelEventPacket::EVENT_SOUND_TOTEM);
src/pocketmine/entity/Human.php:			$hand = $this->inventory->getItemInHand();
src/pocketmine/entity/Human.php:				$hand->pop(); //Plugins could alter max stack size
src/pocketmine/entity/Human.php:				$this->inventory->setItemInHand($hand);
src/pocketmine/entity/Human.php:			$this->inventory !== null ? array_values($this->inventory->getContents()) : [],
src/pocketmine/entity/Human.php:			$this->armorInventory !== null ? array_values($this->armorInventory->getContents()) : []
src/pocketmine/entity/Human.php:		), function(Item $item) : bool{ return !$item->hasEnchantment(Enchantment::VANISHING); });
src/pocketmine/entity/Human.php:		$this->namedtag->setInt("foodLevel", (int) $this->getFood(), true);
src/pocketmine/entity/Human.php:		$this->namedtag->setFloat("foodExhaustionLevel", $this->getExhaustion(), true);
src/pocketmine/entity/Human.php:		$this->namedtag->setFloat("foodSaturationLevel", $this->getSaturation(), true);
src/pocketmine/entity/Human.php:		$this->namedtag->setInt("foodTickTimer", $this->foodTickTimer);
src/pocketmine/entity/Human.php:		$this->namedtag->setInt("XpLevel", $this->getXpLevel());
src/pocketmine/entity/Human.php:		$this->namedtag->setFloat("XpP", $this->getXpProgress());
src/pocketmine/entity/Human.php:		$this->namedtag->setInt("XpTotal", $this->totalXp);
src/pocketmine/entity/Human.php:		$this->namedtag->setInt("XpSeed", $this->xpSeed);
src/pocketmine/entity/Human.php:		$this->namedtag->setTag($inventoryTag);
src/pocketmine/entity/Human.php:		if($this->inventory !== null){
src/pocketmine/entity/Human.php:			$slotCount = $this->inventory->getSize() + $this->inventory->getHotbarSize();
src/pocketmine/entity/Human.php:			for($slot = $this->inventory->getHotbarSize(); $slot < $slotCount; ++$slot){
src/pocketmine/entity/Human.php:				$item = $this->inventory->getItem($slot - 9);
src/pocketmine/entity/Human.php:				if(!$item->isNull()){
src/pocketmine/entity/Human.php:					$inventoryTag->push($item->nbtSerialize($slot));
src/pocketmine/entity/Human.php:				$item = $this->armorInventory->getItem($slot - 100);
src/pocketmine/entity/Human.php:				if(!$item->isNull()){
src/pocketmine/entity/Human.php:					$inventoryTag->push($item->nbtSerialize($slot));
src/pocketmine/entity/Human.php:			$this->namedtag->setInt("SelectedInventorySlot", $this->inventory->getHeldItemIndex());
src/pocketmine/entity/Human.php:		if($this->enderChestInventory !== null){
src/pocketmine/entity/Human.php:			$slotCount = $this->enderChestInventory->getSize();
src/pocketmine/entity/Human.php:				$item = $this->enderChestInventory->getItem($slot);
src/pocketmine/entity/Human.php:				if(!$item->isNull()){
src/pocketmine/entity/Human.php:					$items[] = $item->nbtSerialize($slot);
src/pocketmine/entity/Human.php:			$this->namedtag->setTag(new ListTag("EnderChestInventory", $items, NBT::TAG_Compound));
src/pocketmine/entity/Human.php:		if($this->skin !== null){
src/pocketmine/entity/Human.php:			$this->namedtag->setTag(new CompoundTag("Skin", [
src/pocketmine/entity/Human.php:				new StringTag("Name", $this->skin->getSkinId()),
src/pocketmine/entity/Human.php:				new ByteArrayTag("Data", $this->skin->getSkinData()),
src/pocketmine/entity/Human.php:				new ByteArrayTag("CapeData", $this->skin->getCapeData()),
src/pocketmine/entity/Human.php:				new StringTag("GeometryName", $this->skin->getGeometryName()),
src/pocketmine/entity/Human.php:				new ByteArrayTag("GeometryData", $this->skin->getGeometryData())
src/pocketmine/entity/Human.php:		$this->skin->validate();
src/pocketmine/entity/Human.php:			/* we don't use Server->updatePlayerListData() because that uses batches, which could cause race conditions in async compression mode */
src/pocketmine/entity/Human.php:			$pk->type = PlayerListPacket::TYPE_ADD;
src/pocketmine/entity/Human.php:			$pk->entries = [PlayerListEntry::createAdditionEntry($this->uuid, $this->id, $this->getName(), SkinAdapterSingleton::get()->toSkinData($this->skin))];
src/pocketmine/entity/Human.php:			$player->dataPacket($pk);
src/pocketmine/entity/Human.php:		$pk->uuid = $this->getUniqueId();
src/pocketmine/entity/Human.php:		$pk->username = $this->getName();
src/pocketmine/entity/Human.php:		$pk->entityRuntimeId = $this->getId();
src/pocketmine/entity/Human.php:		$pk->position = $this->asVector3();
src/pocketmine/entity/Human.php:		$pk->motion = $this->getMotion();
src/pocketmine/entity/Human.php:		$pk->yaw = $this->yaw;
src/pocketmine/entity/Human.php:		$pk->pitch = $this->pitch;
src/pocketmine/entity/Human.php:		$pk->item = $this->getInventory()->getItemInHand();
src/pocketmine/entity/Human.php:		$pk->metadata = $this->propertyManager->getAll();
src/pocketmine/entity/Human.php:		$player->dataPacket($pk);
src/pocketmine/entity/Human.php:		$this->sendData($player, [self::DATA_NAMETAG => [self::DATA_TYPE_STRING, $this->getNameTag()]]);
src/pocketmine/entity/Human.php:		$this->armorInventory->sendContents($player);
src/pocketmine/entity/Human.php:			$pk->type = PlayerListPacket::TYPE_REMOVE;
src/pocketmine/entity/Human.php:			$pk->entries = [PlayerListEntry::createRemovalEntry($this->uuid)];
src/pocketmine/entity/Human.php:			$player->dataPacket($pk);
src/pocketmine/entity/Human.php:		$pk->entityRuntimeId = $this->getId();
src/pocketmine/entity/Human.php:		$pk->position = $this->getOffsetPosition($this);
src/pocketmine/entity/Human.php:		$pk->yaw = $this->yaw;
src/pocketmine/entity/Human.php:		$pk->pitch = $this->pitch;
src/pocketmine/entity/Human.php:		$pk->headYaw = $this->yaw;
src/pocketmine/entity/Human.php:		$pk->mode = $teleport ? MovePlayerPacket::MODE_TELEPORT : MovePlayerPacket::MODE_NORMAL;
src/pocketmine/entity/Human.php:		$this->server->broadcastPacket($this->hasSpawned, $pk);
src/pocketmine/entity/Human.php:		if(!$this->closed){
src/pocketmine/entity/Human.php:			if($this->inventory !== null){
src/pocketmine/entity/Human.php:				$this->inventory->removeAllViewers(true);
src/pocketmine/entity/Human.php:				$this->inventory = null;
src/pocketmine/entity/Human.php:			if($this->enderChestInventory !== null){
src/pocketmine/entity/Human.php:				$this->enderChestInventory->removeAllViewers(true);
src/pocketmine/entity/Human.php:				$this->enderChestInventory = null;
src/pocketmine/entity/Human.php:	 * Wrapper around {@link Entity#getDataFlag} for player-specific data flag reading.
src/pocketmine/entity/Human.php:		return $this->getDataFlag(self::DATA_PLAYER_FLAGS, $flagId);
src/pocketmine/entity/Human.php:	 * Wrapper around {@link Entity#setDataFlag} for player-specific data flag setting.
src/pocketmine/entity/Human.php:		$this->setDataFlag(self::DATA_PLAYER_FLAGS, $flagId, $value, self::DATA_TYPE_BYTE);
src/pocketmine/entity/Attribute.php:		self::addAttribute(self::LUCK, "minecraft:luck", -1024.0, 1024.0, 0.0);
src/pocketmine/entity/Attribute.php:			if($a->getName() === $name){
src/pocketmine/entity/Attribute.php:		$this->id = $id;
src/pocketmine/entity/Attribute.php:		$this->name = $name;
src/pocketmine/entity/Attribute.php:		$this->minValue = $minValue;
src/pocketmine/entity/Attribute.php:		$this->maxValue = $maxValue;
src/pocketmine/entity/Attribute.php:		$this->defaultValue = $defaultValue;
src/pocketmine/entity/Attribute.php:		$this->shouldSend = $shouldSend;
src/pocketmine/entity/Attribute.php:		$this->currentValue = $this->defaultValue;
src/pocketmine/entity/Attribute.php:		return $this->minValue;
src/pocketmine/entity/Attribute.php:		if($minValue > ($max = $this->getMaxValue())){
src/pocketmine/entity/Attribute.php:		if($this->minValue != $minValue){
src/pocketmine/entity/Attribute.php:			$this->desynchronized = true;
src/pocketmine/entity/Attribute.php:			$this->minValue = $minValue;
src/pocketmine/entity/Attribute.php:		return $this->maxValue;
src/pocketmine/entity/Attribute.php:		if($maxValue < ($min = $this->getMinValue())){
src/pocketmine/entity/Attribute.php:		if($this->maxValue != $maxValue){
src/pocketmine/entity/Attribute.php:			$this->desynchronized = true;
src/pocketmine/entity/Attribute.php:			$this->maxValue = $maxValue;
src/pocketmine/entity/Attribute.php:		return $this->defaultValue;
src/pocketmine/entity/Attribute.php:		if($defaultValue > $this->getMaxValue() or $defaultValue < $this->getMinValue()){
src/pocketmine/entity/Attribute.php:			throw new \InvalidArgumentException("Default $defaultValue is outside the range " . $this->getMinValue() . " - " . $this->getMaxValue());
src/pocketmine/entity/Attribute.php:		if($this->defaultValue !== $defaultValue){
src/pocketmine/entity/Attribute.php:			$this->desynchronized = true;
src/pocketmine/entity/Attribute.php:			$this->defaultValue = $defaultValue;
src/pocketmine/entity/Attribute.php:		$this->setValue($this->getDefaultValue(), true);
src/pocketmine/entity/Attribute.php:		return $this->currentValue;
src/pocketmine/entity/Attribute.php:		if($value > $this->getMaxValue() or $value < $this->getMinValue()){
src/pocketmine/entity/Attribute.php:				throw new \InvalidArgumentException("Value $value is outside the range " . $this->getMinValue() . " - " . $this->getMaxValue());
src/pocketmine/entity/Attribute.php:			$value = min(max($value, $this->getMinValue()), $this->getMaxValue());
src/pocketmine/entity/Attribute.php:		if($this->currentValue != $value){
src/pocketmine/entity/Attribute.php:			$this->desynchronized = true;
src/pocketmine/entity/Attribute.php:			$this->currentValue = $value;
src/pocketmine/entity/Attribute.php:			$this->desynchronized = true;
src/pocketmine/entity/Attribute.php:		return $this->name;
src/pocketmine/entity/Attribute.php:		return $this->id;
src/pocketmine/entity/Attribute.php:		return $this->shouldSend;
src/pocketmine/entity/Attribute.php:		return $this->shouldSend and $this->desynchronized;
src/pocketmine/entity/Attribute.php:		$this->desynchronized = !$synced;
src/pocketmine/entity/Squid.php:		$this->setMaxHealth(10);
src/pocketmine/entity/Squid.php:		if($source->isCancelled()){
src/pocketmine/entity/Squid.php:			$this->swimSpeed = mt_rand(150, 350) / 2000;
src/pocketmine/entity/Squid.php:			$e = $source->getDamager();
src/pocketmine/entity/Squid.php:				$this->swimDirection = (new Vector3($this->x - $e->x, $this->y - $e->y, $this->z - $e->z))->normalize();
src/pocketmine/entity/Squid.php:			$this->broadcastEntityEvent(ActorEventPacket::SQUID_INK_CLOUD);
src/pocketmine/entity/Squid.php:		return new Vector3(mt_rand(-1000, 1000) / 1000, mt_rand(-500, 500) / 1000, mt_rand(-1000, 1000) / 1000);
src/pocketmine/entity/Squid.php:		if($this->closed){
src/pocketmine/entity/Squid.php:		if(++$this->switchDirectionTicker === 100){
src/pocketmine/entity/Squid.php:			$this->switchDirectionTicker = 0;
src/pocketmine/entity/Squid.php:				$this->swimDirection = null;
src/pocketmine/entity/Squid.php:		if($this->isAlive()){
src/pocketmine/entity/Squid.php:			if($this->y > 62 and $this->swimDirection !== null){
src/pocketmine/entity/Squid.php:				$this->swimDirection->y = -0.5;
src/pocketmine/entity/Squid.php:			$inWater = $this->isUnderwater();
src/pocketmine/entity/Squid.php:				$this->swimDirection = null;
src/pocketmine/entity/Squid.php:			}elseif($this->swimDirection !== null){
src/pocketmine/entity/Squid.php:				if($this->motion->lengthSquared() <= $this->swimDirection->lengthSquared()){
src/pocketmine/entity/Squid.php:					$this->motion = $this->swimDirection->multiply($this->swimSpeed);
src/pocketmine/entity/Squid.php:				$this->swimDirection = $this->generateRandomDirection();
src/pocketmine/entity/Squid.php:				$this->swimSpeed = mt_rand(50, 100) / 2000;
src/pocketmine/entity/Squid.php:			$f = sqrt(($this->motion->x ** 2) + ($this->motion->z ** 2));
src/pocketmine/entity/Squid.php:			$this->yaw = (-atan2($this->motion->x, $this->motion->z) * 180 / M_PI);
src/pocketmine/entity/Squid.php:			$this->pitch = (-atan2($f, $this->motion->y) * 180 / M_PI);
src/pocketmine/entity/Squid.php:		if(!$this->isUnderwater()){
src/pocketmine/PocketMine.php:     * This is the only non-class based file on this project.
src/pocketmine/PocketMine.php:        $messages[] = '32-bit systems/PHP are no longer supported. Please upgrade to a 64-bit system, or use a 64-bit PHP binary if this is a 64-bit system.';
src/pocketmine/PocketMine.php:            $messages[] = "php-leveldb >= 0.2.1 is required, while you have $leveldb_version.";
src/pocketmine/PocketMine.php:        $logger->warning('Xdebug extension is enabled. This has a major impact on performance.');
src/pocketmine/PocketMine.php:        $logger->warning('ChunkUtils extension is missing. Anvil-format worlds will experience degraded performance.');
src/pocketmine/PocketMine.php:    if (-1 !== ((int) ini_get('zend.assertions'))) {
src/pocketmine/PocketMine.php:        $logger->warning('Debugging assertions are enabled. This may degrade performance. To disable them, set `zend.assertions = -1` in php.ini.');
src/pocketmine/PocketMine.php:        $logger->warning('Non-packaged installation detected. This will degrade autoloading speed and make startup times longer.');
src/pocketmine/PocketMine.php:    ini_set('default_charset', 'utf-8');
src/pocketmine/PocketMine.php:            echo " - $m".PHP_EOL;
src/pocketmine/PocketMine.php:    error_reporting(-1);
src/pocketmine/PocketMine.php:    define('pocketmine\VERSION', $version->getFullVersion(true));
src/pocketmine/PocketMine.php:        $meta = $phar->getMetadata();
src/pocketmine/PocketMine.php:    $opts = getopt('', ['data:', 'plugins:', 'no-wizard', 'enable-ansi', 'disable-ansi']);
src/pocketmine/PocketMine.php:        //wait for a shared lock to avoid race conditions if two servers started at the same time - this makes sure the
src/pocketmine/PocketMine.php:    if (isset($opts['enable-ansi'])) {
src/pocketmine/PocketMine.php:    } elseif (isset($opts['disable-ansi'])) {
src/pocketmine/PocketMine.php:    $logger->registerStatic();
src/pocketmine/PocketMine.php:        $logger->warning($e);
src/pocketmine/PocketMine.php:        if (!file_exists(\pocketmine\DATA.'server.properties') and !isset($opts['no-wizard'])) {
src/pocketmine/PocketMine.php:            if (!$installer->run()) {
src/pocketmine/PocketMine.php:                $exitCode = -1;
src/pocketmine/PocketMine.php:        $autoloader->register(false);
src/pocketmine/PocketMine.php:        $logger->info('Stopping other threads');
src/pocketmine/PocketMine.php:        $killer->start(PTHREADS_INHERIT_NONE);
src/pocketmine/PocketMine.php:        usleep(10000); //Fixes ServerKiller not being able to start on single-core machines
src/pocketmine/PocketMine.php:        if (ThreadManager::getInstance()->stopAll() > 0) {
src/pocketmine/PocketMine.php:            $logger->debug('Some threads could not be stopped, performing a force-kill');
src/pocketmine/PocketMine.php:    $logger->shutdown();
src/pocketmine/PocketMine.php:    $logger->join();
src/pocketmine/permission/BanEntry.php:	public static $format = "Y-m-d H:i:s O";
src/pocketmine/permission/BanEntry.php:		$this->name = strtolower($name);
src/pocketmine/permission/BanEntry.php:		$this->creationDate = new \DateTime();
src/pocketmine/permission/BanEntry.php:		return $this->name;
src/pocketmine/permission/BanEntry.php:		return $this->creationDate;
src/pocketmine/permission/BanEntry.php:		$this->creationDate = $date;
src/pocketmine/permission/BanEntry.php:		return $this->source;
src/pocketmine/permission/BanEntry.php:		$this->source = $source;
src/pocketmine/permission/BanEntry.php:		return $this->expirationDate;
src/pocketmine/permission/BanEntry.php:		$this->expirationDate = $date;
src/pocketmine/permission/BanEntry.php:		return $this->expirationDate === null ? false : $this->expirationDate < $now;
src/pocketmine/permission/BanEntry.php:		return $this->reason;
src/pocketmine/permission/BanEntry.php:		$this->reason = $reason;
src/pocketmine/permission/BanEntry.php:		$str .= $this->getName();
src/pocketmine/permission/BanEntry.php:		$str .= $this->getCreated()->format(self::$format);
src/pocketmine/permission/BanEntry.php:		$str .= $this->getSource();
src/pocketmine/permission/BanEntry.php:		$str .= $this->getExpires() === null ? "Forever" : $this->getExpires()->format(self::$format);
src/pocketmine/permission/BanEntry.php:		$str .= $this->getReason();
src/pocketmine/permission/BanEntry.php:		self::parseDate($dateTime->format(self::$format));
src/pocketmine/permission/BanEntry.php:				$entry->setCreated(self::parseDate(array_shift($str)));
src/pocketmine/permission/BanEntry.php:				$entry->setSource(trim(array_shift($str)));
src/pocketmine/permission/BanEntry.php:					$entry->setExpires(self::parseDate($expire));
src/pocketmine/permission/BanEntry.php:				$entry->setReason(trim(array_shift($str)));
src/pocketmine/permission/Permission.php:	 * @phpstan-param array<string, array<string, mixed>> $data
src/pocketmine/permission/Permission.php:	 * @phpstan-param array<string, mixed> $data
src/pocketmine/permission/Permission.php:	 * @phpstan-var array<string, bool>
src/pocketmine/permission/Permission.php:	 * @phpstan-param array<string, bool> $children
src/pocketmine/permission/Permission.php:		$this->name = $name;
src/pocketmine/permission/Permission.php:		$this->description = $description ?? "";
src/pocketmine/permission/Permission.php:		$this->defaultValue = $defaultValue ?? self::$DEFAULT_PERMISSION;
src/pocketmine/permission/Permission.php:		$this->children = $children;
src/pocketmine/permission/Permission.php:		$this->recalculatePermissibles();
src/pocketmine/permission/Permission.php:		return $this->name;
src/pocketmine/permission/Permission.php:	 * @phpstan-return array<string, bool>
src/pocketmine/permission/Permission.php:		return $this->children;
src/pocketmine/permission/Permission.php:		return $this->defaultValue;
src/pocketmine/permission/Permission.php:		if($value !== $this->defaultValue){
src/pocketmine/permission/Permission.php:			$this->defaultValue = $value;
src/pocketmine/permission/Permission.php:			$this->recalculatePermissibles();
src/pocketmine/permission/Permission.php:		return $this->description;
src/pocketmine/permission/Permission.php:		$this->description = $value;
src/pocketmine/permission/Permission.php:		return PermissionManager::getInstance()->getPermissionSubscriptions($this->name);
src/pocketmine/permission/Permission.php:		$perms = $this->getPermissibles();
src/pocketmine/permission/Permission.php:		PermissionManager::getInstance()->recalculatePermissionDefaults($this);
src/pocketmine/permission/Permission.php:			$p->recalculatePermissions();
src/pocketmine/permission/Permission.php:			$name->getChildren()[$this->getName()] = $value;
src/pocketmine/permission/Permission.php:			$name->recalculatePermissibles();
src/pocketmine/permission/Permission.php:			$perm = PermissionManager::getInstance()->getPermission($name);
src/pocketmine/permission/Permission.php:				PermissionManager::getInstance()->addPermission($perm);
src/pocketmine/permission/Permission.php:			$this->addParent($perm, $value);
src/pocketmine/permission/PermissionAttachment.php:		if(!$plugin->isEnabled()){
src/pocketmine/permission/PermissionAttachment.php:			throw new PluginException("Plugin " . $plugin->getDescription()->getName() . " is disabled");
src/pocketmine/permission/PermissionAttachment.php:		$this->permissible = $permissible;
src/pocketmine/permission/PermissionAttachment.php:		$this->plugin = $plugin;
src/pocketmine/permission/PermissionAttachment.php:		return $this->plugin;
src/pocketmine/permission/PermissionAttachment.php:		$this->removed = $ex;
src/pocketmine/permission/PermissionAttachment.php:		return $this->removed;
src/pocketmine/permission/PermissionAttachment.php:		return $this->permissible;
src/pocketmine/permission/PermissionAttachment.php:		return $this->permissions;
src/pocketmine/permission/PermissionAttachment.php:		$this->permissions = [];
src/pocketmine/permission/PermissionAttachment.php:		$this->permissible->recalculatePermissions();
src/pocketmine/permission/PermissionAttachment.php:			$this->permissions[$key] = $value;
src/pocketmine/permission/PermissionAttachment.php:		$this->permissible->recalculatePermissions();
src/pocketmine/permission/PermissionAttachment.php:			unset($this->permissions[$node]);
src/pocketmine/permission/PermissionAttachment.php:		$this->permissible->recalculatePermissions();
src/pocketmine/permission/PermissionAttachment.php:		$name = $name instanceof Permission ? $name->getName() : $name;
src/pocketmine/permission/PermissionAttachment.php:		if(isset($this->permissions[$name])){
src/pocketmine/permission/PermissionAttachment.php:			if($this->permissions[$name] === $value){
src/pocketmine/permission/PermissionAttachment.php:			 * order -- BUT -- assigning to an existing index replaces the old value WITHOUT changing the order.
src/pocketmine/permission/PermissionAttachment.php:			unset($this->permissions[$name]);
src/pocketmine/permission/PermissionAttachment.php:		$this->permissions[$name] = $value;
src/pocketmine/permission/PermissionAttachment.php:		$this->permissible->recalculatePermissions();
src/pocketmine/permission/PermissionAttachment.php:		$name = $name instanceof Permission ? $name->getName() : $name;
src/pocketmine/permission/PermissionAttachment.php:		if(isset($this->permissions[$name])){
src/pocketmine/permission/PermissionAttachment.php:			unset($this->permissions[$name]);
src/pocketmine/permission/PermissionAttachment.php:			$this->permissible->recalculatePermissions();
src/pocketmine/permission/PermissionAttachment.php:		$this->permissible->removeAttachment($this);
src/pocketmine/permission/DefaultPermissions.php:			$parent->getChildren()[$perm->getName()] = true;
src/pocketmine/permission/DefaultPermissions.php:		PermissionManager::getInstance()->addPermission($perm);
src/pocketmine/permission/DefaultPermissions.php:		return PermissionManager::getInstance()->getPermission($perm->getName());
src/pocketmine/permission/DefaultPermissions.php:		$broadcasts->recalculatePermissibles();
src/pocketmine/permission/DefaultPermissions.php:		$spawnprotect->recalculatePermissibles();
src/pocketmine/permission/DefaultPermissions.php:		$whitelist->recalculatePermissibles();
src/pocketmine/permission/DefaultPermissions.php:		$ban->recalculatePermissibles();
src/pocketmine/permission/DefaultPermissions.php:		$unban->recalculatePermissibles();
src/pocketmine/permission/DefaultPermissions.php:		$op->recalculatePermissibles();
src/pocketmine/permission/DefaultPermissions.php:		$save->recalculatePermissibles();
src/pocketmine/permission/DefaultPermissions.php:		self::registerPermission(new Permission(self::ROOT . ".command.time.add", "Allows the user to fast-forward time"), $time);
src/pocketmine/permission/DefaultPermissions.php:		$time->recalculatePermissibles();
src/pocketmine/permission/DefaultPermissions.php:		$kill->recalculatePermissibles();
src/pocketmine/permission/DefaultPermissions.php:		$commands->recalculatePermissibles();
src/pocketmine/permission/DefaultPermissions.php:		$parent->recalculatePermissibles();
src/pocketmine/permission/BanList.php:		$this->file = $file;
src/pocketmine/permission/BanList.php:		return $this->enabled;
src/pocketmine/permission/BanList.php:		$this->enabled = $flag;
src/pocketmine/permission/BanList.php:		$this->removeExpired();
src/pocketmine/permission/BanList.php:		return $this->list[strtolower($name)] ?? null;
src/pocketmine/permission/BanList.php:		$this->removeExpired();
src/pocketmine/permission/BanList.php:		return $this->list;
src/pocketmine/permission/BanList.php:		if(!$this->isEnabled()){
src/pocketmine/permission/BanList.php:			$this->removeExpired();
src/pocketmine/permission/BanList.php:			return isset($this->list[$name]);
src/pocketmine/permission/BanList.php:		$this->list[$entry->getName()] = $entry;
src/pocketmine/permission/BanList.php:		$this->save();
src/pocketmine/permission/BanList.php:		$entry->setSource($source ?? $entry->getSource());
src/pocketmine/permission/BanList.php:		$entry->setExpires($expires);
src/pocketmine/permission/BanList.php:		$entry->setReason($reason ?? $entry->getReason());
src/pocketmine/permission/BanList.php:		$this->list[$entry->getName()] = $entry;
src/pocketmine/permission/BanList.php:		$this->save();
src/pocketmine/permission/BanList.php:		if(isset($this->list[$name])){
src/pocketmine/permission/BanList.php:			unset($this->list[$name]);
src/pocketmine/permission/BanList.php:			$this->save();
src/pocketmine/permission/BanList.php:		foreach($this->list as $name => $entry){
src/pocketmine/permission/BanList.php:			if($entry->hasExpired()){
src/pocketmine/permission/BanList.php:				unset($this->list[$name]);
src/pocketmine/permission/BanList.php:		$this->list = [];
src/pocketmine/permission/BanList.php:		$fp = @fopen($this->file, "r");
src/pocketmine/permission/BanList.php:							$this->list[$entry->getName()] = $entry;
src/pocketmine/permission/BanList.php:						$logger->critical("Failed to parse ban entry from string \"$line\": " . $e->getMessage());
src/pocketmine/permission/BanList.php:						$logger->logException($e);
src/pocketmine/permission/BanList.php:			MainLogger::getLogger()->error("Could not load ban list");
src/pocketmine/permission/BanList.php:		$this->removeExpired();
src/pocketmine/permission/BanList.php:		$fp = @fopen($this->file, "w");
src/pocketmine/permission/BanList.php:				fwrite($fp, "# Updated " . strftime("%x %H:%M", time()) . " by " . Server::getInstance()->getName() . " " . Server::getInstance()->getPocketMineVersion() . "\n");
src/pocketmine/permission/BanList.php:			foreach($this->list as $entry){
src/pocketmine/permission/BanList.php:				fwrite($fp, $entry->getString() . "\n");
src/pocketmine/permission/BanList.php:			MainLogger::getLogger()->error("Could not save ban list");
src/pocketmine/permission/PermissibleBase.php:		$this->opable = $opable;
src/pocketmine/permission/PermissibleBase.php:			$this->parent = $opable;
src/pocketmine/permission/PermissibleBase.php:		return $this->opable->isOp();
src/pocketmine/permission/PermissibleBase.php:		$this->opable->setOp($value);
src/pocketmine/permission/PermissibleBase.php:		return isset($this->permissions[$name instanceof Permission ? $name->getName() : $name]);
src/pocketmine/permission/PermissibleBase.php:			$name = $name->getName();
src/pocketmine/permission/PermissibleBase.php:		if($this->isPermissionSet($name)){
src/pocketmine/permission/PermissibleBase.php:			return $this->permissions[$name]->getValue();
src/pocketmine/permission/PermissibleBase.php:		if(($perm = PermissionManager::getInstance()->getPermission($name)) !== null){
src/pocketmine/permission/PermissibleBase.php:			$perm = $perm->getDefault();
src/pocketmine/permission/PermissibleBase.php:			return $perm === Permission::DEFAULT_TRUE or ($this->isOp() and $perm === Permission::DEFAULT_OP) or (!$this->isOp() and $perm === Permission::DEFAULT_NOT_OP);
src/pocketmine/permission/PermissibleBase.php:			return Permission::$DEFAULT_PERMISSION === Permission::DEFAULT_TRUE or ($this->isOp() and Permission::$DEFAULT_PERMISSION === Permission::DEFAULT_OP) or (!$this->isOp() and Permission::$DEFAULT_PERMISSION === Permission::DEFAULT_NOT_OP);
src/pocketmine/permission/PermissibleBase.php:		if(!$plugin->isEnabled()){
src/pocketmine/permission/PermissibleBase.php:			throw new PluginException("Plugin " . $plugin->getDescription()->getName() . " is disabled");
src/pocketmine/permission/PermissibleBase.php:		$result = new PermissionAttachment($plugin, $this->parent ?? $this);
src/pocketmine/permission/PermissibleBase.php:		$this->attachments[spl_object_hash($result)] = $result;
src/pocketmine/permission/PermissibleBase.php:			$result->setPermission($name, $value);
src/pocketmine/permission/PermissibleBase.php:		$this->recalculatePermissions();
src/pocketmine/permission/PermissibleBase.php:		if(isset($this->attachments[spl_object_hash($attachment)])){
src/pocketmine/permission/PermissibleBase.php:			unset($this->attachments[spl_object_hash($attachment)]);
src/pocketmine/permission/PermissibleBase.php:			if(($ex = $attachment->getRemovalCallback()) !== null){
src/pocketmine/permission/PermissibleBase.php:				$ex->attachmentRemoved($attachment);
src/pocketmine/permission/PermissibleBase.php:			$this->recalculatePermissions();
src/pocketmine/permission/PermissibleBase.php:		Timings::$permissibleCalculationTimer->startTiming();
src/pocketmine/permission/PermissibleBase.php:		$this->clearPermissions();
src/pocketmine/permission/PermissibleBase.php:		$defaults = $permManager->getDefaultPermissions($this->isOp());
src/pocketmine/permission/PermissibleBase.php:		$permManager->subscribeToDefaultPerms($this->isOp(), $this->parent ?? $this);
src/pocketmine/permission/PermissibleBase.php:			$name = $perm->getName();
src/pocketmine/permission/PermissibleBase.php:			$this->permissions[$name] = new PermissionAttachmentInfo($this->parent ?? $this, $name, null, true);
src/pocketmine/permission/PermissibleBase.php:			$permManager->subscribeToPermission($name, $this->parent ?? $this);
src/pocketmine/permission/PermissibleBase.php:			$this->calculateChildPermissions($perm->getChildren(), false, null);
src/pocketmine/permission/PermissibleBase.php:		foreach($this->attachments as $attachment){
src/pocketmine/permission/PermissibleBase.php:			$this->calculateChildPermissions($attachment->getPermissions(), false, $attachment);
src/pocketmine/permission/PermissibleBase.php:		Timings::$permissibleCalculationTimer->stopTiming();
src/pocketmine/permission/PermissibleBase.php:		$permManager->unsubscribeFromAllPermissions($this->parent ?? $this);
src/pocketmine/permission/PermissibleBase.php:		$permManager->unsubscribeFromDefaultPerms(false, $this->parent ?? $this);
src/pocketmine/permission/PermissibleBase.php:		$permManager->unsubscribeFromDefaultPerms(true, $this->parent ?? $this);
src/pocketmine/permission/PermissibleBase.php:		$this->permissions = [];
src/pocketmine/permission/PermissibleBase.php:			$perm = $permManager->getPermission($name);
src/pocketmine/permission/PermissibleBase.php:			$this->permissions[$name] = new PermissionAttachmentInfo($this->parent ?? $this, $name, $attachment, $value);
src/pocketmine/permission/PermissibleBase.php:			$permManager->subscribeToPermission($name, $this->parent ?? $this);
src/pocketmine/permission/PermissibleBase.php:				$this->calculateChildPermissions($perm->getChildren(), !$value, $attachment);
src/pocketmine/permission/PermissibleBase.php:		return $this->permissions;
src/pocketmine/permission/PermissionManager.php:		return $this->permissions[$name] ?? null;
src/pocketmine/permission/PermissionManager.php:		if(!isset($this->permissions[$permission->getName()])){
src/pocketmine/permission/PermissionManager.php:			$this->permissions[$permission->getName()] = $permission;
src/pocketmine/permission/PermissionManager.php:			$this->calculatePermissionDefault($permission);
src/pocketmine/permission/PermissionManager.php:			unset($this->permissions[$permission->getName()]);
src/pocketmine/permission/PermissionManager.php:			unset($this->permissions[$permission]);
src/pocketmine/permission/PermissionManager.php:			return $this->defaultPermsOp;
src/pocketmine/permission/PermissionManager.php:			return $this->defaultPerms;
src/pocketmine/permission/PermissionManager.php:		if(isset($this->permissions[$permission->getName()])){
src/pocketmine/permission/PermissionManager.php:			unset($this->defaultPermsOp[$permission->getName()]);
src/pocketmine/permission/PermissionManager.php:			unset($this->defaultPerms[$permission->getName()]);
src/pocketmine/permission/PermissionManager.php:			$this->calculatePermissionDefault($permission);
src/pocketmine/permission/PermissionManager.php:		Timings::$permissionDefaultTimer->startTiming();
src/pocketmine/permission/PermissionManager.php:		if($permission->getDefault() === Permission::DEFAULT_OP or $permission->getDefault() === Permission::DEFAULT_TRUE){
src/pocketmine/permission/PermissionManager.php:			$this->defaultPermsOp[$permission->getName()] = $permission;
src/pocketmine/permission/PermissionManager.php:			$this->dirtyPermissibles(true);
src/pocketmine/permission/PermissionManager.php:		if($permission->getDefault() === Permission::DEFAULT_NOT_OP or $permission->getDefault() === Permission::DEFAULT_TRUE){
src/pocketmine/permission/PermissionManager.php:			$this->defaultPerms[$permission->getName()] = $permission;
src/pocketmine/permission/PermissionManager.php:			$this->dirtyPermissibles(false);
src/pocketmine/permission/PermissionManager.php:		Timings::$permissionDefaultTimer->stopTiming();
src/pocketmine/permission/PermissionManager.php:		foreach($this->getDefaultPermSubscriptions($op) as $p){
src/pocketmine/permission/PermissionManager.php:			$p->recalculatePermissions();
src/pocketmine/permission/PermissionManager.php:		if(!isset($this->permSubs[$permission])){
src/pocketmine/permission/PermissionManager.php:			$this->permSubs[$permission] = [];
src/pocketmine/permission/PermissionManager.php:		$this->permSubs[$permission][spl_object_hash($permissible)] = $permissible;
src/pocketmine/permission/PermissionManager.php:		if(isset($this->permSubs[$permission])){
src/pocketmine/permission/PermissionManager.php:			unset($this->permSubs[$permission][spl_object_hash($permissible)]);
src/pocketmine/permission/PermissionManager.php:			if(count($this->permSubs[$permission]) === 0){
src/pocketmine/permission/PermissionManager.php:				unset($this->permSubs[$permission]);
src/pocketmine/permission/PermissionManager.php:		foreach($this->permSubs as $permission => &$subs){
src/pocketmine/permission/PermissionManager.php:				unset($this->permSubs[$permission]);
src/pocketmine/permission/PermissionManager.php:		return $this->permSubs[$permission] ?? [];
src/pocketmine/permission/PermissionManager.php:			$this->defSubsOp[spl_object_hash($permissible)] = $permissible;
src/pocketmine/permission/PermissionManager.php:			$this->defSubs[spl_object_hash($permissible)] = $permissible;
src/pocketmine/permission/PermissionManager.php:			unset($this->defSubsOp[spl_object_hash($permissible)]);
src/pocketmine/permission/PermissionManager.php:			unset($this->defSubs[spl_object_hash($permissible)]);
src/pocketmine/permission/PermissionManager.php:			return $this->defSubsOp;
src/pocketmine/permission/PermissionManager.php:		return $this->defSubs;
src/pocketmine/permission/PermissionManager.php:		return $this->permissions;
src/pocketmine/permission/PermissionManager.php:		$this->permissions = [];
src/pocketmine/permission/PermissionManager.php:		$this->defaultPerms = [];
src/pocketmine/permission/PermissionManager.php:		$this->defaultPermsOp = [];
src/pocketmine/permission/PermissionAttachmentInfo.php:		$this->permissible = $permissible;
src/pocketmine/permission/PermissionAttachmentInfo.php:		$this->permission = $permission;
src/pocketmine/permission/PermissionAttachmentInfo.php:		$this->attachment = $attachment;
src/pocketmine/permission/PermissionAttachmentInfo.php:		$this->value = $value;
src/pocketmine/permission/PermissionAttachmentInfo.php:		return $this->permissible;
src/pocketmine/permission/PermissionAttachmentInfo.php:		return $this->permission;
src/pocketmine/permission/PermissionAttachmentInfo.php:		return $this->attachment;
src/pocketmine/permission/PermissionAttachmentInfo.php:		return $this->value;
src/pocketmine/plugin/PluginLogger.php:		$this->attachments[spl_object_hash($attachment)] = $attachment;
src/pocketmine/plugin/PluginLogger.php:		unset($this->attachments[spl_object_hash($attachment)]);
src/pocketmine/plugin/PluginLogger.php:		$this->attachments = [];
src/pocketmine/plugin/PluginLogger.php:		return $this->attachments;
src/pocketmine/plugin/PluginLogger.php:		$prefix = $context->getDescription()->getPrefix();
src/pocketmine/plugin/PluginLogger.php:		$this->pluginName = $prefix != null ? "[$prefix] " : "[" . $context->getDescription()->getName() . "] ";
src/pocketmine/plugin/PluginLogger.php:		$this->log(LogLevel::EMERGENCY, $message);
src/pocketmine/plugin/PluginLogger.php:		$this->log(LogLevel::ALERT, $message);
src/pocketmine/plugin/PluginLogger.php:		$this->log(LogLevel::CRITICAL, $message);
src/pocketmine/plugin/PluginLogger.php:		$this->log(LogLevel::ERROR, $message);
src/pocketmine/plugin/PluginLogger.php:		$this->log(LogLevel::WARNING, $message);
src/pocketmine/plugin/PluginLogger.php:		$this->log(LogLevel::NOTICE, $message);
src/pocketmine/plugin/PluginLogger.php:		$this->log(LogLevel::INFO, $message);
src/pocketmine/plugin/PluginLogger.php:		$this->log(LogLevel::DEBUG, $message);
src/pocketmine/plugin/PluginLogger.php:		Server::getInstance()->getLogger()->logException($e, $trace);
src/pocketmine/plugin/PluginLogger.php:		Server::getInstance()->getLogger()->log($level, $this->pluginName . $message);
src/pocketmine/plugin/PluginLogger.php:		foreach($this->attachments as $attachment){
src/pocketmine/plugin/PluginLogger.php:			$attachment->log($level, $message);
src/pocketmine/plugin/PluginBase.php:		$this->loader = $loader;
src/pocketmine/plugin/PluginBase.php:		$this->server = $server;
src/pocketmine/plugin/PluginBase.php:		$this->description = $description;
src/pocketmine/plugin/PluginBase.php:		$this->dataFolder = rtrim($dataFolder, "/" . DIRECTORY_SEPARATOR) . "/";
src/pocketmine/plugin/PluginBase.php:		$this->file = rtrim($file, "/" . DIRECTORY_SEPARATOR) . "/";
src/pocketmine/plugin/PluginBase.php:		$this->configFile = $this->dataFolder . "config.yml";
src/pocketmine/plugin/PluginBase.php:		$this->logger = new PluginLogger($this);
src/pocketmine/plugin/PluginBase.php:		$this->scheduler = new TaskScheduler($this->logger, $this->getFullName());
src/pocketmine/plugin/PluginBase.php:		return $this->isEnabled;
src/pocketmine/plugin/PluginBase.php:		if($this->isEnabled !== $enabled){
src/pocketmine/plugin/PluginBase.php:			$this->isEnabled = $enabled;
src/pocketmine/plugin/PluginBase.php:			if($this->isEnabled){
src/pocketmine/plugin/PluginBase.php:				$this->onEnable();
src/pocketmine/plugin/PluginBase.php:				$this->onDisable();
src/pocketmine/plugin/PluginBase.php:		return !$this->isEnabled;
src/pocketmine/plugin/PluginBase.php:		return $this->dataFolder;
src/pocketmine/plugin/PluginBase.php:		return $this->description;
src/pocketmine/plugin/PluginBase.php:		return $this->logger;
src/pocketmine/plugin/PluginBase.php:		$command = $this->getServer()->getPluginCommand($name);
src/pocketmine/plugin/PluginBase.php:		if($command === null or $command->getPlugin() !== $this){
src/pocketmine/plugin/PluginBase.php:			$command = $this->getServer()->getPluginCommand(strtolower($this->description->getName()) . ":" . $name);
src/pocketmine/plugin/PluginBase.php:		if($command instanceof PluginIdentifiableCommand and $command->getPlugin() === $this){
src/pocketmine/plugin/PluginBase.php:		return strpos($this->file, "phar://") === 0;
src/pocketmine/plugin/PluginBase.php:		if(file_exists($this->file . "resources/" . $filename)){
src/pocketmine/plugin/PluginBase.php:			$resource = fopen($this->file . "resources/" . $filename, "rb");
src/pocketmine/plugin/PluginBase.php:		if(($resource = $this->getResource($filename)) === null){
src/pocketmine/plugin/PluginBase.php:		$out = $this->dataFolder . $filename;
src/pocketmine/plugin/PluginBase.php:		if(is_dir($this->file . "resources/")){
src/pocketmine/plugin/PluginBase.php:			foreach(new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($this->file . "resources/")) as $resource){
src/pocketmine/plugin/PluginBase.php:				if($resource->isFile()){
src/pocketmine/plugin/PluginBase.php:					$path = str_replace(DIRECTORY_SEPARATOR, "/", substr((string) $resource, strlen($this->file . "resources/")));
src/pocketmine/plugin/PluginBase.php:		if($this->config === null){
src/pocketmine/plugin/PluginBase.php:			$this->reloadConfig();
src/pocketmine/plugin/PluginBase.php:		return $this->config;
src/pocketmine/plugin/PluginBase.php:		if(!$this->getConfig()->save()){
src/pocketmine/plugin/PluginBase.php:			$this->getLogger()->critical("Could not save config to " . $this->configFile);
src/pocketmine/plugin/PluginBase.php:		if(!file_exists($this->configFile)){
src/pocketmine/plugin/PluginBase.php:			return $this->saveResource("config.yml", false);
src/pocketmine/plugin/PluginBase.php:		$this->saveDefaultConfig();
src/pocketmine/plugin/PluginBase.php:		$this->config = new Config($this->configFile);
src/pocketmine/plugin/PluginBase.php:		return $this->server;
src/pocketmine/plugin/PluginBase.php:		return $this->description->getName();
src/pocketmine/plugin/PluginBase.php:		return $this->description->getFullName();
src/pocketmine/plugin/PluginBase.php:		return $this->file;
src/pocketmine/plugin/PluginBase.php:		return $this->loader;
src/pocketmine/plugin/PluginBase.php:		return $this->scheduler;
src/pocketmine/plugin/RegisteredListener.php:		$this->listener = $listener;
src/pocketmine/plugin/RegisteredListener.php:		$this->priority = $priority;
src/pocketmine/plugin/RegisteredListener.php:		$this->plugin = $plugin;
src/pocketmine/plugin/RegisteredListener.php:		$this->executor = $executor;
src/pocketmine/plugin/RegisteredListener.php:		$this->ignoreCancelled = $ignoreCancelled;
src/pocketmine/plugin/RegisteredListener.php:		$this->timings = $timings;
src/pocketmine/plugin/RegisteredListener.php:		return $this->listener;
src/pocketmine/plugin/RegisteredListener.php:		return $this->plugin;
src/pocketmine/plugin/RegisteredListener.php:		return $this->priority;
src/pocketmine/plugin/RegisteredListener.php:		if($event instanceof Cancellable and $event->isCancelled() and $this->isIgnoringCancelled()){
src/pocketmine/plugin/RegisteredListener.php:		$this->timings->startTiming();
src/pocketmine/plugin/RegisteredListener.php:		$this->executor->execute($this->listener, $event);
src/pocketmine/plugin/RegisteredListener.php:		$this->timings->stopTiming();
src/pocketmine/plugin/RegisteredListener.php:		$this->timings->remove();
src/pocketmine/plugin/RegisteredListener.php:		return $this->ignoreCancelled;
src/pocketmine/plugin/PluginManager.php:	 * @phpstan-var array<class-string<PluginLoader>, PluginLoader>
src/pocketmine/plugin/PluginManager.php:		$this->server = $server;
src/pocketmine/plugin/PluginManager.php:		$this->commandMap = $commandMap;
src/pocketmine/plugin/PluginManager.php:		$this->pluginDataDirectory = $pluginDataDirectory;
src/pocketmine/plugin/PluginManager.php:		if($this->pluginDataDirectory !== null){
src/pocketmine/plugin/PluginManager.php:			if(!file_exists($this->pluginDataDirectory)){
src/pocketmine/plugin/PluginManager.php:				@mkdir($this->pluginDataDirectory, 0777, true);
src/pocketmine/plugin/PluginManager.php:			}elseif(!is_dir($this->pluginDataDirectory)){
src/pocketmine/plugin/PluginManager.php:				throw new \RuntimeException("Plugin data path $this->pluginDataDirectory exists and is not a directory");
src/pocketmine/plugin/PluginManager.php:		if(isset($this->plugins[$name])){
src/pocketmine/plugin/PluginManager.php:			return $this->plugins[$name];
src/pocketmine/plugin/PluginManager.php:		$this->fileAssociations[get_class($loader)] = $loader;
src/pocketmine/plugin/PluginManager.php:		return $this->plugins;
src/pocketmine/plugin/PluginManager.php:		if($this->pluginDataDirectory !== null){
src/pocketmine/plugin/PluginManager.php:			return $this->pluginDataDirectory . $pluginName;
src/pocketmine/plugin/PluginManager.php:		foreach($loaders ?? $this->fileAssociations as $loader){
src/pocketmine/plugin/PluginManager.php:			if($loader->canLoadPlugin($path)){
src/pocketmine/plugin/PluginManager.php:				$description = $loader->getPluginDescription($path);
src/pocketmine/plugin/PluginManager.php:					$this->server->getLogger()->info($this->server->getLanguage()->translateString("pocketmine.plugin.load", [$description->getFullName()]));
src/pocketmine/plugin/PluginManager.php:						$description->checkRequiredExtensions();
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->error($ex->getMessage());
src/pocketmine/plugin/PluginManager.php:					$dataFolder = $this->getDataDirectory($path, $description->getName());
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->error("Projected dataFolder '" . $dataFolder . "' for " . $description->getName() . " exists and is not a directory");
src/pocketmine/plugin/PluginManager.php:					$prefixed = $loader->getAccessProtocol() . $path;
src/pocketmine/plugin/PluginManager.php:					$loader->loadPlugin($prefixed);
src/pocketmine/plugin/PluginManager.php:					$mainClass = $description->getMain();
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->error("Main class for plugin " . $description->getName() . " not found");
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->error("Main class for plugin " . $description->getName() . " is not an instance of " . Plugin::class);
src/pocketmine/plugin/PluginManager.php:						$plugin = new $mainClass($loader, $this->server, $description, $dataFolder, $prefixed);
src/pocketmine/plugin/PluginManager.php:						$plugin->onLoad();
src/pocketmine/plugin/PluginManager.php:						$this->plugins[$plugin->getDescription()->getName()] = $plugin;
src/pocketmine/plugin/PluginManager.php:						$pluginCommands = $this->parseYamlCommands($plugin);
src/pocketmine/plugin/PluginManager.php:							$this->commandMap->registerAll($plugin->getDescription()->getName(), $pluginCommands);
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->logException($e);
src/pocketmine/plugin/PluginManager.php:	 * @phpstan-param list<class-string<PluginLoader>> $newLoaders
src/pocketmine/plugin/PluginManager.php:				if(isset($this->fileAssociations[$key])){
src/pocketmine/plugin/PluginManager.php:					$loaders[$key] = $this->fileAssociations[$key];
src/pocketmine/plugin/PluginManager.php:			$loaders = $this->fileAssociations;
src/pocketmine/plugin/PluginManager.php:				if(!$loader->canLoadPlugin($file)){
src/pocketmine/plugin/PluginManager.php:					$description = $loader->getPluginDescription($file);
src/pocketmine/plugin/PluginManager.php:					$name = $description->getName();
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->error($this->server->getLanguage()->translateString("pocketmine.plugin.loadError", [$name, "%pocketmine.plugin.restrictedName"]));
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->warning($this->server->getLanguage()->translateString("pocketmine.plugin.spacesDiscouraged", [$name]));
src/pocketmine/plugin/PluginManager.php:					if(isset($plugins[$name]) or $this->getPlugin($name) instanceof Plugin){
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->error($this->server->getLanguage()->translateString("pocketmine.plugin.duplicateError", [$name]));
src/pocketmine/plugin/PluginManager.php:					if(!$this->isCompatibleApi(...$description->getCompatibleApis())){
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->error($this->server->getLanguage()->translateString("pocketmine.plugin.loadError", [
src/pocketmine/plugin/PluginManager.php:							$this->server->getLanguage()->translateString("%pocketmine.plugin.incompatibleAPI", [implode(", ", $description->getCompatibleApis())])
src/pocketmine/plugin/PluginManager.php:					if(count($description->getCompatibleOperatingSystems()) > 0 and !in_array(Utils::getOS(), $description->getCompatibleOperatingSystems(), true)) {
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->error($this->server->getLanguage()->translateString("pocketmine.plugin.loadError", [
src/pocketmine/plugin/PluginManager.php:							$this->server->getLanguage()->translateString("%pocketmine.plugin.incompatibleOS", [implode(", ", $description->getCompatibleOperatingSystems())])
src/pocketmine/plugin/PluginManager.php:					if(count($pluginMcpeProtocols = $description->getCompatibleMcpeProtocols()) > 0){
src/pocketmine/plugin/PluginManager.php:							$this->server->getLogger()->error($this->server->getLanguage()->translateString("pocketmine.plugin.loadError", [
src/pocketmine/plugin/PluginManager.php:								$this->server->getLanguage()->translateString("%pocketmine.plugin.incompatibleProtocol", [implode(", ", $pluginMcpeProtocols)])
src/pocketmine/plugin/PluginManager.php:					$softDependencies[$name] = array_merge($softDependencies[$name] ?? [], $description->getSoftDepend());
src/pocketmine/plugin/PluginManager.php:					$dependencies[$name] = $description->getDepend();
src/pocketmine/plugin/PluginManager.php:					foreach($description->getLoadBefore() as $before){
src/pocketmine/plugin/PluginManager.php:					$this->server->getLogger()->error($this->server->getLanguage()->translateString("pocketmine.plugin.fileError", [$file, $directory, $e->getMessage()]));
src/pocketmine/plugin/PluginManager.php:					$this->server->getLogger()->logException($e);
src/pocketmine/plugin/PluginManager.php:						if(isset($loadedPlugins[$dependency]) or $this->getPlugin($dependency) instanceof Plugin){
src/pocketmine/plugin/PluginManager.php:							$this->server->getLogger()->critical($this->server->getLanguage()->translateString("pocketmine.plugin.loadError", [
src/pocketmine/plugin/PluginManager.php:								$this->server->getLanguage()->translateString("%pocketmine.plugin.unknownDependency", [$dependency])
src/pocketmine/plugin/PluginManager.php:						if(isset($loadedPlugins[$dependency]) or $this->getPlugin($dependency) instanceof Plugin){
src/pocketmine/plugin/PluginManager.php:							$this->server->getLogger()->debug("Successfully resolved soft dependency \"$dependency\" for plugin \"$name\"");
src/pocketmine/plugin/PluginManager.php:							$this->server->getLogger()->debug("Skipping resolution of missing soft dependency \"$dependency\" for plugin \"$name\"");
src/pocketmine/plugin/PluginManager.php:							$this->server->getLogger()->debug("Deferring resolution of soft dependency \"$dependency\" for plugin \"$name\" (found but not loaded yet)");
src/pocketmine/plugin/PluginManager.php:					if(($plugin = $this->loadPlugin($file, $loaders)) instanceof Plugin){
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->critical($this->server->getLanguage()->translateString("pocketmine.plugin.genericLoadError", [$name]));
src/pocketmine/plugin/PluginManager.php:					$this->server->getLogger()->critical($this->server->getLanguage()->translateString("pocketmine.plugin.loadError", [$name, "%pocketmine.plugin.circularDependency"]));
src/pocketmine/plugin/PluginManager.php:		$serverString = $this->server->getApiVersion();
src/pocketmine/plugin/PluginManager.php:		$serverApi = array_pad(explode("-", $serverString, 2), 2, "");
src/pocketmine/plugin/PluginManager.php:			//    or: majorVersion.minorVersion.patch-devBuild (3.0.0-alpha1)
src/pocketmine/plugin/PluginManager.php:				$pluginApi = array_pad(explode("-", $version, 2), 2, ""); //0 = version, 1 = suffix (optional)
src/pocketmine/plugin/PluginManager.php:		return PermissionManager::getInstance()->getPermission($name);
src/pocketmine/plugin/PluginManager.php:		return PermissionManager::getInstance()->addPermission($permission);
src/pocketmine/plugin/PluginManager.php:		PermissionManager::getInstance()->removePermission($permission);
src/pocketmine/plugin/PluginManager.php:		return PermissionManager::getInstance()->getDefaultPermissions($op);
src/pocketmine/plugin/PluginManager.php:		PermissionManager::getInstance()->recalculatePermissionDefaults($permission);
src/pocketmine/plugin/PluginManager.php:		PermissionManager::getInstance()->subscribeToPermission($permission, $permissible);
src/pocketmine/plugin/PluginManager.php:		PermissionManager::getInstance()->unsubscribeFromPermission($permission, $permissible);
src/pocketmine/plugin/PluginManager.php:		PermissionManager::getInstance()->unsubscribeFromAllPermissions($permissible);
src/pocketmine/plugin/PluginManager.php:		return PermissionManager::getInstance()->getPermissionSubscriptions($permission);
src/pocketmine/plugin/PluginManager.php:		PermissionManager::getInstance()->subscribeToDefaultPerms($op, $permissible);
src/pocketmine/plugin/PluginManager.php:		PermissionManager::getInstance()->unsubscribeFromDefaultPerms($op, $permissible);
src/pocketmine/plugin/PluginManager.php:		return PermissionManager::getInstance()->getDefaultPermSubscriptions($op);
src/pocketmine/plugin/PluginManager.php:		return PermissionManager::getInstance()->getPermissions();
src/pocketmine/plugin/PluginManager.php:		return isset($this->plugins[$plugin->getDescription()->getName()]) and $plugin->isEnabled();
src/pocketmine/plugin/PluginManager.php:		if(!$plugin->isEnabled()){
src/pocketmine/plugin/PluginManager.php:				$this->server->getLogger()->info($this->server->getLanguage()->translateString("pocketmine.plugin.enable", [$plugin->getDescription()->getFullName()]));
src/pocketmine/plugin/PluginManager.php:				foreach($plugin->getDescription()->getPermissions() as $perm){
src/pocketmine/plugin/PluginManager.php:					$permManager->addPermission($perm);
src/pocketmine/plugin/PluginManager.php:				$plugin->getScheduler()->setEnabled(true);
src/pocketmine/plugin/PluginManager.php:				$plugin->setEnabled(true);
src/pocketmine/plugin/PluginManager.php:				$this->enabledPlugins[$plugin->getDescription()->getName()] = $plugin;
src/pocketmine/plugin/PluginManager.php:				(new PluginEnableEvent($plugin))->call();
src/pocketmine/plugin/PluginManager.php:				$this->server->getLogger()->logException($e);
src/pocketmine/plugin/PluginManager.php:				$this->disablePlugin($plugin);
src/pocketmine/plugin/PluginManager.php:		foreach($plugin->getDescription()->getCommands() as $key => $data){
src/pocketmine/plugin/PluginManager.php:				$this->server->getLogger()->critical($this->server->getLanguage()->translateString("pocketmine.plugin.commandError", [$key, $plugin->getDescription()->getFullName()]));
src/pocketmine/plugin/PluginManager.php:					$newCmd->setDescription($data["description"]);
src/pocketmine/plugin/PluginManager.php:					$newCmd->setUsage($data["usage"]);
src/pocketmine/plugin/PluginManager.php:							$this->server->getLogger()->critical($this->server->getLanguage()->translateString("pocketmine.plugin.aliasError", [$alias, $plugin->getDescription()->getFullName()]));
src/pocketmine/plugin/PluginManager.php:					$newCmd->setAliases($aliasList);
src/pocketmine/plugin/PluginManager.php:						$newCmd->setPermission($data["permission"] ? "true" : "false");
src/pocketmine/plugin/PluginManager.php:						$newCmd->setPermission($data["permission"]);
src/pocketmine/plugin/PluginManager.php:				if(isset($data["permission-message"])){
src/pocketmine/plugin/PluginManager.php:					$newCmd->setPermissionMessage($data["permission-message"]);
src/pocketmine/plugin/PluginManager.php:		foreach($this->getPlugins() as $plugin){
src/pocketmine/plugin/PluginManager.php:			$this->disablePlugin($plugin);
src/pocketmine/plugin/PluginManager.php:		if($plugin->isEnabled()){
src/pocketmine/plugin/PluginManager.php:			$this->server->getLogger()->info($this->server->getLanguage()->translateString("pocketmine.plugin.disable", [$plugin->getDescription()->getFullName()]));
src/pocketmine/plugin/PluginManager.php:			(new PluginDisableEvent($plugin))->call();
src/pocketmine/plugin/PluginManager.php:			unset($this->enabledPlugins[$plugin->getDescription()->getName()]);
src/pocketmine/plugin/PluginManager.php:				$plugin->setEnabled(false);
src/pocketmine/plugin/PluginManager.php:				$this->server->getLogger()->logException($e);
src/pocketmine/plugin/PluginManager.php:			$plugin->getScheduler()->shutdown();
src/pocketmine/plugin/PluginManager.php:			foreach($plugin->getDescription()->getPermissions() as $perm){
src/pocketmine/plugin/PluginManager.php:				$permManager->removePermission($perm);
src/pocketmine/plugin/PluginManager.php:		foreach($this->enabledPlugins as $p){
src/pocketmine/plugin/PluginManager.php:			$p->getScheduler()->mainThreadHeartbeat($currentTick);
src/pocketmine/plugin/PluginManager.php:		$this->disablePlugins();
src/pocketmine/plugin/PluginManager.php:		$this->plugins = [];
src/pocketmine/plugin/PluginManager.php:		$this->enabledPlugins = [];
src/pocketmine/plugin/PluginManager.php:		$this->fileAssociations = [];
src/pocketmine/plugin/PluginManager.php:		$event->call();
src/pocketmine/plugin/PluginManager.php:		if(!$plugin->isEnabled()){
src/pocketmine/plugin/PluginManager.php:		foreach($reflection->getMethods(\ReflectionMethod::IS_PUBLIC) as $method){
src/pocketmine/plugin/PluginManager.php:			if(!$method->isStatic() and $method->getDeclaringClass()->implementsInterface(Listener::class)){
src/pocketmine/plugin/PluginManager.php:				$tags = Utils::parseDocComment((string) $method->getDocComment());
src/pocketmine/plugin/PluginManager.php:				$parameters = $method->getParameters();
src/pocketmine/plugin/PluginManager.php:				$handlerClosure = $method->getClosure($listener);
src/pocketmine/plugin/PluginManager.php:					$paramType = $parameters[0]->getType();
src/pocketmine/plugin/PluginManager.php:					if($paramType instanceof \ReflectionNamedType && !$paramType->isBuiltin()){
src/pocketmine/plugin/PluginManager.php:						/** @phpstan-var class-string $paramClass */
src/pocketmine/plugin/PluginManager.php:						$paramClass = $paramType->getName();
src/pocketmine/plugin/PluginManager.php:					if(isset($tags["softDepend"]) && !isset($this->plugins[$tags["softDepend"]])){
src/pocketmine/plugin/PluginManager.php:						$this->server->getLogger()->debug("Not registering @softDepend listener " . Utils::getNiceClosureName($handlerClosure) . "() because plugin \"" . $tags["softDepend"] . "\" not found");
src/pocketmine/plugin/PluginManager.php:				if($eventClass === null or !$eventClass->isSubclassOf(Event::class)){
src/pocketmine/plugin/PluginManager.php:				$this->registerEvent($eventClass->getName(), $listener, $priority, new MethodEventExecutor($method->getName()), $plugin, $ignoreCancelled);
src/pocketmine/plugin/PluginManager.php:	 * @phpstan-param class-string<Event> $event
src/pocketmine/plugin/PluginManager.php:		if(!$plugin->isEnabled()){
src/pocketmine/plugin/PluginManager.php:		$timings = new TimingsHandler("Plugin: " . $plugin->getDescription()->getFullName() . " Event: " . get_class($listener) . "::" . ($executor instanceof MethodEventExecutor ? $executor->getMethod() : "???") . "(" . (new \ReflectionClass($event))->getShortName() . ")");
src/pocketmine/plugin/PluginManager.php:		$this->getEventListeners($event)->register(new RegisteredListener($listener, $executor, $priority, $plugin, $ignoreCancelled, $timings));
src/pocketmine/plugin/MethodEventExecutor.php:		$this->method = $method;
src/pocketmine/plugin/MethodEventExecutor.php:		$listener->{$this->getMethod()}($event);
src/pocketmine/plugin/MethodEventExecutor.php:		return $this->method;
src/pocketmine/plugin/PluginDescription.php:	 * @phpstan-var array<string, mixed>
src/pocketmine/plugin/PluginDescription.php:	 * @phpstan-var array<string, list<string>>
src/pocketmine/plugin/PluginDescription.php:	 * @phpstan-var array<string, array<string, mixed>>
src/pocketmine/plugin/PluginDescription.php:		$this->loadMap(!is_array($yamlString) ? yaml_parse($yamlString) : $yamlString);
src/pocketmine/plugin/PluginDescription.php:		$this->map = $plugin;
src/pocketmine/plugin/PluginDescription.php:		$this->name = $plugin["name"];
src/pocketmine/plugin/PluginDescription.php:		if(preg_match('/^[A-Za-z0-9 _.-]+$/', $this->name) === 0){
src/pocketmine/plugin/PluginDescription.php:		$this->name = str_replace(" ", "_", $this->name);
src/pocketmine/plugin/PluginDescription.php:		$this->version = (string) $plugin["version"];
src/pocketmine/plugin/PluginDescription.php:		$this->main = $plugin["main"];
src/pocketmine/plugin/PluginDescription.php:		if(stripos($this->main, "pocketmine\\") === 0){
src/pocketmine/plugin/PluginDescription.php:		$this->api = array_map("\strval", (array) ($plugin["api"] ?? []));
src/pocketmine/plugin/PluginDescription.php:		$this->compatibleMcpeProtocols = array_map("\intval", (array) ($plugin["mcpe-protocol"] ?? []));
src/pocketmine/plugin/PluginDescription.php:		$this->compatibleOperatingSystems = array_map("\strval", (array) ($plugin["os"] ?? []));
src/pocketmine/plugin/PluginDescription.php:			$this->commands = $plugin["commands"];
src/pocketmine/plugin/PluginDescription.php:			$this->depend = (array) $plugin["depend"];
src/pocketmine/plugin/PluginDescription.php:				$this->extensions[$k] = array_map('strval', is_array($v) ? $v : [$v]);
src/pocketmine/plugin/PluginDescription.php:		$this->softDepend = (array) ($plugin["softdepend"] ?? $this->softDepend);
src/pocketmine/plugin/PluginDescription.php:		$this->loadBefore = (array) ($plugin["loadbefore"] ?? $this->loadBefore);
src/pocketmine/plugin/PluginDescription.php:		$this->website = (string) ($plugin["website"] ?? $this->website);
src/pocketmine/plugin/PluginDescription.php:		$this->description = (string) ($plugin["description"] ?? $this->description);
src/pocketmine/plugin/PluginDescription.php:		$this->prefix = (string) ($plugin["prefix"] ?? $this->prefix);
src/pocketmine/plugin/PluginDescription.php:				$this->order = constant(PluginLoadOrder::class . "::" . $order);
src/pocketmine/plugin/PluginDescription.php:		$this->authors = [];
src/pocketmine/plugin/PluginDescription.php:				$this->authors = $plugin["author"];
src/pocketmine/plugin/PluginDescription.php:				$this->authors[] = $plugin["author"];
src/pocketmine/plugin/PluginDescription.php:				$this->authors[] = $author;
src/pocketmine/plugin/PluginDescription.php:			$this->permissions = Permission::loadPermissions($plugin["permissions"]);
src/pocketmine/plugin/PluginDescription.php:		return $this->name . " v" . $this->version;
src/pocketmine/plugin/PluginDescription.php:		return $this->api;
src/pocketmine/plugin/PluginDescription.php:		return $this->compatibleMcpeProtocols;
src/pocketmine/plugin/PluginDescription.php:		return $this->compatibleOperatingSystems;
src/pocketmine/plugin/PluginDescription.php:		return $this->authors;
src/pocketmine/plugin/PluginDescription.php:		return $this->prefix;
src/pocketmine/plugin/PluginDescription.php:	 * @phpstan-return array<string, array<string, mixed>>
src/pocketmine/plugin/PluginDescription.php:		return $this->commands;
src/pocketmine/plugin/PluginDescription.php:	 * @phpstan-return array<string, list<string>>
src/pocketmine/plugin/PluginDescription.php:		return $this->extensions;
src/pocketmine/plugin/PluginDescription.php:		foreach($this->extensions as $name => $versionConstrs){
src/pocketmine/plugin/PluginDescription.php:		return $this->depend;
src/pocketmine/plugin/PluginDescription.php:		return $this->description;
src/pocketmine/plugin/PluginDescription.php:		return $this->loadBefore;
src/pocketmine/plugin/PluginDescription.php:		return $this->main;
src/pocketmine/plugin/PluginDescription.php:		return $this->name;
src/pocketmine/plugin/PluginDescription.php:		return $this->order;
src/pocketmine/plugin/PluginDescription.php:		return $this->permissions;
src/pocketmine/plugin/PluginDescription.php:		return $this->softDepend;
src/pocketmine/plugin/PluginDescription.php:		return $this->version;
src/pocketmine/plugin/PluginDescription.php:		return $this->website;
src/pocketmine/plugin/PluginDescription.php:	 * @phpstan-return array<string, mixed>
src/pocketmine/plugin/PluginDescription.php:		return $this->map;
src/pocketmine/plugin/ScriptPluginLoader.php:		return is_file($path) and substr($path, -strlen($ext)) === $ext;
src/pocketmine/plugin/ScriptPluginLoader.php:			if(preg_match("/^[ \t]+\\*[ \t]+@([a-zA-Z]+)([ \t]+(.*))?$/", $line, $matches) > 0){
src/pocketmine/plugin/PharPluginLoader.php:		$this->loader = $loader;
src/pocketmine/plugin/PharPluginLoader.php:		return is_file($path) and substr($path, -strlen($ext)) === $ext;
src/pocketmine/plugin/PharPluginLoader.php:		$this->loader->addPath("$file/src");
src/pocketmine/plugin/PharPluginLoader.php:			return new PluginDescription($phar["plugin.yml"]->getContent());
src/pocketmine/CrashDump.php:	 * @phpstan-var array<string, mixed>
src/pocketmine/CrashDump.php:		$this->time = microtime(true);
src/pocketmine/CrashDump.php:		$this->server = $server;
src/pocketmine/CrashDump.php:		if(!is_dir($this->server->getDataPath() . "crashdumps")){
src/pocketmine/CrashDump.php:			mkdir($this->server->getDataPath() . "crashdumps");
src/pocketmine/CrashDump.php:		$this->path = $this->server->getDataPath() . "crashdumps/" . date("D_M_j-H.i.s-T_Y", (int) $this->time) . ".log";
src/pocketmine/CrashDump.php:		$fp = @fopen($this->path, "wb");
src/pocketmine/CrashDump.php:		$this->fp = $fp;
src/pocketmine/CrashDump.php:		$this->data["format_version"] = self::FORMAT_VERSION;
src/pocketmine/CrashDump.php:		$this->data["time"] = $this->time;
src/pocketmine/CrashDump.php:		$this->data["uptime"] = $this->time - \pocketmine\START_TIME;
src/pocketmine/CrashDump.php:		$this->addLine($this->server->getName() . " Crash Dump " . date("D M j H:i:s T Y", (int) $this->time));
src/pocketmine/CrashDump.php:		$this->addLine();
src/pocketmine/CrashDump.php:		$this->baseCrash();
src/pocketmine/CrashDump.php:		$this->generalData();
src/pocketmine/CrashDump.php:		$this->pluginsData();
src/pocketmine/CrashDump.php:		$this->extraData();
src/pocketmine/CrashDump.php:		$this->encodeData();
src/pocketmine/CrashDump.php:		fclose($this->fp);
src/pocketmine/CrashDump.php:		return $this->path;
src/pocketmine/CrashDump.php:		return $this->encodedData;
src/pocketmine/CrashDump.php:	 * @phpstan-return array<string, mixed>
src/pocketmine/CrashDump.php:		return $this->data;
src/pocketmine/CrashDump.php:		$this->addLine();
src/pocketmine/CrashDump.php:		$this->addLine("----------------------REPORT THE DATA BELOW THIS LINE-----------------------");
src/pocketmine/CrashDump.php:		$this->addLine();
src/pocketmine/CrashDump.php:		$this->addLine("===BEGIN CRASH DUMP===");
src/pocketmine/CrashDump.php:		$json = json_encode($this->data, JSON_UNESCAPED_SLASHES);
src/pocketmine/CrashDump.php:		$this->encodedData = $zlibEncoded;
src/pocketmine/CrashDump.php:		foreach(str_split(base64_encode($this->encodedData), 76) as $line){
src/pocketmine/CrashDump.php:			$this->addLine($line);
src/pocketmine/CrashDump.php:		$this->addLine("===END CRASH DUMP===");
src/pocketmine/CrashDump.php:		if($this->server->getPluginManager() instanceof PluginManager){
src/pocketmine/CrashDump.php:			$this->addLine();
src/pocketmine/CrashDump.php:			$this->addLine("Loaded plugins:");
src/pocketmine/CrashDump.php:			$this->data["plugins"] = [];
src/pocketmine/CrashDump.php:			foreach($this->server->getPluginManager()->getPlugins() as $p){
src/pocketmine/CrashDump.php:				$d = $p->getDescription();
src/pocketmine/CrashDump.php:				$this->data["plugins"][$d->getName()] = [
src/pocketmine/CrashDump.php:					"name" => $d->getName(),
src/pocketmine/CrashDump.php:					"version" => $d->getVersion(),
src/pocketmine/CrashDump.php:					"authors" => $d->getAuthors(),
src/pocketmine/CrashDump.php:					"api" => $d->getCompatibleApis(),
src/pocketmine/CrashDump.php:					"enabled" => $p->isEnabled(),
src/pocketmine/CrashDump.php:					"depends" => $d->getDepend(),
src/pocketmine/CrashDump.php:					"softDepends" => $d->getSoftDepend(),
src/pocketmine/CrashDump.php:					"main" => $d->getMain(),
src/pocketmine/CrashDump.php:					"load" => $d->getOrder() === PluginLoadOrder::POSTWORLD ? "POSTWORLD" : "STARTUP",
src/pocketmine/CrashDump.php:					"website" => $d->getWebsite()
src/pocketmine/CrashDump.php:				$this->addLine($d->getName() . " " . $d->getVersion() . " by " . implode(", ", $d->getAuthors()) . " for API(s) " . implode(", ", $d->getCompatibleApis()));
src/pocketmine/CrashDump.php:		if($this->server->getProperty("auto-report.send-settings", true) !== false){
src/pocketmine/CrashDump.php:			$this->data["parameters"] = (array) $argv;
src/pocketmine/CrashDump.php:			$this->data["server.properties"] = @file_get_contents($this->server->getDataPath() . "server.properties");
src/pocketmine/CrashDump.php:			$this->data["server.properties"] = preg_replace("#^rcon\\.password=(.*)$#m", "rcon.password=******", $this->data["server.properties"]);
src/pocketmine/CrashDump.php:			$this->data["pocketmine.yml"] = @file_get_contents($this->server->getDataPath() . "pocketmine.yml");
src/pocketmine/CrashDump.php:			$this->data["pocketmine.yml"] = "";
src/pocketmine/CrashDump.php:			$this->data["server.properties"] = "";
src/pocketmine/CrashDump.php:			$this->data["parameters"] = [];
src/pocketmine/CrashDump.php:		$this->data["extensions"] = $extensions;
src/pocketmine/CrashDump.php:		if($this->server->getProperty("auto-report.send-phpinfo", true) !== false){
src/pocketmine/CrashDump.php:			$this->data["phpinfo"] = ob_get_contents();
src/pocketmine/CrashDump.php:				throw new \RuntimeException("Crash error information missing - did something use exit()?");
src/pocketmine/CrashDump.php:			$error["trace"] = Utils::currentTrace(3); //Skipping CrashDump->baseCrash, CrashDump->construct, Server->crashDump
src/pocketmine/CrashDump.php:			$this->data["lastError"] = $lastError;
src/pocketmine/CrashDump.php:		$this->data["error"] = $error;
src/pocketmine/CrashDump.php:		unset($this->data["error"]["fullFile"]);
src/pocketmine/CrashDump.php:		unset($this->data["error"]["trace"]);
src/pocketmine/CrashDump.php:		$this->addLine("Error: " . $error["message"]);
src/pocketmine/CrashDump.php:		$this->addLine("File: " . $error["file"]);
src/pocketmine/CrashDump.php:		$this->addLine("Line: " . $error["line"]);
src/pocketmine/CrashDump.php:		$this->addLine("Type: " . $error["type"]);
src/pocketmine/CrashDump.php:		$this->data["plugin_involvement"] = self::PLUGIN_INVOLVEMENT_NONE;
src/pocketmine/CrashDump.php:		if(!$this->determinePluginFromFile($error["fullFile"], true)){ //fatal errors won't leave any stack trace
src/pocketmine/CrashDump.php:				if($this->determinePluginFromFile($frame["file"], false)){
src/pocketmine/CrashDump.php:		$this->addLine();
src/pocketmine/CrashDump.php:		$this->addLine("Code:");
src/pocketmine/CrashDump.php:		$this->data["code"] = [];
src/pocketmine/CrashDump.php:		if($this->server->getProperty("auto-report.send-code", true) !== false and file_exists($error["fullFile"])){
src/pocketmine/CrashDump.php:				for($l = max(0, $error["line"] - 10); $l < $error["line"] + 10 and isset($file[$l]); ++$l){
src/pocketmine/CrashDump.php:					$this->addLine("[" . ($l + 1) . "] " . $file[$l]);
src/pocketmine/CrashDump.php:					$this->data["code"][$l + 1] = $file[$l];
src/pocketmine/CrashDump.php:		$this->addLine();
src/pocketmine/CrashDump.php:		$this->addLine("Backtrace:");
src/pocketmine/CrashDump.php:		foreach(($this->data["trace"] = Utils::printableTrace($error["trace"])) as $line){
src/pocketmine/CrashDump.php:			$this->addLine($line);
src/pocketmine/CrashDump.php:		$this->addLine();
src/pocketmine/CrashDump.php:			$this->addLine();
src/pocketmine/CrashDump.php:				$this->addLine("THIS CRASH WAS CAUSED BY A PLUGIN");
src/pocketmine/CrashDump.php:				$this->data["plugin_involvement"] = self::PLUGIN_INVOLVEMENT_DIRECT;
src/pocketmine/CrashDump.php:				$this->addLine("A PLUGIN WAS INVOLVED IN THIS CRASH");
src/pocketmine/CrashDump.php:				$this->data["plugin_involvement"] = self::PLUGIN_INVOLVEMENT_INDIRECT;
src/pocketmine/CrashDump.php:				$file = $reflection->getProperty("file");
src/pocketmine/CrashDump.php:				$file->setAccessible(true);
src/pocketmine/CrashDump.php:				foreach($this->server->getPluginManager()->getPlugins() as $plugin){
src/pocketmine/CrashDump.php:					$filePath = Utils::cleanPath($file->getValue($plugin));
src/pocketmine/CrashDump.php:						$this->data["plugin"] = $plugin->getName();
src/pocketmine/CrashDump.php:						$this->addLine("BAD PLUGIN: " . $plugin->getDescription()->getFullName());
src/pocketmine/CrashDump.php:		$this->data["general"] = [];
src/pocketmine/CrashDump.php:		$this->data["general"]["name"] = $this->server->getName();
src/pocketmine/CrashDump.php:		$this->data["general"]["base_version"] = \pocketmine\BASE_VERSION;
src/pocketmine/CrashDump.php:		$this->data["general"]["build"] = \pocketmine\BUILD_NUMBER;
src/pocketmine/CrashDump.php:		$this->data["general"]["is_dev"] = \pocketmine\IS_DEVELOPMENT_BUILD;
src/pocketmine/CrashDump.php:		$this->data["general"]["protocol"] = ProtocolInfo::CURRENT_PROTOCOL;
src/pocketmine/CrashDump.php:		$this->data["general"]["git"] = \pocketmine\GIT_COMMIT;
src/pocketmine/CrashDump.php:		$this->data["general"]["uname"] = php_uname("a");
src/pocketmine/CrashDump.php:		$this->data["general"]["php"] = phpversion();
src/pocketmine/CrashDump.php:		$this->data["general"]["zend"] = zend_version();
src/pocketmine/CrashDump.php:		$this->data["general"]["php_os"] = PHP_OS;
src/pocketmine/CrashDump.php:		$this->data["general"]["os"] = Utils::getOS();
src/pocketmine/CrashDump.php:		$this->data["general"]["composer_libraries"] = $composerLibraries;
src/pocketmine/CrashDump.php:		$this->addLine($this->server->getName() . " version: " . $version->getFullVersion(true) . " [Protocol " . ProtocolInfo::CURRENT_PROTOCOL . "]");
src/pocketmine/CrashDump.php:		$this->addLine("Git commit: " . \pocketmine\GIT_COMMIT);
src/pocketmine/CrashDump.php:		$this->addLine("uname -a: " . php_uname("a"));
src/pocketmine/CrashDump.php:		$this->addLine("PHP Version: " . phpversion());
src/pocketmine/CrashDump.php:		$this->addLine("Zend version: " . zend_version());
src/pocketmine/CrashDump.php:		$this->addLine("OS : " . PHP_OS . ", " . Utils::getOS());
src/pocketmine/CrashDump.php:		$this->addLine("Composer libraries: ");
src/pocketmine/CrashDump.php:			$this->addLine("- $library $libraryVersion");
src/pocketmine/CrashDump.php:		fwrite($this->fp, $line . PHP_EOL);
src/pocketmine/CrashDump.php:		fwrite($this->fp, $str);
src/pocketmine/updater/AutoUpdater.php:	 * @phpstan-var array<string, mixed>|null
src/pocketmine/updater/AutoUpdater.php:		$this->server = $server;
src/pocketmine/updater/AutoUpdater.php:		$this->endpoint = "http://$endpoint/api/";
src/pocketmine/updater/AutoUpdater.php:		if((bool) $server->getProperty("auto-updater.enabled", true)){
src/pocketmine/updater/AutoUpdater.php:			$this->doCheck();
src/pocketmine/updater/AutoUpdater.php:	 * @phpstan-param array<string, mixed> $updateInfo
src/pocketmine/updater/AutoUpdater.php:		$this->updateInfo = $updateInfo;
src/pocketmine/updater/AutoUpdater.php:		$this->checkUpdate();
src/pocketmine/updater/AutoUpdater.php:		if($this->hasUpdate()){
src/pocketmine/updater/AutoUpdater.php:			(new UpdateNotifyEvent($this))->call();
src/pocketmine/updater/AutoUpdater.php:			if((bool) $this->server->getProperty("auto-updater.on-update.warn-console", true)){
src/pocketmine/updater/AutoUpdater.php:				$this->showConsoleUpdate();
src/pocketmine/updater/AutoUpdater.php:			if(!\pocketmine\IS_DEVELOPMENT_BUILD and $this->getChannel() !== "stable"){
src/pocketmine/updater/AutoUpdater.php:				$this->showChannelSuggestionStable();
src/pocketmine/updater/AutoUpdater.php:			}elseif(\pocketmine\IS_DEVELOPMENT_BUILD and $this->getChannel() === "stable"){
src/pocketmine/updater/AutoUpdater.php:				$this->showChannelSuggestionBeta();
src/pocketmine/updater/AutoUpdater.php:		return $this->newVersion !== null;
src/pocketmine/updater/AutoUpdater.php:			"Your version of " . $this->server->getName() . " is out of date. Version " . $this->newVersion->getFullVersion(true) . " was released on " . date("D M j h:i:s Y", $this->updateInfo["date"])
src/pocketmine/updater/AutoUpdater.php:		if($this->updateInfo["details_url"] !== null){
src/pocketmine/updater/AutoUpdater.php:			$messages[] = "Details: " . $this->updateInfo["details_url"];
src/pocketmine/updater/AutoUpdater.php:		$messages[] = "Download: " . $this->updateInfo["download_url"];
src/pocketmine/updater/AutoUpdater.php:		$this->printConsoleMessage($messages, \LogLevel::WARNING);
src/pocketmine/updater/AutoUpdater.php:		$player->sendMessage(TextFormat::DARK_PURPLE . "The version of " . $this->server->getName() . " that this server is running is out of date. Please consider updating to the latest version.");
src/pocketmine/updater/AutoUpdater.php:		$player->sendMessage(TextFormat::DARK_PURPLE . "Check the console for more details.");
src/pocketmine/updater/AutoUpdater.php:		$this->printConsoleMessage([
src/pocketmine/updater/AutoUpdater.php:			"It appears you're running a Stable build, when you've specified that you prefer to run " . ucfirst($this->getChannel()) . " builds.",
src/pocketmine/updater/AutoUpdater.php:			"If you would like to be kept informed about new Stable builds only, it is recommended that you change 'preferred-channel' in your pocketmine.yml to 'stable'."
src/pocketmine/updater/AutoUpdater.php:		$this->printConsoleMessage([
src/pocketmine/updater/AutoUpdater.php:			"If you would like to be kept informed about new Beta or Development builds, it is recommended that you change 'preferred-channel' in your pocketmine.yml to 'beta' or 'development'."
src/pocketmine/updater/AutoUpdater.php:		$logger = $this->server->getLogger();
src/pocketmine/updater/AutoUpdater.php:		$title = $this->server->getName() . ' Auto Updater';
src/pocketmine/updater/AutoUpdater.php:		$logger->log($logLevel, sprintf('----- %s -----', $title));
src/pocketmine/updater/AutoUpdater.php:			$logger->log($logLevel, $line);
src/pocketmine/updater/AutoUpdater.php:		$logger->log($logLevel, sprintf('----- %s -----', str_repeat('-', strlen($title))));
src/pocketmine/updater/AutoUpdater.php:	 * @phpstan-return array<string, mixed>|null
src/pocketmine/updater/AutoUpdater.php:		return $this->updateInfo;
src/pocketmine/updater/AutoUpdater.php:		$this->server->getAsyncPool()->submitTask(new UpdateCheckTask($this->endpoint, $this->getChannel()));
src/pocketmine/updater/AutoUpdater.php:		if($this->updateInfo === null){
src/pocketmine/updater/AutoUpdater.php:			$newVersion = new VersionString($this->updateInfo["base_version"], $this->updateInfo["is_dev"], $this->updateInfo["build"]);
src/pocketmine/updater/AutoUpdater.php:			$this->server->getLogger()->debug("[AutoUpdater] Assuming no update because \"" . $e->getMessage() . "\"");
src/pocketmine/updater/AutoUpdater.php:		if($currentVersion->compare($newVersion) > 0 and ($currentVersion->getFullVersion() !== $newVersion->getFullVersion() or $currentVersion->getBuild() > 0)){
src/pocketmine/updater/AutoUpdater.php:			$this->newVersion = $newVersion;
src/pocketmine/updater/AutoUpdater.php:		$channel = strtolower($this->server->getProperty("auto-updater.preferred-channel", "stable"));
src/pocketmine/updater/AutoUpdater.php:		return $this->endpoint;
src/pocketmine/updater/UpdateCheckTask.php:		$this->endpoint = $endpoint;
src/pocketmine/updater/UpdateCheckTask.php:		$this->channel = $channel;
src/pocketmine/updater/UpdateCheckTask.php:		$response = Internet::getURL($this->endpoint . "?channel=" . $this->channel, 4, [], $error);
src/pocketmine/updater/UpdateCheckTask.php:		$this->error = $error;
src/pocketmine/updater/UpdateCheckTask.php:					$this->setResult($response);
src/pocketmine/updater/UpdateCheckTask.php:					$this->error = $response["error"];
src/pocketmine/updater/UpdateCheckTask.php:					$this->error = "Invalid response data";
src/pocketmine/updater/UpdateCheckTask.php:				$this->error = "Invalid response data";
src/pocketmine/updater/UpdateCheckTask.php:		if($this->error !== ""){
src/pocketmine/updater/UpdateCheckTask.php:			$server->getLogger()->debug("[AutoUpdater] Async update check failed due to \"$this->error\"");
src/pocketmine/updater/UpdateCheckTask.php:			$updateInfo = $this->getResult();
src/pocketmine/updater/UpdateCheckTask.php:				$server->getUpdater()->checkUpdateCallback($updateInfo);
src/pocketmine/updater/UpdateCheckTask.php:				$server->getLogger()->debug("[AutoUpdater] Update info error");
src/pocketmine/MemoryManager.php:		$this->server = $server;
src/pocketmine/MemoryManager.php:		$this->init();
src/pocketmine/MemoryManager.php:		$this->memoryLimit = ((int) $this->server->getProperty("memory.main-limit", 0)) * 1024 * 1024;
src/pocketmine/MemoryManager.php:		if(preg_match("/([0-9]+)([KMGkmg])/", $this->server->getConfigString("memory-limit", ""), $matches) > 0){
src/pocketmine/MemoryManager.php:		$hardLimit = ((int) $this->server->getProperty("memory.main-hard-limit", $defaultMemory));
src/pocketmine/MemoryManager.php:			ini_set("memory_limit", '-1');
src/pocketmine/MemoryManager.php:		$this->globalMemoryLimit = ((int) $this->server->getProperty("memory.global-limit", 0)) * 1024 * 1024;
src/pocketmine/MemoryManager.php:		$this->checkRate = (int) $this->server->getProperty("memory.check-rate", 20);
src/pocketmine/MemoryManager.php:		$this->continuousTrigger = (bool) $this->server->getProperty("memory.continuous-trigger", true);
src/pocketmine/MemoryManager.php:		$this->continuousTriggerRate = (int) $this->server->getProperty("memory.continuous-trigger-rate", 30);
src/pocketmine/MemoryManager.php:		$this->garbageCollectionPeriod = (int) $this->server->getProperty("memory.garbage-collection.period", 36000);
src/pocketmine/MemoryManager.php:		$this->garbageCollectionTrigger = (bool) $this->server->getProperty("memory.garbage-collection.low-memory-trigger", true);
src/pocketmine/MemoryManager.php:		$this->garbageCollectionAsync = (bool) $this->server->getProperty("memory.garbage-collection.collect-async-worker", true);
src/pocketmine/MemoryManager.php:		$this->lowMemChunkRadiusOverride = (int) $this->server->getProperty("memory.max-chunks.chunk-radius", 4);
src/pocketmine/MemoryManager.php:		$this->lowMemChunkGC = (bool) $this->server->getProperty("memory.max-chunks.trigger-chunk-collect", true);
src/pocketmine/MemoryManager.php:		$this->lowMemDisableChunkCache = (bool) $this->server->getProperty("memory.world-caches.disable-chunk-cache", true);
src/pocketmine/MemoryManager.php:		$this->lowMemClearWorldCache = (bool) $this->server->getProperty("memory.world-caches.low-memory-trigger", true);
src/pocketmine/MemoryManager.php:		$this->dumpWorkers = (bool) $this->server->getProperty("memory.memory-dump.dump-async-worker", true);
src/pocketmine/MemoryManager.php:		return $this->lowMemory;
src/pocketmine/MemoryManager.php:		return !$this->lowMemory or !$this->lowMemDisableChunkCache;
src/pocketmine/MemoryManager.php:		return ($this->lowMemory and $this->lowMemChunkRadiusOverride > 0) ? min($this->lowMemChunkRadiusOverride, $distance) : $distance;
src/pocketmine/MemoryManager.php:		$this->server->getLogger()->debug(sprintf("[Memory Manager] %sLow memory triggered, limit %gMB, using %gMB",
src/pocketmine/MemoryManager.php:		if($this->lowMemClearWorldCache){
src/pocketmine/MemoryManager.php:			foreach($this->server->getLevels() as $level){
src/pocketmine/MemoryManager.php:				$level->clearCache(true);
src/pocketmine/MemoryManager.php:		if($this->lowMemChunkGC){
src/pocketmine/MemoryManager.php:			foreach($this->server->getLevels() as $level){
src/pocketmine/MemoryManager.php:				$level->doChunkGarbageCollection();
src/pocketmine/MemoryManager.php:		$ev->call();
src/pocketmine/MemoryManager.php:		if($this->garbageCollectionTrigger){
src/pocketmine/MemoryManager.php:			$cycles = $this->triggerGarbageCollector();
src/pocketmine/MemoryManager.php:		$this->server->getLogger()->debug(sprintf("[Memory Manager] Freed %gMB, $cycles cycles", round(($ev->getMemoryFreed() / 1024) / 1024, 2)));
src/pocketmine/MemoryManager.php:		Timings::$memoryManagerTimer->startTiming();
src/pocketmine/MemoryManager.php:		if(($this->memoryLimit > 0 or $this->globalMemoryLimit > 0) and ++$this->checkTicker >= $this->checkRate){
src/pocketmine/MemoryManager.php:			$this->checkTicker = 0;
src/pocketmine/MemoryManager.php:			if($this->memoryLimit > 0 and $memory[0] > $this->memoryLimit){
src/pocketmine/MemoryManager.php:			}elseif($this->globalMemoryLimit > 0 and $memory[1] > $this->globalMemoryLimit){
src/pocketmine/MemoryManager.php:				if($this->lowMemory and $this->continuousTrigger){
src/pocketmine/MemoryManager.php:					if(++$this->continuousTriggerTicker >= $this->continuousTriggerRate){
src/pocketmine/MemoryManager.php:						$this->continuousTriggerTicker = 0;
src/pocketmine/MemoryManager.php:						$this->trigger($memory[$trigger], $this->memoryLimit, $trigger > 0, ++$this->continuousTriggerCount);
src/pocketmine/MemoryManager.php:					$this->lowMemory = true;
src/pocketmine/MemoryManager.php:					$this->continuousTriggerCount = 0;
src/pocketmine/MemoryManager.php:					$this->trigger($memory[$trigger], $this->memoryLimit, $trigger > 0);
src/pocketmine/MemoryManager.php:				$this->lowMemory = false;
src/pocketmine/MemoryManager.php:		if($this->garbageCollectionPeriod > 0 and ++$this->garbageCollectionTicker >= $this->garbageCollectionPeriod){
src/pocketmine/MemoryManager.php:			$this->garbageCollectionTicker = 0;
src/pocketmine/MemoryManager.php:			$this->triggerGarbageCollector();
src/pocketmine/MemoryManager.php:		Timings::$memoryManagerTimer->stopTiming();
src/pocketmine/MemoryManager.php:		Timings::$garbageCollectorTimer->startTiming();
src/pocketmine/MemoryManager.php:		if($this->garbageCollectionAsync){
src/pocketmine/MemoryManager.php:			$pool = $this->server->getAsyncPool();
src/pocketmine/MemoryManager.php:			if(($w = $pool->shutdownUnusedWorkers()) > 0){
src/pocketmine/MemoryManager.php:				$this->server->getLogger()->debug("Shut down $w idle async pool workers");
src/pocketmine/MemoryManager.php:			foreach($pool->getRunningWorkers() as $i){
src/pocketmine/MemoryManager.php:				$pool->submitTaskToWorker(new GarbageCollectionTask(), $i);
src/pocketmine/MemoryManager.php:		Timings::$garbageCollectorTimer->stopTiming();
src/pocketmine/MemoryManager.php:		$this->server->getLogger()->notice("[Dump] After the memory dump is done, the server might crash");
src/pocketmine/MemoryManager.php:		self::dumpMemory($this->server, $outputFolder, $maxNesting, $maxStringSize, $this->server->getLogger());
src/pocketmine/MemoryManager.php:		if($this->dumpWorkers){
src/pocketmine/MemoryManager.php:			$pool = $this->server->getAsyncPool();
src/pocketmine/MemoryManager.php:			foreach($pool->getRunningWorkers() as $i){
src/pocketmine/MemoryManager.php:				$pool->submitTaskToWorker(new DumpWorkerMemoryTask($outputFolder, $maxNesting, $maxStringSize), $i);
src/pocketmine/MemoryManager.php:		ini_set('memory_limit', '-1');
src/pocketmine/MemoryManager.php:			foreach($reflection->getProperties() as $property){
src/pocketmine/MemoryManager.php:				if(!$property->isStatic() or $property->getDeclaringClass()->getName() !== $className){
src/pocketmine/MemoryManager.php:				if(!$property->isPublic()){
src/pocketmine/MemoryManager.php:					$property->setAccessible(true);
src/pocketmine/MemoryManager.php:				$staticProperties[$className][$property->getName()] = self::continueDump($property->getValue(), $objects, $refCounts, 0, $maxNesting, $maxStringSize);
src/pocketmine/MemoryManager.php:		$logger->info("[Dump] Wrote $staticCount static properties");
src/pocketmine/MemoryManager.php:			$logger->info("[Dump] Wrote $globalCount global variables");
src/pocketmine/MemoryManager.php:				if(($parent = $reflection->getParentClass()) !== false){
src/pocketmine/MemoryManager.php:					$info["parent"] = $parent->getName();
src/pocketmine/MemoryManager.php:				if(count($reflection->getInterfaceNames()) > 0){
src/pocketmine/MemoryManager.php:					$info["implements"] = implode(", ", $reflection->getInterfaceNames());
src/pocketmine/MemoryManager.php:				for($original = $reflection; $reflection !== false; $reflection = $reflection->getParentClass()){
src/pocketmine/MemoryManager.php:					foreach($reflection->getProperties() as $property){
src/pocketmine/MemoryManager.php:						if($property->isStatic()){
src/pocketmine/MemoryManager.php:						$name = $property->getName();
src/pocketmine/MemoryManager.php:							if($property->isPrivate()){
src/pocketmine/MemoryManager.php:								$name = $reflection->getName() . ":" . $name;
src/pocketmine/MemoryManager.php:						if(!$property->isPublic()){
src/pocketmine/MemoryManager.php:							$property->setAccessible(true);
src/pocketmine/MemoryManager.php:						$info["properties"][$name] = self::continueDump($property->getValue($object), $objects, $refCounts, 0, $maxNesting, $maxStringSize);
src/pocketmine/MemoryManager.php:		$logger->info("[Dump] Wrote " . count($objects) . " objects");
src/pocketmine/MemoryManager.php:		$logger->info("[Dump] Finished!");
src/pocketmine/MemoryManager.php:		--$maxNesting;
src/pocketmine/event/entity/EntityDamageByChildEntityEvent.php:		$this->childEntityEid = $childEntity->getId();
src/pocketmine/event/entity/EntityDamageByChildEntityEvent.php:		return $this->getEntity()->getLevelNonNull()->getServer()->findEntity($this->childEntityEid);
src/pocketmine/event/entity/EntityRegainHealthEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntityRegainHealthEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntityRegainHealthEvent.php:		$this->amount = $amount;
src/pocketmine/event/entity/EntityRegainHealthEvent.php:		$this->reason = $regainReason;
src/pocketmine/event/entity/EntityRegainHealthEvent.php:		return $this->amount;
src/pocketmine/event/entity/EntityRegainHealthEvent.php:		$this->amount = $amount;
src/pocketmine/event/entity/EntityRegainHealthEvent.php:		return $this->reason;
src/pocketmine/event/entity/EntityDespawnEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntityDespawnEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntityDespawnEvent.php:		$this->entityType = $entity::NETWORK_ID;
src/pocketmine/event/entity/EntityDespawnEvent.php:		return $this->entityType;
src/pocketmine/event/entity/EntityDespawnEvent.php:		return $this->entity instanceof Creature;
src/pocketmine/event/entity/EntityDespawnEvent.php:		return $this->entity instanceof Human;
src/pocketmine/event/entity/EntityDespawnEvent.php:		return $this->entity instanceof Projectile;
src/pocketmine/event/entity/EntityDespawnEvent.php:		return $this->entity instanceof Vehicle;
src/pocketmine/event/entity/EntityDespawnEvent.php:		return $this->entity instanceof ItemEntity;
src/pocketmine/event/entity/ProjectileHitEntityEvent.php:		$this->entityHit = $entityHit;
src/pocketmine/event/entity/ProjectileHitEntityEvent.php:		return $this->entityHit;
src/pocketmine/event/entity/ProjectileLaunchEvent.php: * @phpstan-extends EntityEvent<Projectile>
src/pocketmine/event/entity/ProjectileLaunchEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/ProjectileLaunchEvent.php:		return $this->entity;
src/pocketmine/event/entity/EntityInventoryChangeEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntityInventoryChangeEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntityInventoryChangeEvent.php:		$this->oldItem = $oldItem;
src/pocketmine/event/entity/EntityInventoryChangeEvent.php:		$this->newItem = $newItem;
src/pocketmine/event/entity/EntityInventoryChangeEvent.php:		$this->slot = $slot;
src/pocketmine/event/entity/EntityInventoryChangeEvent.php:		return $this->slot;
src/pocketmine/event/entity/EntityInventoryChangeEvent.php:		return $this->newItem;
src/pocketmine/event/entity/EntityInventoryChangeEvent.php:		$this->newItem = $item;
src/pocketmine/event/entity/EntityInventoryChangeEvent.php:		return $this->oldItem;
src/pocketmine/event/entity/EntityCombustEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntityCombustEvent.php:		$this->entity = $combustee;
src/pocketmine/event/entity/EntityCombustEvent.php:		$this->duration = $duration;
src/pocketmine/event/entity/EntityCombustEvent.php:		return $this->duration;
src/pocketmine/event/entity/EntityCombustEvent.php:		$this->duration = $duration;
src/pocketmine/event/entity/EntityExplodeEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntityExplodeEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntityExplodeEvent.php:		$this->position = $position;
src/pocketmine/event/entity/EntityExplodeEvent.php:		$this->blocks = $blocks;
src/pocketmine/event/entity/EntityExplodeEvent.php:		$this->yield = $yield;
src/pocketmine/event/entity/EntityExplodeEvent.php:		return $this->position;
src/pocketmine/event/entity/EntityExplodeEvent.php:		return $this->blocks;
src/pocketmine/event/entity/EntityExplodeEvent.php:		$this->blocks = $blocks;
src/pocketmine/event/entity/EntityExplodeEvent.php:		return $this->yield;
src/pocketmine/event/entity/EntityExplodeEvent.php:		$this->yield = $yield;
src/pocketmine/event/entity/EntityEffectEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntityEffectEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntityEffectEvent.php:		$this->effect = $effect;
src/pocketmine/event/entity/EntityEffectEvent.php:		return $this->effect;
src/pocketmine/event/entity/EntityCombustByBlockEvent.php:		$this->combuster = $combuster;
src/pocketmine/event/entity/EntityCombustByBlockEvent.php:		return $this->combuster;
src/pocketmine/event/entity/ProjectileHitEvent.php: * @phpstan-extends EntityEvent<Projectile>
src/pocketmine/event/entity/ProjectileHitEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/ProjectileHitEvent.php:		$this->rayTraceResult = $rayTraceResult;
src/pocketmine/event/entity/ProjectileHitEvent.php:		return $this->entity;
src/pocketmine/event/entity/ProjectileHitEvent.php:		return $this->rayTraceResult;
src/pocketmine/event/entity/EntityEffectAddEvent.php:		$this->oldEffect = $oldEffect;
src/pocketmine/event/entity/EntityEffectAddEvent.php:		return $this->hasOldEffect();
src/pocketmine/event/entity/EntityEffectAddEvent.php:		return $this->oldEffect instanceof EffectInstance;
src/pocketmine/event/entity/EntityEffectAddEvent.php:		return $this->oldEffect;
src/pocketmine/event/entity/EntityCombustByEntityEvent.php:		$this->combuster = $combuster;
src/pocketmine/event/entity/EntityCombustByEntityEvent.php:		return $this->combuster;
src/pocketmine/event/entity/ExplosionPrimeEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/ExplosionPrimeEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/ExplosionPrimeEvent.php:		$this->force = $force;
src/pocketmine/event/entity/ExplosionPrimeEvent.php:		$this->blockBreaking = true;
src/pocketmine/event/entity/ExplosionPrimeEvent.php:		return $this->force;
src/pocketmine/event/entity/ExplosionPrimeEvent.php:		$this->force = $force;
src/pocketmine/event/entity/ExplosionPrimeEvent.php:		return $this->blockBreaking;
src/pocketmine/event/entity/ExplosionPrimeEvent.php:		$this->blockBreaking = $affectsBlocks;
src/pocketmine/event/entity/EntityDamageEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntityDamageEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntityDamageEvent.php:		$this->cause = $cause;
src/pocketmine/event/entity/EntityDamageEvent.php:		$this->baseDamage = $this->originalBase = $damage;
src/pocketmine/event/entity/EntityDamageEvent.php:		$this->modifiers = $modifiers;
src/pocketmine/event/entity/EntityDamageEvent.php:		$this->originals = $this->modifiers;
src/pocketmine/event/entity/EntityDamageEvent.php:		return $this->cause;
src/pocketmine/event/entity/EntityDamageEvent.php:		return $this->baseDamage;
src/pocketmine/event/entity/EntityDamageEvent.php:		$this->baseDamage = $damage;
src/pocketmine/event/entity/EntityDamageEvent.php:		return $this->originalBase;
src/pocketmine/event/entity/EntityDamageEvent.php:		return $this->originals;
src/pocketmine/event/entity/EntityDamageEvent.php:		return $this->originals[$type] ?? 0.0;
src/pocketmine/event/entity/EntityDamageEvent.php:		return $this->modifiers;
src/pocketmine/event/entity/EntityDamageEvent.php:		return $this->modifiers[$type] ?? 0.0;
src/pocketmine/event/entity/EntityDamageEvent.php:		$this->modifiers[$type] = $damage;
src/pocketmine/event/entity/EntityDamageEvent.php:		return isset($this->modifiers[$type]);
src/pocketmine/event/entity/EntityDamageEvent.php:		return max(0, $this->baseDamage + array_sum($this->modifiers));
src/pocketmine/event/entity/EntityDamageEvent.php:		switch($this->cause){
src/pocketmine/event/entity/EntityDamageEvent.php:		return $this->attackCooldown;
src/pocketmine/event/entity/EntityDamageEvent.php:	 * NOTE: This value is not used in non-Living entities
src/pocketmine/event/entity/EntityDamageEvent.php:		$this->attackCooldown = $attackCooldown;
src/pocketmine/event/entity/EntityEffectRemoveEvent.php:		if($this->getEffect()->getDuration() <= 0){
src/pocketmine/event/entity/EntityLevelChangeEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntityLevelChangeEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntityLevelChangeEvent.php:		$this->originLevel = $originLevel;
src/pocketmine/event/entity/EntityLevelChangeEvent.php:		$this->targetLevel = $targetLevel;
src/pocketmine/event/entity/EntityLevelChangeEvent.php:		return $this->originLevel;
src/pocketmine/event/entity/EntityLevelChangeEvent.php:		return $this->targetLevel;
src/pocketmine/event/entity/EntityEvent.php: * @phpstan-template TEntity of Entity
src/pocketmine/event/entity/EntityEvent.php:	 * @phpstan-var TEntity
src/pocketmine/event/entity/EntityEvent.php:	 * @phpstan-return TEntity
src/pocketmine/event/entity/EntityEvent.php:		return $this->entity;
src/pocketmine/event/entity/ItemSpawnEvent.php: * @phpstan-extends EntityEvent<ItemEntity>
src/pocketmine/event/entity/ItemSpawnEvent.php:		$this->entity = $item;
src/pocketmine/event/entity/ItemSpawnEvent.php:		return $this->entity;
src/pocketmine/event/entity/EntityBlockChangeEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntityBlockChangeEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntityBlockChangeEvent.php:		$this->from = $from;
src/pocketmine/event/entity/EntityBlockChangeEvent.php:		$this->to = $to;
src/pocketmine/event/entity/EntityBlockChangeEvent.php:		return $this->from;
src/pocketmine/event/entity/EntityBlockChangeEvent.php:		return $this->to;
src/pocketmine/event/entity/ItemDespawnEvent.php: * @phpstan-extends EntityEvent<ItemEntity>
src/pocketmine/event/entity/ItemDespawnEvent.php:		$this->entity = $item;
src/pocketmine/event/entity/ItemDespawnEvent.php:		return $this->entity;
src/pocketmine/event/entity/EntityDamageByBlockEvent.php:		$this->damager = $damager;
src/pocketmine/event/entity/EntityDamageByBlockEvent.php:		return $this->damager;
src/pocketmine/event/entity/ProjectileHitBlockEvent.php:		$this->blockHit = $blockHit;
src/pocketmine/event/entity/ProjectileHitBlockEvent.php:		return $this->blockHit;
src/pocketmine/event/entity/EntityMotionEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntityMotionEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntityMotionEvent.php:		$this->mot = $mot;
src/pocketmine/event/entity/EntityMotionEvent.php:		return $this->mot;
src/pocketmine/event/entity/EntityTeleportEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntityTeleportEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntityTeleportEvent.php:		$this->from = $from;
src/pocketmine/event/entity/EntityTeleportEvent.php:		$this->to = $to;
src/pocketmine/event/entity/EntityTeleportEvent.php:		return $this->from;
src/pocketmine/event/entity/EntityTeleportEvent.php:		return $this->to;
src/pocketmine/event/entity/EntityTeleportEvent.php:		$this->to = $to;
src/pocketmine/event/entity/EntityShootBowEvent.php: * @phpstan-extends EntityEvent<Living>
src/pocketmine/event/entity/EntityShootBowEvent.php:		$this->entity = $shooter;
src/pocketmine/event/entity/EntityShootBowEvent.php:		$this->bow = $bow;
src/pocketmine/event/entity/EntityShootBowEvent.php:		$this->projectile = $projectile;
src/pocketmine/event/entity/EntityShootBowEvent.php:		$this->force = $force;
src/pocketmine/event/entity/EntityShootBowEvent.php:		return $this->entity;
src/pocketmine/event/entity/EntityShootBowEvent.php:		return $this->bow;
src/pocketmine/event/entity/EntityShootBowEvent.php:		return $this->projectile;
src/pocketmine/event/entity/EntityShootBowEvent.php:		if($projectile !== $this->projectile){
src/pocketmine/event/entity/EntityShootBowEvent.php:			if(count($this->projectile->getViewers()) === 0){
src/pocketmine/event/entity/EntityShootBowEvent.php:				$this->projectile->close();
src/pocketmine/event/entity/EntityShootBowEvent.php:			$this->projectile = $projectile;
src/pocketmine/event/entity/EntityShootBowEvent.php:		return $this->force;
src/pocketmine/event/entity/EntityShootBowEvent.php:		$this->force = $force;
src/pocketmine/event/entity/EntityDamageByEntityEvent.php:		$this->damagerEntityId = $damager->getId();
src/pocketmine/event/entity/EntityDamageByEntityEvent.php:		$this->knockBack = $knockBack;
src/pocketmine/event/entity/EntityDamageByEntityEvent.php:		$this->addAttackerModifiers($damager);
src/pocketmine/event/entity/EntityDamageByEntityEvent.php:			if($damager->hasEffect(Effect::STRENGTH)){
src/pocketmine/event/entity/EntityDamageByEntityEvent.php:				$this->setModifier($this->getBaseDamage() * 0.3 * $damager->getEffect(Effect::STRENGTH)->getEffectLevel(), self::MODIFIER_STRENGTH);
src/pocketmine/event/entity/EntityDamageByEntityEvent.php:			if($damager->hasEffect(Effect::WEAKNESS)){
src/pocketmine/event/entity/EntityDamageByEntityEvent.php:				$this->setModifier(-($this->getBaseDamage() * 0.2 * $damager->getEffect(Effect::WEAKNESS)->getEffectLevel()), self::MODIFIER_WEAKNESS);
src/pocketmine/event/entity/EntityDamageByEntityEvent.php:		return $this->getEntity()->getLevelNonNull()->getServer()->findEntity($this->damagerEntityId);
src/pocketmine/event/entity/EntityDamageByEntityEvent.php:		return $this->knockBack;
src/pocketmine/event/entity/EntityDamageByEntityEvent.php:		$this->knockBack = $knockBack;
src/pocketmine/event/entity/EntitySpawnEvent.php: * @phpstan-extends EntityEvent<Entity>
src/pocketmine/event/entity/EntitySpawnEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntitySpawnEvent.php:		$this->entityType = $entity::NETWORK_ID;
src/pocketmine/event/entity/EntitySpawnEvent.php:		return $this->entity->getPosition();
src/pocketmine/event/entity/EntitySpawnEvent.php:		return $this->entityType;
src/pocketmine/event/entity/EntitySpawnEvent.php:		return $this->entity instanceof Creature;
src/pocketmine/event/entity/EntitySpawnEvent.php:		return $this->entity instanceof Human;
src/pocketmine/event/entity/EntitySpawnEvent.php:		return $this->entity instanceof Projectile;
src/pocketmine/event/entity/EntitySpawnEvent.php:		return $this->entity instanceof Vehicle;
src/pocketmine/event/entity/EntitySpawnEvent.php:		return $this->entity instanceof ItemEntity;
src/pocketmine/event/entity/EntityDeathEvent.php: * @phpstan-extends EntityEvent<Living>
src/pocketmine/event/entity/EntityDeathEvent.php:		$this->entity = $entity;
src/pocketmine/event/entity/EntityDeathEvent.php:		$this->drops = $drops;
src/pocketmine/event/entity/EntityDeathEvent.php:		$this->xp = $xp;
src/pocketmine/event/entity/EntityDeathEvent.php:		return $this->entity;
src/pocketmine/event/entity/EntityDeathEvent.php:		return $this->drops;
src/pocketmine/event/entity/EntityDeathEvent.php:		$this->drops = $drops;
src/pocketmine/event/entity/EntityDeathEvent.php:		return $this->xp;
src/pocketmine/event/entity/EntityDeathEvent.php:		$this->xp = $xp;
src/pocketmine/event/Event.php:		return $this->eventName ?? get_class($this);
src/pocketmine/event/Event.php:		return $this->isCancelled;
src/pocketmine/event/Event.php:		$this->isCancelled = $value;
src/pocketmine/event/Event.php:					foreach($currentList->getListenersByPriority($priority) as $registration){
src/pocketmine/event/Event.php:						$registration->callEvent($this);
src/pocketmine/event/Event.php:					$currentList = $currentList->getParent();
src/pocketmine/event/Event.php:			--self::$eventCallDepth;
src/pocketmine/event/server/DataPacketReceiveEvent.php:		$this->packet = $packet;
src/pocketmine/event/server/DataPacketReceiveEvent.php:		$this->player = $player;
src/pocketmine/event/server/DataPacketReceiveEvent.php:		return $this->packet;
src/pocketmine/event/server/DataPacketReceiveEvent.php:		return $this->player;
src/pocketmine/event/server/UpdateNotifyEvent.php: * Called when the AutoUpdater receives notification of an available PocketMine-MP update.
src/pocketmine/event/server/UpdateNotifyEvent.php:		$this->updater = $updater;
src/pocketmine/event/server/UpdateNotifyEvent.php:		return $this->updater;
src/pocketmine/event/server/QueryRegenerateEvent.php:	 * @phpstan-var array<string, string>
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->serverName = $server->getMotd();
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->listPlugins = (bool) $server->getProperty("settings.query-plugins", true);
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->plugins = $server->getPluginManager()->getPlugins();
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->players = [];
src/pocketmine/event/server/QueryRegenerateEvent.php:		foreach($server->getOnlinePlayers() as $player){
src/pocketmine/event/server/QueryRegenerateEvent.php:			if($player->isOnline()){
src/pocketmine/event/server/QueryRegenerateEvent.php:				$this->players[] = $player;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->gametype = ($server->getGamemode() & 0x01) === 0 ? "SMP" : "CMP";
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->version = $server->getVersion();
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->server_engine = $server->getName() . " " . $server->getPocketMineVersion();
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->map = $server->getDefaultLevel() === null ? "unknown" : $server->getDefaultLevel()->getName();
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->numPlayers = count($this->players);
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->maxPlayers = $server->getMaxPlayers();
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->whitelist = $server->hasWhitelist() ? "on" : "off";
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->port = $server->getPort();
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->ip = $server->getIp();
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->longQueryCache = null;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->shortQueryCache = null;
src/pocketmine/event/server/QueryRegenerateEvent.php:		return $this->serverName;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->serverName = $serverName;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->destroyCache();
src/pocketmine/event/server/QueryRegenerateEvent.php:		return $this->listPlugins;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->listPlugins = $value;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->destroyCache();
src/pocketmine/event/server/QueryRegenerateEvent.php:		return $this->plugins;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->plugins = $plugins;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->destroyCache();
src/pocketmine/event/server/QueryRegenerateEvent.php:		return $this->players;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->players = $players;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->destroyCache();
src/pocketmine/event/server/QueryRegenerateEvent.php:		return $this->numPlayers;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->numPlayers = $count;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->destroyCache();
src/pocketmine/event/server/QueryRegenerateEvent.php:		return $this->maxPlayers;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->maxPlayers = $count;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->destroyCache();
src/pocketmine/event/server/QueryRegenerateEvent.php:		return $this->map;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->map = $world;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->destroyCache();
src/pocketmine/event/server/QueryRegenerateEvent.php:	 * @phpstan-return array<string, string>
src/pocketmine/event/server/QueryRegenerateEvent.php:		return $this->extraData;
src/pocketmine/event/server/QueryRegenerateEvent.php:	 * @phpstan-param array<string, string> $extraData
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->extraData = $extraData;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$this->destroyCache();
src/pocketmine/event/server/QueryRegenerateEvent.php:		if($this->longQueryCache !== null){
src/pocketmine/event/server/QueryRegenerateEvent.php:			return $this->longQueryCache;
src/pocketmine/event/server/QueryRegenerateEvent.php:		$plist = $this->server_engine;
src/pocketmine/event/server/QueryRegenerateEvent.php:		if(count($this->plugins) > 0 and $this->listPlugins){
src/pocketmine/event/server/QueryRegenerateEvent.php:			foreach($this->plugins as $p){
src/pocketmine/event/server/QueryRegenerateEvent.php:				$d = $p->getDescription();
src/pocketmine/event/server/QueryRegenerateEvent.php:				$plist .= " " . str_replace([";", ":", " "], ["", "", "_"], $d->getName()) . " " . str_replace([";", ":", " "], ["", "", "_"], $d->getVersion()) . ";";
src/pocketmine/event/server/QueryRegenerateEvent.php:			$plist = substr($plist, 0, -1);
src/pocketmine/event/server/QueryRegenerateEvent.php:			"hostname" => $this->serverName,
src/pocketmine/event/server/QueryRegenerateEvent.php:			"gametype" => $this->gametype,
src/pocketmine/event/server/QueryRegenerateEvent.php:			"version" => $this->version,
src/pocketmine/event/server/QueryRegenerateEvent.php:			"server_engine" => $this->server_engine,
src/pocketmine/event/server/QueryRegenerateEvent.php:			"map" => $this->map,
src/pocketmine/event/server/QueryRegenerateEvent.php:			"numplayers" => $this->numPlayers,
src/pocketmine/event/server/QueryRegenerateEvent.php:			"maxplayers" => $this->maxPlayers,
src/pocketmine/event/server/QueryRegenerateEvent.php:			"whitelist" => $this->whitelist,
src/pocketmine/event/server/QueryRegenerateEvent.php:			"hostip" => $this->ip,
src/pocketmine/event/server/QueryRegenerateEvent.php:			"hostport" => $this->port
src/pocketmine/event/server/QueryRegenerateEvent.php:		foreach($this->extraData as $key => $value){
src/pocketmine/event/server/QueryRegenerateEvent.php:		foreach($this->players as $player){
src/pocketmine/event/server/QueryRegenerateEvent.php:			$query .= $player->getName() . "\x00";
src/pocketmine/event/server/QueryRegenerateEvent.php:		return $this->longQueryCache = $query;
src/pocketmine/event/server/QueryRegenerateEvent.php:		return $this->shortQueryCache ?? ($this->shortQueryCache = $this->serverName . "\x00" . $this->gametype . "\x00" . $this->map . "\x00" . $this->numPlayers . "\x00" . $this->maxPlayers . "\x00" . Binary::writeLShort($this->port) . $this->ip . "\x00");
src/pocketmine/event/server/ServerCommandEvent.php:		$this->sender = $sender;
src/pocketmine/event/server/ServerCommandEvent.php:		$this->command = $command;
src/pocketmine/event/server/ServerCommandEvent.php:		return $this->sender;
src/pocketmine/event/server/ServerCommandEvent.php:		return $this->command;
src/pocketmine/event/server/ServerCommandEvent.php:		$this->command = $command;
src/pocketmine/event/server/NetworkInterfaceEvent.php:		$this->interface = $interface;
src/pocketmine/event/server/NetworkInterfaceEvent.php:		return $this->interface;
src/pocketmine/event/server/DataPacketSendEvent.php:		$this->packet = $packet;
src/pocketmine/event/server/DataPacketSendEvent.php:		$this->player = $player;
src/pocketmine/event/server/DataPacketSendEvent.php:		return $this->packet;
src/pocketmine/event/server/DataPacketSendEvent.php:		return $this->player;
src/pocketmine/event/server/CommandEvent.php:		$this->sender = $sender;
src/pocketmine/event/server/CommandEvent.php:		$this->command = $command;
src/pocketmine/event/server/CommandEvent.php:		return $this->sender;
src/pocketmine/event/server/CommandEvent.php:		return $this->command;
src/pocketmine/event/server/CommandEvent.php:		$this->command = $command;
src/pocketmine/event/server/LowMemoryEvent.php: * Called when the server is in a low-memory state as defined by the properties
src/pocketmine/event/server/LowMemoryEvent.php: * Plugins should free caches or other non-essential data.
src/pocketmine/event/server/LowMemoryEvent.php:		$this->memory = $memory;
src/pocketmine/event/server/LowMemoryEvent.php:		$this->memoryLimit = $memoryLimit;
src/pocketmine/event/server/LowMemoryEvent.php:		$this->global = $isGlobal;
src/pocketmine/event/server/LowMemoryEvent.php:		$this->triggerCount = $triggerCount;
src/pocketmine/event/server/LowMemoryEvent.php:		return $this->memory;
src/pocketmine/event/server/LowMemoryEvent.php:		return $this->memoryLimit;
src/pocketmine/event/server/LowMemoryEvent.php:	 * Returns the times this event has been called in the current low-memory state
src/pocketmine/event/server/LowMemoryEvent.php:		return $this->triggerCount;
src/pocketmine/event/server/LowMemoryEvent.php:		return $this->global;
src/pocketmine/event/server/LowMemoryEvent.php:		return $this->getMemory() - ($this->isGlobal() ? $usage[1] : $usage[0]);
src/pocketmine/event/server/NetworkInterfaceCrashEvent.php:		$this->exception = $throwable;
src/pocketmine/event/server/NetworkInterfaceCrashEvent.php:		return $this->exception;
src/pocketmine/event/plugin/PluginEvent.php:		$this->plugin = $plugin;
src/pocketmine/event/plugin/PluginEvent.php:		return $this->plugin;
src/pocketmine/event/block/SignChangeEvent.php:		$this->player = $thePlayer;
src/pocketmine/event/block/SignChangeEvent.php:		$this->setLines($theLines);
src/pocketmine/event/block/SignChangeEvent.php:		return $this->player;
src/pocketmine/event/block/SignChangeEvent.php:		return $this->lines;
src/pocketmine/event/block/SignChangeEvent.php:	 * @param int $index 0-3
src/pocketmine/event/block/SignChangeEvent.php:			throw new \InvalidArgumentException("Index must be in the range 0-3!");
src/pocketmine/event/block/SignChangeEvent.php:		return $this->lines[$index];
src/pocketmine/event/block/SignChangeEvent.php:		$this->lines = $lines;
src/pocketmine/event/block/SignChangeEvent.php:	 * @param int    $index 0-3
src/pocketmine/event/block/SignChangeEvent.php:			throw new \InvalidArgumentException("Index must be in the range 0-3!");
src/pocketmine/event/block/SignChangeEvent.php:		$this->lines[$index] = $line;
src/pocketmine/event/block/BlockSpreadEvent.php:		$this->source = $source;
src/pocketmine/event/block/BlockSpreadEvent.php:		return $this->source;
src/pocketmine/event/block/BlockBreakEvent.php:		$this->item = $item;
src/pocketmine/event/block/BlockBreakEvent.php:		$this->player = $player;
src/pocketmine/event/block/BlockBreakEvent.php:		$this->instaBreak = $instaBreak;
src/pocketmine/event/block/BlockBreakEvent.php:		$this->setDrops($drops);
src/pocketmine/event/block/BlockBreakEvent.php:		$this->xpDrops = $xpDrops;
src/pocketmine/event/block/BlockBreakEvent.php:		return $this->player;
src/pocketmine/event/block/BlockBreakEvent.php:		return $this->item;
src/pocketmine/event/block/BlockBreakEvent.php:		return $this->instaBreak;
src/pocketmine/event/block/BlockBreakEvent.php:		$this->instaBreak = $instaBreak;
src/pocketmine/event/block/BlockBreakEvent.php:		return $this->blockDrops;
src/pocketmine/event/block/BlockBreakEvent.php:		$this->setDropsVariadic(...$drops);
src/pocketmine/event/block/BlockBreakEvent.php:		$this->blockDrops = $drops;
src/pocketmine/event/block/BlockBreakEvent.php:		return $this->xpDrops;
src/pocketmine/event/block/BlockBreakEvent.php:		$this->xpDrops = $amount;
src/pocketmine/event/block/BlockPlaceEvent.php:		$this->blockReplace = $blockReplace;
src/pocketmine/event/block/BlockPlaceEvent.php:		$this->blockAgainst = $blockAgainst;
src/pocketmine/event/block/BlockPlaceEvent.php:		$this->item = $item;
src/pocketmine/event/block/BlockPlaceEvent.php:		$this->player = $player;
src/pocketmine/event/block/BlockPlaceEvent.php:		return $this->player;
src/pocketmine/event/block/BlockPlaceEvent.php:		return $this->item;
src/pocketmine/event/block/BlockPlaceEvent.php:		return $this->blockReplace;
src/pocketmine/event/block/BlockPlaceEvent.php:		return $this->blockAgainst;
src/pocketmine/event/block/BlockGrowEvent.php:		$this->newState = $newState;
src/pocketmine/event/block/BlockGrowEvent.php:		return $this->newState;
src/pocketmine/event/block/BlockBurnEvent.php:		$this->causingBlock = $causingBlock;
src/pocketmine/event/block/BlockBurnEvent.php:		return $this->causingBlock;
src/pocketmine/event/block/BlockEvent.php:		$this->block = $block;
src/pocketmine/event/block/BlockEvent.php:		return $this->block;
src/pocketmine/event/inventory/FurnaceSmeltEvent.php:		parent::__construct($furnace->getBlock());
src/pocketmine/event/inventory/FurnaceSmeltEvent.php:		$this->source = clone $source;
src/pocketmine/event/inventory/FurnaceSmeltEvent.php:		$this->source->setCount(1);
src/pocketmine/event/inventory/FurnaceSmeltEvent.php:		$this->result = $result;
src/pocketmine/event/inventory/FurnaceSmeltEvent.php:		$this->furnace = $furnace;
src/pocketmine/event/inventory/FurnaceSmeltEvent.php:		return $this->furnace;
src/pocketmine/event/inventory/FurnaceSmeltEvent.php:		return $this->source;
src/pocketmine/event/inventory/FurnaceSmeltEvent.php:		return $this->result;
src/pocketmine/event/inventory/FurnaceSmeltEvent.php:		$this->result = $result;
src/pocketmine/event/inventory/FurnaceBurnEvent.php:		parent::__construct($furnace->getBlock());
src/pocketmine/event/inventory/FurnaceBurnEvent.php:		$this->fuel = $fuel;
src/pocketmine/event/inventory/FurnaceBurnEvent.php:		$this->burnTime = $burnTime;
src/pocketmine/event/inventory/FurnaceBurnEvent.php:		$this->furnace = $furnace;
src/pocketmine/event/inventory/FurnaceBurnEvent.php:		return $this->furnace;
src/pocketmine/event/inventory/FurnaceBurnEvent.php:		return $this->fuel;
src/pocketmine/event/inventory/FurnaceBurnEvent.php:		return $this->burnTime;
src/pocketmine/event/inventory/FurnaceBurnEvent.php:		$this->burnTime = $burnTime;
src/pocketmine/event/inventory/FurnaceBurnEvent.php:		return $this->burning;
src/pocketmine/event/inventory/FurnaceBurnEvent.php:		$this->burning = $burning;
src/pocketmine/event/inventory/CraftItemEvent.php:		$this->transaction = $transaction;
src/pocketmine/event/inventory/CraftItemEvent.php:		$this->recipe = $recipe;
src/pocketmine/event/inventory/CraftItemEvent.php:		$this->repetitions = $repetitions;
src/pocketmine/event/inventory/CraftItemEvent.php:		$this->inputs = $inputs;
src/pocketmine/event/inventory/CraftItemEvent.php:		$this->outputs = $outputs;
src/pocketmine/event/inventory/CraftItemEvent.php:		return $this->transaction;
src/pocketmine/event/inventory/CraftItemEvent.php:		return $this->recipe;
src/pocketmine/event/inventory/CraftItemEvent.php:	 * book shift-clicks (which craft lots of items in a batch).
src/pocketmine/event/inventory/CraftItemEvent.php:		return $this->repetitions;
src/pocketmine/event/inventory/CraftItemEvent.php:		return $this->inputs;
src/pocketmine/event/inventory/CraftItemEvent.php:		return $this->outputs;
src/pocketmine/event/inventory/CraftItemEvent.php:		return $this->transaction->getSource();
src/pocketmine/event/inventory/InventoryTransactionEvent.php:		$this->transaction = $transaction;
src/pocketmine/event/inventory/InventoryTransactionEvent.php:		return $this->transaction;
src/pocketmine/event/inventory/InventoryOpenEvent.php:		$this->who = $who;
src/pocketmine/event/inventory/InventoryOpenEvent.php:		return $this->who;
src/pocketmine/event/inventory/InventoryPickupArrowEvent.php:		$this->arrow = $arrow;
src/pocketmine/event/inventory/InventoryPickupArrowEvent.php:		return $this->arrow;
src/pocketmine/event/inventory/InventoryPickupItemEvent.php:		$this->item = $item;
src/pocketmine/event/inventory/InventoryPickupItemEvent.php:		return $this->item;
src/pocketmine/event/inventory/InventoryCloseEvent.php:		$this->who = $who;
src/pocketmine/event/inventory/InventoryCloseEvent.php:		return $this->who;
src/pocketmine/event/inventory/InventoryEvent.php:		$this->inventory = $inventory;
src/pocketmine/event/inventory/InventoryEvent.php:		return $this->inventory;
src/pocketmine/event/inventory/InventoryEvent.php:		return $this->inventory->getViewers();
src/pocketmine/event/level/LevelEvent.php:		$this->level = $level;
src/pocketmine/event/level/LevelEvent.php:		return $this->level;
src/pocketmine/event/level/ChunkEvent.php: * Chunk-related events
src/pocketmine/event/level/ChunkEvent.php:		$this->chunk = $chunk;
src/pocketmine/event/level/ChunkEvent.php:		return $this->chunk;
src/pocketmine/event/level/SpawnChangeEvent.php:		$this->previousSpawn = $previousSpawn;
src/pocketmine/event/level/SpawnChangeEvent.php:		return $this->previousSpawn;
src/pocketmine/event/level/ChunkLoadEvent.php:		$this->newChunk = $newChunk;
src/pocketmine/event/level/ChunkLoadEvent.php:		return $this->newChunk;
src/pocketmine/event/player/PlayerJumpEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerAchievementAwardedEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerAchievementAwardedEvent.php:		$this->achievement = $achievementId;
src/pocketmine/event/player/PlayerAchievementAwardedEvent.php:		return $this->achievement;
src/pocketmine/event/player/PlayerKickEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerKickEvent.php:		$this->quitMessage = $quitMessage;
src/pocketmine/event/player/PlayerKickEvent.php:		$this->reason = $reason;
src/pocketmine/event/player/PlayerKickEvent.php:		$this->reason = $reason;
src/pocketmine/event/player/PlayerKickEvent.php:		return $this->reason;
src/pocketmine/event/player/PlayerKickEvent.php:		$this->quitMessage = $quitMessage;
src/pocketmine/event/player/PlayerKickEvent.php:		return $this->quitMessage;
src/pocketmine/event/player/PlayerBlockPickEvent.php: * Called when a player middle-clicks on a block to get an item in creative mode.
src/pocketmine/event/player/PlayerBlockPickEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerBlockPickEvent.php:		$this->blockClicked = $blockClicked;
src/pocketmine/event/player/PlayerBlockPickEvent.php:		$this->resultItem = $resultItem;
src/pocketmine/event/player/PlayerBlockPickEvent.php:		return $this->blockClicked;
src/pocketmine/event/player/PlayerBlockPickEvent.php:		return $this->resultItem;
src/pocketmine/event/player/PlayerBlockPickEvent.php:		$this->resultItem = clone $item;
src/pocketmine/event/player/PlayerExperienceChangeEvent.php: * @phpstan-extends EntityEvent<Human>
src/pocketmine/event/player/PlayerExperienceChangeEvent.php:		$this->entity = $player;
src/pocketmine/event/player/PlayerExperienceChangeEvent.php:		$this->oldLevel = $oldLevel;
src/pocketmine/event/player/PlayerExperienceChangeEvent.php:		$this->oldProgress = $oldProgress;
src/pocketmine/event/player/PlayerExperienceChangeEvent.php:		$this->newLevel = $newLevel;
src/pocketmine/event/player/PlayerExperienceChangeEvent.php:		$this->newProgress = $newProgress;
src/pocketmine/event/player/PlayerExperienceChangeEvent.php:		return $this->oldLevel;
src/pocketmine/event/player/PlayerExperienceChangeEvent.php:		return $this->oldProgress;
src/pocketmine/event/player/PlayerExperienceChangeEvent.php:		return $this->newLevel;
src/pocketmine/event/player/PlayerExperienceChangeEvent.php:		return $this->newProgress;
src/pocketmine/event/player/PlayerExperienceChangeEvent.php:		$this->newLevel = $newLevel;
src/pocketmine/event/player/PlayerExperienceChangeEvent.php:		$this->newProgress = $newProgress;
src/pocketmine/event/player/PlayerDataSaveEvent.php:		$this->data = $nbt;
src/pocketmine/event/player/PlayerDataSaveEvent.php:		$this->playerName = $playerName;
src/pocketmine/event/player/PlayerDataSaveEvent.php:		return $this->data;
src/pocketmine/event/player/PlayerDataSaveEvent.php:		$this->data = $data;
src/pocketmine/event/player/PlayerDataSaveEvent.php:		return $this->playerName;
src/pocketmine/event/player/PlayerDataSaveEvent.php:		return Server::getInstance()->getOfflinePlayer($this->playerName);
src/pocketmine/event/player/PlayerGameModeChangeEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerGameModeChangeEvent.php:		$this->gamemode = $newGamemode;
src/pocketmine/event/player/PlayerGameModeChangeEvent.php:		return $this->gamemode;
src/pocketmine/event/player/PlayerToggleFlightEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerToggleFlightEvent.php:		$this->isFlying = $isFlying;
src/pocketmine/event/player/PlayerToggleFlightEvent.php:		return $this->isFlying;
src/pocketmine/event/player/PlayerItemHeldEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerItemHeldEvent.php:		$this->item = $item;
src/pocketmine/event/player/PlayerItemHeldEvent.php:		$this->hotbarSlot = $hotbarSlot;
src/pocketmine/event/player/PlayerItemHeldEvent.php:	 * NOTE: This event is called BEFORE the slot is equipped server-side. Setting the player's held item during this
src/pocketmine/event/player/PlayerItemHeldEvent.php:		return $this->hotbarSlot;
src/pocketmine/event/player/PlayerItemHeldEvent.php:		return $this->item;
src/pocketmine/event/player/PlayerBucketEvent.php:		$this->player = $who;
src/pocketmine/event/player/PlayerBucketEvent.php:		$this->blockClicked = $blockClicked;
src/pocketmine/event/player/PlayerBucketEvent.php:		$this->blockFace = $blockFace;
src/pocketmine/event/player/PlayerBucketEvent.php:		$this->item = $itemInHand;
src/pocketmine/event/player/PlayerBucketEvent.php:		$this->bucket = $bucket;
src/pocketmine/event/player/PlayerBucketEvent.php:		return $this->bucket;
src/pocketmine/event/player/PlayerBucketEvent.php:		return $this->item;
src/pocketmine/event/player/PlayerBucketEvent.php:		$this->item = $item;
src/pocketmine/event/player/PlayerBucketEvent.php:		return $this->blockClicked;
src/pocketmine/event/player/PlayerBucketEvent.php:		return $this->blockFace;
src/pocketmine/event/player/cheat/PlayerIllegalMoveEvent.php:		$this->player = $player;
src/pocketmine/event/player/cheat/PlayerIllegalMoveEvent.php:		$this->attemptedPosition = $attemptedPosition;
src/pocketmine/event/player/cheat/PlayerIllegalMoveEvent.php:		$this->originalPosition = $originalPosition;
src/pocketmine/event/player/cheat/PlayerIllegalMoveEvent.php:		$this->expectedPosition = $player->asVector3();
src/pocketmine/event/player/cheat/PlayerIllegalMoveEvent.php:		return $this->attemptedPosition;
src/pocketmine/event/player/cheat/PlayerIllegalMoveEvent.php:		return $this->originalPosition;
src/pocketmine/event/player/cheat/PlayerIllegalMoveEvent.php:		return $this->expectedPosition;
src/pocketmine/event/player/PlayerInteractEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerInteractEvent.php:		$this->item = $item;
src/pocketmine/event/player/PlayerInteractEvent.php:		$this->blockTouched = $block ?? BlockFactory::get(0, 0, new Position(0, 0, 0, $player->level));
src/pocketmine/event/player/PlayerInteractEvent.php:		$this->touchVector = $touchVector ?? new Vector3(0, 0, 0);
src/pocketmine/event/player/PlayerInteractEvent.php:		$this->blockFace = $face;
src/pocketmine/event/player/PlayerInteractEvent.php:		$this->action = $action;
src/pocketmine/event/player/PlayerInteractEvent.php:		return $this->action;
src/pocketmine/event/player/PlayerInteractEvent.php:		return $this->item;
src/pocketmine/event/player/PlayerInteractEvent.php:		return $this->blockTouched;
src/pocketmine/event/player/PlayerInteractEvent.php:		return $this->touchVector;
src/pocketmine/event/player/PlayerInteractEvent.php:		return $this->blockFace;
src/pocketmine/event/player/PlayerAnimationEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerAnimationEvent.php:		$this->animationType = $animation;
src/pocketmine/event/player/PlayerAnimationEvent.php:		return $this->animationType;
src/pocketmine/event/player/PlayerToggleSneakEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerToggleSneakEvent.php:		$this->isSneaking = $isSneaking;
src/pocketmine/event/player/PlayerToggleSneakEvent.php:		return $this->isSneaking;
src/pocketmine/event/player/PlayerQuitEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerQuitEvent.php:		$this->quitMessage = $quitMessage;
src/pocketmine/event/player/PlayerQuitEvent.php:		$this->quitReason = $quitReason;
src/pocketmine/event/player/PlayerQuitEvent.php:		$this->quitMessage = $quitMessage;
src/pocketmine/event/player/PlayerQuitEvent.php:		return $this->quitMessage;
src/pocketmine/event/player/PlayerQuitEvent.php:		return $this->quitReason;
src/pocketmine/event/player/PlayerJoinEvent.php: * will cause this data to be wasted. Prefer disconnecting at login-time if possible to minimize bandwidth wastage.
src/pocketmine/event/player/PlayerJoinEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerJoinEvent.php:		$this->joinMessage = $joinMessage;
src/pocketmine/event/player/PlayerJoinEvent.php:		$this->joinMessage = $joinMessage;
src/pocketmine/event/player/PlayerJoinEvent.php:		return $this->joinMessage;
src/pocketmine/event/player/PlayerDeathEvent.php:		$this->deathMessage = $deathMessage ?? self::deriveMessage($entity->getDisplayName(), $entity->getLastDamageCause());
src/pocketmine/event/player/PlayerDeathEvent.php:		return $this->entity;
src/pocketmine/event/player/PlayerDeathEvent.php:		return $this->entity;
src/pocketmine/event/player/PlayerDeathEvent.php:		return $this->deathMessage;
src/pocketmine/event/player/PlayerDeathEvent.php:		$this->deathMessage = $deathMessage;
src/pocketmine/event/player/PlayerDeathEvent.php:		return $this->keepInventory;
src/pocketmine/event/player/PlayerDeathEvent.php:		$this->keepInventory = $keepInventory;
src/pocketmine/event/player/PlayerDeathEvent.php:		switch($deathCause === null ? EntityDamageEvent::CAUSE_CUSTOM : $deathCause->getCause()){
src/pocketmine/event/player/PlayerDeathEvent.php:					$e = $deathCause->getDamager();
src/pocketmine/event/player/PlayerDeathEvent.php:						$params[] = $e->getDisplayName();
src/pocketmine/event/player/PlayerDeathEvent.php:						$params[] = $e->getNameTag() !== "" ? $e->getNameTag() : $e->getName();
src/pocketmine/event/player/PlayerDeathEvent.php:					$e = $deathCause->getDamager();
src/pocketmine/event/player/PlayerDeathEvent.php:						$params[] = $e->getDisplayName();
src/pocketmine/event/player/PlayerDeathEvent.php:						$params[] = $e->getNameTag() !== "" ? $e->getNameTag() : $e->getName();
src/pocketmine/event/player/PlayerDeathEvent.php:					if($deathCause->getFinalDamage() > 2){
src/pocketmine/event/player/PlayerDeathEvent.php:					if($deathCause->getDamager()->getId() === Block::CACTUS){
src/pocketmine/event/player/PlayerDeathEvent.php:					$e = $deathCause->getDamager();
src/pocketmine/event/player/PlayerDeathEvent.php:						$params[] = $e->getDisplayName();
src/pocketmine/event/player/PlayerDeathEvent.php:						$params[] = $e->getNameTag() !== "" ? $e->getNameTag() : $e->getName();
src/pocketmine/event/player/PlayerLoginEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerLoginEvent.php:		$this->kickMessage = $kickMessage;
src/pocketmine/event/player/PlayerLoginEvent.php:		$this->kickMessage = $kickMessage;
src/pocketmine/event/player/PlayerLoginEvent.php:		return $this->kickMessage;
src/pocketmine/event/player/PlayerChangeSkinEvent.php: * Called when a player changes their skin in-game.
src/pocketmine/event/player/PlayerChangeSkinEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerChangeSkinEvent.php:		$this->oldSkin = $oldSkin;
src/pocketmine/event/player/PlayerChangeSkinEvent.php:		$this->newSkin = $newSkin;
src/pocketmine/event/player/PlayerChangeSkinEvent.php:		return $this->oldSkin;
src/pocketmine/event/player/PlayerChangeSkinEvent.php:		return $this->newSkin;
src/pocketmine/event/player/PlayerChangeSkinEvent.php:		$skin->validate();
src/pocketmine/event/player/PlayerChangeSkinEvent.php:		$this->newSkin = $skin;
src/pocketmine/event/player/PlayerBedEnterEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerBedEnterEvent.php:		$this->bed = $bed;
src/pocketmine/event/player/PlayerBedEnterEvent.php:		return $this->bed;
src/pocketmine/event/player/PlayerBedLeaveEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerBedLeaveEvent.php:		$this->bed = $bed;
src/pocketmine/event/player/PlayerBedLeaveEvent.php:		return $this->bed;
src/pocketmine/event/player/PlayerToggleSprintEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerToggleSprintEvent.php:		$this->isSprinting = $isSprinting;
src/pocketmine/event/player/PlayerToggleSprintEvent.php:		return $this->isSprinting;
src/pocketmine/event/player/PlayerCommandPreprocessEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerCommandPreprocessEvent.php:		$this->message = $message;
src/pocketmine/event/player/PlayerCommandPreprocessEvent.php:		return $this->message;
src/pocketmine/event/player/PlayerCommandPreprocessEvent.php:		$this->message = $message;
src/pocketmine/event/player/PlayerCommandPreprocessEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerItemConsumeEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerItemConsumeEvent.php:		$this->item = $item;
src/pocketmine/event/player/PlayerItemConsumeEvent.php:		return clone $this->item;
src/pocketmine/event/player/PlayerDropItemEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerDropItemEvent.php:		$this->drop = $drop;
src/pocketmine/event/player/PlayerDropItemEvent.php:		return $this->drop;
src/pocketmine/event/player/PlayerCreationEvent.php:	 * @phpstan-var class-string<Player>
src/pocketmine/event/player/PlayerCreationEvent.php:	 * @phpstan-var class-string<Player>
src/pocketmine/event/player/PlayerCreationEvent.php:	 * @phpstan-param class-string<Player> $baseClass
src/pocketmine/event/player/PlayerCreationEvent.php:	 * @phpstan-param class-string<Player> $playerClass
src/pocketmine/event/player/PlayerCreationEvent.php:		$this->interface = $interface;
src/pocketmine/event/player/PlayerCreationEvent.php:		$this->address = $address;
src/pocketmine/event/player/PlayerCreationEvent.php:		$this->port = $port;
src/pocketmine/event/player/PlayerCreationEvent.php:		$this->baseClass = $baseClass;
src/pocketmine/event/player/PlayerCreationEvent.php:		$this->playerClass = $playerClass;
src/pocketmine/event/player/PlayerCreationEvent.php:		return $this->interface;
src/pocketmine/event/player/PlayerCreationEvent.php:		return $this->address;
src/pocketmine/event/player/PlayerCreationEvent.php:		return $this->port;
src/pocketmine/event/player/PlayerCreationEvent.php:	 * @phpstan-return class-string<Player>
src/pocketmine/event/player/PlayerCreationEvent.php:		return $this->baseClass;
src/pocketmine/event/player/PlayerCreationEvent.php:	 * @phpstan-param class-string<Player> $class
src/pocketmine/event/player/PlayerCreationEvent.php:		if(!is_a($class, $this->baseClass, true)){
src/pocketmine/event/player/PlayerCreationEvent.php:			throw new \RuntimeException("Base class $class must extend " . $this->baseClass);
src/pocketmine/event/player/PlayerCreationEvent.php:		$this->baseClass = $class;
src/pocketmine/event/player/PlayerCreationEvent.php:	 * @phpstan-return class-string<Player>
src/pocketmine/event/player/PlayerCreationEvent.php:		return $this->playerClass;
src/pocketmine/event/player/PlayerCreationEvent.php:	 * @phpstan-param class-string<Player> $class
src/pocketmine/event/player/PlayerCreationEvent.php:		if(!is_a($class, $this->baseClass, true)){
src/pocketmine/event/player/PlayerCreationEvent.php:			throw new \RuntimeException("Class $class must extend " . $this->baseClass);
src/pocketmine/event/player/PlayerCreationEvent.php:		$this->playerClass = $class;
src/pocketmine/event/player/PlayerTransferEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerTransferEvent.php:		$this->address = $address;
src/pocketmine/event/player/PlayerTransferEvent.php:		$this->port = $port;
src/pocketmine/event/player/PlayerTransferEvent.php:		$this->message = $message;
src/pocketmine/event/player/PlayerTransferEvent.php:		return $this->address;
src/pocketmine/event/player/PlayerTransferEvent.php:		$this->address = $address;
src/pocketmine/event/player/PlayerTransferEvent.php:		return $this->port;
src/pocketmine/event/player/PlayerTransferEvent.php:		$this->port = $port;
src/pocketmine/event/player/PlayerTransferEvent.php:		return $this->message;
src/pocketmine/event/player/PlayerTransferEvent.php:		$this->message = $message;
src/pocketmine/event/player/PlayerChatEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerChatEvent.php:		$this->message = $message;
src/pocketmine/event/player/PlayerChatEvent.php:		$this->format = $format;
src/pocketmine/event/player/PlayerChatEvent.php:			foreach(PermissionManager::getInstance()->getPermissionSubscriptions(Server::BROADCAST_CHANNEL_USERS) as $permissible){
src/pocketmine/event/player/PlayerChatEvent.php:					$this->recipients[spl_object_id($permissible)] = $permissible;
src/pocketmine/event/player/PlayerChatEvent.php:			$this->recipients = $recipients;
src/pocketmine/event/player/PlayerChatEvent.php:		return $this->message;
src/pocketmine/event/player/PlayerChatEvent.php:		$this->message = $message;
src/pocketmine/event/player/PlayerChatEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerChatEvent.php:		return $this->format;
src/pocketmine/event/player/PlayerChatEvent.php:		$this->format = $format;
src/pocketmine/event/player/PlayerChatEvent.php:		return $this->recipients;
src/pocketmine/event/player/PlayerChatEvent.php:		$this->recipients = $recipients;
src/pocketmine/event/player/PlayerRespawnEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerRespawnEvent.php:		$this->position = $position;
src/pocketmine/event/player/PlayerRespawnEvent.php:		return $this->position;
src/pocketmine/event/player/PlayerRespawnEvent.php:		if(!$position->isValid()){
src/pocketmine/event/player/PlayerRespawnEvent.php:		$this->position = $position;
src/pocketmine/event/player/PlayerEvent.php: * Player-only related events
src/pocketmine/event/player/PlayerEvent.php:		return $this->player;
src/pocketmine/event/player/PlayerMoveEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerMoveEvent.php:		$this->from = $from;
src/pocketmine/event/player/PlayerMoveEvent.php:		$this->to = $to;
src/pocketmine/event/player/PlayerMoveEvent.php:		return $this->from;
src/pocketmine/event/player/PlayerMoveEvent.php:		return $this->to;
src/pocketmine/event/player/PlayerMoveEvent.php:		$this->to = $to;
src/pocketmine/event/player/PlayerPreLoginEvent.php: * bans, whitelisting, server-full etc here.
src/pocketmine/event/player/PlayerPreLoginEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerPreLoginEvent.php:		$this->kickMessage = $kickMessage;
src/pocketmine/event/player/PlayerPreLoginEvent.php:		$this->kickMessage = $kickMessage;
src/pocketmine/event/player/PlayerPreLoginEvent.php:		return $this->kickMessage;
src/pocketmine/event/player/PlayerExhaustEvent.php: * @phpstan-extends EntityEvent<Human>
src/pocketmine/event/player/PlayerExhaustEvent.php:		$this->entity = $human;
src/pocketmine/event/player/PlayerExhaustEvent.php:		$this->player = $human;
src/pocketmine/event/player/PlayerExhaustEvent.php:		$this->amount = $amount;
src/pocketmine/event/player/PlayerExhaustEvent.php:		$this->cause = $cause;
src/pocketmine/event/player/PlayerExhaustEvent.php:		return $this->player;
src/pocketmine/event/player/PlayerExhaustEvent.php:		return $this->amount;
src/pocketmine/event/player/PlayerExhaustEvent.php:		$this->amount = $amount;
src/pocketmine/event/player/PlayerExhaustEvent.php:	 * Returns an int cause of the exhaustion - one of the constants at the top of this class.
src/pocketmine/event/player/PlayerExhaustEvent.php:		return $this->cause;
src/pocketmine/event/player/PlayerEditBookEvent.php:		$this->player = $player;
src/pocketmine/event/player/PlayerEditBookEvent.php:		$this->oldBook = $oldBook;
src/pocketmine/event/player/PlayerEditBookEvent.php:		$this->newBook = $newBook;
src/pocketmine/event/player/PlayerEditBookEvent.php:		$this->action = $action;
src/pocketmine/event/player/PlayerEditBookEvent.php:		$this->modifiedPages = $modifiedPages;
src/pocketmine/event/player/PlayerEditBookEvent.php:		return $this->action;
src/pocketmine/event/player/PlayerEditBookEvent.php:		return $this->oldBook;
src/pocketmine/event/player/PlayerEditBookEvent.php:		return $this->newBook;
src/pocketmine/event/player/PlayerEditBookEvent.php:		$this->newBook = $book;
src/pocketmine/event/player/PlayerEditBookEvent.php:		return $this->modifiedPages;
src/pocketmine/event/EventPriority.php: * LOWEST -> LOW -> NORMAL -> HIGH -> HIGHEST -> MONITOR
src/pocketmine/event/HandlerList.php:				$h->unregister($object);
src/pocketmine/event/HandlerList.php:				foreach($h->handlerSlots as $key => $list){
src/pocketmine/event/HandlerList.php:					$h->handlerSlots[$key] = [];
src/pocketmine/event/HandlerList.php:		$tags = Utils::parseDocComment((string) $class->getDocComment());
src/pocketmine/event/HandlerList.php:		if($class->isAbstract() && !isset($tags["allowHandle"])){
src/pocketmine/event/HandlerList.php:		while($parentList === null && ($super = $super->getParentClass()) !== false){
src/pocketmine/event/HandlerList.php:			$parentList = self::getHandlerListFor($super->getName());
src/pocketmine/event/HandlerList.php:		$this->class = $class;
src/pocketmine/event/HandlerList.php:		$this->handlerSlots = array_fill_keys(EventPriority::ALL, []);
src/pocketmine/event/HandlerList.php:		$this->parentList = $parentList;
src/pocketmine/event/HandlerList.php:		self::$allLists[$this->class] = $this;
src/pocketmine/event/HandlerList.php:		if(!in_array($listener->getPriority(), EventPriority::ALL, true)){
src/pocketmine/event/HandlerList.php:		if(isset($this->handlerSlots[$listener->getPriority()][spl_object_hash($listener)])){
src/pocketmine/event/HandlerList.php:			throw new \InvalidStateException("This listener is already registered to priority {$listener->getPriority()} of event {$this->class}");
src/pocketmine/event/HandlerList.php:		$this->handlerSlots[$listener->getPriority()][spl_object_hash($listener)] = $listener;
src/pocketmine/event/HandlerList.php:			$this->register($listener);
src/pocketmine/event/HandlerList.php:			foreach($this->handlerSlots as $priority => $list){
src/pocketmine/event/HandlerList.php:					if(($object instanceof Plugin and $listener->getPlugin() === $object)
src/pocketmine/event/HandlerList.php:						or ($object instanceof Listener and $listener->getListener() === $object)
src/pocketmine/event/HandlerList.php:						unset($this->handlerSlots[$priority][$hash]);
src/pocketmine/event/HandlerList.php:			if(isset($this->handlerSlots[$object->getPriority()][spl_object_hash($object)])){
src/pocketmine/event/HandlerList.php:				unset($this->handlerSlots[$object->getPriority()][spl_object_hash($object)]);
src/pocketmine/event/HandlerList.php:		return $this->handlerSlots[$priority];
src/pocketmine/event/HandlerList.php:		return $this->parentList;
src/pocketmine/event/Listener.php: * - MUST be public
src/pocketmine/event/Listener.php: * - MUST NOT be static
src/pocketmine/event/Listener.php: * - MUST accept EXACTLY ONE class parameter which:
src/pocketmine/event/Listener.php: *   - MUST be a VALID class extending Event
src/pocketmine/event/Listener.php: *   - MUST NOT be abstract, UNLESS it has an `@allowHandle` annotation
src/pocketmine/event/Listener.php: * Event handlers do not have to have any particular name - they are detected using reflection.
src/pocketmine/event/Listener.php: * - `@notHandler`: Marks a function as NOT being an event handler. Only needed if the function meets the above criteria.
src/pocketmine/event/Listener.php: * - `@softDepend [PluginName]`: Handler WILL NOT be registered if its event doesn't exist. Useful for soft-depending
src/pocketmine/event/Listener.php: * - `@ignoreCancelled`: Cancelled events WILL NOT be passed to this handler.
src/pocketmine/event/Listener.php: * - `@priority <PRIORITY>`: Sets the priority at which this event handler will receive events.
src/pocketmine/block/Anvil.php:		$this->meta = $meta;
src/pocketmine/block/Anvil.php:		return $names[$this->getVariant()] ?? "Anvil";
src/pocketmine/block/Anvil.php:		if(($this->meta & 0x01) !== 0){ //east/west
src/pocketmine/block/Anvil.php:				$this->x,
src/pocketmine/block/Anvil.php:				$this->y,
src/pocketmine/block/Anvil.php:				$this->z + $inset,
src/pocketmine/block/Anvil.php:				$this->x + 1,
src/pocketmine/block/Anvil.php:				$this->y + 1,
src/pocketmine/block/Anvil.php:				$this->z + 1 - $inset
src/pocketmine/block/Anvil.php:				$this->x + $inset,
src/pocketmine/block/Anvil.php:				$this->y,
src/pocketmine/block/Anvil.php:				$this->z,
src/pocketmine/block/Anvil.php:				$this->x + 1 - $inset,
src/pocketmine/block/Anvil.php:				$this->y + 1,
src/pocketmine/block/Anvil.php:				$this->z + 1
src/pocketmine/block/Anvil.php:			$player->addWindow(new AnvilInventory($this));
src/pocketmine/block/Anvil.php:		$direction = ($player !== null ? $player->getDirection() : 0) & 0x03;
src/pocketmine/block/Anvil.php:		$this->meta = $this->getVariant() | $direction;
src/pocketmine/block/Anvil.php:		return $this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Cobweb.php:		$this->meta = $meta;
src/pocketmine/block/Cobweb.php:		$entity->resetFallDistance();
src/pocketmine/block/GrassPath.php:		$this->meta = $meta;
src/pocketmine/block/GrassPath.php:			$this->x,
src/pocketmine/block/GrassPath.php:			$this->y,
src/pocketmine/block/GrassPath.php:			$this->z,
src/pocketmine/block/GrassPath.php:			$this->x + 1,
src/pocketmine/block/GrassPath.php:			$this->y + 1, //TODO: this should be 0.9375, but MCPE currently treats them as a full block (https://bugs.mojang.com/browse/MCPE-12109)
src/pocketmine/block/GrassPath.php:			$this->z + 1
src/pocketmine/block/GrassPath.php:		if($this->getSide(Vector3::SIDE_UP)->isSolid()){
src/pocketmine/block/GrassPath.php:			$this->level->setBlock($this, BlockFactory::get(Block::DIRT), true);
src/pocketmine/block/Potato.php:		$this->meta = $meta;
src/pocketmine/block/Potato.php:			ItemFactory::get(Item::POTATO, 0, $this->getDamage() >= 0x07 ? mt_rand(1, 5) : 1)
src/pocketmine/block/Potato.php:		if($this->getDamage() >= 7 && mt_rand(0, 49) === 0){
src/pocketmine/block/WallBanner.php:		if($this->getSide($this->meta ^ 0x01)->getId() === self::AIR){
src/pocketmine/block/WallBanner.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/Glowstone.php:		$this->meta = $meta;
src/pocketmine/block/NoteBlock.php:		$this->meta = $meta;
src/pocketmine/block/Stair.php:		$minYSlab = ($this->meta & 0x04) === 0 ? 0 : 0.5;
src/pocketmine/block/Stair.php:				$this->x,
src/pocketmine/block/Stair.php:				$this->y + $minYSlab,
src/pocketmine/block/Stair.php:				$this->z,
src/pocketmine/block/Stair.php:				$this->x + 1,
src/pocketmine/block/Stair.php:				$this->y + $maxYSlab,
src/pocketmine/block/Stair.php:				$this->z + 1
src/pocketmine/block/Stair.php:		$minY = ($this->meta & 0x04) === 0 ? 0.5 : 0;
src/pocketmine/block/Stair.php:		$rotationMeta = $this->meta & 0x03;
src/pocketmine/block/Stair.php:			$this->x + $minX,
src/pocketmine/block/Stair.php:			$this->y + $minY,
src/pocketmine/block/Stair.php:			$this->z + $minZ,
src/pocketmine/block/Stair.php:			$this->x + $maxX,
src/pocketmine/block/Stair.php:			$this->y + $maxY,
src/pocketmine/block/Stair.php:			$this->z + $maxZ
src/pocketmine/block/Stair.php:		$this->meta = $player !== null ? $faces[$player->getDirection()] & 0x03 : 0;
src/pocketmine/block/Stair.php:		if(($clickVector->y > 0.5 and $face !== Vector3::SIDE_UP) or $face === Vector3::SIDE_DOWN){
src/pocketmine/block/Stair.php:			$this->meta |= 0x04; //Upside-down stairs
src/pocketmine/block/Stair.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Sandstone.php:		$this->meta = $meta;
src/pocketmine/block/Sandstone.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/Fence.php:		$this->meta = $meta;
src/pocketmine/block/Fence.php:		$width = 0.5 - $this->getThickness() / 2;
src/pocketmine/block/Fence.php:			$this->x + ($this->canConnect($this->getSide(Vector3::SIDE_WEST)) ? 0 : $width),
src/pocketmine/block/Fence.php:			$this->y,
src/pocketmine/block/Fence.php:			$this->z + ($this->canConnect($this->getSide(Vector3::SIDE_NORTH)) ? 0 : $width),
src/pocketmine/block/Fence.php:			$this->x + 1 - ($this->canConnect($this->getSide(Vector3::SIDE_EAST)) ? 0 : $width),
src/pocketmine/block/Fence.php:			$this->y + 1.5,
src/pocketmine/block/Fence.php:			$this->z + 1 - ($this->canConnect($this->getSide(Vector3::SIDE_SOUTH)) ? 0 : $width)
src/pocketmine/block/Fence.php:		$inset = 0.5 - $this->getThickness() / 2;
src/pocketmine/block/Fence.php:		$connectWest = $this->canConnect($this->getSide(Vector3::SIDE_WEST));
src/pocketmine/block/Fence.php:		$connectEast = $this->canConnect($this->getSide(Vector3::SIDE_EAST));
src/pocketmine/block/Fence.php:				$this->x + ($connectWest ? 0 : $inset),
src/pocketmine/block/Fence.php:				$this->y,
src/pocketmine/block/Fence.php:				$this->z + $inset,
src/pocketmine/block/Fence.php:				$this->x + 1 - ($connectEast ? 0 : $inset),
src/pocketmine/block/Fence.php:				$this->y + 1.5,
src/pocketmine/block/Fence.php:				$this->z + 1 - $inset
src/pocketmine/block/Fence.php:		$connectNorth = $this->canConnect($this->getSide(Vector3::SIDE_NORTH));
src/pocketmine/block/Fence.php:		$connectSouth = $this->canConnect($this->getSide(Vector3::SIDE_SOUTH));
src/pocketmine/block/Fence.php:				$this->x + $inset,
src/pocketmine/block/Fence.php:				$this->y,
src/pocketmine/block/Fence.php:				$this->z + ($connectNorth ? 0 : $inset),
src/pocketmine/block/Fence.php:				$this->x + 1 - $inset,
src/pocketmine/block/Fence.php:				$this->y + 1.5,
src/pocketmine/block/Fence.php:				$this->z + 1 - ($connectSouth ? 0 : $inset)
src/pocketmine/block/Fence.php:			//centre post AABB (only needed if not connected on any axis - other BBs overlapping will do this if any connections are made)
src/pocketmine/block/Fence.php:					$this->x + $inset,
src/pocketmine/block/Fence.php:					$this->y,
src/pocketmine/block/Fence.php:					$this->z + $inset,
src/pocketmine/block/Fence.php:					$this->x + 1 - $inset,
src/pocketmine/block/Fence.php:					$this->y + 1.5,
src/pocketmine/block/Fence.php:					$this->z + 1 - $inset
src/pocketmine/block/Fence.php:		return $block instanceof static or $block instanceof FenceGate or ($block->isSolid() and !$block->isTransparent());
src/pocketmine/block/Gravel.php:		$this->meta = $meta;
src/pocketmine/block/StainedGlass.php:		return ColorBlockMetaHelper::getColorFromMeta($this->getVariant()) . " Stained Glass";
src/pocketmine/block/EndPortalFrame.php:		$this->meta = $meta;
src/pocketmine/block/EndPortalFrame.php:		return -1;
src/pocketmine/block/EndPortalFrame.php:			$this->x,
src/pocketmine/block/EndPortalFrame.php:			$this->y,
src/pocketmine/block/EndPortalFrame.php:			$this->z,
src/pocketmine/block/EndPortalFrame.php:			$this->x + 1,
src/pocketmine/block/EndPortalFrame.php:			$this->y + (($this->getDamage() & 0x04) > 0 ? 1 : 0.8125),
src/pocketmine/block/EndPortalFrame.php:			$this->z + 1
src/pocketmine/block/EnchantingTable.php:		$this->meta = $meta;
src/pocketmine/block/EnchantingTable.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/EnchantingTable.php:		Tile::createTile(Tile::ENCHANT_TABLE, $this->getLevelNonNull(), TileEnchantTable::createNBT($this, $face, $item, $player));
src/pocketmine/block/EnchantingTable.php:			$player->addWindow(new EnchantInventory($this));
src/pocketmine/block/WoodenFence.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/Carrot.php:		$this->meta = $meta;
src/pocketmine/block/Carrot.php:			ItemFactory::get(Item::CARROT, 0, $this->meta >= 0x07 ? mt_rand(1, 4) : 1)
src/pocketmine/block/Sugarcane.php:		$this->meta = $meta;
src/pocketmine/block/Sugarcane.php:		if($item->getId() === Item::DYE and $item->getDamage() === 0x0F){ //Bonemeal
src/pocketmine/block/Sugarcane.php:			if($this->getSide(Vector3::SIDE_DOWN)->getId() !== self::SUGARCANE_BLOCK){
src/pocketmine/block/Sugarcane.php:					$b = $this->getLevelNonNull()->getBlockAt($this->x, $this->y + $y, $this->z);
src/pocketmine/block/Sugarcane.php:					if($b->getId() === self::AIR){
src/pocketmine/block/Sugarcane.php:						$ev->call();
src/pocketmine/block/Sugarcane.php:						if($ev->isCancelled()){
src/pocketmine/block/Sugarcane.php:						$this->getLevelNonNull()->setBlock($b, $ev->getNewState(), true);
src/pocketmine/block/Sugarcane.php:				$this->meta = 0;
src/pocketmine/block/Sugarcane.php:				$this->getLevelNonNull()->setBlock($this, $this, true);
src/pocketmine/block/Sugarcane.php:			$item->pop();
src/pocketmine/block/Sugarcane.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Sugarcane.php:		if($down->isTransparent() and $down->getId() !== self::SUGARCANE_BLOCK){
src/pocketmine/block/Sugarcane.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/Sugarcane.php:		if($this->getSide(Vector3::SIDE_DOWN)->getId() !== self::SUGARCANE_BLOCK){
src/pocketmine/block/Sugarcane.php:			if($this->meta === 0x0F){
src/pocketmine/block/Sugarcane.php:					$b = $this->getLevelNonNull()->getBlockAt($this->x, $this->y + $y, $this->z);
src/pocketmine/block/Sugarcane.php:					if($b->getId() === self::AIR){
src/pocketmine/block/Sugarcane.php:						$ev->call();
src/pocketmine/block/Sugarcane.php:						if($ev->isCancelled()){
src/pocketmine/block/Sugarcane.php:						$this->getLevelNonNull()->setBlock($b, $ev->getNewState(), true);
src/pocketmine/block/Sugarcane.php:				$this->meta = 0;
src/pocketmine/block/Sugarcane.php:				$this->getLevelNonNull()->setBlock($this, $this, true);
src/pocketmine/block/Sugarcane.php:				++$this->meta;
src/pocketmine/block/Sugarcane.php:				$this->getLevelNonNull()->setBlock($this, $this, true);
src/pocketmine/block/Sugarcane.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Sugarcane.php:		if($down->getId() === self::SUGARCANE_BLOCK){
src/pocketmine/block/Sugarcane.php:			$this->getLevelNonNull()->setBlock($blockReplace, BlockFactory::get(Block::SUGARCANE_BLOCK), true);
src/pocketmine/block/Sugarcane.php:		}elseif($down->getId() === self::GRASS or $down->getId() === self::DIRT or $down->getId() === self::SAND){
src/pocketmine/block/Sugarcane.php:			$block0 = $down->getSide(Vector3::SIDE_NORTH);
src/pocketmine/block/Sugarcane.php:			$block1 = $down->getSide(Vector3::SIDE_SOUTH);
src/pocketmine/block/Sugarcane.php:			$block2 = $down->getSide(Vector3::SIDE_WEST);
src/pocketmine/block/Sugarcane.php:			$block3 = $down->getSide(Vector3::SIDE_EAST);
src/pocketmine/block/Sugarcane.php:				$this->getLevelNonNull()->setBlock($blockReplace, BlockFactory::get(Block::SUGARCANE_BLOCK), true);
src/pocketmine/block/Bookshelf.php:		$this->meta = $meta;
src/pocketmine/block/Cake.php:		$this->meta = $meta;
src/pocketmine/block/Cake.php:		$f = $this->getDamage() * 0.125; //1 slice width
src/pocketmine/block/Cake.php:			$this->x + 0.0625 + $f,
src/pocketmine/block/Cake.php:			$this->y,
src/pocketmine/block/Cake.php:			$this->z + 0.0625,
src/pocketmine/block/Cake.php:			$this->x + 1 - 0.0625,
src/pocketmine/block/Cake.php:			$this->y + 0.5,
src/pocketmine/block/Cake.php:			$this->z + 1 - 0.0625
src/pocketmine/block/Cake.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Cake.php:		if($down->getId() !== self::AIR){
src/pocketmine/block/Cake.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Cake.php:		if($this->getSide(Vector3::SIDE_DOWN)->getId() === self::AIR){ //Replace with common break method
src/pocketmine/block/Cake.php:			$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::AIR), true);
src/pocketmine/block/Cake.php:			$player->consumeObject($this);
src/pocketmine/block/Cake.php:		$clone->meta++;
src/pocketmine/block/Cake.php:		if($clone->meta > 0x06){
src/pocketmine/block/Cake.php:		$this->level->setBlock($this, $this->getResidue());
src/pocketmine/block/MonsterSpawner.php:		$this->meta = $meta;
src/pocketmine/block/NetherBrickStairs.php:		$this->meta = $meta;
src/pocketmine/block/Stone.php:		$this->meta = $meta;
src/pocketmine/block/Stone.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/Stone.php:		if($this->getDamage() === self::NORMAL){
src/pocketmine/block/Stone.php:				ItemFactory::get(Item::COBBLESTONE, $this->getDamage())
src/pocketmine/block/Cobblestone.php:		$this->meta = $meta;
src/pocketmine/block/GlassPane.php:		$this->meta = $meta;
src/pocketmine/block/Diamond.php:		$this->meta = $meta;
src/pocketmine/block/Cactus.php:		$this->meta = $meta;
src/pocketmine/block/Cactus.php:			$this->x + 0.0625,
src/pocketmine/block/Cactus.php:			$this->y + 0.0625,
src/pocketmine/block/Cactus.php:			$this->z + 0.0625,
src/pocketmine/block/Cactus.php:			$this->x + 0.9375,
src/pocketmine/block/Cactus.php:			$this->y + 0.9375,
src/pocketmine/block/Cactus.php:			$this->z + 0.9375
src/pocketmine/block/Cactus.php:		$entity->attack($ev);
src/pocketmine/block/Cactus.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Cactus.php:		if($down->getId() !== self::SAND and $down->getId() !== self::CACTUS){
src/pocketmine/block/Cactus.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/Cactus.php:				$b = $this->getSide($side);
src/pocketmine/block/Cactus.php:				if($b->isSolid()){
src/pocketmine/block/Cactus.php:					$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/Cactus.php:		if($this->getSide(Vector3::SIDE_DOWN)->getId() !== self::CACTUS){
src/pocketmine/block/Cactus.php:			if($this->meta === 0x0f){
src/pocketmine/block/Cactus.php:					$b = $this->getLevelNonNull()->getBlockAt($this->x, $this->y + $y, $this->z);
src/pocketmine/block/Cactus.php:					if($b->getId() === self::AIR){
src/pocketmine/block/Cactus.php:						$ev->call();
src/pocketmine/block/Cactus.php:						if($ev->isCancelled()){
src/pocketmine/block/Cactus.php:						$this->getLevelNonNull()->setBlock($b, $ev->getNewState(), true);
src/pocketmine/block/Cactus.php:				$this->meta = 0;
src/pocketmine/block/Cactus.php:				$this->getLevelNonNull()->setBlock($this, $this);
src/pocketmine/block/Cactus.php:				++$this->meta;
src/pocketmine/block/Cactus.php:				$this->getLevelNonNull()->setBlock($this, $this);
src/pocketmine/block/Cactus.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Cactus.php:		if($down->getId() === self::SAND or $down->getId() === self::CACTUS){
src/pocketmine/block/Cactus.php:			$block0 = $this->getSide(Vector3::SIDE_NORTH);
src/pocketmine/block/Cactus.php:			$block1 = $this->getSide(Vector3::SIDE_SOUTH);
src/pocketmine/block/Cactus.php:			$block2 = $this->getSide(Vector3::SIDE_WEST);
src/pocketmine/block/Cactus.php:			$block3 = $this->getSide(Vector3::SIDE_EAST);
src/pocketmine/block/Cactus.php:			if(!$block0->isSolid() and !$block1->isSolid() and !$block2->isSolid() and !$block3->isSolid()){
src/pocketmine/block/Cactus.php:				$this->getLevelNonNull()->setBlock($this, $this, true);
src/pocketmine/block/StoneBrickStairs.php:		$this->meta = $meta;
src/pocketmine/block/Slab.php:		$this->meta = $meta;
src/pocketmine/block/Slab.php:		if($blockReplace->getId() === $this->getId() and $blockReplace->getVariant() === $this->getVariant()){
src/pocketmine/block/Slab.php:			if(($blockReplace->getDamage() & 0x08) !== 0){ //Trying to combine with top slab
src/pocketmine/block/Slab.php:				return $clickVector->y <= 0.5 or (!$isClickedBlock and $face === Vector3::SIDE_UP);
src/pocketmine/block/Slab.php:				return $clickVector->y >= 0.5 or (!$isClickedBlock and $face === Vector3::SIDE_DOWN);
src/pocketmine/block/Slab.php:		$this->meta &= 0x07;
src/pocketmine/block/Slab.php:			if($blockClicked->getId() === $this->id and ($blockClicked->getDamage() & 0x08) === 0x08 and $blockClicked->getVariant() === $this->getVariant()){
src/pocketmine/block/Slab.php:				$this->getLevelNonNull()->setBlock($blockClicked, BlockFactory::get($this->getDoubleSlabId(), $this->getVariant()), true);
src/pocketmine/block/Slab.php:			}elseif($blockReplace->getId() === $this->id and $blockReplace->getVariant() === $this->getVariant()){
src/pocketmine/block/Slab.php:				$this->getLevelNonNull()->setBlock($blockReplace, BlockFactory::get($this->getDoubleSlabId(), $this->getVariant()), true);
src/pocketmine/block/Slab.php:				$this->meta |= 0x08;
src/pocketmine/block/Slab.php:			if($blockClicked->getId() === $this->id and ($blockClicked->getDamage() & 0x08) === 0 and $blockClicked->getVariant() === $this->getVariant()){
src/pocketmine/block/Slab.php:				$this->getLevelNonNull()->setBlock($blockClicked, BlockFactory::get($this->getDoubleSlabId(), $this->getVariant()), true);
src/pocketmine/block/Slab.php:			}elseif($blockReplace->getId() === $this->id and $blockReplace->getVariant() === $this->getVariant()){
src/pocketmine/block/Slab.php:				$this->getLevelNonNull()->setBlock($blockReplace, BlockFactory::get($this->getDoubleSlabId(), $this->getVariant()), true);
src/pocketmine/block/Slab.php:			if($blockReplace->getId() === $this->id){
src/pocketmine/block/Slab.php:				if($blockReplace->getVariant() === $this->getVariant()){
src/pocketmine/block/Slab.php:					$this->getLevelNonNull()->setBlock($blockReplace, BlockFactory::get($this->getDoubleSlabId(), $this->getVariant()), true);
src/pocketmine/block/Slab.php:				if($clickVector->y > 0.5){
src/pocketmine/block/Slab.php:					$this->meta |= 0x08;
src/pocketmine/block/Slab.php:		if($blockReplace->getId() === $this->id and $blockClicked->getVariant() !== $this->getVariant()){
src/pocketmine/block/Slab.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Slab.php:		if(($this->meta & 0x08) > 0){
src/pocketmine/block/Slab.php:				$this->x,
src/pocketmine/block/Slab.php:				$this->y + 0.5,
src/pocketmine/block/Slab.php:				$this->z,
src/pocketmine/block/Slab.php:				$this->x + 1,
src/pocketmine/block/Slab.php:				$this->y + 1,
src/pocketmine/block/Slab.php:				$this->z + 1
src/pocketmine/block/Slab.php:				$this->x,
src/pocketmine/block/Slab.php:				$this->y,
src/pocketmine/block/Slab.php:				$this->z,
src/pocketmine/block/Slab.php:				$this->x + 1,
src/pocketmine/block/Slab.php:				$this->y + 0.5,
src/pocketmine/block/Slab.php:				$this->z + 1
src/pocketmine/block/Tripwire.php:		$this->meta = $meta;
src/pocketmine/block/DiamondOre.php:		$this->meta = $meta;
src/pocketmine/block/FlowerPot.php:		$this->meta = $meta;
src/pocketmine/block/FlowerPot.php:			$this->x + 0.3125,
src/pocketmine/block/FlowerPot.php:			$this->y,
src/pocketmine/block/FlowerPot.php:			$this->z + 0.3125,
src/pocketmine/block/FlowerPot.php:			$this->x + 0.6875,
src/pocketmine/block/FlowerPot.php:			$this->y + 0.375,
src/pocketmine/block/FlowerPot.php:			$this->z + 0.6875
src/pocketmine/block/FlowerPot.php:		if($this->getSide(Vector3::SIDE_DOWN)->isTransparent()){
src/pocketmine/block/FlowerPot.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/FlowerPot.php:		Tile::createTile(Tile::FLOWER_POT, $this->getLevelNonNull(), TileFlowerPot::createNBT($this, $face, $item, $player));
src/pocketmine/block/FlowerPot.php:		if($this->getSide(Vector3::SIDE_DOWN)->isTransparent()){
src/pocketmine/block/FlowerPot.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/FlowerPot.php:		$pot = $this->getLevelNonNull()->getTile($this);
src/pocketmine/block/FlowerPot.php:		if(!$pot->canAddItem($item)){
src/pocketmine/block/FlowerPot.php:		$this->setDamage(self::STATE_FULL); //specific damage value is unnecessary, it just needs to be non-zero to show an item.
src/pocketmine/block/FlowerPot.php:		$this->getLevelNonNull()->setBlock($this, $this, true, false);
src/pocketmine/block/FlowerPot.php:		$pot->setItem($item->pop());
src/pocketmine/block/FlowerPot.php:		$tile = $this->getLevelNonNull()->getTile($this);
src/pocketmine/block/FlowerPot.php:			$item = $tile->getItem();
src/pocketmine/block/FlowerPot.php:			if($item->getId() !== Item::AIR){
src/pocketmine/block/Flower.php:		$this->meta = $meta;
src/pocketmine/block/Flower.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/Flower.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Flower.php:		if($down->getId() === Block::GRASS or $down->getId() === Block::DIRT or $down->getId() === Block::FARMLAND){
src/pocketmine/block/Flower.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true);
src/pocketmine/block/Flower.php:		if($this->getSide(Vector3::SIDE_DOWN)->isTransparent()){
src/pocketmine/block/Flower.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/StandingBanner.php:		$this->meta = $meta;
src/pocketmine/block/StandingBanner.php:				$this->meta = floor((($player->yaw + 180) * 16 / 360) + 0.5) & 0x0f;
src/pocketmine/block/StandingBanner.php:				$this->getLevelNonNull()->setBlock($blockReplace, $this, true);
src/pocketmine/block/StandingBanner.php:				$this->meta = $face;
src/pocketmine/block/StandingBanner.php:				$this->getLevelNonNull()->setBlock($blockReplace, BlockFactory::get(Block::WALL_BANNER, $this->meta), true);
src/pocketmine/block/StandingBanner.php:			Tile::createTile(Tile::BANNER, $this->getLevelNonNull(), TileBanner::createNBT($this, $face, $item, $player));
src/pocketmine/block/StandingBanner.php:		if($this->getSide(Vector3::SIDE_DOWN)->getId() === self::AIR){
src/pocketmine/block/StandingBanner.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/StandingBanner.php:		$tile = $this->level->getTile($this);
src/pocketmine/block/StandingBanner.php:		$drop = ItemFactory::get(Item::BANNER, ($tile instanceof TileBanner ? $tile->getBaseColor() : 0));
src/pocketmine/block/StandingBanner.php:		if($tile instanceof TileBanner and !($patterns = $tile->getPatterns())->empty()){
src/pocketmine/block/StandingBanner.php:			$drop->setNamedTagEntry(clone $patterns);
src/pocketmine/block/Beetroot.php:		$this->meta = $meta;
src/pocketmine/block/Beetroot.php:		if($this->meta >= 0x07){
src/pocketmine/block/Thin.php:		$width = 0.5 - 0.125 / 2;
src/pocketmine/block/Thin.php:			$this->x + ($this->canConnect($this->getSide(Vector3::SIDE_WEST)) ? 0 : $width),
src/pocketmine/block/Thin.php:			$this->y,
src/pocketmine/block/Thin.php:			$this->z + ($this->canConnect($this->getSide(Vector3::SIDE_NORTH)) ? 0 : $width),
src/pocketmine/block/Thin.php:			$this->x + 1 - ($this->canConnect($this->getSide(Vector3::SIDE_EAST)) ? 0 : $width),
src/pocketmine/block/Thin.php:			$this->y + 1,
src/pocketmine/block/Thin.php:			$this->z + 1 - ($this->canConnect($this->getSide(Vector3::SIDE_SOUTH)) ? 0 : $width)
src/pocketmine/block/Thin.php:		$inset = 0.5 - 0.125 / 2;
src/pocketmine/block/Thin.php:		$connectWest = $this->canConnect($this->getSide(Vector3::SIDE_WEST));
src/pocketmine/block/Thin.php:		$connectEast = $this->canConnect($this->getSide(Vector3::SIDE_EAST));
src/pocketmine/block/Thin.php:				$this->x + ($connectWest ? 0 : $inset),
src/pocketmine/block/Thin.php:				$this->y,
src/pocketmine/block/Thin.php:				$this->z + $inset,
src/pocketmine/block/Thin.php:				$this->x + 1 - ($connectEast ? 0 : $inset),
src/pocketmine/block/Thin.php:				$this->y + 1,
src/pocketmine/block/Thin.php:				$this->z + 1 - $inset
src/pocketmine/block/Thin.php:		$connectNorth = $this->canConnect($this->getSide(Vector3::SIDE_NORTH));
src/pocketmine/block/Thin.php:		$connectSouth = $this->canConnect($this->getSide(Vector3::SIDE_SOUTH));
src/pocketmine/block/Thin.php:				$this->x + $inset,
src/pocketmine/block/Thin.php:				$this->y,
src/pocketmine/block/Thin.php:				$this->z + ($connectNorth ? 0 : $inset),
src/pocketmine/block/Thin.php:				$this->x + 1 - $inset,
src/pocketmine/block/Thin.php:				$this->y + 1,
src/pocketmine/block/Thin.php:				$this->z + 1 - ($connectSouth ? 0 : $inset)
src/pocketmine/block/Thin.php:			//centre post AABB (only needed if not connected on any axis - other BBs overlapping will do this if any connections are made)
src/pocketmine/block/Thin.php:					$this->x + $inset,
src/pocketmine/block/Thin.php:					$this->y,
src/pocketmine/block/Thin.php:					$this->z + $inset,
src/pocketmine/block/Thin.php:					$this->x + 1 - $inset,
src/pocketmine/block/Thin.php:					$this->y + 1,
src/pocketmine/block/Thin.php:					$this->z + 1 - $inset
src/pocketmine/block/Thin.php:		//FIXME: currently there's no proper way to tell if a block is a full-block, so we check the bounding box size
src/pocketmine/block/Thin.php:		$bb = $block->getBoundingBox();
src/pocketmine/block/Thin.php:		return $bb !== null and $bb->getAverageEdgeLength() >= 1;
src/pocketmine/block/Wheat.php:		$this->meta = $meta;
src/pocketmine/block/Wheat.php:		if($this->meta >= 0x07){
src/pocketmine/block/Crops.php:		if($blockReplace->getSide(Vector3::SIDE_DOWN)->getId() === Block::FARMLAND){
src/pocketmine/block/Crops.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Crops.php:		if($this->meta < 7 and $item->getId() === Item::DYE and $item->getDamage() === 0x0F){ //Bonemeal
src/pocketmine/block/Crops.php:			$block->meta += mt_rand(2, 5);
src/pocketmine/block/Crops.php:			if($block->meta > 7){
src/pocketmine/block/Crops.php:				$block->meta = 7;
src/pocketmine/block/Crops.php:			$ev->call();
src/pocketmine/block/Crops.php:			if(!$ev->isCancelled()){
src/pocketmine/block/Crops.php:				$this->getLevelNonNull()->setBlock($this, $ev->getNewState(), true, true);
src/pocketmine/block/Crops.php:			$item->pop();
src/pocketmine/block/Crops.php:		if($this->getSide(Vector3::SIDE_DOWN)->getId() !== Block::FARMLAND){
src/pocketmine/block/Crops.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/Crops.php:			if($this->meta < 0x07){
src/pocketmine/block/Crops.php:				++$block->meta;
src/pocketmine/block/Crops.php:				$ev->call();
src/pocketmine/block/Crops.php:				if(!$ev->isCancelled()){
src/pocketmine/block/Crops.php:					$this->getLevelNonNull()->setBlock($this, $ev->getNewState(), true, true);
src/pocketmine/block/PumpkinStem.php:		$this->meta = $meta;
src/pocketmine/block/PumpkinStem.php:			if($this->meta < 0x07){
src/pocketmine/block/PumpkinStem.php:				++$block->meta;
src/pocketmine/block/PumpkinStem.php:				$ev->call();
src/pocketmine/block/PumpkinStem.php:				if(!$ev->isCancelled()){
src/pocketmine/block/PumpkinStem.php:					$this->getLevelNonNull()->setBlock($this, $ev->getNewState(), true);
src/pocketmine/block/PumpkinStem.php:					$b = $this->getSide($side);
src/pocketmine/block/PumpkinStem.php:					if($b->getId() === self::PUMPKIN){
src/pocketmine/block/PumpkinStem.php:				$side = $this->getSide(mt_rand(2, 5));
src/pocketmine/block/PumpkinStem.php:				$d = $side->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/PumpkinStem.php:				if($side->getId() === self::AIR and ($d->getId() === self::FARMLAND or $d->getId() === self::GRASS or $d->getId() === self::DIRT)){
src/pocketmine/block/PumpkinStem.php:					$ev->call();
src/pocketmine/block/PumpkinStem.php:					if(!$ev->isCancelled()){
src/pocketmine/block/PumpkinStem.php:						$this->getLevelNonNull()->setBlock($side, $ev->getNewState(), true);
src/pocketmine/block/NetherQuartzOre.php:		$this->meta = $meta;
src/pocketmine/block/ConcretePowder.php:		$this->meta = $meta;
src/pocketmine/block/ConcretePowder.php:		return ColorBlockMetaHelper::getColorFromMeta($this->getVariant()) . " Concrete Powder";
src/pocketmine/block/ConcretePowder.php:		if(($block = $this->checkAdjacentWater()) !== null){
src/pocketmine/block/ConcretePowder.php:			$this->level->setBlock($this, $block);
src/pocketmine/block/ConcretePowder.php:		return $this->checkAdjacentWater();
src/pocketmine/block/ConcretePowder.php:			if($this->getSide($i) instanceof Water){
src/pocketmine/block/ConcretePowder.php:				return BlockFactory::get(Block::CONCRETE, $this->meta);
src/pocketmine/block/Quartz.php:		$this->meta = $meta;
src/pocketmine/block/Quartz.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/Quartz.php:		if($this->getVariant() !== self::NORMAL){
src/pocketmine/block/Quartz.php:			$this->meta = PillarRotationHelper::getMetaFromFace($this->meta, $face);
src/pocketmine/block/Quartz.php:		return $this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/PackedIce.php:		$this->meta = $meta;
src/pocketmine/block/Iron.php:		$this->meta = $meta;
src/pocketmine/block/LapisOre.php:		$this->meta = $meta;
src/pocketmine/block/IronBars.php:		$this->meta = $meta;
src/pocketmine/block/Snow.php:		$this->meta = $meta;
src/pocketmine/block/Bricks.php:		$this->meta = $meta;
src/pocketmine/block/IronOre.php:		$this->meta = $meta;
src/pocketmine/block/InvisibleBedrock.php:		return -1;
src/pocketmine/block/StonePressurePlate.php:		$this->meta = $meta;
src/pocketmine/block/RedMushroom.php:		$this->meta = $meta;
src/pocketmine/block/RedMushroom.php:		if($this->getSide(Vector3::SIDE_DOWN)->isTransparent()){
src/pocketmine/block/RedMushroom.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/RedMushroom.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/RedMushroom.php:		if(!$down->isTransparent()){
src/pocketmine/block/RedMushroom.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/EnderChest.php:		$this->meta = $faces[$player instanceof Player ? $player->getDirection() : 0];
src/pocketmine/block/EnderChest.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/EnderChest.php:		Tile::createTile(Tile::ENDER_CHEST, $this->getLevelNonNull(), TileEnderChest::createNBT($this, $face, $item, $player));
src/pocketmine/block/EnderChest.php:			$t = $this->getLevelNonNull()->getTile($this);
src/pocketmine/block/EnderChest.php:				$enderChest = Tile::createTile(Tile::ENDER_CHEST, $this->getLevelNonNull(), TileEnderChest::createNBT($this));
src/pocketmine/block/EnderChest.php:			if(!$this->getSide(Vector3::SIDE_UP)->isTransparent()){
src/pocketmine/block/EnderChest.php:			$player->getEnderChestInventory()->setHolderPosition($enderChest);
src/pocketmine/block/EnderChest.php:			$player->addWindow($player->getEnderChestInventory());
src/pocketmine/block/StoneSlab.php:		return (($this->meta & 0x08) > 0 ? "Upper " : "") . ($names[$this->getVariant()] ?? "") . " Slab";
src/pocketmine/block/Liquid.php:	private const BLOCKED = -1;
src/pocketmine/block/Liquid.php:		$d = $this->meta;
src/pocketmine/block/Liquid.php:		if($block->getId() !== $this->getId()){
src/pocketmine/block/Liquid.php:			return -1;
src/pocketmine/block/Liquid.php:		return $block->getDamage();
src/pocketmine/block/Liquid.php:		if($block->getId() !== $this->getId()){
src/pocketmine/block/Liquid.php:			return -1;
src/pocketmine/block/Liquid.php:		$decay = $block->getDamage();
src/pocketmine/block/Liquid.php:		$this->flowVector = null;
src/pocketmine/block/Liquid.php:		if($this->flowVector !== null){
src/pocketmine/block/Liquid.php:			return $this->flowVector;
src/pocketmine/block/Liquid.php:		$decay = $this->getEffectiveFlowDecay($this);
src/pocketmine/block/Liquid.php:			$x = $this->x;
src/pocketmine/block/Liquid.php:			$y = $this->y;
src/pocketmine/block/Liquid.php:			$z = $this->z;
src/pocketmine/block/Liquid.php:				--$x;
src/pocketmine/block/Liquid.php:				--$z;
src/pocketmine/block/Liquid.php:			$sideBlock = $this->level->getBlockAt($x, $y, $z);
src/pocketmine/block/Liquid.php:			$blockDecay = $this->getEffectiveFlowDecay($sideBlock);
src/pocketmine/block/Liquid.php:				if(!$sideBlock->canBeFlowedInto()){
src/pocketmine/block/Liquid.php:				$blockDecay = $this->getEffectiveFlowDecay($this->level->getBlockAt($x, $y - 1, $z));
src/pocketmine/block/Liquid.php:					$realDecay = $blockDecay - ($decay - 8);
src/pocketmine/block/Liquid.php:					$vector->x += ($sideBlock->x - $this->x) * $realDecay;
src/pocketmine/block/Liquid.php:					$vector->y += ($sideBlock->y - $this->y) * $realDecay;
src/pocketmine/block/Liquid.php:					$vector->z += ($sideBlock->z - $this->z) * $realDecay;
src/pocketmine/block/Liquid.php:				$realDecay = $blockDecay - $decay;
src/pocketmine/block/Liquid.php:				$vector->x += ($sideBlock->x - $this->x) * $realDecay;
src/pocketmine/block/Liquid.php:				$vector->y += ($sideBlock->y - $this->y) * $realDecay;
src/pocketmine/block/Liquid.php:				$vector->z += ($sideBlock->z - $this->z) * $realDecay;
src/pocketmine/block/Liquid.php:		if($this->getDamage() >= 8){
src/pocketmine/block/Liquid.php:				!$this->canFlowInto($this->level->getBlockAt($this->x, $this->y, $this->z - 1)) or
src/pocketmine/block/Liquid.php:				!$this->canFlowInto($this->level->getBlockAt($this->x, $this->y, $this->z + 1)) or
src/pocketmine/block/Liquid.php:				!$this->canFlowInto($this->level->getBlockAt($this->x - 1, $this->y, $this->z)) or
src/pocketmine/block/Liquid.php:				!$this->canFlowInto($this->level->getBlockAt($this->x + 1, $this->y, $this->z)) or
src/pocketmine/block/Liquid.php:				!$this->canFlowInto($this->level->getBlockAt($this->x, $this->y + 1, $this->z - 1)) or
src/pocketmine/block/Liquid.php:				!$this->canFlowInto($this->level->getBlockAt($this->x, $this->y + 1, $this->z + 1)) or
src/pocketmine/block/Liquid.php:				!$this->canFlowInto($this->level->getBlockAt($this->x - 1, $this->y + 1, $this->z)) or
src/pocketmine/block/Liquid.php:				!$this->canFlowInto($this->level->getBlockAt($this->x + 1, $this->y + 1, $this->z))
src/pocketmine/block/Liquid.php:				$vector = $vector->normalize()->add(0, -6, 0);
src/pocketmine/block/Liquid.php:		return $this->flowVector = $vector->normalize();
src/pocketmine/block/Liquid.php:		if($entity->canBeMovedByCurrents()){
src/pocketmine/block/Liquid.php:			$flow = $this->getFlowVector();
src/pocketmine/block/Liquid.php:			$vector->x += $flow->x;
src/pocketmine/block/Liquid.php:			$vector->y += $flow->y;
src/pocketmine/block/Liquid.php:			$vector->z += $flow->z;
src/pocketmine/block/Liquid.php:		$this->checkForHarden();
src/pocketmine/block/Liquid.php:		$this->level->scheduleDelayedBlockUpdate($this, $this->tickRate());
src/pocketmine/block/Liquid.php:		$decay = $this->getFlowDecay($this);
src/pocketmine/block/Liquid.php:		$multiplier = $this->getFlowDecayPerBlock();
src/pocketmine/block/Liquid.php:			$smallestFlowDecay = -100;
src/pocketmine/block/Liquid.php:			$this->adjacentSources = 0;
src/pocketmine/block/Liquid.php:			$smallestFlowDecay = $this->getSmallestFlowDecay($this->level->getBlockAt($this->x, $this->y, $this->z - 1), $smallestFlowDecay);
src/pocketmine/block/Liquid.php:			$smallestFlowDecay = $this->getSmallestFlowDecay($this->level->getBlockAt($this->x, $this->y, $this->z + 1), $smallestFlowDecay);
src/pocketmine/block/Liquid.php:			$smallestFlowDecay = $this->getSmallestFlowDecay($this->level->getBlockAt($this->x - 1, $this->y, $this->z), $smallestFlowDecay);
src/pocketmine/block/Liquid.php:			$smallestFlowDecay = $this->getSmallestFlowDecay($this->level->getBlockAt($this->x + 1, $this->y, $this->z), $smallestFlowDecay);
src/pocketmine/block/Liquid.php:				$newDecay = -1;
src/pocketmine/block/Liquid.php:			if(($topFlowDecay = $this->getFlowDecay($this->level->getBlockAt($this->x, $this->y + 1, $this->z))) >= 0){
src/pocketmine/block/Liquid.php:			if($this->adjacentSources >= 2 and $this instanceof Water){
src/pocketmine/block/Liquid.php:				$bottomBlock = $this->level->getBlockAt($this->x, $this->y - 1, $this->z);
src/pocketmine/block/Liquid.php:				if($bottomBlock->isSolid()){
src/pocketmine/block/Liquid.php:				}elseif($bottomBlock instanceof Water and $bottomBlock->getDamage() === 0){
src/pocketmine/block/Liquid.php:					$this->level->setBlock($this, BlockFactory::get(Block::AIR), true, true);
src/pocketmine/block/Liquid.php:					$this->level->setBlock($this, BlockFactory::get($this->id, $decay), true, true);
src/pocketmine/block/Liquid.php:					$this->level->scheduleDelayedBlockUpdate($this, $this->tickRate());
src/pocketmine/block/Liquid.php:			$bottomBlock = $this->level->getBlockAt($this->x, $this->y - 1, $this->z);
src/pocketmine/block/Liquid.php:			$this->flowIntoBlock($bottomBlock, $decay | 0x08);
src/pocketmine/block/Liquid.php:			if($decay === 0 or !$bottomBlock->canBeFlowedInto()){
src/pocketmine/block/Liquid.php:					$flags = $this->getOptimalFlowDirections();
src/pocketmine/block/Liquid.php:						$this->flowIntoBlock($this->level->getBlockAt($this->x - 1, $this->y, $this->z), $adjacentDecay);
src/pocketmine/block/Liquid.php:						$this->flowIntoBlock($this->level->getBlockAt($this->x + 1, $this->y, $this->z), $adjacentDecay);
src/pocketmine/block/Liquid.php:						$this->flowIntoBlock($this->level->getBlockAt($this->x, $this->y, $this->z - 1), $adjacentDecay);
src/pocketmine/block/Liquid.php:						$this->flowIntoBlock($this->level->getBlockAt($this->x, $this->y, $this->z + 1), $adjacentDecay);
src/pocketmine/block/Liquid.php:			$this->checkForHarden();
src/pocketmine/block/Liquid.php:		if($this->canFlowInto($block) and !($block instanceof Liquid)){
src/pocketmine/block/Liquid.php:			$ev = new BlockSpreadEvent($block, $this, BlockFactory::get($this->getId(), $newFlowDecay));
src/pocketmine/block/Liquid.php:			$ev->call();
src/pocketmine/block/Liquid.php:			if(!$ev->isCancelled()){
src/pocketmine/block/Liquid.php:				if($block->getId() > 0){
src/pocketmine/block/Liquid.php:					$this->level->useBreakOn($block);
src/pocketmine/block/Liquid.php:				$this->level->setBlock($block, $ev->getNewState(), true, true);
src/pocketmine/block/Liquid.php:				$this->level->scheduleDelayedBlockUpdate($block, $this->tickRate());
src/pocketmine/block/Liquid.php:				--$x;
src/pocketmine/block/Liquid.php:				--$z;
src/pocketmine/block/Liquid.php:			if(!isset($this->flowCostVisited[$hash = Level::blockHash($x, $y, $z)])){
src/pocketmine/block/Liquid.php:				$blockSide = $this->level->getBlockAt($x, $y, $z);
src/pocketmine/block/Liquid.php:				if(!$this->canFlowInto($blockSide)){
src/pocketmine/block/Liquid.php:					$this->flowCostVisited[$hash] = self::BLOCKED;
src/pocketmine/block/Liquid.php:				}elseif($this->level->getBlockAt($x, $y - 1, $z)->canBeFlowedInto()){
src/pocketmine/block/Liquid.php:					$this->flowCostVisited[$hash] = self::CAN_FLOW_DOWN;
src/pocketmine/block/Liquid.php:					$this->flowCostVisited[$hash] = self::CAN_FLOW;
src/pocketmine/block/Liquid.php:			$status = $this->flowCostVisited[$hash];
src/pocketmine/block/Liquid.php:			$realCost = $this->calculateFlowCost($x, $y, $z, $accumulatedCost + 1, $maxCost, $originOpposite, $j ^ 0x01);
src/pocketmine/block/Liquid.php:		$maxCost = intdiv(4, $this->getFlowDecayPerBlock());
src/pocketmine/block/Liquid.php:			$x = $this->x;
src/pocketmine/block/Liquid.php:			$y = $this->y;
src/pocketmine/block/Liquid.php:			$z = $this->z;
src/pocketmine/block/Liquid.php:				--$x;
src/pocketmine/block/Liquid.php:				--$z;
src/pocketmine/block/Liquid.php:			$block = $this->level->getBlockAt($x, $y, $z);
src/pocketmine/block/Liquid.php:			if(!$this->canFlowInto($block)){
src/pocketmine/block/Liquid.php:				$this->flowCostVisited[Level::blockHash($x, $y, $z)] = self::BLOCKED;
src/pocketmine/block/Liquid.php:			}elseif($this->level->getBlockAt($x, $y - 1, $z)->canBeFlowedInto()){
src/pocketmine/block/Liquid.php:				$this->flowCostVisited[Level::blockHash($x, $y, $z)] = self::CAN_FLOW_DOWN;
src/pocketmine/block/Liquid.php:				$this->flowCostVisited[Level::blockHash($x, $y, $z)] = self::CAN_FLOW;
src/pocketmine/block/Liquid.php:				$flowCost[$j] = $this->calculateFlowCost($x, $y, $z, 1, $maxCost, $j ^ 0x01, $j ^ 0x01);
src/pocketmine/block/Liquid.php:		$this->flowCostVisited = [];
src/pocketmine/block/Liquid.php:		$blockDecay = $this->getFlowDecay($block);
src/pocketmine/block/Liquid.php:			++$this->adjacentSources;
src/pocketmine/block/Liquid.php:		$ev->call();
src/pocketmine/block/Liquid.php:		if(!$ev->isCancelled()){
src/pocketmine/block/Liquid.php:			$this->level->setBlock($this, $ev->getNewState(), true, true);
src/pocketmine/block/Liquid.php:			$this->level->addSound(new FizzSound($this->add(0.5, 0.5, 0.5), 2.6 + (lcg_value() - lcg_value()) * 0.8));
src/pocketmine/block/Liquid.php:		return $block->canBeFlowedInto() and !($block instanceof Liquid and $block->meta === 0); //TODO: I think this should only be liquids of the same type
src/pocketmine/block/Chest.php:		$this->meta = $meta;
src/pocketmine/block/Chest.php:			$this->x + 0.025,
src/pocketmine/block/Chest.php:			$this->y,
src/pocketmine/block/Chest.php:			$this->z + 0.025,
src/pocketmine/block/Chest.php:			$this->x + 0.975,
src/pocketmine/block/Chest.php:			$this->y + 0.95,
src/pocketmine/block/Chest.php:			$this->z + 0.975
src/pocketmine/block/Chest.php:		$this->meta = $faces[$player instanceof Player ? $player->getDirection() : 0];
src/pocketmine/block/Chest.php:			if(($this->meta === 4 or $this->meta === 5) and ($side === 4 or $side === 5)){
src/pocketmine/block/Chest.php:			}elseif(($this->meta === 3 or $this->meta === 2) and ($side === 2 or $side === 3)){
src/pocketmine/block/Chest.php:			$c = $this->getSide($side);
src/pocketmine/block/Chest.php:			if($c->getId() === $this->id and $c->getDamage() === $this->meta){
src/pocketmine/block/Chest.php:				$tile = $this->getLevelNonNull()->getTile($c);
src/pocketmine/block/Chest.php:				if($tile instanceof TileChest and !$tile->isPaired()){
src/pocketmine/block/Chest.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Chest.php:		$tile = Tile::createTile(Tile::CHEST, $this->getLevelNonNull(), TileChest::createNBT($this, $face, $item, $player));
src/pocketmine/block/Chest.php:			$chest->pairWith($tile);
src/pocketmine/block/Chest.php:			$tile->pairWith($chest);
src/pocketmine/block/Chest.php:			$t = $this->getLevelNonNull()->getTile($this);
src/pocketmine/block/Chest.php:				$chest = Tile::createTile(Tile::CHEST, $this->getLevelNonNull(), TileChest::createNBT($this));
src/pocketmine/block/Chest.php:				!$this->getSide(Vector3::SIDE_UP)->isTransparent() or
src/pocketmine/block/Chest.php:				(($pair = $chest->getPair()) !== null and !$pair->getBlock()->getSide(Vector3::SIDE_UP)->isTransparent()) or
src/pocketmine/block/Chest.php:				!$chest->canOpenWith($item->getCustomName())
src/pocketmine/block/Chest.php:			$player->addWindow($chest->getInventory());
src/pocketmine/block/CobblestoneWall.php:		$this->meta = $meta;
src/pocketmine/block/CobblestoneWall.php:		return ($names[$this->getVariant()] ?? "Unknown") . " Wall";
src/pocketmine/block/CobblestoneWall.php:		$north = $this->canConnect($this->getSide(Vector3::SIDE_NORTH));
src/pocketmine/block/CobblestoneWall.php:		$south = $this->canConnect($this->getSide(Vector3::SIDE_SOUTH));
src/pocketmine/block/CobblestoneWall.php:		$west = $this->canConnect($this->getSide(Vector3::SIDE_WEST));
src/pocketmine/block/CobblestoneWall.php:		$east = $this->canConnect($this->getSide(Vector3::SIDE_EAST));
src/pocketmine/block/CobblestoneWall.php:			$this->getSide(Vector3::SIDE_UP)->getId() === Block::AIR and //if there is a block on top, it stays as a post
src/pocketmine/block/CobblestoneWall.php:			$this->x + ($west ? 0 : $inset),
src/pocketmine/block/CobblestoneWall.php:			$this->y,
src/pocketmine/block/CobblestoneWall.php:			$this->z + ($north ? 0 : $inset),
src/pocketmine/block/CobblestoneWall.php:			$this->x + 1 - ($east ? 0 : $inset),
src/pocketmine/block/CobblestoneWall.php:			$this->y + 1.5,
src/pocketmine/block/CobblestoneWall.php:			$this->z + 1 - ($south ? 0 : $inset)
src/pocketmine/block/CobblestoneWall.php:		return $block instanceof static or $block instanceof FenceGate or ($block->isSolid() and !$block->isTransparent());
src/pocketmine/block/Lapis.php:		$this->meta = $meta;
src/pocketmine/block/DeadBush.php:		$this->meta = $meta;
src/pocketmine/block/DeadBush.php:		if(!$this->getSide(Vector3::SIDE_DOWN)->isTransparent()){
src/pocketmine/block/DeadBush.php:		if($this->getSide(Vector3::SIDE_DOWN)->isTransparent()){
src/pocketmine/block/DeadBush.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/DeadBush.php:		if(!$this->isCompatibleWithTool($item)){
src/pocketmine/block/Obsidian.php:		$this->meta = $meta;
src/pocketmine/block/GlowingRedstoneOre.php:		$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::REDSTONE_ORE, $this->meta), false, false);
src/pocketmine/block/Melon.php:		$this->meta = $meta;
src/pocketmine/block/RedstoneOre.php:		$this->meta = $meta;
src/pocketmine/block/RedstoneOre.php:		return $this->getLevelNonNull()->setBlock($this, $this, true, false);
src/pocketmine/block/RedstoneOre.php:		$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::GLOWING_REDSTONE_ORE, $this->meta));
src/pocketmine/block/RedstoneOre.php:		$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::GLOWING_REDSTONE_ORE, $this->meta));
src/pocketmine/block/EndRod.php:		$this->meta = $meta;
src/pocketmine/block/EndRod.php:			$this->meta = $face;
src/pocketmine/block/EndRod.php:			$this->meta = $face ^ 0x01;
src/pocketmine/block/EndRod.php:		if($blockClicked instanceof EndRod and $blockClicked->getDamage() === $this->meta){
src/pocketmine/block/EndRod.php:			$this->meta ^= 0x01;
src/pocketmine/block/EndRod.php:		return $this->level->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/EndRod.php:		$m = $this->meta & ~0x01;
src/pocketmine/block/EndRod.php:					$this->x + $width,
src/pocketmine/block/EndRod.php:					$this->y,
src/pocketmine/block/EndRod.php:					$this->z + $width,
src/pocketmine/block/EndRod.php:					$this->x + 1 - $width,
src/pocketmine/block/EndRod.php:					$this->y + 1,
src/pocketmine/block/EndRod.php:					$this->z + 1 - $width
src/pocketmine/block/EndRod.php:					$this->x,
src/pocketmine/block/EndRod.php:					$this->y + $width,
src/pocketmine/block/EndRod.php:					$this->z + $width,
src/pocketmine/block/EndRod.php:					$this->x + 1,
src/pocketmine/block/EndRod.php:					$this->y + 1 - $width,
src/pocketmine/block/EndRod.php:					$this->z + 1 - $width
src/pocketmine/block/EndRod.php:					$this->x + $width,
src/pocketmine/block/EndRod.php:					$this->y + $width,
src/pocketmine/block/EndRod.php:					$this->z,
src/pocketmine/block/EndRod.php:					$this->x + 1 - $width,
src/pocketmine/block/EndRod.php:					$this->y + 1 - $width,
src/pocketmine/block/EndRod.php:					$this->z + 1
src/pocketmine/block/Leaves.php:		$this->meta = $meta;
src/pocketmine/block/Leaves.php:		return $names[$this->getVariant()];
src/pocketmine/block/Leaves.php:	 * @phpstan-param array<string, true> $visited
src/pocketmine/block/Leaves.php:		$index = $pos->x . "." . $pos->y . "." . $pos->z;
src/pocketmine/block/Leaves.php:		if($pos->getId() === $this->woodType){
src/pocketmine/block/Leaves.php:		}elseif($pos->getId() === $this->id and $distance < 3){
src/pocketmine/block/Leaves.php:			$down = $pos->getSide(Vector3::SIDE_DOWN)->getId();
src/pocketmine/block/Leaves.php:			if($down === $this->woodType){
src/pocketmine/block/Leaves.php:					if($this->findLog($pos->getSide($side), $visited, $distance + 1, $side)){
src/pocketmine/block/Leaves.php:						if($this->findLog($pos->getSide(Vector3::SIDE_NORTH), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:						}elseif($this->findLog($pos->getSide(Vector3::SIDE_WEST), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:						}elseif($this->findLog($pos->getSide(Vector3::SIDE_EAST), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:						if($this->findLog($pos->getSide(Vector3::SIDE_SOUTH), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:						}elseif($this->findLog($pos->getSide(Vector3::SIDE_WEST), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:						}elseif($this->findLog($pos->getSide(Vector3::SIDE_EAST), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:						if($this->findLog($pos->getSide(Vector3::SIDE_NORTH), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:						}elseif($this->findLog($pos->getSide(Vector3::SIDE_SOUTH), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:						}elseif($this->findLog($pos->getSide(Vector3::SIDE_WEST), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:						if($this->findLog($pos->getSide(Vector3::SIDE_NORTH), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:						}elseif($this->findLog($pos->getSide(Vector3::SIDE_SOUTH), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:						}elseif($this->findLog($pos->getSide(Vector3::SIDE_EAST), $visited, $distance + 1, $fromSide)){
src/pocketmine/block/Leaves.php:		if(($this->meta & 0b00001100) === 0){
src/pocketmine/block/Leaves.php:			$this->meta |= 0x08;
src/pocketmine/block/Leaves.php:			$this->getLevelNonNull()->setBlock($this, $this, true, false);
src/pocketmine/block/Leaves.php:		if(($this->meta & 0b00001100) === 0x08){
src/pocketmine/block/Leaves.php:			$this->meta &= 0x03;
src/pocketmine/block/Leaves.php:			$ev->call();
src/pocketmine/block/Leaves.php:			if($ev->isCancelled() or $this->findLog($this, $visited, 0)){
src/pocketmine/block/Leaves.php:				$this->getLevelNonNull()->setBlock($this, $this, false, false);
src/pocketmine/block/Leaves.php:				$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/Leaves.php:		$this->meta |= 0x04;
src/pocketmine/block/Leaves.php:		return $this->getLevelNonNull()->setBlock($this, $this, true);
src/pocketmine/block/Leaves.php:		if(($item->getBlockToolType() & BlockToolType::TYPE_SHEARS) !== 0){
src/pocketmine/block/Leaves.php:			return $this->getDropsForCompatibleTool($item);
src/pocketmine/block/Leaves.php:			$drops[] = $this->getSaplingItem();
src/pocketmine/block/Leaves.php:		if($this->canDropApples() and mt_rand(1, 200) === 1){ //Apples
src/pocketmine/block/Leaves.php:		return ItemFactory::get(Item::SAPLING, $this->getVariant());
src/pocketmine/block/Leaves.php:		return $this->getVariant() === self::OAK;
src/pocketmine/block/Dirt.php:		$this->meta = $meta;
src/pocketmine/block/Dirt.php:		if($this->meta === 1){
src/pocketmine/block/Dirt.php:			$item->applyDamage(1);
src/pocketmine/block/Dirt.php:			if($this->meta === 1){
src/pocketmine/block/Dirt.php:				$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::DIRT), true);
src/pocketmine/block/Dirt.php:				$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::FARMLAND), true);
src/pocketmine/block/Emerald.php:		$this->meta = $meta;
src/pocketmine/block/Wool.php:		$this->meta = $meta;
src/pocketmine/block/Wool.php:		return ColorBlockMetaHelper::getColorFromMeta($this->getVariant()) . " Wool";
src/pocketmine/block/Wool.php:		if($item->getBlockToolType() === BlockToolType::TYPE_SHEARS){
src/pocketmine/block/NetherWartBlock.php:		$this->meta = $meta;
src/pocketmine/block/StoneSlab2.php:		return (($this->meta & 0x08) > 0 ? "Upper " : "") . ($names[$this->getVariant()] ?? "") . " Slab";
src/pocketmine/block/QuartzStairs.php:		$this->meta = $meta;
src/pocketmine/block/WeightedPressurePlateLight.php:		$this->meta = $meta;
src/pocketmine/block/Fire.php:		$this->meta = $meta;
src/pocketmine/block/Fire.php:		$entity->attack($ev);
src/pocketmine/block/Fire.php:			$ev->setCancelled();
src/pocketmine/block/Fire.php:		$ev->call();
src/pocketmine/block/Fire.php:		if(!$ev->isCancelled()){
src/pocketmine/block/Fire.php:			$entity->setOnFire($ev->getDuration());
src/pocketmine/block/Fire.php:		if(!$this->getSide(Vector3::SIDE_DOWN)->isSolid() and !$this->hasAdjacentFlammableBlocks()){
src/pocketmine/block/Fire.php:			$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::AIR), true);
src/pocketmine/block/Fire.php:			$this->level->scheduleDelayedBlockUpdate($this, mt_rand(30, 40));
src/pocketmine/block/Fire.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Fire.php:		if($this->meta < 15 and mt_rand(0, 2) === 0){
src/pocketmine/block/Fire.php:			$this->meta++;
src/pocketmine/block/Fire.php:		if(!$down->burnsForever()){
src/pocketmine/block/Fire.php:			if($this->meta === 15){
src/pocketmine/block/Fire.php:				if(!$down->isFlammable() and mt_rand(0, 3) === 3){ //1/4 chance to extinguish
src/pocketmine/block/Fire.php:			}elseif(!$this->hasAdjacentFlammableBlocks()){
src/pocketmine/block/Fire.php:				if(!$down->isSolid() or $this->meta > 3){ //fire older than 3, or without a solid block below
src/pocketmine/block/Fire.php:			$this->level->setBlock($this, $result);
src/pocketmine/block/Fire.php:		$this->level->scheduleDelayedBlockUpdate($this, mt_rand(30, 40));
src/pocketmine/block/Fire.php:			foreach($this->getHorizontalSides() as $side){
src/pocketmine/block/Fire.php:				$this->burnBlock($side, 300);
src/pocketmine/block/Fire.php:			$this->burnBlock($this->getSide(Vector3::SIDE_UP), 350);
src/pocketmine/block/Fire.php:			$this->burnBlock($this->getSide(Vector3::SIDE_DOWN), 350);
src/pocketmine/block/Fire.php:		$this->onRandomTick();
src/pocketmine/block/Fire.php:			if($this->getSide($i)->isFlammable()){
src/pocketmine/block/Fire.php:		if(mt_rand(0, $chanceBound) < $block->getFlammability()){
src/pocketmine/block/Fire.php:			$ev->call();
src/pocketmine/block/Fire.php:			if(!$ev->isCancelled()){
src/pocketmine/block/Fire.php:				$block->onIncinerate();
src/pocketmine/block/Fire.php:				if(mt_rand(0, $this->meta + 9) < 5){ //TODO: check rain
src/pocketmine/block/Fire.php:					$this->level->setBlock($block, BlockFactory::get(Block::FIRE, min(15, $this->meta + (mt_rand(0, 4) >> 2))));
src/pocketmine/block/Fire.php:					$this->level->setBlock($block, BlockFactory::get(Block::AIR));
src/pocketmine/block/BrewingStand.php:		$this->meta = $meta;
src/pocketmine/block/TallGrass.php:		$this->meta = $meta;
src/pocketmine/block/TallGrass.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/TallGrass.php:		$down = $this->getSide(Vector3::SIDE_DOWN)->getId();
src/pocketmine/block/TallGrass.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true);
src/pocketmine/block/TallGrass.php:		if($this->getSide(Vector3::SIDE_DOWN)->isTransparent()){ //Replace with common break method
src/pocketmine/block/TallGrass.php:			$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::AIR), true, true);
src/pocketmine/block/TallGrass.php:		if($this->isCompatibleWithTool($item)){
src/pocketmine/block/Sand.php:		$this->meta = $meta;
src/pocketmine/block/Sand.php:		if($this->getVariant() === 0x01){
src/pocketmine/block/EmeraldOre.php:		$this->meta = $meta;
src/pocketmine/block/CoalOre.php:		$this->meta = $meta;
src/pocketmine/block/Coal.php:		$this->meta = $meta;
src/pocketmine/block/ItemFrame.php:		$this->meta = $meta;
src/pocketmine/block/ItemFrame.php:		$tile = $this->level->getTile($this);
src/pocketmine/block/ItemFrame.php:			$tile = Tile::createTile(Tile::ITEM_FRAME, $this->getLevelNonNull(), TileItemFrame::createNBT($this));
src/pocketmine/block/ItemFrame.php:		if($tile->hasItem()){
src/pocketmine/block/ItemFrame.php:			$tile->setItemRotation(($tile->getItemRotation() + 1) % 8);
src/pocketmine/block/ItemFrame.php:		}elseif(!$item->isNull()){
src/pocketmine/block/ItemFrame.php:			$tile->setItem($item->pop());
src/pocketmine/block/ItemFrame.php:		if(isset($sides[$this->meta]) and !$this->getSide($sides[$this->meta])->isSolid()){
src/pocketmine/block/ItemFrame.php:			$this->level->useBreakOn($this);
src/pocketmine/block/ItemFrame.php:		if($face === Vector3::SIDE_DOWN or $face === Vector3::SIDE_UP or !$blockClicked->isSolid()){
src/pocketmine/block/ItemFrame.php:		$this->meta = $faces[$face];
src/pocketmine/block/ItemFrame.php:		$this->level->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/ItemFrame.php:		Tile::createTile(Tile::ITEM_FRAME, $this->getLevelNonNull(), TileItemFrame::createNBT($this, $face, $item, $player));
src/pocketmine/block/ItemFrame.php:		$tile = $this->level->getTile($this);
src/pocketmine/block/ItemFrame.php:			$tileItem = $tile->getItem();
src/pocketmine/block/ItemFrame.php:			if(lcg_value() <= $tile->getItemDropChance() and !$tileItem->isNull()){
src/pocketmine/block/NetherWartPlant.php:		$this->meta = $meta;
src/pocketmine/block/NetherWartPlant.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/NetherWartPlant.php:		if($down->getId() === Block::SOUL_SAND){
src/pocketmine/block/NetherWartPlant.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, false, true);
src/pocketmine/block/NetherWartPlant.php:		if($this->getSide(Vector3::SIDE_DOWN)->getId() !== Block::SOUL_SAND){
src/pocketmine/block/NetherWartPlant.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/NetherWartPlant.php:		if($this->meta < 3 and mt_rand(0, 10) === 0){ //Still growing
src/pocketmine/block/NetherWartPlant.php:			$block->meta++;
src/pocketmine/block/NetherWartPlant.php:			$ev->call();
src/pocketmine/block/NetherWartPlant.php:			if(!$ev->isCancelled()){
src/pocketmine/block/NetherWartPlant.php:				$this->getLevelNonNull()->setBlock($this, $ev->getNewState(), false, true);
src/pocketmine/block/NetherWartPlant.php:			ItemFactory::get($this->getItemId(), 0, ($this->getDamage() === 3 ? mt_rand(2, 4) : 1))
src/pocketmine/block/TripwireHook.php:		$this->meta = $meta;
src/pocketmine/block/BlockFactory.php:	 * @phpstan-var \SplFixedArray<Block>
src/pocketmine/block/BlockFactory.php:	 * @phpstan-var \SplFixedArray<bool>
src/pocketmine/block/BlockFactory.php:	 * @phpstan-var \SplFixedArray<bool>
src/pocketmine/block/BlockFactory.php:	 * @phpstan-var \SplFixedArray<float>
src/pocketmine/block/BlockFactory.php:	 * @phpstan-var \SplFixedArray<int>
src/pocketmine/block/BlockFactory.php:	 * @phpstan-var \SplFixedArray<int>
src/pocketmine/block/BlockFactory.php:	 * @phpstan-var \SplFixedArray<bool>
src/pocketmine/block/BlockFactory.php:	 * @phpstan-var \SplFixedArray<float>
src/pocketmine/block/BlockFactory.php:		for($id = 0, $size = self::$fullList->getSize() >> 4; $id < $size; ++$id){
src/pocketmine/block/BlockFactory.php:	 * NOTE: If you are registering a new block type, you will need to add it to the creative inventory yourself - it
src/pocketmine/block/BlockFactory.php:	 * @throws \RuntimeException if something attempted to override an already-registered block without specifying the
src/pocketmine/block/BlockFactory.php:		$id = $block->getId();
src/pocketmine/block/BlockFactory.php:			$variant->setDamage($meta);
src/pocketmine/block/BlockFactory.php:		self::$solid[$id] = $block->isSolid();
src/pocketmine/block/BlockFactory.php:		self::$transparent[$id] = $block->isTransparent();
src/pocketmine/block/BlockFactory.php:		self::$hardness[$id] = $block->getHardness();
src/pocketmine/block/BlockFactory.php:		self::$light[$id] = $block->getLightLevel();
src/pocketmine/block/BlockFactory.php:		self::$lightFilter[$id] = min(15, $block->getLightFilter() + 1); //opacity plus 1 standard light filter
src/pocketmine/block/BlockFactory.php:		self::$diffusesSkyLight[$id] = $block->diffusesSkyLight();
src/pocketmine/block/BlockFactory.php:		self::$blastResistance[$id] = $block->getBlastResistance();
src/pocketmine/block/BlockFactory.php:			$block->x = $pos->getFloorX();
src/pocketmine/block/BlockFactory.php:			$block->y = $pos->getFloorY();
src/pocketmine/block/BlockFactory.php:			$block->z = $pos->getFloorZ();
src/pocketmine/block/BlockFactory.php:			$block->level = $pos->level;
src/pocketmine/block/BlockFactory.php:	 * @phpstan-return \SplFixedArray<Block>
src/pocketmine/block/Planks.php:		$this->meta = $meta;
src/pocketmine/block/Planks.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/Vine.php:		$this->meta = $meta;
src/pocketmine/block/Vine.php:		$entity->resetFallDistance();
src/pocketmine/block/Vine.php:		$flag = $this->meta > 0;
src/pocketmine/block/Vine.php:		if(($this->meta & self::FLAG_WEST) > 0){
src/pocketmine/block/Vine.php:		if(($this->meta & self::FLAG_EAST) > 0){
src/pocketmine/block/Vine.php:		if(($this->meta & self::FLAG_SOUTH) > 0){
src/pocketmine/block/Vine.php:		if(!$flag and $this->getSide(Vector3::SIDE_UP)->isSolid()){
src/pocketmine/block/Vine.php:			$this->x + $minX,
src/pocketmine/block/Vine.php:			$this->y + $minY,
src/pocketmine/block/Vine.php:			$this->z + $minZ,
src/pocketmine/block/Vine.php:			$this->x + $maxX,
src/pocketmine/block/Vine.php:			$this->y + $maxY,
src/pocketmine/block/Vine.php:			$this->z + $maxZ
src/pocketmine/block/Vine.php:		if(!$blockClicked->isSolid() or $face === Vector3::SIDE_UP or $face === Vector3::SIDE_DOWN){
src/pocketmine/block/Vine.php:		$this->meta = $faces[$face] ?? 0;
src/pocketmine/block/Vine.php:		if($blockReplace->getId() === $this->getId()){
src/pocketmine/block/Vine.php:			$this->meta |= $blockReplace->meta;
src/pocketmine/block/Vine.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Vine.php:		$meta = $this->meta;
src/pocketmine/block/Vine.php:			if(!$this->getSide($side)->isSolid()){
src/pocketmine/block/Vine.php:		if($meta !== $this->meta){
src/pocketmine/block/Vine.php:				$this->level->useBreakOn($this);
src/pocketmine/block/Vine.php:				$this->meta = $meta;
src/pocketmine/block/Vine.php:				$this->level->setBlock($this, $this);
src/pocketmine/block/Vine.php:		if(($item->getBlockToolType() & BlockToolType::TYPE_SHEARS) !== 0){
src/pocketmine/block/Vine.php:			return $this->getDropsForCompatibleTool($item);
src/pocketmine/block/IronDoor.php:		$this->meta = $meta;
src/pocketmine/block/Air.php:		$this->meta = $meta;
src/pocketmine/block/Air.php:		return -1;
src/pocketmine/block/Fallable.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Fallable.php:		if($down->getId() === self::AIR or $down instanceof Liquid or $down instanceof Fire){
src/pocketmine/block/Fallable.php:			$this->level->setBlock($this, BlockFactory::get(Block::AIR), true);
src/pocketmine/block/Fallable.php:			$nbt = Entity::createBaseNBT($this->add(0.5, 0, 0.5));
src/pocketmine/block/Fallable.php:			$nbt->setInt("TileID", $this->getId());
src/pocketmine/block/Fallable.php:			$nbt->setByte("Data", $this->getDamage());
src/pocketmine/block/Fallable.php:			$fall = Entity::createEntity("FallingSand", $this->getLevelNonNull(), $nbt);
src/pocketmine/block/Fallable.php:				$fall->spawnToAll();
src/pocketmine/block/Clay.php:		$this->meta = $meta;
src/pocketmine/block/MelonStem.php:		$this->meta = $meta;
src/pocketmine/block/MelonStem.php:			if($this->meta < 0x07){
src/pocketmine/block/MelonStem.php:				++$block->meta;
src/pocketmine/block/MelonStem.php:				$ev->call();
src/pocketmine/block/MelonStem.php:				if(!$ev->isCancelled()){
src/pocketmine/block/MelonStem.php:					$this->getLevelNonNull()->setBlock($this, $ev->getNewState(), true);
src/pocketmine/block/MelonStem.php:					$b = $this->getSide($side);
src/pocketmine/block/MelonStem.php:					if($b->getId() === self::MELON_BLOCK){
src/pocketmine/block/MelonStem.php:				$side = $this->getSide(mt_rand(2, 5));
src/pocketmine/block/MelonStem.php:				$d = $side->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/MelonStem.php:				if($side->getId() === self::AIR and ($d->getId() === self::FARMLAND or $d->getId() === self::GRASS or $d->getId() === self::DIRT)){
src/pocketmine/block/MelonStem.php:					$ev->call();
src/pocketmine/block/MelonStem.php:					if(!$ev->isCancelled()){
src/pocketmine/block/MelonStem.php:						$this->getLevelNonNull()->setBlock($side, $ev->getNewState(), true);
src/pocketmine/block/Bed.php:		$this->meta = $meta;
src/pocketmine/block/Bed.php:			$this->x,
src/pocketmine/block/Bed.php:			$this->y,
src/pocketmine/block/Bed.php:			$this->z,
src/pocketmine/block/Bed.php:			$this->x + 1,
src/pocketmine/block/Bed.php:			$this->y + 0.5625,
src/pocketmine/block/Bed.php:			$this->z + 1
src/pocketmine/block/Bed.php:		return ($this->meta & self::BITFLAG_HEAD) !== 0;
src/pocketmine/block/Bed.php:		return ($this->meta & self::BITFLAG_OCCUPIED) !== 0;
src/pocketmine/block/Bed.php:			$this->meta |= self::BITFLAG_OCCUPIED;
src/pocketmine/block/Bed.php:			$this->meta &= ~self::BITFLAG_OCCUPIED;
src/pocketmine/block/Bed.php:		$this->getLevelNonNull()->setBlock($this, $this, false, false);
src/pocketmine/block/Bed.php:		if(($other = $this->getOtherHalf()) !== null and $other->isOccupied() !== $occupied){
src/pocketmine/block/Bed.php:			$other->setOccupied($occupied);
src/pocketmine/block/Bed.php:		$side = -1;
src/pocketmine/block/Bed.php:		$other = $this->getSide(self::getOtherHalfSide($this->meta, $this->isHeadPart()));
src/pocketmine/block/Bed.php:		if($other instanceof Bed and $other->getId() === $this->getId() and $other->isHeadPart() !== $this->isHeadPart() and (($other->getDamage() & 0x03) === ($this->getDamage() & 0x03))){
src/pocketmine/block/Bed.php:			$other = $this->getOtherHalf();
src/pocketmine/block/Bed.php:				$player->sendMessage(TextFormat::GRAY . "This bed is incomplete");
src/pocketmine/block/Bed.php:			}elseif($player->distanceSquared($this) > 4 and $player->distanceSquared($other) > 4){
src/pocketmine/block/Bed.php:				$player->sendMessage(new TranslationContainer(TextFormat::GRAY . "%tile.bed.tooFar"));
src/pocketmine/block/Bed.php:			$time = $this->getLevelNonNull()->getTimeOfDay();
src/pocketmine/block/Bed.php:				$player->sendMessage(new TranslationContainer(TextFormat::GRAY . "%tile.bed.noSleep"));
src/pocketmine/block/Bed.php:			$b = ($this->isHeadPart() ? $this : $other);
src/pocketmine/block/Bed.php:			if($b->isOccupied()){
src/pocketmine/block/Bed.php:				$player->sendMessage(new TranslationContainer(TextFormat::GRAY . "%tile.bed.occupied"));
src/pocketmine/block/Bed.php:			$player->sleepOn($b);
src/pocketmine/block/Bed.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Bed.php:		if(!$down->isTransparent()){
src/pocketmine/block/Bed.php:			$meta = (($player instanceof Player ? $player->getDirection() : 0) - 1) & 0x03;
src/pocketmine/block/Bed.php:			$next = $this->getSide(self::getOtherHalfSide($meta));
src/pocketmine/block/Bed.php:			if($next->canBeReplaced() and !$next->getSide(Vector3::SIDE_DOWN)->isTransparent()){
src/pocketmine/block/Bed.php:				$this->getLevelNonNull()->setBlock($blockReplace, BlockFactory::get($this->id, $meta), true, true);
src/pocketmine/block/Bed.php:				$this->getLevelNonNull()->setBlock($next, BlockFactory::get($this->id, $meta | self::BITFLAG_HEAD), true, true);
src/pocketmine/block/Bed.php:				Tile::createTile(Tile::BED, $this->getLevelNonNull(), TileBed::createNBT($this, $face, $item, $player));
src/pocketmine/block/Bed.php:				Tile::createTile(Tile::BED, $this->getLevelNonNull(), TileBed::createNBT($next, $face, $item, $player));
src/pocketmine/block/Bed.php:		if($this->isHeadPart()){
src/pocketmine/block/Bed.php:			return [$this->getItem()];
src/pocketmine/block/Bed.php:		return $this->getItem();
src/pocketmine/block/Bed.php:		$tile = $this->getLevelNonNull()->getTile($this);
src/pocketmine/block/Bed.php:			return ItemFactory::get($this->getItemId(), $tile->getColor());
src/pocketmine/block/Bed.php:		return ItemFactory::get($this->getItemId(), 14); //Red
src/pocketmine/block/Bed.php:		if(($other = $this->getOtherHalf()) !== null){
src/pocketmine/block/SnowLayer.php:		$this->meta = $meta;
src/pocketmine/block/SnowLayer.php:		return $this->meta < 7; //8 snow layers
src/pocketmine/block/SnowLayer.php:		return $b->isSolid() or ($b->getId() === $this->getId() and $b->getDamage() === 7);
src/pocketmine/block/SnowLayer.php:		if($blockReplace->getId() === $this->getId() and $blockReplace->getDamage() < 7){
src/pocketmine/block/SnowLayer.php:			$this->setDamage($blockReplace->getDamage() + 1);
src/pocketmine/block/SnowLayer.php:		if($this->canBeSupportedBy($blockReplace->getSide(Vector3::SIDE_DOWN))){
src/pocketmine/block/SnowLayer.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true);
src/pocketmine/block/SnowLayer.php:		if(!$this->canBeSupportedBy($this->getSide(Vector3::SIDE_DOWN))){
src/pocketmine/block/SnowLayer.php:			$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::AIR), false, false);
src/pocketmine/block/SnowLayer.php:		if($this->level->getBlockLightAt($this->x, $this->y, $this->z) >= 12){
src/pocketmine/block/SnowLayer.php:			$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::AIR), false, false);
src/pocketmine/block/CobblestoneStairs.php:		$this->meta = $meta;
src/pocketmine/block/Prismarine.php:		$this->meta = $meta;
src/pocketmine/block/Prismarine.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/CocoaBlock.php:		$this->meta = $meta;
src/pocketmine/block/CocoaBlock.php:			ItemFactory::get(ItemIds::DYE, 3, ($this->meta >> 2) === 2 ? mt_rand(2, 3) : 1)
src/pocketmine/block/Dandelion.php:		$this->meta = $meta;
src/pocketmine/block/Dandelion.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Dandelion.php:		if($down->getId() === Block::GRASS or $down->getId() === Block::DIRT or $down->getId() === Block::FARMLAND){
src/pocketmine/block/Dandelion.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Dandelion.php:		if($this->getSide(Vector3::SIDE_DOWN)->isTransparent()){
src/pocketmine/block/Dandelion.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/RedstoneLamp.php:		$this->meta = $meta;
src/pocketmine/block/RedSandstone.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/BoneBlock.php:		$this->meta = $meta;
src/pocketmine/block/BoneBlock.php:		$this->meta = PillarRotationHelper::getMetaFromFace($this->meta, $face);
src/pocketmine/block/BoneBlock.php:		return $this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Bedrock.php:		$this->meta = $meta;
src/pocketmine/block/Bedrock.php:		return -1;
src/pocketmine/block/BaseRail.php:	protected const FLAG_ASCEND = 1 << 24; //used to indicate direction-up
src/pocketmine/block/BaseRail.php:		$this->meta = $meta;
src/pocketmine/block/BaseRail.php:		if(!$blockReplace->getSide(Vector3::SIDE_DOWN)->isTransparent() and $this->getLevelNonNull()->setBlock($blockReplace, $this, true, true)){
src/pocketmine/block/BaseRail.php:			$this->tryReconnect();
src/pocketmine/block/BaseRail.php:	 * @phpstan-param array<int, list<int>> $lookup
src/pocketmine/block/BaseRail.php:		foreach($this->getConnectionsForState() as $connection){
src/pocketmine/block/BaseRail.php:			$other = $this->getSide($connection & ~self::FLAG_ASCEND);
src/pocketmine/block/BaseRail.php:				$other = $other->getSide(Vector3::SIDE_UP);
src/pocketmine/block/BaseRail.php:				$other = $other->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/BaseRail.php:				in_array($otherConnection, $other->getConnectionsForState(), true)
src/pocketmine/block/BaseRail.php:	 * @phpstan-return array<int, true>
src/pocketmine/block/BaseRail.php:				return $this->getPossibleConnectionDirectionsOneConstraint(array_shift($constraints));
src/pocketmine/block/BaseRail.php:	 * @phpstan-return array<int, true>
src/pocketmine/block/BaseRail.php:		$thisConnections = $this->getConnectedDirections();
src/pocketmine/block/BaseRail.php:			$possible = $this->getPossibleConnectionDirections($thisConnections);
src/pocketmine/block/BaseRail.php:				$other = $this->getSide($thisSide & ~self::FLAG_ASCEND);
src/pocketmine/block/BaseRail.php:					$other = $other->getSide(Vector3::SIDE_UP);
src/pocketmine/block/BaseRail.php:					$other = $other->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/BaseRail.php:				if(!($other instanceof BaseRail) or count($otherConnections = $other->getConnectedDirections()) >= 2){
src/pocketmine/block/BaseRail.php:				$otherPossible = $other->getPossibleConnectionDirections($otherConnections);
src/pocketmine/block/BaseRail.php:					$other->updateState($otherConnections);
src/pocketmine/block/BaseRail.php:			$this->updateState($thisConnections);
src/pocketmine/block/BaseRail.php:		$this->meta = $this->getMetaForState($connections);
src/pocketmine/block/BaseRail.php:		$this->level->setBlock($this, $this, false, false); //avoid recursion
src/pocketmine/block/BaseRail.php:		if($this->getSide(Vector3::SIDE_DOWN)->isTransparent() or (
src/pocketmine/block/BaseRail.php:			isset(self::ASCENDING_SIDES[$this->meta & 0x07]) and
src/pocketmine/block/BaseRail.php:			$this->getSide(self::ASCENDING_SIDES[$this->meta & 0x07])->isTransparent()
src/pocketmine/block/BaseRail.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/Leaves2.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/Leaves2.php:		return ItemFactory::get(Item::SAPLING, $this->getVariant() + 4);
src/pocketmine/block/Leaves2.php:		return $this->getVariant() === self::DARK_OAK;
src/pocketmine/block/Concrete.php:		$this->meta = $meta;
src/pocketmine/block/Concrete.php:		return ColorBlockMetaHelper::getColorFromMeta($this->getVariant()) . " Concrete";
src/pocketmine/block/Sponge.php:		$this->meta = $meta;
src/pocketmine/block/Rail.php:		return self::CURVE_CONNECTIONS[$this->meta] ?? self::CONNECTIONS[$this->meta];
src/pocketmine/block/Grass.php:		$this->meta = $meta;
src/pocketmine/block/Grass.php:		$lightAbove = $this->level->getFullLightAt($this->x, $this->y + 1, $this->z);
src/pocketmine/block/Grass.php:		if($lightAbove < 4 and BlockFactory::$lightFilter[$this->level->getBlockIdAt($this->x, $this->y + 1, $this->z)] >= 3){ //2 plus 1 standard filter amount
src/pocketmine/block/Grass.php:			$ev->call();
src/pocketmine/block/Grass.php:			if(!$ev->isCancelled()){
src/pocketmine/block/Grass.php:				$this->level->setBlock($this, $ev->getNewState(), false, false);
src/pocketmine/block/Grass.php:				$x = mt_rand($this->x - 1, $this->x + 1);
src/pocketmine/block/Grass.php:				$y = mt_rand($this->y - 3, $this->y + 1);
src/pocketmine/block/Grass.php:				$z = mt_rand($this->z - 1, $this->z + 1);
src/pocketmine/block/Grass.php:					$this->level->getBlockIdAt($x, $y, $z) !== Block::DIRT or
src/pocketmine/block/Grass.php:					$this->level->getBlockDataAt($x, $y, $z) === 1 or
src/pocketmine/block/Grass.php:					$this->level->getFullLightAt($x, $y + 1, $z) < 4 or
src/pocketmine/block/Grass.php:					BlockFactory::$lightFilter[$this->level->getBlockIdAt($x, $y + 1, $z)] >= 3
src/pocketmine/block/Grass.php:				$ev = new BlockSpreadEvent($b = $this->level->getBlockAt($x, $y, $z), $this, BlockFactory::get(Block::GRASS));
src/pocketmine/block/Grass.php:				$ev->call();
src/pocketmine/block/Grass.php:				if(!$ev->isCancelled()){
src/pocketmine/block/Grass.php:					$this->level->setBlock($b, $ev->getNewState(), false, false);
src/pocketmine/block/Grass.php:		if($item->getId() === Item::DYE and $item->getDamage() === 0x0F){
src/pocketmine/block/Grass.php:			$item->pop();
src/pocketmine/block/Grass.php:			TallGrassObject::growGrass($this->getLevelNonNull(), $this, new Random(mt_rand()), 8, 2);
src/pocketmine/block/Grass.php:			$item->applyDamage(1);
src/pocketmine/block/Grass.php:			$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::FARMLAND));
src/pocketmine/block/Grass.php:		}elseif($item instanceof Shovel and $this->getSide(Vector3::SIDE_UP)->getId() === Block::AIR){
src/pocketmine/block/Grass.php:			$item->applyDamage(1);
src/pocketmine/block/Grass.php:			$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::GRASS_PATH));
src/pocketmine/block/Podzol.php:		$this->meta = $meta;
src/pocketmine/block/Mycelium.php:		$this->meta = $meta;
src/pocketmine/block/Mycelium.php:		$x = mt_rand($this->x - 1, $this->x + 1);
src/pocketmine/block/Mycelium.php:		$y = mt_rand($this->y - 2, $this->y + 2);
src/pocketmine/block/Mycelium.php:		$z = mt_rand($this->z - 1, $this->z + 1);
src/pocketmine/block/Mycelium.php:		$block = $this->getLevelNonNull()->getBlockAt($x, $y, $z);
src/pocketmine/block/Mycelium.php:		if($block->getId() === Block::DIRT){
src/pocketmine/block/Mycelium.php:			if($block->getSide(Vector3::SIDE_UP) instanceof Transparent){
src/pocketmine/block/Mycelium.php:				$ev->call();
src/pocketmine/block/Mycelium.php:				if(!$ev->isCancelled()){
src/pocketmine/block/Mycelium.php:					$this->getLevelNonNull()->setBlock($block, $ev->getNewState());
src/pocketmine/block/Water.php:		$this->meta = $meta;
src/pocketmine/block/Water.php:		return BlockFactory::get(Block::STILL_WATER, $this->meta);
src/pocketmine/block/Water.php:		return BlockFactory::get(Block::FLOWING_WATER, $this->meta);
src/pocketmine/block/Water.php:		$entity->resetFallDistance();
src/pocketmine/block/Water.php:		if($entity->isOnFire()){
src/pocketmine/block/Water.php:			$entity->extinguish();
src/pocketmine/block/Water.php:		$ret = $this->getLevelNonNull()->setBlock($this, $this, true, false);
src/pocketmine/block/Water.php:		$this->getLevelNonNull()->scheduleDelayedBlockUpdate($this, $this->tickRate());
src/pocketmine/block/WoodenSlab.php:		return (($this->meta & 0x08) === 0x08 ? "Upper " : "") . ($names[$this->getVariant()] ?? "") . " Wooden Slab";
src/pocketmine/block/SignPost.php:		$this->meta = $meta;
src/pocketmine/block/SignPost.php:				$this->meta = $player !== null ? (floor((($player->yaw + 180) * 16 / 360) + 0.5) & 0x0f) : 0;
src/pocketmine/block/SignPost.php:				$this->getLevelNonNull()->setBlock($blockReplace, $this, true);
src/pocketmine/block/SignPost.php:				$this->meta = $face;
src/pocketmine/block/SignPost.php:				$this->getLevelNonNull()->setBlock($blockReplace, BlockFactory::get(Block::WALL_SIGN, $this->meta), true);
src/pocketmine/block/SignPost.php:			Tile::createTile(Tile::SIGN, $this->getLevelNonNull(), TileSign::createNBT($this, $face, $item, $player));
src/pocketmine/block/SignPost.php:		if($this->getSide(Vector3::SIDE_DOWN)->getId() === self::AIR){
src/pocketmine/block/SignPost.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/EndStoneBricks.php:		$this->meta = $meta;
src/pocketmine/block/StainedGlassPane.php:		return ColorBlockMetaHelper::getColorFromMeta($this->getVariant()) . " Stained Glass Pane";
src/pocketmine/block/WaterLily.php:		$this->meta = $meta;
src/pocketmine/block/WaterLily.php:			$this->x + 0.0625,
src/pocketmine/block/WaterLily.php:			$this->y,
src/pocketmine/block/WaterLily.php:			$this->z + 0.0625,
src/pocketmine/block/WaterLily.php:			$this->x + 0.9375,
src/pocketmine/block/WaterLily.php:			$this->y + 0.015625,
src/pocketmine/block/WaterLily.php:			$this->z + 0.9375
src/pocketmine/block/WaterLily.php:			$up = $blockClicked->getSide(Vector3::SIDE_UP);
src/pocketmine/block/WaterLily.php:			if($up->getId() === Block::AIR){
src/pocketmine/block/WaterLily.php:				$this->getLevelNonNull()->setBlock($up, $this, true, true);
src/pocketmine/block/WaterLily.php:		if(!($this->getSide(Vector3::SIDE_DOWN) instanceof Water)){
src/pocketmine/block/WaterLily.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/Ladder.php:		$this->meta = $meta;
src/pocketmine/block/Ladder.php:		if($entity instanceof Living and $entity->asVector3()->floor()->distanceSquared($this) < 1){ //entity coordinates must be inside block
src/pocketmine/block/Ladder.php:			$entity->resetFallDistance();
src/pocketmine/block/Ladder.php:			$entity->onGround = true;
src/pocketmine/block/Ladder.php:		if($this->meta === 2){
src/pocketmine/block/Ladder.php:			$minZ = 1 - $f;
src/pocketmine/block/Ladder.php:		}elseif($this->meta === 3){
src/pocketmine/block/Ladder.php:		}elseif($this->meta === 4){
src/pocketmine/block/Ladder.php:			$minX = 1 - $f;
src/pocketmine/block/Ladder.php:		}elseif($this->meta === 5){
src/pocketmine/block/Ladder.php:			$this->x + $minX,
src/pocketmine/block/Ladder.php:			$this->y,
src/pocketmine/block/Ladder.php:			$this->z + $minZ,
src/pocketmine/block/Ladder.php:			$this->x + $maxX,
src/pocketmine/block/Ladder.php:			$this->y + 1,
src/pocketmine/block/Ladder.php:			$this->z + $maxZ
src/pocketmine/block/Ladder.php:		if(!$blockClicked->isTransparent()){
src/pocketmine/block/Ladder.php:				$this->meta = $faces[$face];
src/pocketmine/block/Ladder.php:				$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Ladder.php:		if(!$this->getSide($this->meta ^ 0x01)->isSolid()){ //Replace with common break method
src/pocketmine/block/Ladder.php:			$this->level->useBreakOn($this);
src/pocketmine/block/Wood2.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/Magma.php:		$this->meta = $meta;
src/pocketmine/block/Magma.php:		if(!$entity->isSneaking()){
src/pocketmine/block/Magma.php:			$entity->attack($ev);
src/pocketmine/block/Netherrack.php:		$this->meta = $meta;
src/pocketmine/block/HayBale.php:		$this->meta = $meta;
src/pocketmine/block/HayBale.php:		$this->meta = PillarRotationHelper::getMetaFromFace($this->meta, $face);
src/pocketmine/block/HayBale.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Lava.php:		$this->meta = $meta;
src/pocketmine/block/Lava.php:		return BlockFactory::get(Block::STILL_LAVA, $this->meta);
src/pocketmine/block/Lava.php:		return BlockFactory::get(Block::FLOWING_LAVA, $this->meta);
src/pocketmine/block/Lava.php:			$blockSide = $this->getSide($side);
src/pocketmine/block/Lava.php:			if($this->getDamage() === 0){
src/pocketmine/block/Lava.php:				$this->liquidCollide($colliding, BlockFactory::get(Block::OBSIDIAN));
src/pocketmine/block/Lava.php:			}elseif($this->getDamage() <= 4){
src/pocketmine/block/Lava.php:				$this->liquidCollide($colliding, BlockFactory::get(Block::COBBLESTONE));
src/pocketmine/block/Lava.php:			$block->liquidCollide($this, BlockFactory::get(Block::STONE));
src/pocketmine/block/Lava.php:		$entity->fallDistance *= 0.5;
src/pocketmine/block/Lava.php:		$entity->attack($ev);
src/pocketmine/block/Lava.php:		$ev->call();
src/pocketmine/block/Lava.php:		if(!$ev->isCancelled()){
src/pocketmine/block/Lava.php:			$entity->setOnFire($ev->getDuration());
src/pocketmine/block/Lava.php:		$entity->resetFallDistance();
src/pocketmine/block/Lava.php:		$ret = $this->getLevelNonNull()->setBlock($this, $this, true, false);
src/pocketmine/block/Lava.php:		$this->getLevelNonNull()->scheduleDelayedBlockUpdate($this, $this->tickRate());
src/pocketmine/block/PurpurStairs.php:		$this->meta = $meta;
src/pocketmine/block/Pumpkin.php:		$this->meta = $meta;
src/pocketmine/block/Pumpkin.php:			$this->meta = ((int) $player->getDirection() + 1) % 4;
src/pocketmine/block/Pumpkin.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/SeaLantern.php:		$this->meta = $meta;
src/pocketmine/block/DoublePlant.php:		$this->meta = $meta;
src/pocketmine/block/DoublePlant.php:		return $this->getVariant() === 2 or $this->getVariant() === 3; //grass or fern
src/pocketmine/block/DoublePlant.php:		return $names[$this->getVariant()] ?? "";
src/pocketmine/block/DoublePlant.php:		$id = $blockReplace->getSide(Vector3::SIDE_DOWN)->getId();
src/pocketmine/block/DoublePlant.php:		if(($id === Block::GRASS or $id === Block::DIRT) and $blockReplace->getSide(Vector3::SIDE_UP)->canBeReplaced()){
src/pocketmine/block/DoublePlant.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, false, false);
src/pocketmine/block/DoublePlant.php:			$this->getLevelNonNull()->setBlock($blockReplace->getSide(Vector3::SIDE_UP), BlockFactory::get($this->id, $this->meta | self::BITFLAG_TOP), false, false);
src/pocketmine/block/DoublePlant.php:	 * Returns whether this double-plant has a corresponding other half.
src/pocketmine/block/DoublePlant.php:		if(($this->meta & self::BITFLAG_TOP) !== 0){
src/pocketmine/block/DoublePlant.php:			$other = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/DoublePlant.php:			$other = $this->getSide(Vector3::SIDE_UP);
src/pocketmine/block/DoublePlant.php:			$other->getId() === $this->getId() and
src/pocketmine/block/DoublePlant.php:			$other->getVariant() === $this->getVariant() and
src/pocketmine/block/DoublePlant.php:			($other->getDamage() & self::BITFLAG_TOP) !== ($this->getDamage() & self::BITFLAG_TOP)
src/pocketmine/block/DoublePlant.php:		if(!$this->isValidHalfPlant() or (($this->meta & self::BITFLAG_TOP) === 0 and $this->getSide(Vector3::SIDE_DOWN)->isTransparent())){
src/pocketmine/block/DoublePlant.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/DoublePlant.php:		return ($this->getVariant() === 2 or $this->getVariant() === 3) ? BlockToolType::TYPE_SHEARS : BlockToolType::TYPE_NONE;
src/pocketmine/block/DoublePlant.php:		return ($this->getVariant() === 2 or $this->getVariant() === 3) ? 1 : 0; //only grass or fern require shears
src/pocketmine/block/DoublePlant.php:		if(($this->meta & self::BITFLAG_TOP) !== 0){
src/pocketmine/block/DoublePlant.php:			if($this->isCompatibleWithTool($item)){
src/pocketmine/block/DoublePlant.php:		if($this->isValidHalfPlant()){
src/pocketmine/block/DoublePlant.php:			return [$this, $this->getSide(($this->meta & self::BITFLAG_TOP) !== 0 ? Vector3::SIDE_DOWN : Vector3::SIDE_UP)];
src/pocketmine/block/Wood.php:		$this->meta = $meta;
src/pocketmine/block/Wood.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/Wood.php:		$this->meta = PillarRotationHelper::getMetaFromFace($this->meta, $face);
src/pocketmine/block/Wood.php:		return $this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/DaylightSensor.php:		$this->meta = $meta;
src/pocketmine/block/RedstoneRail.php:		return self::CONNECTIONS[$this->meta & ~self::FLAG_POWERED];
src/pocketmine/block/FenceGate.php:		if(($this->getDamage() & 0x04) > 0){
src/pocketmine/block/FenceGate.php:		$i = ($this->getDamage() & 0x03);
src/pocketmine/block/FenceGate.php:				$this->x,
src/pocketmine/block/FenceGate.php:				$this->y,
src/pocketmine/block/FenceGate.php:				$this->z + 0.375,
src/pocketmine/block/FenceGate.php:				$this->x + 1,
src/pocketmine/block/FenceGate.php:				$this->y + 1.5,
src/pocketmine/block/FenceGate.php:				$this->z + 0.625
src/pocketmine/block/FenceGate.php:				$this->x + 0.375,
src/pocketmine/block/FenceGate.php:				$this->y,
src/pocketmine/block/FenceGate.php:				$this->z,
src/pocketmine/block/FenceGate.php:				$this->x + 0.625,
src/pocketmine/block/FenceGate.php:				$this->y + 1.5,
src/pocketmine/block/FenceGate.php:				$this->z + 1
src/pocketmine/block/FenceGate.php:		$this->meta = ($player instanceof Player ? ($player->getDirection() - 1) & 0x03 : 0);
src/pocketmine/block/FenceGate.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/FenceGate.php:		$this->meta = (($this->meta ^ 0x04) & ~0x02);
src/pocketmine/block/FenceGate.php:			$this->meta |= (($player->getDirection() - 1) & 0x02);
src/pocketmine/block/FenceGate.php:		$this->getLevelNonNull()->setBlock($this, $this, true);
src/pocketmine/block/FenceGate.php:		$this->level->addSound(new DoorSound($this));
src/pocketmine/block/SoulSand.php:		$this->meta = $meta;
src/pocketmine/block/SoulSand.php:			$this->x,
src/pocketmine/block/SoulSand.php:			$this->y,
src/pocketmine/block/SoulSand.php:			$this->z,
src/pocketmine/block/SoulSand.php:			$this->x + 1,
src/pocketmine/block/SoulSand.php:			$this->y + 1 - 0.125,
src/pocketmine/block/SoulSand.php:			$this->z + 1
src/pocketmine/block/Stonecutter.php:		$this->meta = $meta;
src/pocketmine/block/SandstoneStairs.php:		$this->meta = $meta;
src/pocketmine/block/Torch.php:		$this->meta = $meta;
src/pocketmine/block/Torch.php:		$below = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Torch.php:		$meta = $this->getDamage();
src/pocketmine/block/Torch.php:		if($this->getSide($face)->isTransparent() and !($face === Vector3::SIDE_DOWN and ($below->getId() === self::FENCE or $below->getId() === self::COBBLESTONE_WALL))){
src/pocketmine/block/Torch.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/Torch.php:		$below = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Torch.php:		if(!$blockClicked->isTransparent() and $face !== Vector3::SIDE_DOWN){
src/pocketmine/block/Torch.php:			$this->meta = $faces[$face];
src/pocketmine/block/Torch.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Torch.php:		}elseif(!$below->isTransparent() or $below->getId() === self::FENCE or $below->getId() === self::COBBLESTONE_WALL){
src/pocketmine/block/Torch.php:			$this->meta = 0;
src/pocketmine/block/Torch.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/BrickStairs.php:		$this->meta = $meta;
src/pocketmine/block/GlazedTerracotta.php:			$this->meta = $faces[(~($player->getDirection() - 1)) & 0x03];
src/pocketmine/block/GlazedTerracotta.php:		return $this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/WallSign.php:		if($this->getSide($this->meta ^ 0x01)->getId() === self::AIR){
src/pocketmine/block/WallSign.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/EndStone.php:		$this->meta = $meta;
src/pocketmine/block/Trapdoor.php:		$this->meta = $meta;
src/pocketmine/block/Trapdoor.php:		$damage = $this->getDamage();
src/pocketmine/block/Trapdoor.php:				$this->x,
src/pocketmine/block/Trapdoor.php:				$this->y + 1 - $f,
src/pocketmine/block/Trapdoor.php:				$this->z,
src/pocketmine/block/Trapdoor.php:				$this->x + 1,
src/pocketmine/block/Trapdoor.php:				$this->y + 1,
src/pocketmine/block/Trapdoor.php:				$this->z + 1
src/pocketmine/block/Trapdoor.php:				$this->x,
src/pocketmine/block/Trapdoor.php:				$this->y,
src/pocketmine/block/Trapdoor.php:				$this->z,
src/pocketmine/block/Trapdoor.php:				$this->x + 1,
src/pocketmine/block/Trapdoor.php:				$this->y + $f,
src/pocketmine/block/Trapdoor.php:				$this->z + 1
src/pocketmine/block/Trapdoor.php:				$bb->setBounds(
src/pocketmine/block/Trapdoor.php:					$this->x,
src/pocketmine/block/Trapdoor.php:					$this->y,
src/pocketmine/block/Trapdoor.php:					$this->z + 1 - $f,
src/pocketmine/block/Trapdoor.php:					$this->x + 1,
src/pocketmine/block/Trapdoor.php:					$this->y + 1,
src/pocketmine/block/Trapdoor.php:					$this->z + 1
src/pocketmine/block/Trapdoor.php:				$bb->setBounds(
src/pocketmine/block/Trapdoor.php:					$this->x,
src/pocketmine/block/Trapdoor.php:					$this->y,
src/pocketmine/block/Trapdoor.php:					$this->z,
src/pocketmine/block/Trapdoor.php:					$this->x + 1,
src/pocketmine/block/Trapdoor.php:					$this->y + 1,
src/pocketmine/block/Trapdoor.php:					$this->z + $f
src/pocketmine/block/Trapdoor.php:				$bb->setBounds(
src/pocketmine/block/Trapdoor.php:					$this->x + 1 - $f,
src/pocketmine/block/Trapdoor.php:					$this->y,
src/pocketmine/block/Trapdoor.php:					$this->z,
src/pocketmine/block/Trapdoor.php:					$this->x + 1,
src/pocketmine/block/Trapdoor.php:					$this->y + 1,
src/pocketmine/block/Trapdoor.php:					$this->z + 1
src/pocketmine/block/Trapdoor.php:				$bb->setBounds(
src/pocketmine/block/Trapdoor.php:					$this->x,
src/pocketmine/block/Trapdoor.php:					$this->y,
src/pocketmine/block/Trapdoor.php:					$this->z,
src/pocketmine/block/Trapdoor.php:					$this->x + $f,
src/pocketmine/block/Trapdoor.php:					$this->y + 1,
src/pocketmine/block/Trapdoor.php:					$this->z + 1
src/pocketmine/block/Trapdoor.php:			$this->meta = $directions[$player->getDirection() & 0x03];
src/pocketmine/block/Trapdoor.php:		if(($clickVector->y > 0.5 and $face !== self::SIDE_UP) or $face === self::SIDE_DOWN){
src/pocketmine/block/Trapdoor.php:			$this->meta |= self::MASK_UPPER; //top half of block
src/pocketmine/block/Trapdoor.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Trapdoor.php:		$this->meta ^= self::MASK_OPENED;
src/pocketmine/block/Trapdoor.php:		$this->getLevelNonNull()->setBlock($this, $this, true);
src/pocketmine/block/Trapdoor.php:		$this->level->addSound(new DoorSound($this));
src/pocketmine/block/Redstone.php:		$this->meta = $meta;
src/pocketmine/block/Glass.php:		$this->meta = $meta;
src/pocketmine/block/Skull.php:		$this->meta = $meta;
src/pocketmine/block/Skull.php:			$this->x + 0.25,
src/pocketmine/block/Skull.php:			$this->y,
src/pocketmine/block/Skull.php:			$this->z + 0.25,
src/pocketmine/block/Skull.php:			$this->x + 0.75,
src/pocketmine/block/Skull.php:			$this->y + 0.5,
src/pocketmine/block/Skull.php:			$this->z + 0.75
src/pocketmine/block/Skull.php:		$this->meta = $face;
src/pocketmine/block/Skull.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true);
src/pocketmine/block/Skull.php:		Tile::createTile(Tile::SKULL, $this->getLevelNonNull(), TileSkull::createNBT($this, $face, $item, $player));
src/pocketmine/block/Skull.php:		$tile = $this->level->getTile($this);
src/pocketmine/block/Skull.php:		return ItemFactory::get(Item::SKULL, $tile instanceof TileSkull ? $tile->getType() : 0);
src/pocketmine/block/Skull.php:		return [$this->getItem()];
src/pocketmine/block/Skull.php:		return $this->getItem();
src/pocketmine/block/Block.php:	 * @param int         $id     The block type's ID, 0-255
src/pocketmine/block/Block.php:		$this->id = $id;
src/pocketmine/block/Block.php:		$this->meta = $meta;
src/pocketmine/block/Block.php:		$this->fallbackName = $name;
src/pocketmine/block/Block.php:		$this->itemId = $itemId;
src/pocketmine/block/Block.php:		return $this->fallbackName ?? "Unknown";
src/pocketmine/block/Block.php:		return $this->id;
src/pocketmine/block/Block.php:		return $this->itemId ?? $this->getId();
src/pocketmine/block/Block.php:		return RuntimeBlockMapping::toStaticRuntimeId($this->getId(), $this->getDamage());
src/pocketmine/block/Block.php:		return $this->meta;
src/pocketmine/block/Block.php:			throw new \InvalidArgumentException("Block damage values must be 0-15, not $meta");
src/pocketmine/block/Block.php:		$this->meta = $meta;
src/pocketmine/block/Block.php:	 * This defaults to -1 (don't remove any data). Used to remove rotation data and bitflags from block drops.
src/pocketmine/block/Block.php:		return -1;
src/pocketmine/block/Block.php:	 * Returns the block meta, stripped of non-variant flags.
src/pocketmine/block/Block.php:		return $this->meta & $this->getVariantBitmask();
src/pocketmine/block/Block.php:	 * AKA: Block->isPlaceable
src/pocketmine/block/Block.php:		return $blockReplace->canBeReplaced();
src/pocketmine/block/Block.php:		return $this->getLevelNonNull()->setBlock($this, $this, true, true);
src/pocketmine/block/Block.php:		if($this->getHardness() < 0){
src/pocketmine/block/Block.php:		$toolType = $this->getToolType();
src/pocketmine/block/Block.php:		$harvestLevel = $this->getToolHarvestLevel();
src/pocketmine/block/Block.php:			($toolType & $tool->getBlockToolType()) !== 0 and $tool->getBlockToolHarvestLevel() >= $harvestLevel);
src/pocketmine/block/Block.php:		return $this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::AIR), true, true);
src/pocketmine/block/Block.php:		$base = $this->getHardness();
src/pocketmine/block/Block.php:		if($this->isCompatibleWithTool($item)){
src/pocketmine/block/Block.php:		$efficiency = $item->getMiningEfficiency($this);
src/pocketmine/block/Block.php:		return $this->getHardness() * 5;
src/pocketmine/block/Block.php:	 * @return int 0-15
src/pocketmine/block/Block.php:	 * @return int 0-15
src/pocketmine/block/Block.php:	 * Diffusion means that full-strength sky light passing through this block will not be reduced, but will start being filtered below the block.
src/pocketmine/block/Block.php:	 * Light-diffusing blocks are included by the heightmap.
src/pocketmine/block/Block.php:	 * AKA: Block->isFlowable
src/pocketmine/block/Block.php:		$this->x = (int) $v->x;
src/pocketmine/block/Block.php:		$this->y = (int) $v->y;
src/pocketmine/block/Block.php:		$this->z = (int) $v->z;
src/pocketmine/block/Block.php:		$this->level = $v->level;
src/pocketmine/block/Block.php:		$this->boundingBox = null;
src/pocketmine/block/Block.php:		if($this->isCompatibleWithTool($item)){
src/pocketmine/block/Block.php:			if($this->isAffectedBySilkTouch() and $item->hasEnchantment(Enchantment::SILK_TOUCH)){
src/pocketmine/block/Block.php:				return $this->getSilkTouchDrops($item);
src/pocketmine/block/Block.php:			return $this->getDropsForCompatibleTool($item);
src/pocketmine/block/Block.php:			ItemFactory::get($this->getItemId(), $this->getVariant())
src/pocketmine/block/Block.php:	 * Returns an array of Items to be dropped when the block is broken using a compatible Silk Touch-enchanted tool.
src/pocketmine/block/Block.php:			ItemFactory::get($this->getItemId(), $this->getVariant())
src/pocketmine/block/Block.php:		if($item->hasEnchantment(Enchantment::SILK_TOUCH) or !$this->isCompatibleWithTool($item)){
src/pocketmine/block/Block.php:		return $this->getXpDropAmount();
src/pocketmine/block/Block.php:	 * Returns the item that players will equip when middle-clicking on this block.
src/pocketmine/block/Block.php:		return ItemFactory::get($this->getItemId(), $this->getVariant());
src/pocketmine/block/Block.php:		return $this->getFlammability() > 0;
src/pocketmine/block/Block.php:		if($this->isValid()){
src/pocketmine/block/Block.php:			return $this->getLevelNonNull()->getBlock(Vector3::getSide($side, $step));
src/pocketmine/block/Block.php:			$this->getSide(Vector3::SIDE_NORTH),
src/pocketmine/block/Block.php:			$this->getSide(Vector3::SIDE_SOUTH),
src/pocketmine/block/Block.php:			$this->getSide(Vector3::SIDE_WEST),
src/pocketmine/block/Block.php:			$this->getSide(Vector3::SIDE_EAST)
src/pocketmine/block/Block.php:				$this->getSide(Vector3::SIDE_DOWN),
src/pocketmine/block/Block.php:				$this->getSide(Vector3::SIDE_UP)
src/pocketmine/block/Block.php:			$this->getHorizontalSides()
src/pocketmine/block/Block.php:		return "Block[" . $this->getName() . "] (" . $this->getId() . ":" . $this->getDamage() . ")";
src/pocketmine/block/Block.php:		foreach($this->getCollisionBoxes() as $bb2){
src/pocketmine/block/Block.php:			if($bb->intersectsWith($bb2)){
src/pocketmine/block/Block.php:		if($this->collisionBoxes === null){
src/pocketmine/block/Block.php:			$this->collisionBoxes = $this->recalculateCollisionBoxes();
src/pocketmine/block/Block.php:		return $this->collisionBoxes;
src/pocketmine/block/Block.php:		if(($bb = $this->recalculateBoundingBox()) !== null){
src/pocketmine/block/Block.php:		if($this->boundingBox === null){
src/pocketmine/block/Block.php:			$this->boundingBox = $this->recalculateBoundingBox();
src/pocketmine/block/Block.php:		return $this->boundingBox;
src/pocketmine/block/Block.php:			$this->x,
src/pocketmine/block/Block.php:			$this->y,
src/pocketmine/block/Block.php:			$this->z,
src/pocketmine/block/Block.php:			$this->x + 1,
src/pocketmine/block/Block.php:			$this->y + 1,
src/pocketmine/block/Block.php:			$this->z + 1
src/pocketmine/block/Block.php:		$this->boundingBox = null;
src/pocketmine/block/Block.php:		$this->collisionBoxes = null;
src/pocketmine/block/Block.php:		$bbs = $this->getCollisionBoxes();
src/pocketmine/block/Block.php:			$nextHit = $bb->calculateIntercept($pos1, $pos2);
src/pocketmine/block/Block.php:			$nextDistance = $nextHit->hitVector->distanceSquared($pos1);
src/pocketmine/block/Block.php:		if($this->isValid()){
src/pocketmine/block/Block.php:			$this->level->getBlockMetadata()->setMetadata($this, $metadataKey, $newMetadataValue);
src/pocketmine/block/Block.php:		if($this->isValid()){
src/pocketmine/block/Block.php:			return $this->level->getBlockMetadata()->getMetadata($this, $metadataKey);
src/pocketmine/block/Block.php:		if($this->isValid()){
src/pocketmine/block/Block.php:			return $this->level->getBlockMetadata()->hasMetadata($this, $metadataKey);
src/pocketmine/block/Block.php:		if($this->isValid()){
src/pocketmine/block/Block.php:			$this->level->getBlockMetadata()->removeMetadata($this, $metadataKey, $owningPlugin);
src/pocketmine/block/Lever.php:		$this->meta = $meta;
src/pocketmine/block/Lever.php:		if(!$blockClicked->isSolid()){
src/pocketmine/block/Lever.php:			$this->meta = 0;
src/pocketmine/block/Lever.php:			$this->meta = 6 - $face;
src/pocketmine/block/Lever.php:			if(($player->getDirection() & 0x01) === 0){
src/pocketmine/block/Lever.php:					$this->meta = 6;
src/pocketmine/block/Lever.php:					$this->meta = 7;
src/pocketmine/block/Lever.php:		return $this->level->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Lever.php:		if(!$this->getSide($faces[$this->meta & 0x07])->isSolid()){
src/pocketmine/block/Lever.php:			$this->level->useBreakOn($this);
src/pocketmine/block/Ice.php:		$this->meta = $meta;
src/pocketmine/block/Ice.php:		if(($player === null or $player->isSurvival()) and !$item->hasEnchantment(Enchantment::SILK_TOUCH)){
src/pocketmine/block/Ice.php:			return $this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::WATER), true);
src/pocketmine/block/Ice.php:		if($this->level->getHighestAdjacentBlockLight($this->x, $this->y, $this->z) >= 12){
src/pocketmine/block/Ice.php:			$this->level->useBreakOn($this);
src/pocketmine/block/Door.php:		$damage = $this->getDamage();
src/pocketmine/block/Door.php:			$down = $this->getSide(Vector3::SIDE_DOWN)->getDamage();
src/pocketmine/block/Door.php:			$up = $this->getSide(Vector3::SIDE_UP)->getDamage();
src/pocketmine/block/Door.php:		$damage = $this->getFullDamage();
src/pocketmine/block/Door.php:			$this->x,
src/pocketmine/block/Door.php:			$this->y,
src/pocketmine/block/Door.php:			$this->z,
src/pocketmine/block/Door.php:			$this->x + 1,
src/pocketmine/block/Door.php:			$this->y + 2,
src/pocketmine/block/Door.php:			$this->z + 1
src/pocketmine/block/Door.php:					$bb->setBounds(
src/pocketmine/block/Door.php:						$this->x,
src/pocketmine/block/Door.php:						$this->y,
src/pocketmine/block/Door.php:						$this->z,
src/pocketmine/block/Door.php:						$this->x + 1,
src/pocketmine/block/Door.php:						$this->y + 1,
src/pocketmine/block/Door.php:						$this->z + $f
src/pocketmine/block/Door.php:					$bb->setBounds(
src/pocketmine/block/Door.php:						$this->x,
src/pocketmine/block/Door.php:						$this->y,
src/pocketmine/block/Door.php:						$this->z + 1 - $f,
src/pocketmine/block/Door.php:						$this->x + 1,
src/pocketmine/block/Door.php:						$this->y + 1,
src/pocketmine/block/Door.php:						$this->z + 1
src/pocketmine/block/Door.php:				$bb->setBounds(
src/pocketmine/block/Door.php:					$this->x,
src/pocketmine/block/Door.php:					$this->y,
src/pocketmine/block/Door.php:					$this->z,
src/pocketmine/block/Door.php:					$this->x + $f,
src/pocketmine/block/Door.php:					$this->y + 1,
src/pocketmine/block/Door.php:					$this->z + 1
src/pocketmine/block/Door.php:					$bb->setBounds(
src/pocketmine/block/Door.php:						$this->x + 1 - $f,
src/pocketmine/block/Door.php:						$this->y,
src/pocketmine/block/Door.php:						$this->z,
src/pocketmine/block/Door.php:						$this->x + 1,
src/pocketmine/block/Door.php:						$this->y + 1,
src/pocketmine/block/Door.php:						$this->z + 1
src/pocketmine/block/Door.php:					$bb->setBounds(
src/pocketmine/block/Door.php:						$this->x,
src/pocketmine/block/Door.php:						$this->y,
src/pocketmine/block/Door.php:						$this->z,
src/pocketmine/block/Door.php:						$this->x + $f,
src/pocketmine/block/Door.php:						$this->y + 1,
src/pocketmine/block/Door.php:						$this->z + 1
src/pocketmine/block/Door.php:				$bb->setBounds(
src/pocketmine/block/Door.php:					$this->x,
src/pocketmine/block/Door.php:					$this->y,
src/pocketmine/block/Door.php:					$this->z,
src/pocketmine/block/Door.php:					$this->x + 1,
src/pocketmine/block/Door.php:					$this->y + 1,
src/pocketmine/block/Door.php:					$this->z + $f
src/pocketmine/block/Door.php:					$bb->setBounds(
src/pocketmine/block/Door.php:						$this->x,
src/pocketmine/block/Door.php:						$this->y,
src/pocketmine/block/Door.php:						$this->z + 1 - $f,
src/pocketmine/block/Door.php:						$this->x + 1,
src/pocketmine/block/Door.php:						$this->y + 1,
src/pocketmine/block/Door.php:						$this->z + 1
src/pocketmine/block/Door.php:					$bb->setBounds(
src/pocketmine/block/Door.php:						$this->x,
src/pocketmine/block/Door.php:						$this->y,
src/pocketmine/block/Door.php:						$this->z,
src/pocketmine/block/Door.php:						$this->x + 1,
src/pocketmine/block/Door.php:						$this->y + 1,
src/pocketmine/block/Door.php:						$this->z + $f
src/pocketmine/block/Door.php:				$bb->setBounds(
src/pocketmine/block/Door.php:					$this->x + 1 - $f,
src/pocketmine/block/Door.php:					$this->y,
src/pocketmine/block/Door.php:					$this->z,
src/pocketmine/block/Door.php:					$this->x + 1,
src/pocketmine/block/Door.php:					$this->y + 1,
src/pocketmine/block/Door.php:					$this->z + 1
src/pocketmine/block/Door.php:					$bb->setBounds(
src/pocketmine/block/Door.php:						$this->x,
src/pocketmine/block/Door.php:						$this->y,
src/pocketmine/block/Door.php:						$this->z,
src/pocketmine/block/Door.php:						$this->x + $f,
src/pocketmine/block/Door.php:						$this->y + 1,
src/pocketmine/block/Door.php:						$this->z + 1
src/pocketmine/block/Door.php:					$bb->setBounds(
src/pocketmine/block/Door.php:						$this->x + 1 - $f,
src/pocketmine/block/Door.php:						$this->y,
src/pocketmine/block/Door.php:						$this->z,
src/pocketmine/block/Door.php:						$this->x + 1,
src/pocketmine/block/Door.php:						$this->y + 1,
src/pocketmine/block/Door.php:						$this->z + 1
src/pocketmine/block/Door.php:				$bb->setBounds(
src/pocketmine/block/Door.php:					$this->x,
src/pocketmine/block/Door.php:					$this->y,
src/pocketmine/block/Door.php:					$this->z + 1 - $f,
src/pocketmine/block/Door.php:					$this->x + 1,
src/pocketmine/block/Door.php:					$this->y + 1,
src/pocketmine/block/Door.php:					$this->z + 1
src/pocketmine/block/Door.php:		if($this->getSide(Vector3::SIDE_DOWN)->getId() === self::AIR){ //Replace with common break method
src/pocketmine/block/Door.php:			$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::AIR), false);
src/pocketmine/block/Door.php:			if($this->getSide(Vector3::SIDE_UP) instanceof Door){
src/pocketmine/block/Door.php:				$this->getLevelNonNull()->setBlock($this->getSide(Vector3::SIDE_UP), BlockFactory::get(Block::AIR), false);
src/pocketmine/block/Door.php:			$blockUp = $this->getSide(Vector3::SIDE_UP);
src/pocketmine/block/Door.php:			$blockDown = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Door.php:			if(!$blockUp->canBeReplaced() or $blockDown->isTransparent()){
src/pocketmine/block/Door.php:			$direction = $player instanceof Player ? $player->getDirection() : 0;
src/pocketmine/block/Door.php:			$next = $this->getSide($faces[($direction + 2) % 4]);
src/pocketmine/block/Door.php:			$next2 = $this->getSide($faces[$direction]);
src/pocketmine/block/Door.php:			if($next->getId() === $this->getId() or (!$next2->isTransparent() and $next->isTransparent())){ //Door hinge
src/pocketmine/block/Door.php:			$this->setDamage($player->getDirection() & 0x03);
src/pocketmine/block/Door.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true); //Bottom
src/pocketmine/block/Door.php:			$this->getLevelNonNull()->setBlock($blockUp, BlockFactory::get($this->getId(), $metaUp), true); //Top
src/pocketmine/block/Door.php:		if(($this->getDamage() & 0x08) === 0x08){ //Top
src/pocketmine/block/Door.php:			$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Door.php:			if($down->getId() === $this->getId()){
src/pocketmine/block/Door.php:				$meta = $down->getDamage() ^ 0x04;
src/pocketmine/block/Door.php:				$this->level->setBlock($down, BlockFactory::get($this->getId(), $meta), true);
src/pocketmine/block/Door.php:				$this->level->addSound(new DoorSound($this));
src/pocketmine/block/Door.php:			$this->meta ^= 0x04;
src/pocketmine/block/Door.php:			$this->level->setBlock($this, $this, true);
src/pocketmine/block/Door.php:			$this->level->addSound(new DoorSound($this));
src/pocketmine/block/Door.php:		if(($this->meta & 0x08) === 0){ //bottom half only
src/pocketmine/block/Door.php:		if(($this->getDamage() & 0x08) === 0x08){
src/pocketmine/block/Door.php:			$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Door.php:			if($down->getId() === $this->getId()){
src/pocketmine/block/Door.php:			$up = $this->getSide(Vector3::SIDE_UP);
src/pocketmine/block/Door.php:			if($up->getId() === $this->getId()){
src/pocketmine/block/BurningFurnace.php:		$this->meta = $meta;
src/pocketmine/block/BurningFurnace.php:		$this->meta = $faces[$player instanceof Player ? $player->getDirection() : 0];
src/pocketmine/block/BurningFurnace.php:		$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/BurningFurnace.php:		Tile::createTile(Tile::FURNACE, $this->getLevelNonNull(), TileFurnace::createNBT($this, $face, $item, $player));
src/pocketmine/block/BurningFurnace.php:			$furnace = $this->getLevelNonNull()->getTile($this);
src/pocketmine/block/BurningFurnace.php:				$furnace = Tile::createTile(Tile::FURNACE, $this->getLevelNonNull(), TileFurnace::createNBT($this));
src/pocketmine/block/BurningFurnace.php:			if(!$furnace->canOpenWith($item->getCustomName())){
src/pocketmine/block/BurningFurnace.php:			$player->addWindow($furnace->getInventory());
src/pocketmine/block/Farmland.php:		$this->meta = $meta;
src/pocketmine/block/Farmland.php:			$this->x,
src/pocketmine/block/Farmland.php:			$this->y,
src/pocketmine/block/Farmland.php:			$this->z,
src/pocketmine/block/Farmland.php:			$this->x + 1,
src/pocketmine/block/Farmland.php:			$this->y + 1, //TODO: this should be 0.9375, but MCPE currently treats them as a full block (https://bugs.mojang.com/browse/MCPE-12109)
src/pocketmine/block/Farmland.php:			$this->z + 1
src/pocketmine/block/Farmland.php:		if($this->getSide(Vector3::SIDE_UP)->isSolid()){
src/pocketmine/block/Farmland.php:			$this->level->setBlock($this, BlockFactory::get(Block::DIRT), true);
src/pocketmine/block/Farmland.php:		if(!$this->canHydrate()){
src/pocketmine/block/Farmland.php:			if($this->meta > 0){
src/pocketmine/block/Farmland.php:				$this->meta--;
src/pocketmine/block/Farmland.php:				$this->level->setBlock($this, $this, false, false);
src/pocketmine/block/Farmland.php:				$this->level->setBlock($this, BlockFactory::get(Block::DIRT), false, true);
src/pocketmine/block/Farmland.php:		}elseif($this->meta < 7){
src/pocketmine/block/Farmland.php:			$this->meta = 7;
src/pocketmine/block/Farmland.php:			$this->level->setBlock($this, $this, false, false);
src/pocketmine/block/Farmland.php:		$start = $this->add(-4, 0, -4);
src/pocketmine/block/Farmland.php:		$end = $this->add(4, 1, 4);
src/pocketmine/block/Farmland.php:		for($y = $start->y; $y <= $end->y; ++$y){
src/pocketmine/block/Farmland.php:			for($z = $start->z; $z <= $end->z; ++$z){
src/pocketmine/block/Farmland.php:				for($x = $start->x; $x <= $end->x; ++$x){
src/pocketmine/block/Farmland.php:					$id = $this->level->getBlockIdAt($x, $y, $z);
src/pocketmine/block/DoubleSlab.php:		$this->meta = $meta;
src/pocketmine/block/DoubleSlab.php:		return "Double " . BlockFactory::get($this->getSlabId(), $this->getVariant())->getName();
src/pocketmine/block/DoubleSlab.php:			ItemFactory::get($this->getSlabId(), $this->getVariant(), 2)
src/pocketmine/block/DoubleSlab.php:		return ItemFactory::get($this->getSlabId(), $this->getVariant());
src/pocketmine/block/Button.php:		$this->meta = $meta;
src/pocketmine/block/Button.php:		$this->meta = $face;
src/pocketmine/block/Button.php:		return $this->level->setBlock($this, $this, true, true);
src/pocketmine/block/StoneBricks.php:		$this->meta = $meta;
src/pocketmine/block/StoneBricks.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/TNT.php:		$this->meta = $meta;
src/pocketmine/block/TNT.php:		if($item instanceof FlintSteel or $item->hasEnchantment(Enchantment::FIRE_ASPECT)){
src/pocketmine/block/TNT.php:				$item->applyDamage(1);
src/pocketmine/block/TNT.php:			$this->ignite();
src/pocketmine/block/TNT.php:		if($entity instanceof Arrow and $entity->isOnFire()){
src/pocketmine/block/TNT.php:			$this->ignite();
src/pocketmine/block/TNT.php:		$this->getLevelNonNull()->setBlock($this, BlockFactory::get(Block::AIR), true);
src/pocketmine/block/TNT.php:		$mot = (new Random())->nextSignedFloat() * M_PI * 2;
src/pocketmine/block/TNT.php:		$nbt = Entity::createBaseNBT($this->add(0.5, 0, 0.5), new Vector3(-sin($mot) * 0.02, 0.2, -cos($mot) * 0.02));
src/pocketmine/block/TNT.php:		$nbt->setShort("Fuse", $fuse);
src/pocketmine/block/TNT.php:		$tnt = Entity::createEntity("PrimedTNT", $this->getLevelNonNull(), $nbt);
src/pocketmine/block/TNT.php:			$tnt->spawnToAll();
src/pocketmine/block/TNT.php:		$this->ignite();
src/pocketmine/block/GlowingObsidian.php:		$this->meta = $meta;
src/pocketmine/block/HardenedClay.php:		$this->meta = $meta;
src/pocketmine/block/Sapling.php:		$this->meta = $meta;
src/pocketmine/block/Sapling.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/Sapling.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Sapling.php:		if($down->getId() === self::GRASS or $down->getId() === self::DIRT or $down->getId() === self::FARMLAND){
src/pocketmine/block/Sapling.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Sapling.php:		if($item->getId() === Item::DYE and $item->getDamage() === 0x0F){ //Bonemeal
src/pocketmine/block/Sapling.php:			Tree::growTree($this->getLevelNonNull(), $this->x, $this->y, $this->z, new Random(mt_rand()), $this->getVariant());
src/pocketmine/block/Sapling.php:			$item->pop();
src/pocketmine/block/Sapling.php:		if($this->getSide(Vector3::SIDE_DOWN)->isTransparent()){
src/pocketmine/block/Sapling.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/Sapling.php:		if($this->level->getFullLightAt($this->x, $this->y, $this->z) >= 8 and mt_rand(1, 7) === 1){
src/pocketmine/block/Sapling.php:			if(($this->meta & 0x08) === 0x08){
src/pocketmine/block/Sapling.php:				Tree::growTree($this->getLevelNonNull(), $this->x, $this->y, $this->z, new Random(mt_rand()), $this->getVariant());
src/pocketmine/block/Sapling.php:				$this->meta |= 0x08;
src/pocketmine/block/Sapling.php:				$this->getLevelNonNull()->setBlock($this, $this, true);
src/pocketmine/block/Purpur.php:		return $names[$this->getVariant()] ?? "Unknown";
src/pocketmine/block/GoldOre.php:		$this->meta = $meta;
src/pocketmine/block/CraftingTable.php:		$this->meta = $meta;
src/pocketmine/block/CraftingTable.php:			$player->setCraftingGrid(new CraftingGrid($player, CraftingGrid::SIZE_BIG));
src/pocketmine/block/CraftingTable.php:			if(!array_key_exists($windowId = Player::HARDCODED_CRAFTING_GRID_WINDOW_ID, $player->openHardcodedWindows)){
src/pocketmine/block/CraftingTable.php:				$pk->windowId = $windowId;
src/pocketmine/block/CraftingTable.php:				$pk->type = WindowTypes::WORKBENCH;
src/pocketmine/block/CraftingTable.php:				$pk->x = $this->getFloorX();
src/pocketmine/block/CraftingTable.php:				$pk->y = $this->getFloorY();
src/pocketmine/block/CraftingTable.php:				$pk->z = $this->getFloorZ();
src/pocketmine/block/CraftingTable.php:				$player->sendDataPacket($pk);
src/pocketmine/block/CraftingTable.php:				$player->openHardcodedWindows[$windowId] = true;
src/pocketmine/block/NetherReactor.php:		$this->meta = $meta;
src/pocketmine/block/NetherReactor.php:		return ($prefixes[$this->meta] ?? "") . "Nether Reactor Core";
src/pocketmine/block/StainedClay.php:		return ColorBlockMetaHelper::getColorFromMeta($this->getVariant()) . " Stained Clay";
src/pocketmine/block/RedMushroomBlock.php:		$this->meta = $meta;
src/pocketmine/block/Carpet.php:		$this->meta = $meta;
src/pocketmine/block/Carpet.php:		return ColorBlockMetaHelper::getColorFromMeta($this->getVariant()) . " Carpet";
src/pocketmine/block/Carpet.php:			$this->x,
src/pocketmine/block/Carpet.php:			$this->y,
src/pocketmine/block/Carpet.php:			$this->z,
src/pocketmine/block/Carpet.php:			$this->x + 1,
src/pocketmine/block/Carpet.php:			$this->y + 0.0625,
src/pocketmine/block/Carpet.php:			$this->z + 1
src/pocketmine/block/Carpet.php:		$down = $this->getSide(Vector3::SIDE_DOWN);
src/pocketmine/block/Carpet.php:		if($down->getId() !== self::AIR){
src/pocketmine/block/Carpet.php:			$this->getLevelNonNull()->setBlock($blockReplace, $this, true, true);
src/pocketmine/block/Carpet.php:		if($this->getSide(Vector3::SIDE_DOWN)->getId() === self::AIR){
src/pocketmine/block/Carpet.php:			$this->getLevelNonNull()->useBreakOn($this);
src/pocketmine/block/Gold.php:		$this->meta = $meta;
src/pocketmine/form/Form.php: * Form implementations must implement this interface to be able to utilize the Player form-sending mechanism.
src/pocketmine/resourcepacks/ResourcePackManager.php:	 * @param string  $path Path to resource-packs directory.
src/pocketmine/resourcepacks/ResourcePackManager.php:		$this->path = $path;
src/pocketmine/resourcepacks/ResourcePackManager.php:		if(!file_exists($this->path)){
src/pocketmine/resourcepacks/ResourcePackManager.php:			$logger->debug("Resource packs path $path does not exist, creating directory");
src/pocketmine/resourcepacks/ResourcePackManager.php:			mkdir($this->path);
src/pocketmine/resourcepacks/ResourcePackManager.php:		}elseif(!is_dir($this->path)){
src/pocketmine/resourcepacks/ResourcePackManager.php:		if(!file_exists($this->path . "resource_packs.yml")){
src/pocketmine/resourcepacks/ResourcePackManager.php:			copy(\pocketmine\RESOURCE_PATH . "resource_packs.yml", $this->path . "resource_packs.yml");
src/pocketmine/resourcepacks/ResourcePackManager.php:		$resourcePacksConfig = new Config($this->path . "resource_packs.yml", Config::YAML, []);
src/pocketmine/resourcepacks/ResourcePackManager.php:		$this->serverForceResources = (bool) $resourcePacksConfig->get("force_resources", false);
src/pocketmine/resourcepacks/ResourcePackManager.php:		$logger->info("Loading resource packs...");
src/pocketmine/resourcepacks/ResourcePackManager.php:		$resourceStack = $resourcePacksConfig->get("resource_stack", []);
src/pocketmine/resourcepacks/ResourcePackManager.php:				$logger->critical("Found invalid entry in resource pack list at offset $pos of type " . gettype($pack));
src/pocketmine/resourcepacks/ResourcePackManager.php:				$packPath = $this->path . DIRECTORY_SEPARATOR . $pack;
src/pocketmine/resourcepacks/ResourcePackManager.php:				switch($info->getExtension()){
src/pocketmine/resourcepacks/ResourcePackManager.php:					$this->resourcePacks[] = $newPack;
src/pocketmine/resourcepacks/ResourcePackManager.php:					$this->uuidList[strtolower($newPack->getPackId())] = $newPack;
src/pocketmine/resourcepacks/ResourcePackManager.php:				$logger->critical("Could not load resource pack \"$pack\": " . $e->getMessage());
src/pocketmine/resourcepacks/ResourcePackManager.php:		$logger->debug("Successfully loaded " . count($this->resourcePacks) . " resource packs");
src/pocketmine/resourcepacks/ResourcePackManager.php:		return $this->path;
src/pocketmine/resourcepacks/ResourcePackManager.php:		return $this->serverForceResources;
src/pocketmine/resourcepacks/ResourcePackManager.php:		return $this->resourcePacks;
src/pocketmine/resourcepacks/ResourcePackManager.php:		return $this->uuidList[strtolower($id)] ?? null;
src/pocketmine/resourcepacks/ResourcePackManager.php:		return array_keys($this->uuidList);
src/pocketmine/resourcepacks/ResourcePack.php:	 * Returns the human-readable name of the resource pack
src/pocketmine/resourcepacks/ResourcePack.php:	 * Returns the pack's UUID as a human-readable string
src/pocketmine/resourcepacks/ResourcePack.php:	 * @return string byte-array length 32 bytes
src/pocketmine/resourcepacks/ResourcePack.php:	 * Returns a chunk of the resource pack zip as a byte-array for sending to clients.
src/pocketmine/resourcepacks/ResourcePack.php:	 * A folder resource loader may need to perform on-the-fly compression for this purpose.
src/pocketmine/resourcepacks/ResourcePack.php:	 * @return string byte-array
src/pocketmine/resourcepacks/ResourcePackInfoEntry.php:		$this->packId = $packId;
src/pocketmine/resourcepacks/ResourcePackInfoEntry.php:		$this->version = $version;
src/pocketmine/resourcepacks/ResourcePackInfoEntry.php:		$this->packSize = $packSize;
src/pocketmine/resourcepacks/ResourcePackInfoEntry.php:		return $this->packId;
src/pocketmine/resourcepacks/ResourcePackInfoEntry.php:		return $this->version;
src/pocketmine/resourcepacks/ResourcePackInfoEntry.php:		return $this->packSize;
src/pocketmine/resourcepacks/ZippedResourcePack.php:		if(!isset($manifest->format_version) or !isset($manifest->header) or !isset($manifest->modules)){
src/pocketmine/resourcepacks/ZippedResourcePack.php:			isset($manifest->header->description) and
src/pocketmine/resourcepacks/ZippedResourcePack.php:			isset($manifest->header->name) and
src/pocketmine/resourcepacks/ZippedResourcePack.php:			isset($manifest->header->uuid) and
src/pocketmine/resourcepacks/ZippedResourcePack.php:			isset($manifest->header->version) and
src/pocketmine/resourcepacks/ZippedResourcePack.php:			count($manifest->header->version) === 3;
src/pocketmine/resourcepacks/ZippedResourcePack.php:		$this->path = $zipPath;
src/pocketmine/resourcepacks/ZippedResourcePack.php:		if(($openResult = $archive->open($zipPath)) !== true){
src/pocketmine/resourcepacks/ZippedResourcePack.php:		if(($manifestData = $archive->getFromName("manifest.json")) === false){
src/pocketmine/resourcepacks/ZippedResourcePack.php:			for($i = 0; $i < $archive->numFiles; ++$i){
src/pocketmine/resourcepacks/ZippedResourcePack.php:				$name = $archive->getNameIndex($i);
src/pocketmine/resourcepacks/ZippedResourcePack.php:				$manifestData = $archive->getFromIndex($manifestIdx);
src/pocketmine/resourcepacks/ZippedResourcePack.php:			}elseif($archive->locateName("pack_manifest.json") !== false){
src/pocketmine/resourcepacks/ZippedResourcePack.php:		$archive->close();
src/pocketmine/resourcepacks/ZippedResourcePack.php:			$manifest = (new CommentedJsonDecoder())->decode($manifestData);
src/pocketmine/resourcepacks/ZippedResourcePack.php:			throw new ResourcePackException("Failed to parse manifest.json: " . $e->getMessage(), $e->getCode(), $e);
src/pocketmine/resourcepacks/ZippedResourcePack.php:		$this->manifest = $manifest;
src/pocketmine/resourcepacks/ZippedResourcePack.php:		$this->fileResource = fopen($zipPath, "rb");
src/pocketmine/resourcepacks/ZippedResourcePack.php:		fclose($this->fileResource);
src/pocketmine/resourcepacks/ZippedResourcePack.php:		return $this->path;
src/pocketmine/resourcepacks/ZippedResourcePack.php:		return $this->manifest->header->name;
src/pocketmine/resourcepacks/ZippedResourcePack.php:		return implode(".", $this->manifest->header->version);
src/pocketmine/resourcepacks/ZippedResourcePack.php:		return $this->manifest->header->uuid;
src/pocketmine/resourcepacks/ZippedResourcePack.php:		return filesize($this->path);
src/pocketmine/resourcepacks/ZippedResourcePack.php:		if($this->sha256 === null or !$cached){
src/pocketmine/resourcepacks/ZippedResourcePack.php:			$this->sha256 = hash_file("sha256", $this->path, true);
src/pocketmine/resourcepacks/ZippedResourcePack.php:		return $this->sha256;
src/pocketmine/resourcepacks/ZippedResourcePack.php:		fseek($this->fileResource, $start);
src/pocketmine/resourcepacks/ZippedResourcePack.php:		if(feof($this->fileResource)){
src/pocketmine/resourcepacks/ZippedResourcePack.php:		return fread($this->fileResource, $length);
src/pocketmine/Collectable.php:		return $this->isGarbage;
src/pocketmine/Collectable.php:		$this->isGarbage = true;
src/pocketmine/inventory/ShapedRecipe.php:		$this->height = count($shape);
src/pocketmine/inventory/ShapedRecipe.php:		if($this->height > 3 or $this->height <= 0){
src/pocketmine/inventory/ShapedRecipe.php:			throw new \InvalidArgumentException("Shaped recipes may only have 1, 2 or 3 rows, not $this->height");
src/pocketmine/inventory/ShapedRecipe.php:		$this->width = strlen($shape[0]);
src/pocketmine/inventory/ShapedRecipe.php:		if($this->width > 3 or $this->width <= 0){
src/pocketmine/inventory/ShapedRecipe.php:			throw new \InvalidArgumentException("Shaped recipes may only have 1, 2 or 3 columns, not $this->width");
src/pocketmine/inventory/ShapedRecipe.php:			if(strlen($row) !== $this->width){
src/pocketmine/inventory/ShapedRecipe.php:				throw new \InvalidArgumentException("Shaped recipe rows must all have the same length (expected $this->width, got " . strlen($row) . ")");
src/pocketmine/inventory/ShapedRecipe.php:			for($x = 0; $x < $this->width; ++$x){
src/pocketmine/inventory/ShapedRecipe.php:		$this->shape = $shape;
src/pocketmine/inventory/ShapedRecipe.php:			$this->setIngredient($char, $i);
src/pocketmine/inventory/ShapedRecipe.php:		$this->results = array_map(function(Item $item) : Item{ return clone $item; }, $results);
src/pocketmine/inventory/ShapedRecipe.php:		return $this->width;
src/pocketmine/inventory/ShapedRecipe.php:		return $this->height;
src/pocketmine/inventory/ShapedRecipe.php:		return array_map(function(Item $item) : Item{ return clone $item; }, $this->results);
src/pocketmine/inventory/ShapedRecipe.php:		return $this->getResults();
src/pocketmine/inventory/ShapedRecipe.php:		if(strpos(implode($this->shape), $key) === false){
src/pocketmine/inventory/ShapedRecipe.php:		$this->ingredientList[$key] = clone $item;
src/pocketmine/inventory/ShapedRecipe.php:		for($y = 0; $y < $this->height; ++$y){
src/pocketmine/inventory/ShapedRecipe.php:			for($x = 0; $x < $this->width; ++$x){
src/pocketmine/inventory/ShapedRecipe.php:				$ingredients[$y][$x] = $this->getIngredient($x, $y);
src/pocketmine/inventory/ShapedRecipe.php:		for($y = 0; $y < $this->height; ++$y){
src/pocketmine/inventory/ShapedRecipe.php:			for($x = 0; $x < $this->width; ++$x){
src/pocketmine/inventory/ShapedRecipe.php:				$ingredient = $this->getIngredient($x, $y);
src/pocketmine/inventory/ShapedRecipe.php:				if(!$ingredient->isNull()){
src/pocketmine/inventory/ShapedRecipe.php:		$exists = $this->ingredientList[$this->shape[$y][$x]] ?? null;
src/pocketmine/inventory/ShapedRecipe.php:		return $this->shape;
src/pocketmine/inventory/ShapedRecipe.php:		$manager->registerShapedRecipe($this);
src/pocketmine/inventory/ShapedRecipe.php:		for($y = 0; $y < $this->height; ++$y){
src/pocketmine/inventory/ShapedRecipe.php:			for($x = 0; $x < $this->width; ++$x){
src/pocketmine/inventory/ShapedRecipe.php:				$given = $grid->getIngredient($reverse ? $this->width - $x - 1 : $x, $y);
src/pocketmine/inventory/ShapedRecipe.php:				$required = $this->getIngredient($x, $y);
src/pocketmine/inventory/ShapedRecipe.php:				if(!$required->equals($given, !$required->hasAnyDamageValue(), $required->hasCompoundTag()) or $required->getCount() > $given->getCount()){
src/pocketmine/inventory/ShapedRecipe.php:		if($this->width !== $grid->getRecipeWidth() or $this->height !== $grid->getRecipeHeight()){
src/pocketmine/inventory/ShapedRecipe.php:		return $this->matchInputMap($grid, false) or $this->matchInputMap($grid, true);
src/pocketmine/inventory/EnchantInventory.php:		parent::__construct($pos->asPosition());
src/pocketmine/inventory/EnchantInventory.php:		return $this->holder;
src/pocketmine/inventory/EnchantInventory.php:		foreach($this->getContents() as $item){
src/pocketmine/inventory/EnchantInventory.php:			$who->dropItem($item);
src/pocketmine/inventory/EnchantInventory.php:		$this->clearAll();
src/pocketmine/inventory/transaction/CraftingTransaction.php:			$needCount = $recipeItem->getCount();
src/pocketmine/inventory/transaction/CraftingTransaction.php:				if($otherRecipeItem->equals($recipeItem)){ //make sure they have the same wildcards set
src/pocketmine/inventory/transaction/CraftingTransaction.php:					$needCount += $otherRecipeItem->getCount();
src/pocketmine/inventory/transaction/CraftingTransaction.php:				if($txItem->equals($recipeItem, !$wildcards or !$recipeItem->hasAnyDamageValue(), !$wildcards or $recipeItem->hasCompoundTag())){
src/pocketmine/inventory/transaction/CraftingTransaction.php:					$haveCount += $txItem->getCount();
src/pocketmine/inventory/transaction/CraftingTransaction.php:		$this->squashDuplicateSlotChanges();
src/pocketmine/inventory/transaction/CraftingTransaction.php:		if(count($this->actions) < 1){
src/pocketmine/inventory/transaction/CraftingTransaction.php:		$this->matchItems($this->outputs, $this->inputs);
src/pocketmine/inventory/transaction/CraftingTransaction.php:		foreach($this->source->getServer()->getCraftingManager()->matchRecipeByOutputs($this->outputs) as $recipe){
src/pocketmine/inventory/transaction/CraftingTransaction.php:				$this->repetitions = $this->matchRecipeItems($this->outputs, $recipe->getResultsFor($this->source->getCraftingGrid()), false);
src/pocketmine/inventory/transaction/CraftingTransaction.php:				$this->matchRecipeItems($this->inputs, $recipe->getIngredientList(), true, $this->repetitions);
src/pocketmine/inventory/transaction/CraftingTransaction.php:				$this->recipe = $recipe;
src/pocketmine/inventory/transaction/CraftingTransaction.php:		if($this->recipe === null){
src/pocketmine/inventory/transaction/CraftingTransaction.php:		$ev = new CraftItemEvent($this, $this->recipe, $this->repetitions, $this->inputs, $this->outputs);
src/pocketmine/inventory/transaction/CraftingTransaction.php:		$ev->call();
src/pocketmine/inventory/transaction/CraftingTransaction.php:		return !$ev->isCancelled();
src/pocketmine/inventory/transaction/CraftingTransaction.php:		$pk->windowId = Player::HARDCODED_CRAFTING_GRID_WINDOW_ID;
src/pocketmine/inventory/transaction/CraftingTransaction.php:		$pk->server = true;
src/pocketmine/inventory/transaction/CraftingTransaction.php:		$this->source->dataPacket($pk);
src/pocketmine/inventory/transaction/CraftingTransaction.php:			foreach($this->outputs as $item){
src/pocketmine/inventory/transaction/CraftingTransaction.php:				switch($item->getId()){
src/pocketmine/inventory/transaction/CraftingTransaction.php:						$this->source->awardAchievement("buildWorkBench");
src/pocketmine/inventory/transaction/CraftingTransaction.php:						$this->source->awardAchievement("buildPickaxe");
src/pocketmine/inventory/transaction/CraftingTransaction.php:						$this->source->awardAchievement("buildFurnace");
src/pocketmine/inventory/transaction/CraftingTransaction.php:						$this->source->awardAchievement("buildHoe");
src/pocketmine/inventory/transaction/CraftingTransaction.php:						$this->source->awardAchievement("makeBread");
src/pocketmine/inventory/transaction/CraftingTransaction.php:						$this->source->awardAchievement("bakeCake");
src/pocketmine/inventory/transaction/CraftingTransaction.php:						$this->source->awardAchievement("buildBetterPickaxe");
src/pocketmine/inventory/transaction/CraftingTransaction.php:						$this->source->awardAchievement("buildSword");
src/pocketmine/inventory/transaction/CraftingTransaction.php:						$this->source->awardAchievement("diamond");
src/pocketmine/inventory/transaction/InventoryTransaction.php: * - No new outputs without matching input amounts
src/pocketmine/inventory/transaction/InventoryTransaction.php: * - No inputs without matching output amounts
src/pocketmine/inventory/transaction/InventoryTransaction.php: * - No userdata changes (item state, NBT, etc)
src/pocketmine/inventory/transaction/InventoryTransaction.php:		$this->source = $source;
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$this->addAction($action);
src/pocketmine/inventory/transaction/InventoryTransaction.php:		return $this->source;
src/pocketmine/inventory/transaction/InventoryTransaction.php:		return $this->inventories;
src/pocketmine/inventory/transaction/InventoryTransaction.php:		return $this->actions;
src/pocketmine/inventory/transaction/InventoryTransaction.php:		if(!isset($this->actions[$hash = spl_object_hash($action)])){
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$this->actions[$hash] = $action;
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$action->onAddToTransaction($this);
src/pocketmine/inventory/transaction/InventoryTransaction.php:		$keys = array_keys($this->actions);
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$actions[$key] = $this->actions[$key];
src/pocketmine/inventory/transaction/InventoryTransaction.php:		$this->actions = $actions;
src/pocketmine/inventory/transaction/InventoryTransaction.php:		if(!isset($this->inventories[$hash = spl_object_hash($inventory)])){
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$this->inventories[$hash] = $inventory;
src/pocketmine/inventory/transaction/InventoryTransaction.php:		foreach($this->actions as $key => $action){
src/pocketmine/inventory/transaction/InventoryTransaction.php:			if(!$action->getTargetItem()->isNull()){
src/pocketmine/inventory/transaction/InventoryTransaction.php:				$needItems[] = $action->getTargetItem();
src/pocketmine/inventory/transaction/InventoryTransaction.php:			if(!$action->isValid($this->source)){
src/pocketmine/inventory/transaction/InventoryTransaction.php:			if(!$action->getSourceItem()->isNull()){
src/pocketmine/inventory/transaction/InventoryTransaction.php:				$haveItems[] = $action->getSourceItem();
src/pocketmine/inventory/transaction/InventoryTransaction.php:				if($needItem->equals($haveItem)){
src/pocketmine/inventory/transaction/InventoryTransaction.php:					$amount = min($needItem->getCount(), $haveItem->getCount());
src/pocketmine/inventory/transaction/InventoryTransaction.php:					$needItem->setCount($needItem->getCount() - $amount);
src/pocketmine/inventory/transaction/InventoryTransaction.php:					$haveItem->setCount($haveItem->getCount() - $amount);
src/pocketmine/inventory/transaction/InventoryTransaction.php:					if($haveItem->getCount() === 0){
src/pocketmine/inventory/transaction/InventoryTransaction.php:					if($needItem->getCount() === 0){
src/pocketmine/inventory/transaction/InventoryTransaction.php:	 * due to the way things like the crafting grid are "implemented" in MCPE 1.2 (a.k.a. hacked-in), we may get
src/pocketmine/inventory/transaction/InventoryTransaction.php:		foreach($this->actions as $key => $action){
src/pocketmine/inventory/transaction/InventoryTransaction.php:				$slotChanges[$h = (spl_object_hash($action->getInventory()) . "@" . $action->getSlot())][] = $action;
src/pocketmine/inventory/transaction/InventoryTransaction.php:				$inventories[$h] = $action->getInventory();
src/pocketmine/inventory/transaction/InventoryTransaction.php:				$slots[$h] = $action->getSlot();
src/pocketmine/inventory/transaction/InventoryTransaction.php:			if(!$inventory->slotExists($slot)){ //this can get hit for crafting tables because the validation happens after this compaction
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$sourceItem = $inventory->getItem($slot);
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$targetItem = $this->findResultItem($sourceItem, $list);
src/pocketmine/inventory/transaction/InventoryTransaction.php:				unset($this->actions[spl_object_hash($action)]);
src/pocketmine/inventory/transaction/InventoryTransaction.php:			if(!$targetItem->equalsExact($sourceItem)){
src/pocketmine/inventory/transaction/InventoryTransaction.php:				$this->addAction(new SlotChangeAction($inventory, $slot, $sourceItem, $targetItem));
src/pocketmine/inventory/transaction/InventoryTransaction.php:			if($action->getSourceItem()->equalsExact($needOrigin)){
src/pocketmine/inventory/transaction/InventoryTransaction.php:			return $candidate->getTargetItem();
src/pocketmine/inventory/transaction/InventoryTransaction.php:		return $this->findResultItem($candidate->getTargetItem(), $newList);
src/pocketmine/inventory/transaction/InventoryTransaction.php:		$this->squashDuplicateSlotChanges();
src/pocketmine/inventory/transaction/InventoryTransaction.php:		$this->matchItems($needItems, $haveItems);
src/pocketmine/inventory/transaction/InventoryTransaction.php:		if(count($this->actions) === 0){
src/pocketmine/inventory/transaction/InventoryTransaction.php:		foreach($this->inventories as $inventory){
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$inventory->sendContents($this->source);
src/pocketmine/inventory/transaction/InventoryTransaction.php:		$ev->call();
src/pocketmine/inventory/transaction/InventoryTransaction.php:		return !$ev->isCancelled();
src/pocketmine/inventory/transaction/InventoryTransaction.php:		if($this->hasExecuted()){
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$this->sendInventories();
src/pocketmine/inventory/transaction/InventoryTransaction.php:		$this->shuffleActions();
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$this->validate();
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$this->sendInventories();
src/pocketmine/inventory/transaction/InventoryTransaction.php:		if(!$this->callExecuteEvent()){
src/pocketmine/inventory/transaction/InventoryTransaction.php:			$this->sendInventories();
src/pocketmine/inventory/transaction/InventoryTransaction.php:		foreach($this->actions as $action){
src/pocketmine/inventory/transaction/InventoryTransaction.php:			if(!$action->onPreExecute($this->source)){
src/pocketmine/inventory/transaction/InventoryTransaction.php:				$this->sendInventories();
src/pocketmine/inventory/transaction/InventoryTransaction.php:		foreach($this->actions as $action){
src/pocketmine/inventory/transaction/InventoryTransaction.php:			if($action->execute($this->source)){
src/pocketmine/inventory/transaction/InventoryTransaction.php:				$action->onExecuteSuccess($this->source);
src/pocketmine/inventory/transaction/InventoryTransaction.php:				$action->onExecuteFail($this->source);
src/pocketmine/inventory/transaction/InventoryTransaction.php:		$this->hasExecuted = true;
src/pocketmine/inventory/transaction/InventoryTransaction.php:		return $this->hasExecuted;
src/pocketmine/inventory/transaction/action/DropItemAction.php:		return !$this->targetItem->isNull();
src/pocketmine/inventory/transaction/action/DropItemAction.php:		$ev = new PlayerDropItemEvent($source, $this->targetItem);
src/pocketmine/inventory/transaction/action/DropItemAction.php:		$ev->call();
src/pocketmine/inventory/transaction/action/DropItemAction.php:		if($ev->isCancelled()){
src/pocketmine/inventory/transaction/action/DropItemAction.php:		return $source->dropItem($this->targetItem);
src/pocketmine/inventory/transaction/action/SlotChangeAction.php:		$this->inventory = $inventory;
src/pocketmine/inventory/transaction/action/SlotChangeAction.php:		$this->inventorySlot = $inventorySlot;
src/pocketmine/inventory/transaction/action/SlotChangeAction.php:		return $this->inventory;
src/pocketmine/inventory/transaction/action/SlotChangeAction.php:		return $this->inventorySlot;
src/pocketmine/inventory/transaction/action/SlotChangeAction.php:			$this->inventory->slotExists($this->inventorySlot) and
src/pocketmine/inventory/transaction/action/SlotChangeAction.php:			$this->inventory->getItem($this->inventorySlot)->equalsExact($this->sourceItem)
src/pocketmine/inventory/transaction/action/SlotChangeAction.php:		$transaction->addInventory($this->inventory);
src/pocketmine/inventory/transaction/action/SlotChangeAction.php:		return $this->inventory->setItem($this->inventorySlot, $this->targetItem, false);
src/pocketmine/inventory/transaction/action/SlotChangeAction.php:		$viewers = $this->inventory->getViewers();
src/pocketmine/inventory/transaction/action/SlotChangeAction.php:		$this->inventory->sendSlot($this->inventorySlot, $viewers);
src/pocketmine/inventory/transaction/action/SlotChangeAction.php:		$this->inventory->sendSlot($this->inventorySlot, $source);
src/pocketmine/inventory/transaction/action/CreativeInventoryAction.php:		$this->actionType = $actionType;
src/pocketmine/inventory/transaction/action/CreativeInventoryAction.php:		return $source->isCreative(true) and
src/pocketmine/inventory/transaction/action/CreativeInventoryAction.php:			($this->actionType === self::TYPE_DELETE_ITEM or Item::getCreativeItemIndex($this->sourceItem) !== -1);
src/pocketmine/inventory/transaction/action/CreativeInventoryAction.php:		return $this->actionType;
src/pocketmine/inventory/transaction/action/InventoryAction.php: * Represents an action involving a change that applies in some way to an inventory or other item-source.
src/pocketmine/inventory/transaction/action/InventoryAction.php:		$this->sourceItem = $sourceItem;
src/pocketmine/inventory/transaction/action/InventoryAction.php:		$this->targetItem = $targetItem;
src/pocketmine/inventory/transaction/action/InventoryAction.php:		return clone $this->sourceItem;
src/pocketmine/inventory/transaction/action/InventoryAction.php:		return clone $this->targetItem;
src/pocketmine/inventory/transaction/action/InventoryAction.php:	 * Performs actions needed to complete the inventory-action server-side. Returns if it was successful. Will return
src/pocketmine/inventory/transaction/action/InventoryAction.php:	 * Performs additional actions when this inventory-action completed successfully.
src/pocketmine/inventory/transaction/action/InventoryAction.php:	 * Performs additional actions when this inventory-action did not complete successfully.
src/pocketmine/inventory/EntityInventoryEventProcessor.php:		$this->entity = $entity;
src/pocketmine/inventory/EntityInventoryEventProcessor.php:		$ev = new EntityInventoryChangeEvent($this->entity, $oldItem, $newItem, $slot);
src/pocketmine/inventory/EntityInventoryEventProcessor.php:		$ev->call();
src/pocketmine/inventory/EntityInventoryEventProcessor.php:		if($ev->isCancelled()){
src/pocketmine/inventory/EntityInventoryEventProcessor.php:		return $ev->getNewItem();
src/pocketmine/inventory/DoubleChestInventory.php:		$this->left = $left->getRealInventory();
src/pocketmine/inventory/DoubleChestInventory.php:		$this->right = $right->getRealInventory();
src/pocketmine/inventory/DoubleChestInventory.php:		$items = array_merge($this->left->getContents(true), $this->right->getContents(true));
src/pocketmine/inventory/DoubleChestInventory.php:		return $this->left->getDefaultSize() + $this->right->getDefaultSize();
src/pocketmine/inventory/DoubleChestInventory.php:		return $this->left->getHolder();
src/pocketmine/inventory/DoubleChestInventory.php:		return $index < $this->left->getSize() ? $this->left->getItem($index) : $this->right->getItem($index - $this->left->getSize());
src/pocketmine/inventory/DoubleChestInventory.php:		$old = $this->getItem($index);
src/pocketmine/inventory/DoubleChestInventory.php:		if($index < $this->left->getSize() ? $this->left->setItem($index, $item, $send) : $this->right->setItem($index - $this->left->getSize(), $item, $send)){
src/pocketmine/inventory/DoubleChestInventory.php:			$this->onSlotChange($index, $old, $send);
src/pocketmine/inventory/DoubleChestInventory.php:		$result = $this->left->getContents($includeEmpty);
src/pocketmine/inventory/DoubleChestInventory.php:		$leftSize = $this->left->getSize();
src/pocketmine/inventory/DoubleChestInventory.php:		foreach($this->right->getContents($includeEmpty) as $i => $item){
src/pocketmine/inventory/DoubleChestInventory.php:		$size = $this->getSize();
src/pocketmine/inventory/DoubleChestInventory.php:		$leftSize = $this->left->getSize();
src/pocketmine/inventory/DoubleChestInventory.php:				if(($i < $leftSize and isset($this->left->slots[$i])) or isset($this->right->slots[$i - $leftSize])){
src/pocketmine/inventory/DoubleChestInventory.php:					$this->clear($i, false);
src/pocketmine/inventory/DoubleChestInventory.php:			}elseif(!$this->setItem($i, $items[$i], false)){
src/pocketmine/inventory/DoubleChestInventory.php:				$this->clear($i, false);
src/pocketmine/inventory/DoubleChestInventory.php:			$this->sendContents($this->getViewers());
src/pocketmine/inventory/DoubleChestInventory.php:		if(count($this->getViewers()) === 1 and $this->right->getHolder()->isValid()){
src/pocketmine/inventory/DoubleChestInventory.php:			$this->right->broadcastBlockEventPacket(true);
src/pocketmine/inventory/DoubleChestInventory.php:		if(count($this->getViewers()) === 1 and $this->right->getHolder()->isValid()){
src/pocketmine/inventory/DoubleChestInventory.php:			$this->right->broadcastBlockEventPacket(false);
src/pocketmine/inventory/DoubleChestInventory.php:		return $this->left;
src/pocketmine/inventory/DoubleChestInventory.php:		return $this->right;
src/pocketmine/inventory/DoubleChestInventory.php:		$this->left = null;
src/pocketmine/inventory/DoubleChestInventory.php:		$this->right = null;
src/pocketmine/inventory/ArmorInventoryEventProcessor.php:		$this->entity = $entity;
src/pocketmine/inventory/ArmorInventoryEventProcessor.php:		$ev = new EntityArmorChangeEvent($this->entity, $oldItem, $newItem, $slot);
src/pocketmine/inventory/ArmorInventoryEventProcessor.php:		$ev->call();
src/pocketmine/inventory/ArmorInventoryEventProcessor.php:		if($ev->isCancelled()){
src/pocketmine/inventory/ArmorInventoryEventProcessor.php:		return $ev->getNewItem();
src/pocketmine/inventory/ChestInventory.php:		return $this->holder;
src/pocketmine/inventory/ChestInventory.php:		if(count($this->getViewers()) === 1 and $this->getHolder()->isValid()){
src/pocketmine/inventory/ChestInventory.php:			$this->broadcastBlockEventPacket(true);
src/pocketmine/inventory/ChestInventory.php:			$this->getHolder()->getLevelNonNull()->broadcastLevelSoundEvent($this->getHolder()->add(0.5, 0.5, 0.5), $this->getOpenSound());
src/pocketmine/inventory/ChestInventory.php:		if(count($this->getViewers()) === 1 and $this->getHolder()->isValid()){
src/pocketmine/inventory/ChestInventory.php:			$this->broadcastBlockEventPacket(false);
src/pocketmine/inventory/ChestInventory.php:			$this->getHolder()->getLevelNonNull()->broadcastLevelSoundEvent($this->getHolder()->add(0.5, 0.5, 0.5), $this->getCloseSound());
src/pocketmine/inventory/ChestInventory.php:		$holder = $this->getHolder();
src/pocketmine/inventory/ChestInventory.php:		$pk->x = (int) $holder->x;
src/pocketmine/inventory/ChestInventory.php:		$pk->y = (int) $holder->y;
src/pocketmine/inventory/ChestInventory.php:		$pk->z = (int) $holder->z;
src/pocketmine/inventory/ChestInventory.php:		$pk->eventType = 1; //it's always 1 for a chest
src/pocketmine/inventory/ChestInventory.php:		$pk->eventData = $isOpen ? 1 : 0;
src/pocketmine/inventory/ChestInventory.php:		$holder->getLevelNonNull()->broadcastPacketToViewers($holder, $pk);
src/pocketmine/inventory/AnvilInventory.php:		parent::__construct($pos->asPosition());
src/pocketmine/inventory/AnvilInventory.php:		return $this->holder;
src/pocketmine/inventory/AnvilInventory.php:		foreach($this->getContents() as $item){
src/pocketmine/inventory/AnvilInventory.php:			$who->dropItem($item);
src/pocketmine/inventory/AnvilInventory.php:		$this->clearAll();
src/pocketmine/inventory/ShapelessRecipe.php:			$this->addIngredient($item);
src/pocketmine/inventory/ShapelessRecipe.php:		$this->results = array_map(function(Item $item) : Item{ return clone $item; }, $results);
src/pocketmine/inventory/ShapelessRecipe.php:		return array_map(function(Item $item) : Item{ return clone $item; }, $this->results);
src/pocketmine/inventory/ShapelessRecipe.php:		return $this->getResults();
src/pocketmine/inventory/ShapelessRecipe.php:		if(count($this->ingredients) + $item->getCount() > 9){
src/pocketmine/inventory/ShapelessRecipe.php:		while($item->getCount() > 0){
src/pocketmine/inventory/ShapelessRecipe.php:			$this->ingredients[] = $item->pop();
src/pocketmine/inventory/ShapelessRecipe.php:		foreach($this->ingredients as $index => $ingredient){
src/pocketmine/inventory/ShapelessRecipe.php:			if($item->getCount() <= 0){
src/pocketmine/inventory/ShapelessRecipe.php:			if($ingredient->equals($item, !$item->hasAnyDamageValue(), $item->hasCompoundTag())){
src/pocketmine/inventory/ShapelessRecipe.php:				unset($this->ingredients[$index]);
src/pocketmine/inventory/ShapelessRecipe.php:				$item->pop();
src/pocketmine/inventory/ShapelessRecipe.php:		return array_map(function(Item $item) : Item{ return clone $item; }, $this->ingredients);
src/pocketmine/inventory/ShapelessRecipe.php:		foreach($this->ingredients as $ingredient){
src/pocketmine/inventory/ShapelessRecipe.php:			$count += $ingredient->getCount();
src/pocketmine/inventory/ShapelessRecipe.php:		$manager->registerShapelessRecipe($this);
src/pocketmine/inventory/ShapelessRecipe.php:		//don't pack the ingredients - shapeless recipes require that each ingredient be in a separate slot
src/pocketmine/inventory/ShapelessRecipe.php:		$input = $grid->getContents();
src/pocketmine/inventory/ShapelessRecipe.php:		foreach($this->ingredients as $needItem){
src/pocketmine/inventory/ShapelessRecipe.php:				if($haveItem->equals($needItem, !$needItem->hasAnyDamageValue(), $needItem->hasCompoundTag()) and $haveItem->getCount() >= $needItem->getCount()){
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_REPAIR_ITEM = "00000000-0000-0000-0000-000000000001";
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_MAP_EXTENDING = "D392B075-4BA1-40AE-8789-AF868D56F6CE";
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_MAP_EXTENDING_CARTOGRAPHY = "8B36268C-1829-483C-A0F1-993B7156A8F2";
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_MAP_CLONING = "85939755-BA10-4D9D-A4CC-EFB7A8E943C4";
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_MAP_CLONING_CARTOGRAPHY = "442D85ED-8272-4543-A6F1-418F90DED05D";
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_MAP_UPGRADING = "AECD2294-4B94-434B-8667-4499BB2C9327";
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_MAP_UPGRADING_CARTOGRAPHY = "98C84B38-1085-46BD-B1CE-DD38C159E6CC";
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_BOOK_CLONING = "D1CA6B84-338E-4F2F-9C6B-76CC8B4BD98D";
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_BANNER_DUPLICATE = "B5C5D105-75A2-4076-AF2B-923EA2BF4BF0";
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_BANNER_ADD_PATTERN = "D81AAEAF-E172-4440-9225-868DF030D27B";
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_FIREWORKS = "00000000-0000-0000-0000-000000000002";
src/pocketmine/inventory/MultiRecipe.php:	public const TYPE_MAP_LOCKING_CARTOGRAPHY = "602234E4-CAC1-4353-8BB7-B1EBFF70024B";
src/pocketmine/inventory/MultiRecipe.php:		$this->uuid = $uuid;
src/pocketmine/inventory/CraftingManager.php:		$this->init();
src/pocketmine/inventory/CraftingManager.php:			$this->registerShapelessRecipe(new ShapelessRecipe(
src/pocketmine/inventory/CraftingManager.php:			$this->registerShapedRecipe(new ShapedRecipe(
src/pocketmine/inventory/CraftingManager.php:			$this->registerFurnaceRecipe(new FurnaceRecipe(
src/pocketmine/inventory/CraftingManager.php:		$this->buildCraftingDataCache();
src/pocketmine/inventory/CraftingManager.php:		Timings::$craftingDataCacheRebuildTimer->startTiming();
src/pocketmine/inventory/CraftingManager.php:		$pk->cleanRecipes = true;
src/pocketmine/inventory/CraftingManager.php:		foreach($this->shapelessRecipes as $list){
src/pocketmine/inventory/CraftingManager.php:				$pk->addShapelessRecipe($recipe);
src/pocketmine/inventory/CraftingManager.php:		foreach($this->shapedRecipes as $list){
src/pocketmine/inventory/CraftingManager.php:				$pk->addShapedRecipe($recipe);
src/pocketmine/inventory/CraftingManager.php:		foreach($this->furnaceRecipes as $recipe){
src/pocketmine/inventory/CraftingManager.php:			$pk->addFurnaceRecipe($recipe);
src/pocketmine/inventory/CraftingManager.php:		$pk->encode();
src/pocketmine/inventory/CraftingManager.php:		$batch->addPacket($pk);
src/pocketmine/inventory/CraftingManager.php:		$batch->setCompressionLevel(Server::getInstance()->networkCompressionLevel);
src/pocketmine/inventory/CraftingManager.php:		$batch->encode();
src/pocketmine/inventory/CraftingManager.php:		$this->craftingDataCache = $batch;
src/pocketmine/inventory/CraftingManager.php:		Timings::$craftingDataCacheRebuildTimer->stopTiming();
src/pocketmine/inventory/CraftingManager.php:	 * Returns a pre-compressed CraftingDataPacket for sending to players. Rebuilds the cache if it is not found.
src/pocketmine/inventory/CraftingManager.php:		if($this->craftingDataCache === null){
src/pocketmine/inventory/CraftingManager.php:			$this->buildCraftingDataCache();
src/pocketmine/inventory/CraftingManager.php:		return $this->craftingDataCache;
src/pocketmine/inventory/CraftingManager.php:		($retval = $i1->getId() <=> $i2->getId()) === 0 && ($retval = $i1->getDamage() <=> $i2->getDamage()) === 0 && ($retval = $i1->getCount() <=> $i2->getCount()) === 0;
src/pocketmine/inventory/CraftingManager.php:				if($item->equals($otherItem)){
src/pocketmine/inventory/CraftingManager.php:					$otherItem->setCount($otherItem->getCount() + $item->getCount());
src/pocketmine/inventory/CraftingManager.php:			//this reduces accuracy of hash, but it's necessary to deal with recipe book shift-clicking stupidity
src/pocketmine/inventory/CraftingManager.php:			$o->setCount(1);
src/pocketmine/inventory/CraftingManager.php:		return $this->shapelessRecipes;
src/pocketmine/inventory/CraftingManager.php:		return $this->shapedRecipes;
src/pocketmine/inventory/CraftingManager.php:		return $this->furnaceRecipes;
src/pocketmine/inventory/CraftingManager.php:		$this->shapedRecipes[self::hashOutputs($recipe->getResults())][] = $recipe;
src/pocketmine/inventory/CraftingManager.php:		$this->craftingDataCache = null;
src/pocketmine/inventory/CraftingManager.php:		$this->shapelessRecipes[self::hashOutputs($recipe->getResults())][] = $recipe;
src/pocketmine/inventory/CraftingManager.php:		$this->craftingDataCache = null;
src/pocketmine/inventory/CraftingManager.php:		$input = $recipe->getInput();
src/pocketmine/inventory/CraftingManager.php:		$this->furnaceRecipes[$input->getId() . ":" . ($input->hasAnyDamageValue() ? "?" : $input->getDamage())] = $recipe;
src/pocketmine/inventory/CraftingManager.php:		$this->craftingDataCache = null;
src/pocketmine/inventory/CraftingManager.php:		if(isset($this->shapedRecipes[$outputHash])){
src/pocketmine/inventory/CraftingManager.php:			foreach($this->shapedRecipes[$outputHash] as $recipe){
src/pocketmine/inventory/CraftingManager.php:				if($recipe->matchesCraftingGrid($grid)){
src/pocketmine/inventory/CraftingManager.php:		if(isset($this->shapelessRecipes[$outputHash])){
src/pocketmine/inventory/CraftingManager.php:			foreach($this->shapelessRecipes[$outputHash] as $recipe){
src/pocketmine/inventory/CraftingManager.php:				if($recipe->matchesCraftingGrid($grid)){
src/pocketmine/inventory/CraftingManager.php:	 * @phpstan-return \Generator<int, CraftingRecipe, void, void>
src/pocketmine/inventory/CraftingManager.php:		if(isset($this->shapedRecipes[$outputHash])){
src/pocketmine/inventory/CraftingManager.php:			foreach($this->shapedRecipes[$outputHash] as $recipe){
src/pocketmine/inventory/CraftingManager.php:		if(isset($this->shapelessRecipes[$outputHash])){
src/pocketmine/inventory/CraftingManager.php:			foreach($this->shapelessRecipes[$outputHash] as $recipe){
src/pocketmine/inventory/CraftingManager.php:		return $this->furnaceRecipes[$input->getId() . ":" . $input->getDamage()] ?? $this->furnaceRecipes[$input->getId() . ":?"] ?? null;
src/pocketmine/inventory/CraftingManager.php:		$recipe->registerToCraftingManager($this);
src/pocketmine/inventory/FurnaceInventory.php:		return $this->holder;
src/pocketmine/inventory/FurnaceInventory.php:		return $this->getItem(2);
src/pocketmine/inventory/FurnaceInventory.php:		return $this->getItem(1);
src/pocketmine/inventory/FurnaceInventory.php:		return $this->getItem(0);
src/pocketmine/inventory/FurnaceInventory.php:		return $this->setItem(2, $item);
src/pocketmine/inventory/FurnaceInventory.php:		return $this->setItem(1, $item);
src/pocketmine/inventory/FurnaceInventory.php:		return $this->setItem(0, $item);
src/pocketmine/inventory/FurnaceRecipe.php:		$this->output = clone $result;
src/pocketmine/inventory/FurnaceRecipe.php:		$this->ingredient = clone $ingredient;
src/pocketmine/inventory/FurnaceRecipe.php:		$this->ingredient = clone $item;
src/pocketmine/inventory/FurnaceRecipe.php:		return clone $this->ingredient;
src/pocketmine/inventory/FurnaceRecipe.php:		return clone $this->output;
src/pocketmine/inventory/FurnaceRecipe.php:		$manager->registerFurnaceRecipe($this);
src/pocketmine/inventory/ContainerInventory.php:		$this->holder = $holder;
src/pocketmine/inventory/ContainerInventory.php:		$pk->windowId = $who->getWindowId($this);
src/pocketmine/inventory/ContainerInventory.php:		$pk->type = $this->getNetworkType();
src/pocketmine/inventory/ContainerInventory.php:		$holder = $this->getHolder();
src/pocketmine/inventory/ContainerInventory.php:		$pk->x = $pk->y = $pk->z = 0;
src/pocketmine/inventory/ContainerInventory.php:		$pk->entityUniqueId = -1;
src/pocketmine/inventory/ContainerInventory.php:			$pk->entityUniqueId = $holder->getId();
src/pocketmine/inventory/ContainerInventory.php:			$pk->x = $holder->getFloorX();
src/pocketmine/inventory/ContainerInventory.php:			$pk->y = $holder->getFloorY();
src/pocketmine/inventory/ContainerInventory.php:			$pk->z = $holder->getFloorZ();
src/pocketmine/inventory/ContainerInventory.php:		$who->dataPacket($pk);
src/pocketmine/inventory/ContainerInventory.php:		$this->sendContents($who);
src/pocketmine/inventory/ContainerInventory.php:		$pk->windowId = $who->getWindowId($this);
src/pocketmine/inventory/ContainerInventory.php:		$pk->server = $who->getClosingWindowId() !== $pk->windowId;
src/pocketmine/inventory/ContainerInventory.php:		$who->dataPacket($pk);
src/pocketmine/inventory/ContainerInventory.php:		return $this->holder;
src/pocketmine/inventory/BaseInventory.php:	 * @phpstan-var \SplFixedArray<Item|null>
src/pocketmine/inventory/BaseInventory.php:		$this->slots = new \SplFixedArray($size ?? $this->getDefaultSize());
src/pocketmine/inventory/BaseInventory.php:		$this->title = $title ?? $this->getName();
src/pocketmine/inventory/BaseInventory.php:		$this->setContents($items, false);
src/pocketmine/inventory/BaseInventory.php:		return $this->title;
src/pocketmine/inventory/BaseInventory.php:		return $this->slots->getSize();
src/pocketmine/inventory/BaseInventory.php:		$this->slots->setSize($size);
src/pocketmine/inventory/BaseInventory.php:		return $this->maxStackSize;
src/pocketmine/inventory/BaseInventory.php:		return $this->slots[$index] !== null ? clone $this->slots[$index] : ItemFactory::get(Item::AIR, 0, 0);
src/pocketmine/inventory/BaseInventory.php:		foreach($this->slots as $i => $slot){
src/pocketmine/inventory/BaseInventory.php:		if(count($items) > $this->getSize()){
src/pocketmine/inventory/BaseInventory.php:			$items = array_slice($items, 0, $this->getSize(), true);
src/pocketmine/inventory/BaseInventory.php:		for($i = 0, $size = $this->getSize(); $i < $size; ++$i){
src/pocketmine/inventory/BaseInventory.php:				if($this->slots[$i] !== null){
src/pocketmine/inventory/BaseInventory.php:					$this->clear($i, false);
src/pocketmine/inventory/BaseInventory.php:				if(!$this->setItem($i, $items[$i], false)){
src/pocketmine/inventory/BaseInventory.php:					$this->clear($i, false);
src/pocketmine/inventory/BaseInventory.php:			$this->sendContents($this->getViewers());
src/pocketmine/inventory/BaseInventory.php:		foreach($this->getContents() as $item){
src/pocketmine/inventory/BaseInventory.php:			$level->dropItem($position, $item);
src/pocketmine/inventory/BaseInventory.php:		$this->clearAll();
src/pocketmine/inventory/BaseInventory.php:		if($item->isNull()){
src/pocketmine/inventory/BaseInventory.php:		$oldItem = $this->getItem($index);
src/pocketmine/inventory/BaseInventory.php:		if($this->eventProcessor !== null){
src/pocketmine/inventory/BaseInventory.php:			$newItem = $this->eventProcessor->onSlotChange($this, $index, $oldItem, $item);
src/pocketmine/inventory/BaseInventory.php:		$this->slots[$index] = $newItem->isNull() ? null : $newItem;
src/pocketmine/inventory/BaseInventory.php:		$this->onSlotChange($index, $oldItem, $send);
src/pocketmine/inventory/BaseInventory.php:		$count = max(1, $item->getCount());
src/pocketmine/inventory/BaseInventory.php:		$checkDamage = !$item->hasAnyDamageValue();
src/pocketmine/inventory/BaseInventory.php:		$checkTags = $item->hasCompoundTag();
src/pocketmine/inventory/BaseInventory.php:		foreach($this->getContents() as $i){
src/pocketmine/inventory/BaseInventory.php:			if($item->equals($i, $checkDamage, $checkTags)){
src/pocketmine/inventory/BaseInventory.php:				$count -= $i->getCount();
src/pocketmine/inventory/BaseInventory.php:		$checkDamage = !$item->hasAnyDamageValue();
src/pocketmine/inventory/BaseInventory.php:		$checkTags = $item->hasCompoundTag();
src/pocketmine/inventory/BaseInventory.php:		foreach($this->getContents() as $index => $i){
src/pocketmine/inventory/BaseInventory.php:			if($item->equals($i, $checkDamage, $checkTags)){
src/pocketmine/inventory/BaseInventory.php:		$checkDamage = !$item->hasAnyDamageValue();
src/pocketmine/inventory/BaseInventory.php:		$checkTags = $item->hasCompoundTag();
src/pocketmine/inventory/BaseInventory.php:		foreach($this->getContents() as $index => $i){
src/pocketmine/inventory/BaseInventory.php:			if($item->equals($i, $checkDamage, $checkTags)){
src/pocketmine/inventory/BaseInventory.php:				$this->clear($index);
src/pocketmine/inventory/BaseInventory.php:		$count = $exact ? $item->getCount() : max(1, $item->getCount());
src/pocketmine/inventory/BaseInventory.php:		$checkDamage = $exact || !$item->hasAnyDamageValue();
src/pocketmine/inventory/BaseInventory.php:		$checkTags = $exact || $item->hasCompoundTag();
src/pocketmine/inventory/BaseInventory.php:		foreach($this->getContents() as $index => $i){
src/pocketmine/inventory/BaseInventory.php:			if($item->equals($i, $checkDamage, $checkTags) and ($i->getCount() === $count or (!$exact and $i->getCount() > $count))){
src/pocketmine/inventory/BaseInventory.php:		return -1;
src/pocketmine/inventory/BaseInventory.php:		foreach($this->slots as $i => $slot){
src/pocketmine/inventory/BaseInventory.php:			if($slot === null or $slot->isNull()){
src/pocketmine/inventory/BaseInventory.php:		return -1;
src/pocketmine/inventory/BaseInventory.php:		return $this->slots[$index] === null or $this->slots[$index]->isNull();
src/pocketmine/inventory/BaseInventory.php:		$count = $item->getCount();
src/pocketmine/inventory/BaseInventory.php:		for($i = 0, $size = $this->getSize(); $i < $size; ++$i){
src/pocketmine/inventory/BaseInventory.php:			$slot = $this->getItem($i);
src/pocketmine/inventory/BaseInventory.php:			if($item->equals($slot)){
src/pocketmine/inventory/BaseInventory.php:				if(($diff = min($slot->getMaxStackSize(), $item->getMaxStackSize()) - $slot->getCount()) > 0){
src/pocketmine/inventory/BaseInventory.php:					$count -= $diff;
src/pocketmine/inventory/BaseInventory.php:			}elseif($slot->isNull()){
src/pocketmine/inventory/BaseInventory.php:				$count -= min($this->getMaxStackSize(), $item->getMaxStackSize());
src/pocketmine/inventory/BaseInventory.php:			if(!$slot->isNull()){
src/pocketmine/inventory/BaseInventory.php:		for($i = 0, $size = $this->getSize(); $i < $size; ++$i){
src/pocketmine/inventory/BaseInventory.php:			$item = $this->getItem($i);
src/pocketmine/inventory/BaseInventory.php:			if($item->isNull()){
src/pocketmine/inventory/BaseInventory.php:				if($slot->equals($item) and $item->getCount() < $item->getMaxStackSize()){
src/pocketmine/inventory/BaseInventory.php:					$amount = min($item->getMaxStackSize() - $item->getCount(), $slot->getCount(), $this->getMaxStackSize());
src/pocketmine/inventory/BaseInventory.php:						$slot->setCount($slot->getCount() - $amount);
src/pocketmine/inventory/BaseInventory.php:						$item->setCount($item->getCount() + $amount);
src/pocketmine/inventory/BaseInventory.php:						$this->setItem($i, $item);
src/pocketmine/inventory/BaseInventory.php:						if($slot->getCount() <= 0){
src/pocketmine/inventory/BaseInventory.php:					$amount = min($slot->getMaxStackSize(), $slot->getCount(), $this->getMaxStackSize());
src/pocketmine/inventory/BaseInventory.php:					$slot->setCount($slot->getCount() - $amount);
src/pocketmine/inventory/BaseInventory.php:					$item->setCount($amount);
src/pocketmine/inventory/BaseInventory.php:					$this->setItem($slotIndex, $item);
src/pocketmine/inventory/BaseInventory.php:					if($slot->getCount() <= 0){
src/pocketmine/inventory/BaseInventory.php:			if(!$slot->isNull()){
src/pocketmine/inventory/BaseInventory.php:		for($i = 0, $size = $this->getSize(); $i < $size; ++$i){
src/pocketmine/inventory/BaseInventory.php:			$item = $this->getItem($i);
src/pocketmine/inventory/BaseInventory.php:			if($item->isNull()){
src/pocketmine/inventory/BaseInventory.php:				if($slot->equals($item, !$slot->hasAnyDamageValue(), $slot->hasCompoundTag())){
src/pocketmine/inventory/BaseInventory.php:					$amount = min($item->getCount(), $slot->getCount());
src/pocketmine/inventory/BaseInventory.php:					$slot->setCount($slot->getCount() - $amount);
src/pocketmine/inventory/BaseInventory.php:					$item->setCount($item->getCount() - $amount);
src/pocketmine/inventory/BaseInventory.php:					$this->setItem($i, $item);
src/pocketmine/inventory/BaseInventory.php:					if($slot->getCount() <= 0){
src/pocketmine/inventory/BaseInventory.php:		return $this->setItem($index, ItemFactory::get(Item::AIR, 0, 0), $send);
src/pocketmine/inventory/BaseInventory.php:		for($i = 0, $size = $this->getSize(); $i < $size; ++$i){
src/pocketmine/inventory/BaseInventory.php:			$this->clear($i, false);
src/pocketmine/inventory/BaseInventory.php:			$this->sendContents($this->getViewers());
src/pocketmine/inventory/BaseInventory.php:		return $this->viewers;
src/pocketmine/inventory/BaseInventory.php:		foreach($this->viewers as $hash => $viewer){
src/pocketmine/inventory/BaseInventory.php:			$viewer->removeWindow($this, $force);
src/pocketmine/inventory/BaseInventory.php:			unset($this->viewers[$hash]);
src/pocketmine/inventory/BaseInventory.php:		$this->maxStackSize = $size;
src/pocketmine/inventory/BaseInventory.php:		$ev->call();
src/pocketmine/inventory/BaseInventory.php:		if($ev->isCancelled()){
src/pocketmine/inventory/BaseInventory.php:		$this->onOpen($who);
src/pocketmine/inventory/BaseInventory.php:		$this->onClose($who);
src/pocketmine/inventory/BaseInventory.php:		$this->viewers[spl_object_hash($who)] = $who;
src/pocketmine/inventory/BaseInventory.php:		unset($this->viewers[spl_object_hash($who)]);
src/pocketmine/inventory/BaseInventory.php:			$this->sendSlot($index, $this->getViewers());
src/pocketmine/inventory/BaseInventory.php:		$pk->items = array_map([ItemStackWrapper::class, 'legacy'], $this->getContents(true));
src/pocketmine/inventory/BaseInventory.php:			if(($id = $player->getWindowId($this)) === ContainerIds::NONE){
src/pocketmine/inventory/BaseInventory.php:				$this->close($player);
src/pocketmine/inventory/BaseInventory.php:			$pk->windowId = $id;
src/pocketmine/inventory/BaseInventory.php:			$player->dataPacket($pk);
src/pocketmine/inventory/BaseInventory.php:		$pk->inventorySlot = $index;
src/pocketmine/inventory/BaseInventory.php:		$pk->item = ItemStackWrapper::legacy($this->getItem($index));
src/pocketmine/inventory/BaseInventory.php:			if(($id = $player->getWindowId($this)) === ContainerIds::NONE){
src/pocketmine/inventory/BaseInventory.php:				$this->close($player);
src/pocketmine/inventory/BaseInventory.php:			$pk->windowId = $id;
src/pocketmine/inventory/BaseInventory.php:			$player->dataPacket($pk);
src/pocketmine/inventory/BaseInventory.php:		return $slot >= 0 and $slot < $this->slots->getSize();
src/pocketmine/inventory/BaseInventory.php:		return $this->eventProcessor;
src/pocketmine/inventory/BaseInventory.php:		$this->eventProcessor = $eventProcessor;
src/pocketmine/inventory/EnderChestInventory.php:		$this->holder->setComponents($enderChest->getFloorX(), $enderChest->getFloorY(), $enderChest->getFloorZ());
src/pocketmine/inventory/EnderChestInventory.php:		$this->holder->setLevel($enderChest->getLevelNonNull());
src/pocketmine/inventory/EnderChestInventory.php:		return $this->holder;
src/pocketmine/inventory/ArmorInventory.php:		$this->holder = $holder;
src/pocketmine/inventory/ArmorInventory.php:		return $this->holder;
src/pocketmine/inventory/ArmorInventory.php:		return $this->getItem(self::SLOT_HEAD);
src/pocketmine/inventory/ArmorInventory.php:		return $this->getItem(self::SLOT_CHEST);
src/pocketmine/inventory/ArmorInventory.php:		return $this->getItem(self::SLOT_LEGS);
src/pocketmine/inventory/ArmorInventory.php:		return $this->getItem(self::SLOT_FEET);
src/pocketmine/inventory/ArmorInventory.php:		return $this->setItem(self::SLOT_HEAD, $helmet);
src/pocketmine/inventory/ArmorInventory.php:		return $this->setItem(self::SLOT_CHEST, $chestplate);
src/pocketmine/inventory/ArmorInventory.php:		return $this->setItem(self::SLOT_LEGS, $leggings);
src/pocketmine/inventory/ArmorInventory.php:		return $this->setItem(self::SLOT_FEET, $boots);
src/pocketmine/inventory/ArmorInventory.php:		$pk->entityRuntimeId = $this->getHolder()->getId();
src/pocketmine/inventory/ArmorInventory.php:		$pk->head = $this->getHelmet();
src/pocketmine/inventory/ArmorInventory.php:		$pk->chest = $this->getChestplate();
src/pocketmine/inventory/ArmorInventory.php:		$pk->legs = $this->getLeggings();
src/pocketmine/inventory/ArmorInventory.php:		$pk->feet = $this->getBoots();
src/pocketmine/inventory/ArmorInventory.php:		$pk->encode();
src/pocketmine/inventory/ArmorInventory.php:			if($player === $this->getHolder()){
src/pocketmine/inventory/ArmorInventory.php:				$pk2->windowId = $player->getWindowId($this);
src/pocketmine/inventory/ArmorInventory.php:				$pk2->inventorySlot = $index;
src/pocketmine/inventory/ArmorInventory.php:				$pk2->item = ItemStackWrapper::legacy($this->getItem($index));
src/pocketmine/inventory/ArmorInventory.php:				$player->dataPacket($pk2);
src/pocketmine/inventory/ArmorInventory.php:				$player->dataPacket($pk);
src/pocketmine/inventory/ArmorInventory.php:		$pk->entityRuntimeId = $this->getHolder()->getId();
src/pocketmine/inventory/ArmorInventory.php:		$pk->head = $this->getHelmet();
src/pocketmine/inventory/ArmorInventory.php:		$pk->chest = $this->getChestplate();
src/pocketmine/inventory/ArmorInventory.php:		$pk->legs = $this->getLeggings();
src/pocketmine/inventory/ArmorInventory.php:		$pk->feet = $this->getBoots();
src/pocketmine/inventory/ArmorInventory.php:		$pk->encode();
src/pocketmine/inventory/ArmorInventory.php:			if($player === $this->getHolder()){
src/pocketmine/inventory/ArmorInventory.php:				$pk2->windowId = $player->getWindowId($this);
src/pocketmine/inventory/ArmorInventory.php:				$pk2->items = array_map([ItemStackWrapper::class, 'legacy'], $this->getContents(true));
src/pocketmine/inventory/ArmorInventory.php:				$player->dataPacket($pk2);
src/pocketmine/inventory/ArmorInventory.php:				$player->dataPacket($pk);
src/pocketmine/inventory/ArmorInventory.php:		return array_merge(parent::getViewers(), $this->holder->getViewers());
src/pocketmine/inventory/PlayerCursorInventory.php:		$this->holder = $holder;
src/pocketmine/inventory/PlayerCursorInventory.php:		return $this->holder;
src/pocketmine/inventory/PlayerInventory.php:		$this->holder = $player;
src/pocketmine/inventory/PlayerInventory.php:		$holder = $this->getHolder();
src/pocketmine/inventory/PlayerInventory.php:		if(!$this->isHotbarSlot($hotbarSlot)){
src/pocketmine/inventory/PlayerInventory.php:				$this->sendContents($holder);
src/pocketmine/inventory/PlayerInventory.php:			$ev = new PlayerItemHeldEvent($holder, $this->getItem($hotbarSlot), $hotbarSlot);
src/pocketmine/inventory/PlayerInventory.php:			$ev->call();
src/pocketmine/inventory/PlayerInventory.php:			if($ev->isCancelled()){
src/pocketmine/inventory/PlayerInventory.php:				$this->sendHeldItem($holder);
src/pocketmine/inventory/PlayerInventory.php:		$this->setHeldItemIndex($hotbarSlot, false);
src/pocketmine/inventory/PlayerInventory.php:		return $slot >= 0 and $slot <= $this->getHotbarSize();
src/pocketmine/inventory/PlayerInventory.php:		if(!$this->isHotbarSlot($slot)){
src/pocketmine/inventory/PlayerInventory.php:			throw new \InvalidArgumentException("$slot is not a valid hotbar slot index (expected 0 - " . ($this->getHotbarSize() - 1) . ")");
src/pocketmine/inventory/PlayerInventory.php:		$this->throwIfNotHotbarSlot($hotbarSlot);
src/pocketmine/inventory/PlayerInventory.php:		return $this->getItem($hotbarSlot);
src/pocketmine/inventory/PlayerInventory.php:		return $this->itemInHandIndex;
src/pocketmine/inventory/PlayerInventory.php:	 * @param int  $hotbarSlot 0-8 index of the hotbar slot to hold
src/pocketmine/inventory/PlayerInventory.php:		$this->throwIfNotHotbarSlot($hotbarSlot);
src/pocketmine/inventory/PlayerInventory.php:		$this->itemInHandIndex = $hotbarSlot;
src/pocketmine/inventory/PlayerInventory.php:		if($this->getHolder() instanceof Player and $send){
src/pocketmine/inventory/PlayerInventory.php:			$this->sendHeldItem($this->getHolder());
src/pocketmine/inventory/PlayerInventory.php:		$this->sendHeldItem($this->getHolder()->getViewers());
src/pocketmine/inventory/PlayerInventory.php:	 * Returns the currently-held item.
src/pocketmine/inventory/PlayerInventory.php:		return $this->getHotbarSlotItem($this->itemInHandIndex);
src/pocketmine/inventory/PlayerInventory.php:	 * Sets the item in the currently-held slot to the specified item.
src/pocketmine/inventory/PlayerInventory.php:		return $this->setItem($this->getHeldItemIndex(), $item);
src/pocketmine/inventory/PlayerInventory.php:	 * Sends the currently-held item to specified targets.
src/pocketmine/inventory/PlayerInventory.php:		$item = $this->getItemInHand();
src/pocketmine/inventory/PlayerInventory.php:		$pk->entityRuntimeId = $this->getHolder()->getId();
src/pocketmine/inventory/PlayerInventory.php:		$pk->item = $item;
src/pocketmine/inventory/PlayerInventory.php:		$pk->inventorySlot = $pk->hotbarSlot = $this->getHeldItemIndex();
src/pocketmine/inventory/PlayerInventory.php:		$pk->windowId = ContainerIds::INVENTORY;
src/pocketmine/inventory/PlayerInventory.php:			$target->dataPacket($pk);
src/pocketmine/inventory/PlayerInventory.php:			if($target === $this->getHolder()){
src/pocketmine/inventory/PlayerInventory.php:				$this->sendSlot($this->getHeldItemIndex(), $target);
src/pocketmine/inventory/PlayerInventory.php:			$this->getHolder()->getLevelNonNull()->getServer()->broadcastPacket($target, $pk);
src/pocketmine/inventory/PlayerInventory.php:			if(in_array($this->getHolder(), $target, true)){
src/pocketmine/inventory/PlayerInventory.php:				$this->sendSlot($this->getHeldItemIndex(), $this->getHolder());
src/pocketmine/inventory/PlayerInventory.php:		$holder = $this->getHolder();
src/pocketmine/inventory/PlayerInventory.php:			throw new \LogicException("Cannot send creative inventory contents to non-player inventory holder");
src/pocketmine/inventory/PlayerInventory.php:		$holder->sendDataPacket(CreativeContentPacket::create(array_map(function(Item $item) use (&$nextEntryId) : CreativeContentEntry{
src/pocketmine/inventory/PlayerInventory.php:		}, $holder->isSpectator() ? [] : Item::getCreativeItems()))); //fill it for all gamemodes except spectator
src/pocketmine/inventory/PlayerInventory.php:		return $this->holder;
src/pocketmine/inventory/Inventory.php:	 * Returns the first slot number containing an item with the same ID, damage (if not any-damage), NBT (if not empty)
src/pocketmine/inventory/Inventory.php:	 * Returns the first empty slot, or -1 if not found
src/pocketmine/inventory/CraftingGrid.php:		$this->holder = $holder;
src/pocketmine/inventory/CraftingGrid.php:		$this->gridWidth = $gridWidth;
src/pocketmine/inventory/CraftingGrid.php:		return $this->gridWidth;
src/pocketmine/inventory/CraftingGrid.php:		return $this->getGridWidth() ** 2;
src/pocketmine/inventory/CraftingGrid.php:			$this->seekRecipeBounds();
src/pocketmine/inventory/CraftingGrid.php:		//we can't send a slot of a client-sided inventory window
src/pocketmine/inventory/CraftingGrid.php:		return $this->holder;
src/pocketmine/inventory/CraftingGrid.php:		for($y = 0; $y < $this->gridWidth; ++$y){
src/pocketmine/inventory/CraftingGrid.php:			for($x = 0; $x < $this->gridWidth; ++$x){
src/pocketmine/inventory/CraftingGrid.php:				if(!$this->isSlotEmpty($y * $this->gridWidth + $x)){
src/pocketmine/inventory/CraftingGrid.php:			$this->startX = $minX;
src/pocketmine/inventory/CraftingGrid.php:			$this->xLen = $maxX - $minX + 1;
src/pocketmine/inventory/CraftingGrid.php:			$this->startY = $minY;
src/pocketmine/inventory/CraftingGrid.php:			$this->yLen = $maxY - $minY + 1;
src/pocketmine/inventory/CraftingGrid.php:			$this->startX = $this->xLen = $this->startY = $this->yLen = null;
src/pocketmine/inventory/CraftingGrid.php:		if($this->startX !== null and $this->startY !== null){
src/pocketmine/inventory/CraftingGrid.php:			return $this->getItem(($y + $this->startY) * $this->gridWidth + ($x + $this->startX));
src/pocketmine/inventory/CraftingGrid.php:		return $this->xLen ?? 0;
src/pocketmine/inventory/CraftingGrid.php:		return $this->yLen ?? 0;
src/pocketmine/Achievement.php:			$translation = new TranslationContainer("chat.type.achievement", [$player->getDisplayName(), TextFormat::GREEN . Achievement::$list[$achievementId]["name"] . TextFormat::RESET]);
src/pocketmine/Achievement.php:			if(Server::getInstance()->getConfigBool("announce-player-achievements", true)){
src/pocketmine/Achievement.php:				Server::getInstance()->broadcastMessage($translation);
src/pocketmine/Achievement.php:				$player->sendMessage($translation);
src/pocketmine/network/rcon/RCON.php:		$this->server = $server;
src/pocketmine/network/rcon/RCON.php:		$this->server->getLogger()->info("Starting remote control listener");
src/pocketmine/network/rcon/RCON.php:		$this->socket = $socket;
src/pocketmine/network/rcon/RCON.php:		if(!socket_set_option($this->socket, SOL_SOCKET, SO_REUSEADDR, 1)){
src/pocketmine/network/rcon/RCON.php:		if(!@socket_bind($this->socket, $interface, $port) or !@socket_listen($this->socket, 5)){
src/pocketmine/network/rcon/RCON.php:		socket_set_block($this->socket);
src/pocketmine/network/rcon/RCON.php:		[$this->ipcMainSocket, $this->ipcThreadSocket] = $ipc;
src/pocketmine/network/rcon/RCON.php:		$this->server->getTickSleeper()->addNotifier($notifier, function() : void{
src/pocketmine/network/rcon/RCON.php:			$this->check();
src/pocketmine/network/rcon/RCON.php:		$this->instance = new RCONInstance($this->socket, $password, max(1, $maxClients), $this->server->getLogger(), $this->ipcThreadSocket, $notifier);
src/pocketmine/network/rcon/RCON.php:		socket_getsockname($this->socket, $addr, $port);
src/pocketmine/network/rcon/RCON.php:		$this->server->getLogger()->info("RCON running on $addr:$port");
src/pocketmine/network/rcon/RCON.php:		$this->instance->close();
src/pocketmine/network/rcon/RCON.php:		socket_write($this->ipcMainSocket, "\x00"); //make select() return
src/pocketmine/network/rcon/RCON.php:		$this->instance->quit();
src/pocketmine/network/rcon/RCON.php:		@socket_close($this->socket);
src/pocketmine/network/rcon/RCON.php:		@socket_close($this->ipcMainSocket);
src/pocketmine/network/rcon/RCON.php:		@socket_close($this->ipcThreadSocket);
src/pocketmine/network/rcon/RCON.php:		$command = $this->instance->cmd;
src/pocketmine/network/rcon/RCON.php:		$ev->call();
src/pocketmine/network/rcon/RCON.php:		if(!$ev->isCancelled()){
src/pocketmine/network/rcon/RCON.php:			$this->server->dispatchCommand($ev->getSender(), $ev->getCommand());
src/pocketmine/network/rcon/RCON.php:		$this->instance->response = TextFormat::clean($response->getMessage());
src/pocketmine/network/rcon/RCON.php:		$this->instance->synchronized(function(RCONInstance $thread) : void{
src/pocketmine/network/rcon/RCON.php:			$thread->notify();
src/pocketmine/network/rcon/RCON.php:		}, $this->instance);
src/pocketmine/network/rcon/RCONInstance.php:		$this->stop = false;
src/pocketmine/network/rcon/RCONInstance.php:		$this->cmd = "";
src/pocketmine/network/rcon/RCONInstance.php:		$this->response = "";
src/pocketmine/network/rcon/RCONInstance.php:		$this->socket = $socket;
src/pocketmine/network/rcon/RCONInstance.php:		$this->password = $password;
src/pocketmine/network/rcon/RCONInstance.php:		$this->maxClients = $maxClients;
src/pocketmine/network/rcon/RCONInstance.php:		$this->logger = $logger;
src/pocketmine/network/rcon/RCONInstance.php:		$this->ipcSocket = $ipcSocket;
src/pocketmine/network/rcon/RCONInstance.php:		$this->notifier = $notifier;
src/pocketmine/network/rcon/RCONInstance.php:		$this->start(PTHREADS_INHERIT_NONE);
src/pocketmine/network/rcon/RCONInstance.php:				$this->logger->debug("Connection error with $ip $port: " . trim(socket_strerror($err)));
src/pocketmine/network/rcon/RCONInstance.php:				$this->logger->debug("Truncated packet from $ip $port (want 4 bytes, have " . strlen($d) . "), disconnecting");
src/pocketmine/network/rcon/RCONInstance.php:			$this->logger->debug("Packet with too-large length header $size from $ip $port, disconnecting");
src/pocketmine/network/rcon/RCONInstance.php:				$this->logger->debug("Connection error with $ip $port: " . trim(socket_strerror($err)));
src/pocketmine/network/rcon/RCONInstance.php:			$this->logger->debug("Truncated packet from $ip $port (want $size bytes, have " . strlen($buf) . "), disconnecting");
src/pocketmine/network/rcon/RCONInstance.php:		$payload = substr($buf, 8, -2); //Strip two null bytes
src/pocketmine/network/rcon/RCONInstance.php:		$this->stop = true;
src/pocketmine/network/rcon/RCONInstance.php:		$this->registerClassLoader();
src/pocketmine/network/rcon/RCONInstance.php:		while(!$this->stop){
src/pocketmine/network/rcon/RCONInstance.php:			$r["main"] = $this->socket; //this is ugly, but we need to be able to mass-select()
src/pocketmine/network/rcon/RCONInstance.php:			$r["ipc"] = $this->ipcSocket;
src/pocketmine/network/rcon/RCONInstance.php:					if($sock === $this->socket){
src/pocketmine/network/rcon/RCONInstance.php:						if(($client = socket_accept($this->socket)) !== false){
src/pocketmine/network/rcon/RCONInstance.php:							if(count($clients) >= $this->maxClients){
src/pocketmine/network/rcon/RCONInstance.php:					}elseif($sock === $this->ipcSocket){
src/pocketmine/network/rcon/RCONInstance.php:						$p = $this->readPacket($sock, $requestID, $packetType, $payload);
src/pocketmine/network/rcon/RCONInstance.php:								if($payload === $this->password){
src/pocketmine/network/rcon/RCONInstance.php:									$this->logger->info("Successful Rcon connection from: /$addr:$port");
src/pocketmine/network/rcon/RCONInstance.php:									$this->writePacket($sock, $requestID, 2, "");
src/pocketmine/network/rcon/RCONInstance.php:									$this->writePacket($sock, -1, 2, "");
src/pocketmine/network/rcon/RCONInstance.php:									$this->cmd = ltrim($payload);
src/pocketmine/network/rcon/RCONInstance.php:									$this->synchronized(function() : void{
src/pocketmine/network/rcon/RCONInstance.php:										$this->notifier->wakeupSleeper();
src/pocketmine/network/rcon/RCONInstance.php:										$this->wait();
src/pocketmine/network/rcon/RCONInstance.php:									$this->writePacket($sock, $requestID, 0, str_replace("\n", "\r\n", trim($this->response)));
src/pocketmine/network/rcon/RCONInstance.php:									$this->response = "";
src/pocketmine/network/rcon/RCONInstance.php:									$this->cmd = "";
src/pocketmine/network/rcon/RCONInstance.php:				$this->disconnectClient($client);
src/pocketmine/network/rcon/RCONInstance.php:			$this->disconnectClient($client);
src/pocketmine/network/rcon/RCONInstance.php:		$this->logger->info("Disconnected client: /$ip:$port");
src/pocketmine/network/Network.php: * Network-related classes
src/pocketmine/network/Network.php:		$this->server = $server;
src/pocketmine/network/Network.php:		$this->upload += $upload;
src/pocketmine/network/Network.php:		$this->download += $download;
src/pocketmine/network/Network.php:		return $this->upload;
src/pocketmine/network/Network.php:		return $this->download;
src/pocketmine/network/Network.php:		$this->upload = 0;
src/pocketmine/network/Network.php:		$this->download = 0;
src/pocketmine/network/Network.php:		return $this->interfaces;
src/pocketmine/network/Network.php:		foreach($this->interfaces as $interface){
src/pocketmine/network/Network.php:			$interface->process();
src/pocketmine/network/Network.php:		$interface->process();
src/pocketmine/network/Network.php:		$ev->call();
src/pocketmine/network/Network.php:		if(!$ev->isCancelled()){
src/pocketmine/network/Network.php:			$interface->start();
src/pocketmine/network/Network.php:			$this->interfaces[$hash = spl_object_hash($interface)] = $interface;
src/pocketmine/network/Network.php:				$this->advancedInterfaces[$hash] = $interface;
src/pocketmine/network/Network.php:				$interface->setNetwork($this);
src/pocketmine/network/Network.php:			$interface->setName($this->name);
src/pocketmine/network/Network.php:		(new NetworkInterfaceUnregisterEvent($interface))->call();
src/pocketmine/network/Network.php:		unset($this->interfaces[$hash = spl_object_hash($interface)], $this->advancedInterfaces[$hash]);
src/pocketmine/network/Network.php:		$this->name = $name;
src/pocketmine/network/Network.php:		foreach($this->interfaces as $interface){
src/pocketmine/network/Network.php:			$interface->setName($this->name);
src/pocketmine/network/Network.php:		return $this->name;
src/pocketmine/network/Network.php:		foreach($this->interfaces as $interface){
src/pocketmine/network/Network.php:			$interface->setName($this->name);
src/pocketmine/network/Network.php:		return $this->server;
src/pocketmine/network/Network.php:		foreach($this->advancedInterfaces as $interface){
src/pocketmine/network/Network.php:			$interface->sendRawPacket($address, $port, $payload);
src/pocketmine/network/Network.php:	 * Blocks an IP address from the main interface. Setting timeout to -1 will block it forever
src/pocketmine/network/Network.php:		foreach($this->advancedInterfaces as $interface){
src/pocketmine/network/Network.php:			$interface->blockAddress($address, $timeout);
src/pocketmine/network/Network.php:		foreach($this->advancedInterfaces as $interface){
src/pocketmine/network/Network.php:			$interface->unblockAddress($address);
src/pocketmine/network/upnp/UPnP.php:		if(!is_object($com->StaticPortMappingCollection)){
src/pocketmine/network/upnp/UPnP.php:		$com->StaticPortMappingCollection->Add($port, "UDP", $port, $myLocalIP, true, "PocketMine-MP");
src/pocketmine/network/upnp/UPnP.php:			if(!is_object($com->StaticPortMappingCollection)){
src/pocketmine/network/upnp/UPnP.php:			$com->StaticPortMappingCollection->Remove($port, "UDP");
src/pocketmine/network/query/QueryHandler.php:		$this->server = Server::getInstance();
src/pocketmine/network/query/QueryHandler.php:		$this->server->getLogger()->info($this->server->getLanguage()->translateString("pocketmine.server.query.start"));
src/pocketmine/network/query/QueryHandler.php:		$addr = $this->server->getIp();
src/pocketmine/network/query/QueryHandler.php:		$port = $this->server->getPort();
src/pocketmine/network/query/QueryHandler.php:		$this->server->getLogger()->info($this->server->getLanguage()->translateString("pocketmine.server.query.info", [$port]));
src/pocketmine/network/query/QueryHandler.php:		$this->regenerateToken();
src/pocketmine/network/query/QueryHandler.php:		$this->lastToken = $this->token;
src/pocketmine/network/query/QueryHandler.php:		$this->server->getLogger()->info($this->server->getLanguage()->translateString("pocketmine.server.query.running", [$addr, $port]));
src/pocketmine/network/query/QueryHandler.php:		$this->server->getLogger()->debug("[Query] $message");
src/pocketmine/network/query/QueryHandler.php:		$this->lastToken = $this->token;
src/pocketmine/network/query/QueryHandler.php:		$this->token = random_bytes(16);
src/pocketmine/network/query/QueryHandler.php:				$reply .= self::getTokenString($this->token, $address) . "\x00";
src/pocketmine/network/query/QueryHandler.php:				$interface->sendRawPacket($address, $port, $reply);
src/pocketmine/network/query/QueryHandler.php:				if($token !== ($t1 = self::getTokenString($this->token, $address)) and $token !== ($t2 = self::getTokenString($this->lastToken, $address))){
src/pocketmine/network/query/QueryHandler.php:					$this->debug("Bad token $token from $address $port, expected $t1 or $t2");
src/pocketmine/network/query/QueryHandler.php:					$reply .= $this->server->getQueryInformation()->getLongQuery();
src/pocketmine/network/query/QueryHandler.php:					$reply .= $this->server->getQueryInformation()->getShortQuery();
src/pocketmine/network/query/QueryHandler.php:				$interface->sendRawPacket($address, $port, $reply);
src/pocketmine/network/query/QueryHandler.php:				$this->debug("Unhandled packet from $address $port: " . base64_encode($packet));
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:		while(!$stream->feof()){
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$list[] = $stream->getNbtCompoundRoot();
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:		while(!$legacyStateMapReader->feof()){
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$id = $legacyStateMapReader->getString();
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$meta = $legacyStateMapReader->getLShort();
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$offset = $legacyStateMapReader->getOffset();
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$state = $nbtReader->read($legacyStateMapReader->getBuffer(), false, $offset);
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$legacyStateMapReader->setOffset($offset);
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:		 * @var int[][] $idToStatesMap string id -> int[] list of candidate state indices
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$idToStatesMap[$state->getString("name")][] = $k;
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$id = $legacyIdMap[$pair->getId()] ?? null;
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:				throw new \RuntimeException("No legacy ID matches " . $pair->getId());
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$data = $pair->getMeta();
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$mappedState = $pair->getBlockState();
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$mappedState->setName("");
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:			$mappedName = $mappedState->getString("name");
src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php:				if($mappedState->equals($networkState)){
src/pocketmine/network/mcpe/convert/ItemTranslator.php: * This class handles translation between network item ID+metadata to PocketMine-MP internal ID+metadata and vice versa.
src/pocketmine/network/mcpe/convert/ItemTranslator.php:	 * @phpstan-var array<int, int>
src/pocketmine/network/mcpe/convert/ItemTranslator.php:	 * @phpstan-var array<int, int>
src/pocketmine/network/mcpe/convert/ItemTranslator.php:	 * @phpstan-var array<int, array<int, int>>
src/pocketmine/network/mcpe/convert/ItemTranslator.php:	 * @phpstan-var array<int, array{int, int}>
src/pocketmine/network/mcpe/convert/ItemTranslator.php:		/** @phpstan-var array<string, int> $simpleMappings */
src/pocketmine/network/mcpe/convert/ItemTranslator.php:		/** @phpstan-var array<string, array{int, int}> $complexMappings */
src/pocketmine/network/mcpe/convert/ItemTranslator.php:	 * @phpstan-param array<string, int> $simpleMappings
src/pocketmine/network/mcpe/convert/ItemTranslator.php:	 * @phpstan-param array<string, array<int, int>> $complexMappings
src/pocketmine/network/mcpe/convert/ItemTranslator.php:		foreach($dictionary->getEntries() as $entry){
src/pocketmine/network/mcpe/convert/ItemTranslator.php:			$stringId = $entry->getStringId();
src/pocketmine/network/mcpe/convert/ItemTranslator.php:			$netId = $entry->getNumericId();
src/pocketmine/network/mcpe/convert/ItemTranslator.php:				$this->complexCoreToNetMapping[$id][$meta] = $netId;
src/pocketmine/network/mcpe/convert/ItemTranslator.php:				$this->complexNetToCoreMapping[$netId] = [$id, $meta];
src/pocketmine/network/mcpe/convert/ItemTranslator.php:				$this->simpleCoreToNetMapping[$simpleMappings[$stringId]] = $netId;
src/pocketmine/network/mcpe/convert/ItemTranslator.php:				$this->simpleNetToCoreMapping[$netId] = $simpleMappings[$stringId];
src/pocketmine/network/mcpe/convert/ItemTranslator.php:	 * @phpstan-return array{int, int}
src/pocketmine/network/mcpe/convert/ItemTranslator.php:		if(isset($this->complexCoreToNetMapping[$internalId][$internalMeta])){
src/pocketmine/network/mcpe/convert/ItemTranslator.php:			return [$this->complexCoreToNetMapping[$internalId][$internalMeta], 0];
src/pocketmine/network/mcpe/convert/ItemTranslator.php:		if(array_key_exists($internalId, $this->simpleCoreToNetMapping)){
src/pocketmine/network/mcpe/convert/ItemTranslator.php:			return [$this->simpleCoreToNetMapping[$internalId], $internalMeta];
src/pocketmine/network/mcpe/convert/ItemTranslator.php:	 * @phpstan-return array{int, int}
src/pocketmine/network/mcpe/convert/ItemTranslator.php:		if(isset($this->complexNetToCoreMapping[$networkId])){
src/pocketmine/network/mcpe/convert/ItemTranslator.php:				throw new \UnexpectedValueException("Unexpected non-zero network meta on complex item mapping");
src/pocketmine/network/mcpe/convert/ItemTranslator.php:			return $this->complexNetToCoreMapping[$networkId];
src/pocketmine/network/mcpe/convert/ItemTranslator.php:		if(isset($this->simpleNetToCoreMapping[$networkId])){
src/pocketmine/network/mcpe/convert/ItemTranslator.php:			return [$this->simpleNetToCoreMapping[$networkId], $networkMeta];
src/pocketmine/network/mcpe/convert/ItemTranslator.php:	 * @phpstan-return array{int, int}
src/pocketmine/network/mcpe/convert/ItemTranslator.php:			return $this->fromNetworkId($networkId, $networkMeta);
src/pocketmine/network/mcpe/convert/ItemTranslator.php:		[$id, $meta] = $this->fromNetworkId($networkId, 0, $isComplexMapping);
src/pocketmine/network/mcpe/convert/ItemTranslator.php:		return [$id, $isComplexMapping ? $meta : -1];
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:	 * @phpstan-var list<ItemTypeEntry>
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:	 * @phpstan-var array<int, string>
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:	 * @phpstan-var array<string, int>
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:		$this->itemTypes = $itemTypes;
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:		foreach($this->itemTypes as $type){
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:			$this->stringToIntMap[$type->getStringId()] = $type->getNumericId();
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:			$this->intToStringIdMap[$type->getNumericId()] = $type->getStringId();
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:	 * @phpstan-return list<ItemTypeEntry>
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:		return $this->itemTypes;
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:		if(!array_key_exists($stringId, $this->stringToIntMap)){
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:		return $this->stringToIntMap[$stringId];
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:		if(!array_key_exists($intId, $this->intToStringIdMap)){
src/pocketmine/network/mcpe/convert/ItemTypeDictionary.php:		return $this->intToStringIdMap[$intId];
src/pocketmine/network/mcpe/convert/R12ToCurrentBlockMapEntry.php:		$this->id = $id;
src/pocketmine/network/mcpe/convert/R12ToCurrentBlockMapEntry.php:		$this->meta = $meta;
src/pocketmine/network/mcpe/convert/R12ToCurrentBlockMapEntry.php:		$this->blockState = $blockState;
src/pocketmine/network/mcpe/convert/R12ToCurrentBlockMapEntry.php:		return $this->id;
src/pocketmine/network/mcpe/convert/R12ToCurrentBlockMapEntry.php:		return $this->meta;
src/pocketmine/network/mcpe/convert/R12ToCurrentBlockMapEntry.php:		return $this->blockState;
src/pocketmine/network/mcpe/convert/R12ToCurrentBlockMapEntry.php:		return "id=$this->id, meta=$this->meta, nbt=$this->blockState";
src/pocketmine/network/mcpe/RakLibInterface.php:	 * Sometimes this gets changed when the MCPE-layer protocol gets broken to the point where old and new can't
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->server = $server;
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->sleeper = new SleeperNotifier();
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->rakLib = new RakLibServer(
src/pocketmine/network/mcpe/RakLibInterface.php:			$this->server->getLogger(),
src/pocketmine/network/mcpe/RakLibInterface.php:			new InternetAddress($this->server->getIp(), $this->server->getPort(), 4),
src/pocketmine/network/mcpe/RakLibInterface.php:			(int) $this->server->getProperty("network.max-mtu-size", 1492),
src/pocketmine/network/mcpe/RakLibInterface.php:			$this->sleeper
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->interface = new ServerHandler($this->rakLib, $this);
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->server->getTickSleeper()->addNotifier($this->sleeper, function() : void{
src/pocketmine/network/mcpe/RakLibInterface.php:			$this->process();
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->rakLib->start(PTHREADS_INHERIT_CONSTANTS); //HACK: MainLogger needs constants for exception logging
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->network = $network;
src/pocketmine/network/mcpe/RakLibInterface.php:		while($this->interface->handlePacket()){}
src/pocketmine/network/mcpe/RakLibInterface.php:		if(!$this->rakLib->isRunning() and !$this->rakLib->isShutdown()){
src/pocketmine/network/mcpe/RakLibInterface.php:		if(isset($this->players[$identifier])){
src/pocketmine/network/mcpe/RakLibInterface.php:			$player = $this->players[$identifier];
src/pocketmine/network/mcpe/RakLibInterface.php:			unset($this->identifiers[spl_object_hash($player)]);
src/pocketmine/network/mcpe/RakLibInterface.php:			unset($this->players[$identifier]);
src/pocketmine/network/mcpe/RakLibInterface.php:			unset($this->identifiersACK[$identifier]);
src/pocketmine/network/mcpe/RakLibInterface.php:			$player->close($player->getLeaveMessage(), $reason);
src/pocketmine/network/mcpe/RakLibInterface.php:		if(isset($this->identifiers[$h = spl_object_hash($player)])){
src/pocketmine/network/mcpe/RakLibInterface.php:			unset($this->players[$this->identifiers[$h]]);
src/pocketmine/network/mcpe/RakLibInterface.php:			unset($this->identifiersACK[$this->identifiers[$h]]);
src/pocketmine/network/mcpe/RakLibInterface.php:			$this->interface->closeSession($this->identifiers[$h], $reason);
src/pocketmine/network/mcpe/RakLibInterface.php:			unset($this->identifiers[$h]);
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->server->getTickSleeper()->removeNotifier($this->sleeper);
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->interface->shutdown();
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->server->getTickSleeper()->removeNotifier($this->sleeper);
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->interface->emergencyShutdown();
src/pocketmine/network/mcpe/RakLibInterface.php:		$ev->call();
src/pocketmine/network/mcpe/RakLibInterface.php:		$class = $ev->getPlayerClass();
src/pocketmine/network/mcpe/RakLibInterface.php:		$player = new $class($this, $ev->getAddress(), $ev->getPort());
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->players[$identifier] = $player;
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->identifiersACK[$identifier] = 0;
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->identifiers[spl_object_hash($player)] = $identifier;
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->server->addPlayer($player);
src/pocketmine/network/mcpe/RakLibInterface.php:		if(isset($this->players[$identifier])){
src/pocketmine/network/mcpe/RakLibInterface.php:			$player = $this->players[$identifier];
src/pocketmine/network/mcpe/RakLibInterface.php:			$address = $player->getAddress();
src/pocketmine/network/mcpe/RakLibInterface.php:				if($packet->buffer !== ""){
src/pocketmine/network/mcpe/RakLibInterface.php:					$pk = new BatchPacket($packet->buffer);
src/pocketmine/network/mcpe/RakLibInterface.php:					$player->handleDataPacket($pk);
src/pocketmine/network/mcpe/RakLibInterface.php:				$logger = $this->server->getLogger();
src/pocketmine/network/mcpe/RakLibInterface.php:				$logger->debug("Packet " . (isset($pk) ? get_class($pk) : "unknown") . ": " . base64_encode($packet->buffer));
src/pocketmine/network/mcpe/RakLibInterface.php:				$logger->logException($e);
src/pocketmine/network/mcpe/RakLibInterface.php:				$player->close($player->getLeaveMessage(), "Internal server error");
src/pocketmine/network/mcpe/RakLibInterface.php:				$this->interface->blockAddress($address, 5);
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->interface->blockAddress($address, $timeout);
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->interface->unblockAddress($address);
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->server->handlePacket($this, $address, $port, $payload);
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->interface->sendRaw($address, $port, $payload);
src/pocketmine/network/mcpe/RakLibInterface.php:		$info = $this->server->getQueryInformation();
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->interface->sendOption("name", implode(";",
src/pocketmine/network/mcpe/RakLibInterface.php:				$info->getPlayerCount(),
src/pocketmine/network/mcpe/RakLibInterface.php:				$info->getMaxPlayerCount(),
src/pocketmine/network/mcpe/RakLibInterface.php:				$this->rakLib->getServerId(),
src/pocketmine/network/mcpe/RakLibInterface.php:				$this->server->getName(),
src/pocketmine/network/mcpe/RakLibInterface.php:				Server::getGamemodeName($this->server->getGamemode())
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->interface->sendOption("portChecking", $name);
src/pocketmine/network/mcpe/RakLibInterface.php:		$this->interface->sendOption("packetLimit", $limit);
src/pocketmine/network/mcpe/RakLibInterface.php:			$this->network->addStatistics($v["up"], $v["down"]);
src/pocketmine/network/mcpe/RakLibInterface.php:		if(isset($this->identifiers[$h = spl_object_hash($player)])){
src/pocketmine/network/mcpe/RakLibInterface.php:			$identifier = $this->identifiers[$h];
src/pocketmine/network/mcpe/RakLibInterface.php:			if(!$packet->isEncoded){
src/pocketmine/network/mcpe/RakLibInterface.php:				$packet->encode();
src/pocketmine/network/mcpe/RakLibInterface.php:					$pk->identifierACK = $this->identifiersACK[$identifier]++;
src/pocketmine/network/mcpe/RakLibInterface.php:					$pk->buffer = $packet->buffer;
src/pocketmine/network/mcpe/RakLibInterface.php:					$pk->reliability = PacketReliability::RELIABLE_ORDERED;
src/pocketmine/network/mcpe/RakLibInterface.php:					$pk->orderChannel = 0;
src/pocketmine/network/mcpe/RakLibInterface.php:					if(!isset($packet->__encapsulatedPacket)){
src/pocketmine/network/mcpe/RakLibInterface.php:						$packet->__encapsulatedPacket = new CachedEncapsulatedPacket;
src/pocketmine/network/mcpe/RakLibInterface.php:						$packet->__encapsulatedPacket->identifierACK = null;
src/pocketmine/network/mcpe/RakLibInterface.php:						$packet->__encapsulatedPacket->buffer = $packet->buffer;
src/pocketmine/network/mcpe/RakLibInterface.php:						$packet->__encapsulatedPacket->reliability = PacketReliability::RELIABLE_ORDERED;
src/pocketmine/network/mcpe/RakLibInterface.php:						$packet->__encapsulatedPacket->orderChannel = 0;
src/pocketmine/network/mcpe/RakLibInterface.php:					$pk = $packet->__encapsulatedPacket;
src/pocketmine/network/mcpe/RakLibInterface.php:				$this->interface->sendEncapsulated($identifier, $pk, ($needACK ? RakLib::FLAG_NEED_ACK : 0) | ($immediate ? RakLib::PRIORITY_IMMEDIATE : RakLib::PRIORITY_NORMAL));
src/pocketmine/network/mcpe/RakLibInterface.php:				return $pk->identifierACK;
src/pocketmine/network/mcpe/RakLibInterface.php:				$this->server->batchPackets([$player], [$packet], true, $immediate);
src/pocketmine/network/mcpe/RakLibInterface.php:		if(isset($this->players[$identifier])){
src/pocketmine/network/mcpe/RakLibInterface.php:			$this->players[$identifier]->updatePing($pingMS);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		return $this->get($this->getUnsignedVarInt());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putUnsignedVarInt(strlen($v));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->put($v);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		//This is actually two little-endian longs: UUID Most followed by UUID Least
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$part1 = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$part0 = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$part3 = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$part2 = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLInt($uuid->getPart(1));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLInt($uuid->getPart(0));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLInt($uuid->getPart(3));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLInt($uuid->getPart(2));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$skinId = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$skinResourcePatch = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$skinData = $this->getSkinImage();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$animationCount = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$skinImage = $this->getSkinImage();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$animationType = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$animationFrames = $this->getLFloat();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$expressionType = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$capeData = $this->getSkinImage();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$geometryData = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$animationData = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$premium = $this->getBool();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$persona = $this->getBool();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$capeOnClassic = $this->getBool();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$capeId = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$fullSkinId = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$armSize = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$skinColor = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$personaPieceCount = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$pieceId = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$pieceType = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$packId = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$isDefaultPiece = $this->getBool();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$productId = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$pieceTintColorCount = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$pieceType = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$colorCount = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				$colors[] = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($skin->getSkinId());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($skin->getResourcePatch());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putSkinImage($skin->getSkinImage());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLInt(count($skin->getAnimations()));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		foreach($skin->getAnimations() as $animation){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putSkinImage($animation->getImage());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLInt($animation->getType());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLFloat($animation->getFrames());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLInt($animation->getExpressionType());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putSkinImage($skin->getCapeImage());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($skin->getGeometryData());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($skin->getAnimationData());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putBool($skin->isPremium());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putBool($skin->isPersona());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putBool($skin->isPersonaCapeOnClassic());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($skin->getCapeId());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($skin->getFullSkinId());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($skin->getArmSize());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($skin->getSkinColor());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLInt(count($skin->getPersonaPieces()));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		foreach($skin->getPersonaPieces() as $piece){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putString($piece->getPieceId());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putString($piece->getPieceType());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putString($piece->getPackId());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putBool($piece->isDefaultPiece());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putString($piece->getProductId());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLInt(count($skin->getPieceTintColors()));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		foreach($skin->getPieceTintColors() as $tint){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putString($tint->getPieceType());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLInt(count($tint->getColors()));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			foreach($tint->getColors() as $color){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				$this->putString($color);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$width = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$height = $this->getLInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$data = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLInt($image->getWidth());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLInt($image->getHeight());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($image->getData());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$netId = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$auxValue = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		[$id, $meta] = ItemTranslator::getInstance()->fromNetworkId($netId, $netData);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$nbtLen = $this->getLShort();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$nbtDataVersion = $this->getByte();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$decodedNBT = (new NetworkLittleEndianNBTStream())->read($this->buffer, false, $this->offset, 512);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		for($i = 0, $canPlaceOn = $this->getVarInt(); $i < $canPlaceOn; ++$i){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		for($i = 0, $canDestroy = $this->getVarInt(); $i < $canDestroy; ++$i){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		if($netId === ItemTypeDictionary::getInstance()->fromStringId("minecraft:shield")){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->getVarLong(); //"blocking tick" (ffs mojang)
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			if($nbt->hasTag(self::DAMAGE_TAG, IntTag::class)){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				$meta = $nbt->getInt(self::DAMAGE_TAG);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				$nbt->removeTag(self::DAMAGE_TAG);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				if(($conflicted = $nbt->getTag(self::DAMAGE_TAG_CONFLICT_RESOLUTION)) !== null){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$nbt->removeTag(self::DAMAGE_TAG_CONFLICT_RESOLUTION);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$conflicted->setName(self::DAMAGE_TAG);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$nbt->setTag($conflicted);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				}elseif($nbt->count() === 0){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		if($item->getId() === 0){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putVarInt(0);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		[$netId, $netData] = ItemTranslator::getInstance()->toNetworkId($item->getId(), $item->getDamage());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt($netId);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$auxValue = (($netData & 0x7fff) << 8) | $item->getCount();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt($auxValue);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		if($item->hasCompoundTag()){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$nbt = clone $item->getNamedTag();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		if($item instanceof Durable and $item->getDamage() > 0){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				if(($existing = $nbt->getTag(self::DAMAGE_TAG)) !== null){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$nbt->removeTag(self::DAMAGE_TAG);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$existing->setName(self::DAMAGE_TAG_CONFLICT_RESOLUTION);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$nbt->setTag($existing);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$nbt->setInt(self::DAMAGE_TAG, $item->getDamage());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLShort(0xffff);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putByte(1); //TODO: NBT data version (?)
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->put((new NetworkLittleEndianNBTStream())->write($nbt));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLShort(0);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt(0); //CanPlaceOn entry count (TODO)
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt(0); //CanDestroy entry count (TODO)
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		if($netId === ItemTypeDictionary::getInstance()->fromStringId("minecraft:shield")){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putVarLong(0); //"blocking tick" (ffs mojang)
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$netId = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$netData = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		[$id, $meta] = ItemTranslator::getInstance()->fromNetworkIdWithWildcardHandling($netId, $netData);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$count = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		if($item->isNull()){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putVarInt(0);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			if($item->hasAnyDamageValue()){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				[$netId, ] = ItemTranslator::getInstance()->toNetworkId($item->getId(), 0);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				[$netId, $netData] = ItemTranslator::getInstance()->toNetworkId($item->getId(), $item->getDamage());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putVarInt($netId);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putVarInt($netData);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putVarInt($item->getCount());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:	 * @phpstan-return array<int, mixed>|array<int, array{0: int, 1: mixed}>
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$count = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$key = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$type = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$value = $this->getByte();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$value = $this->getSignedLShort();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$value = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$value = $this->getLFloat();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$value = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$value = (new NetworkLittleEndianNBTStream())->read($this->buffer, false, $this->offset, 512);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->getSignedBlockPosition($value->x, $value->y, $value->z);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$value = $this->getVarLong();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$value = $this->getVector3();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:	 * @phpstan-param array<int, array{0: int, 1: mixed}> $metadata
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putUnsignedVarInt(count($metadata));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putUnsignedVarInt($key); //data key
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putUnsignedVarInt($d[0]); //data type
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->putByte($d[1]);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->putLShort($d[1]); //SIGNED short!
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->putVarInt($d[1]);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->putLFloat($d[1]);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->putString($d[1]);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->put((new NetworkLittleEndianNBTStream())->write($d[1]));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:						$this->putSignedBlockPosition($v->x, $v->y, $v->z);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:						$this->putSignedBlockPosition(0, 0, 0);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->putVarLong($d[1]);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->putVector3Nullable($d[1]);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$count = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$min = $this->getLFloat();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$max = $this->getLFloat();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$current = $this->getLFloat();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$default = $this->getLFloat();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$name = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				$attr->setMinValue($min);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				$attr->setMaxValue($max);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				$attr->setValue($current);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:				$attr->setDefaultValue($default);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putUnsignedVarInt(count($attributes));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLFloat($attribute->getMinValue());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLFloat($attribute->getMaxValue());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLFloat($attribute->getValue());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLFloat($attribute->getDefaultValue());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putString($attribute->getName());
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		return $this->getVarLong();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarLong($eid);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		return $this->getUnsignedVarLong();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putUnsignedVarLong($eid);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$x = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$y = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$z = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt($x);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putUnsignedVarInt($y);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt($z);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$x = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$y = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$z = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt($x);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt($y);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt($z);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:	 * Reads a floating-point Vector3 object with coordinates rounded to 4 decimal places.
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$x = $this->getLFloat();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$y = $this->getLFloat();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$z = $this->getLFloat();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:	 * Writes a floating-point Vector3 object, or 3x zero if null is given.
src/pocketmine/network/mcpe/NetworkBinaryStream.php:	 * For all other purposes, use the non-nullable version.
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putVector3($vector);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLFloat(0.0);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLFloat(0.0);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putLFloat(0.0);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:	 * Writes a floating-point Vector3 object
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLFloat($vector->x);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLFloat($vector->y);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putLFloat($vector->z);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		return ($this->getByte() * (360 / 256));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putByte((int) ($rotation / (360 / 256)));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:	 * @phpstan-return array<string, array{0: int, 1: bool|int|float}>
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$count = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$name = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$type = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$value = $this->getBool();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$value = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$value = $this->getLFloat();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:	 * @phpstan-param array<string, array{0: int, 1: bool|int|float}> $rules
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putUnsignedVarInt(count($rules));
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putString($name);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putUnsignedVarInt($rule[0]);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->putBool($rule[1]);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->putUnsignedVarInt($rule[1]);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:					$this->putLFloat($rule[1]);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$fromEntityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$toEntityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$type = $this->getByte();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$immediate = $this->getBool();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$causedByRider = $this->getBool();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putEntityUniqueId($link->fromEntityUniqueId);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putEntityUniqueId($link->toEntityUniqueId);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putByte($link->type);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putBool($link->immediate);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putBool($link->causedByRider);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->type = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->uuid = $this->getUUID();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->requestId = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		if($result->type === CommandOriginData::ORIGIN_DEV_CONSOLE or $result->type === CommandOriginData::ORIGIN_TEST){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$result->playerEntityUniqueId = $this->getVarLong();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putUnsignedVarInt($data->type);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putUUID($data->uuid);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($data->requestId);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		if($data->type === CommandOriginData::ORIGIN_DEV_CONSOLE or $data->type === CommandOriginData::ORIGIN_TEST){
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->putVarLong($data->playerEntityUniqueId);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->paletteName = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->ignoreEntities = $this->getBool();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->ignoreBlocks = $this->getBool();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->getBlockPosition($result->structureSizeX, $result->structureSizeY, $result->structureSizeZ);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->getBlockPosition($result->structureOffsetX, $result->structureOffsetY, $result->structureOffsetZ);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->lastTouchedByPlayerID = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->rotation = $this->getByte();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->mirror = $this->getByte();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->integrityValue = $this->getFloat();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->integritySeed = $this->getInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->pivot = $this->getVector3();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($structureSettings->paletteName);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putBool($structureSettings->ignoreEntities);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putBool($structureSettings->ignoreBlocks);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putBlockPosition($structureSettings->structureSizeX, $structureSettings->structureSizeY, $structureSettings->structureSizeZ);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putBlockPosition($structureSettings->structureOffsetX, $structureSettings->structureOffsetY, $structureSettings->structureOffsetZ);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putEntityUniqueId($structureSettings->lastTouchedByPlayerID);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putByte($structureSettings->rotation);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putByte($structureSettings->mirror);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putFloat($structureSettings->integrityValue);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putInt($structureSettings->integritySeed);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVector3($structureSettings->pivot);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->structureName = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->structureDataField = $this->getString();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->includePlayers = $this->getBool();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->showBoundingBox = $this->getBool();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->structureBlockType = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->structureSettings = $this->getStructureSettings();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$result->structureRedstoneSaveMove = $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($structureEditorData->structureName);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putString($structureEditorData->structureDataField);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putBool($structureEditorData->includePlayers);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putBool($structureEditorData->showBoundingBox);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt($structureEditorData->structureBlockType);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putStructureSettings($structureEditorData->structureSettings);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt($structureEditorData->structureRedstoneSaveMove);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$offset = $this->getOffset();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$result = (new NetworkLittleEndianNBTStream())->read($this->getBuffer(), false, $offset, 512);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:			$this->setOffset($offset);
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$root = $this->getNbtRoot();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		return $this->getVarInt();
src/pocketmine/network/mcpe/NetworkBinaryStream.php:		$this->putVarInt($id);
src/pocketmine/network/mcpe/CachedEncapsulatedPacket.php:		return $this->internalData ?? ($this->internalData = parent::toInternalBinary());
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		$this->server = $server;
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		$this->player = $player;
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		if(!$this->player->isConnected()){
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		$timings->startTiming();
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		$packet->decode();
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		if(!$packet->feof() and !$packet->mayHaveUnreadBytes()){
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:			$remains = substr($packet->buffer, $packet->offset);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:			$this->server->getLogger()->debug("Still " . strlen($remains) . " bytes unread in " . $packet->getName() . ": 0x" . bin2hex($remains));
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		$ev = new DataPacketReceiveEvent($this->player, $packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		$ev->call();
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		if(!$ev->isCancelled() and !$packet->handle($this)){
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:			$this->server->getLogger()->debug("Unhandled " . $packet->getName() . " received from " . $this->player->getName() . ": " . base64_encode($packet->buffer));
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		$timings->stopTiming();
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleLogin($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleResourcePackClientResponse($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		if($packet->type === TextPacket::TYPE_CHAT){
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:			return $this->player->chat($packet->message);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleMovePlayer($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleEntityEvent($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleInventoryTransaction($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleMobEquipment($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleInteract($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleBlockPickRequest($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handlePlayerAction($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleAnimate($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleRespawn($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleContainerClose($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleAdventureSettings($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleBlockEntityData($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleSetPlayerGameType($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		$this->player->setViewDistance($packet->radius);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleItemFrameDropItem($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->chat($packet->command);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleResourcePackChunkRequest($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->changeSkin(SkinAdapterSingleton::get()->fromSkinData($packet->skin), $packet->newSkinName, $packet->oldSkinName);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleBookEdit($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->onFormSubmit($packet->formId, self::stupid_json_decode($packet->formData, true));
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:			$lastComma = -1;
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:					$part = substr($raw, $lastComma + 1, $i - ($lastComma + 1));
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:					if(trim($part) === ""){ //regular parts will have quotes or something else that makes them non-empty
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:						for(; $backslashes < $i && $raw[$i - $backslashes - 1] === "\\"; ++$backslashes){}
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		$this->player->doFirstSpawn();
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return $this->player->handleLevelSoundEvent($packet);
src/pocketmine/network/mcpe/PlayerNetworkSessionAdapter.php:		return true; //TODO: implement this properly - this is here to silence debug spam from MCPE dev builds
src/pocketmine/network/mcpe/protocol/SetTitlePacket.php:		$this->type = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetTitlePacket.php:		$this->text = $this->getString();
src/pocketmine/network/mcpe/protocol/SetTitlePacket.php:		$this->fadeInTime = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetTitlePacket.php:		$this->stayTime = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetTitlePacket.php:		$this->fadeOutTime = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetTitlePacket.php:		$this->putVarInt($this->type);
src/pocketmine/network/mcpe/protocol/SetTitlePacket.php:		$this->putString($this->text);
src/pocketmine/network/mcpe/protocol/SetTitlePacket.php:		$this->putVarInt($this->fadeInTime);
src/pocketmine/network/mcpe/protocol/SetTitlePacket.php:		$this->putVarInt($this->stayTime);
src/pocketmine/network/mcpe/protocol/SetTitlePacket.php:		$this->putVarInt($this->fadeOutTime);
src/pocketmine/network/mcpe/protocol/SetTitlePacket.php:		return $session->handleSetTitle($this);
src/pocketmine/network/mcpe/protocol/SetSpawnPositionPacket.php:		$this->spawnType = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetSpawnPositionPacket.php:		$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/SetSpawnPositionPacket.php:		$this->dimension = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetSpawnPositionPacket.php:		$this->getBlockPosition($this->x2, $this->y2, $this->z2);
src/pocketmine/network/mcpe/protocol/SetSpawnPositionPacket.php:		$this->putVarInt($this->spawnType);
src/pocketmine/network/mcpe/protocol/SetSpawnPositionPacket.php:		$this->putBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/SetSpawnPositionPacket.php:		$this->putVarInt($this->dimension);
src/pocketmine/network/mcpe/protocol/SetSpawnPositionPacket.php:		$this->putBlockPosition($this->x2, $this->y2, $this->z2);
src/pocketmine/network/mcpe/protocol/SetSpawnPositionPacket.php:		return $session->handleSetSpawnPosition($this);
src/pocketmine/network/mcpe/protocol/AddBehaviorTreePacket.php:		$this->behaviorTreeJson = $this->getString();
src/pocketmine/network/mcpe/protocol/AddBehaviorTreePacket.php:		$this->putString($this->behaviorTreeJson);
src/pocketmine/network/mcpe/protocol/AddBehaviorTreePacket.php:		return $session->handleAddBehaviorTree($this);
src/pocketmine/network/mcpe/protocol/ChunkRadiusUpdatedPacket.php:		$this->radius = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/ChunkRadiusUpdatedPacket.php:		$this->putVarInt($this->radius);
src/pocketmine/network/mcpe/protocol/ChunkRadiusUpdatedPacket.php:		return $session->handleChunkRadiusUpdated($this);
src/pocketmine/network/mcpe/protocol/AddEntityPacket.php:		$result->uvarint1 = $uvarint1;
src/pocketmine/network/mcpe/protocol/AddEntityPacket.php:		return $this->uvarint1;
src/pocketmine/network/mcpe/protocol/AddEntityPacket.php:		$this->uvarint1 = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AddEntityPacket.php:		$this->putUnsignedVarInt($this->uvarint1);
src/pocketmine/network/mcpe/protocol/AddEntityPacket.php:		return $handler->handleAddEntity($this);
src/pocketmine/network/mcpe/protocol/LabTablePacket.php:		$this->type = $this->getByte();
src/pocketmine/network/mcpe/protocol/LabTablePacket.php:		$this->getSignedBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/LabTablePacket.php:		$this->reactionType = $this->getByte();
src/pocketmine/network/mcpe/protocol/LabTablePacket.php:		$this->putByte($this->type);
src/pocketmine/network/mcpe/protocol/LabTablePacket.php:		$this->putSignedBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/LabTablePacket.php:		$this->putByte($this->reactionType);
src/pocketmine/network/mcpe/protocol/LabTablePacket.php:		return $session->handleLabTable($this);
src/pocketmine/network/mcpe/protocol/InventorySlotPacket.php:		$this->windowId = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/InventorySlotPacket.php:		$this->inventorySlot = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/InventorySlotPacket.php:		$this->item = ItemStackWrapper::read($this);
src/pocketmine/network/mcpe/protocol/InventorySlotPacket.php:		$this->putUnsignedVarInt($this->windowId);
src/pocketmine/network/mcpe/protocol/InventorySlotPacket.php:		$this->putUnsignedVarInt($this->inventorySlot);
src/pocketmine/network/mcpe/protocol/InventorySlotPacket.php:		$this->item->write($this);
src/pocketmine/network/mcpe/protocol/InventorySlotPacket.php:		return $session->handleInventorySlot($this);
src/pocketmine/network/mcpe/protocol/PacketPool.php:		static::$pool[$packet->pid()] = clone $packet;
src/pocketmine/network/mcpe/protocol/PacketPool.php:		$pk->setBuffer($buffer, $offset);
src/pocketmine/network/mcpe/protocol/GuiDataPickItemPacket.php:		$this->itemDescription = $this->getString();
src/pocketmine/network/mcpe/protocol/GuiDataPickItemPacket.php:		$this->itemEffects = $this->getString();
src/pocketmine/network/mcpe/protocol/GuiDataPickItemPacket.php:		$this->hotbarSlot = $this->getLInt();
src/pocketmine/network/mcpe/protocol/GuiDataPickItemPacket.php:		$this->putString($this->itemDescription);
src/pocketmine/network/mcpe/protocol/GuiDataPickItemPacket.php:		$this->putString($this->itemEffects);
src/pocketmine/network/mcpe/protocol/GuiDataPickItemPacket.php:		$this->putLInt($this->hotbarSlot);
src/pocketmine/network/mcpe/protocol/GuiDataPickItemPacket.php:		return $session->handleGuiDataPickItem($this);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		$this->mapId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		$this->type = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		$this->dimensionId = $this->getByte();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		$this->isLocked = $this->getBool();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		if(($this->type & 0x08) !== 0){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$count = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$this->eids[] = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		if(($this->type & (0x08 | self::BITFLAG_DECORATION_UPDATE | self::BITFLAG_TEXTURE_UPDATE)) !== 0){ //Decoration bitflag or colour bitflag
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->scale = $this->getByte();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		if(($this->type & self::BITFLAG_DECORATION_UPDATE) !== 0){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$object->type = $this->getLInt();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				if($object->type === MapTrackedObject::TYPE_BLOCK){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:					$this->getBlockPosition($object->x, $object->y, $object->z);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				}elseif($object->type === MapTrackedObject::TYPE_ENTITY){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:					$object->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:					throw new \UnexpectedValueException("Unknown map object type $object->type");
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$this->trackedEntities[] = $object;
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$icon = $this->getByte();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$rotation = $this->getByte();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$xOffset = $this->getByte();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$yOffset = $this->getByte();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$label = $this->getString();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$color = Color::fromABGR($this->getUnsignedVarInt());
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$this->decorations[] = new MapDecoration($icon, $rotation, $xOffset, $yOffset, $label, $color);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		if(($this->type & self::BITFLAG_TEXTURE_UPDATE) !== 0){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->width = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->height = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->xOffset = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->yOffset = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$count = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			if($count !== $this->width * $this->height){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				throw new \UnexpectedValueException("Expected colour count of " . ($this->height * $this->width) . " (height $this->height * width $this->width), got $count");
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			for($y = 0; $y < $this->height; ++$y){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				for($x = 0; $x < $this->width; ++$x){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:					$this->colors[$y][$x] = Color::fromABGR($this->getUnsignedVarInt());
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		$this->putEntityUniqueId($this->mapId);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		if(($eidsCount = count($this->eids)) > 0){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		if(($decorationCount = count($this->decorations)) > 0){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		if(count($this->colors) > 0){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		$this->putUnsignedVarInt($type);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		$this->putByte($this->dimensionId);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		$this->putBool($this->isLocked);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->putUnsignedVarInt($eidsCount);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			foreach($this->eids as $eid){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$this->putEntityUniqueId($eid);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->putByte($this->scale);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->putUnsignedVarInt(count($this->trackedEntities));
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			foreach($this->trackedEntities as $object){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$this->putLInt($object->type);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				if($object->type === MapTrackedObject::TYPE_BLOCK){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:					$this->putBlockPosition($object->x, $object->y, $object->z);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				}elseif($object->type === MapTrackedObject::TYPE_ENTITY){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:					$this->putEntityUniqueId($object->entityUniqueId);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:					throw new \InvalidArgumentException("Unknown map object type $object->type");
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->putUnsignedVarInt($decorationCount);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			foreach($this->decorations as $decoration){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$this->putByte($decoration->getIcon());
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$this->putByte($decoration->getRotation());
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$this->putByte($decoration->getXOffset());
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$this->putByte($decoration->getYOffset());
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$this->putString($decoration->getLabel());
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				$this->putUnsignedVarInt($decoration->getColor()->toABGR());
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->putVarInt($this->width);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->putVarInt($this->height);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->putVarInt($this->xOffset);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->putVarInt($this->yOffset);
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			$this->putUnsignedVarInt($this->width * $this->height); //list count, but we handle it as a 2D array... thanks for the confusion mojang
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:			for($y = 0; $y < $this->height; ++$y){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:				for($x = 0; $x < $this->width; ++$x){
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:					$this->putUnsignedVarInt($this->colors[$y][$x]->toABGR());
src/pocketmine/network/mcpe/protocol/ClientboundMapItemDataPacket.php:		return $session->handleClientboundMapItemData($this);
src/pocketmine/network/mcpe/protocol/CreativeContentPacket.php:		$result->entries = $entries;
src/pocketmine/network/mcpe/protocol/CreativeContentPacket.php:	public function getEntries() : array{ return $this->entries; }
src/pocketmine/network/mcpe/protocol/CreativeContentPacket.php:		$this->entries = [];
src/pocketmine/network/mcpe/protocol/CreativeContentPacket.php:		for($i = 0, $len = $this->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/CreativeContentPacket.php:			$this->entries[] = CreativeContentEntry::read($this);
src/pocketmine/network/mcpe/protocol/CreativeContentPacket.php:		$this->putUnsignedVarInt(count($this->entries));
src/pocketmine/network/mcpe/protocol/CreativeContentPacket.php:		foreach($this->entries as $entry){
src/pocketmine/network/mcpe/protocol/CreativeContentPacket.php:			$entry->write($this);
src/pocketmine/network/mcpe/protocol/CreativeContentPacket.php:		return $handler->handleCreativeContent($this);
src/pocketmine/network/mcpe/protocol/AutomationClientConnectPacket.php:		$this->serverUri = $this->getString();
src/pocketmine/network/mcpe/protocol/AutomationClientConnectPacket.php:		$this->putString($this->serverUri);
src/pocketmine/network/mcpe/protocol/AutomationClientConnectPacket.php:		return $session->handleAutomationClientConnect($this);
src/pocketmine/network/mcpe/protocol/TickSyncPacket.php:		$result->clientSendTime = $clientTime;
src/pocketmine/network/mcpe/protocol/TickSyncPacket.php:		$result->serverReceiveTime = 0; //useless
src/pocketmine/network/mcpe/protocol/TickSyncPacket.php:		$result->clientSendTime = $clientSendTime;
src/pocketmine/network/mcpe/protocol/TickSyncPacket.php:		$result->serverReceiveTime = $serverReceiveTime;
src/pocketmine/network/mcpe/protocol/TickSyncPacket.php:		return $this->clientSendTime;
src/pocketmine/network/mcpe/protocol/TickSyncPacket.php:		return $this->serverReceiveTime;
src/pocketmine/network/mcpe/protocol/TickSyncPacket.php:		$this->clientSendTime = $this->getLLong();
src/pocketmine/network/mcpe/protocol/TickSyncPacket.php:		$this->serverReceiveTime = $this->getLLong();
src/pocketmine/network/mcpe/protocol/TickSyncPacket.php:		$this->putLLong($this->clientSendTime);
src/pocketmine/network/mcpe/protocol/TickSyncPacket.php:		$this->putLLong($this->serverReceiveTime);
src/pocketmine/network/mcpe/protocol/TickSyncPacket.php:		return $handler->handleTickSync($this);
src/pocketmine/network/mcpe/protocol/RespawnPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/RespawnPacket.php:		$this->respawnState = $this->getByte();
src/pocketmine/network/mcpe/protocol/RespawnPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/RespawnPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/RespawnPacket.php:		$this->putByte($this->respawnState);
src/pocketmine/network/mcpe/protocol/RespawnPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/RespawnPacket.php:		return $session->handleRespawn($this);
src/pocketmine/network/mcpe/protocol/ScriptCustomEventPacket.php:		$this->eventName = $this->getString();
src/pocketmine/network/mcpe/protocol/ScriptCustomEventPacket.php:		$this->eventData = $this->getString();
src/pocketmine/network/mcpe/protocol/ScriptCustomEventPacket.php:		$this->putString($this->eventName);
src/pocketmine/network/mcpe/protocol/ScriptCustomEventPacket.php:		$this->putString($this->eventData);
src/pocketmine/network/mcpe/protocol/ScriptCustomEventPacket.php:		return $session->handleScriptCustomEvent($this);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		if(($this->flags & $flag) !== 0){
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:			return $this->getLFloat();
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		if(($this->flags & $flag) !== 0){
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:			return $this->getByteRotation();
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->flags = $this->getLShort();
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->xPos = $this->maybeReadCoord(self::FLAG_HAS_X);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->yPos = $this->maybeReadCoord(self::FLAG_HAS_Y);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->zPos = $this->maybeReadCoord(self::FLAG_HAS_Z);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->xRot = $this->maybeReadRotation(self::FLAG_HAS_ROT_X);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->yRot = $this->maybeReadRotation(self::FLAG_HAS_ROT_Y);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->zRot = $this->maybeReadRotation(self::FLAG_HAS_ROT_Z);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		if(($this->flags & $flag) !== 0){
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:			$this->putLFloat($val);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		if(($this->flags & $flag) !== 0){
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:			$this->putByteRotation($val);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->putLShort($this->flags);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->maybeWriteCoord(self::FLAG_HAS_X, $this->xPos);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->maybeWriteCoord(self::FLAG_HAS_Y, $this->yPos);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->maybeWriteCoord(self::FLAG_HAS_Z, $this->zPos);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->maybeWriteRotation(self::FLAG_HAS_ROT_X, $this->xRot);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->maybeWriteRotation(self::FLAG_HAS_ROT_Y, $this->yRot);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		$this->maybeWriteRotation(self::FLAG_HAS_ROT_Z, $this->zRot);
src/pocketmine/network/mcpe/protocol/MoveActorDeltaPacket.php:		return $session->handleMoveActorDelta($this);
src/pocketmine/network/mcpe/protocol/PositionTrackingDBClientRequestPacket.php:		$result->action = $action;
src/pocketmine/network/mcpe/protocol/PositionTrackingDBClientRequestPacket.php:		$result->trackingId = $trackingId;
src/pocketmine/network/mcpe/protocol/PositionTrackingDBClientRequestPacket.php:	public function getAction() : int{ return $this->action; }
src/pocketmine/network/mcpe/protocol/PositionTrackingDBClientRequestPacket.php:	public function getTrackingId() : int{ return $this->trackingId; }
src/pocketmine/network/mcpe/protocol/PositionTrackingDBClientRequestPacket.php:		$this->action = $this->getByte();
src/pocketmine/network/mcpe/protocol/PositionTrackingDBClientRequestPacket.php:		$this->trackingId = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/PositionTrackingDBClientRequestPacket.php:		$this->putByte($this->action);
src/pocketmine/network/mcpe/protocol/PositionTrackingDBClientRequestPacket.php:		$this->putVarInt($this->trackingId);
src/pocketmine/network/mcpe/protocol/PositionTrackingDBClientRequestPacket.php:		return $handler->handlePositionTrackingDBClientRequest($this);
src/pocketmine/network/mcpe/protocol/InteractPacket.php:		$this->action = $this->getByte();
src/pocketmine/network/mcpe/protocol/InteractPacket.php:		$this->target = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/InteractPacket.php:		if($this->action === self::ACTION_MOUSEOVER){
src/pocketmine/network/mcpe/protocol/InteractPacket.php:			$this->x = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/InteractPacket.php:			$this->y = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/InteractPacket.php:			$this->z = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/InteractPacket.php:		$this->putByte($this->action);
src/pocketmine/network/mcpe/protocol/InteractPacket.php:		$this->putEntityRuntimeId($this->target);
src/pocketmine/network/mcpe/protocol/InteractPacket.php:		if($this->action === self::ACTION_MOUSEOVER){
src/pocketmine/network/mcpe/protocol/InteractPacket.php:			$this->putLFloat($this->x);
src/pocketmine/network/mcpe/protocol/InteractPacket.php:			$this->putLFloat($this->y);
src/pocketmine/network/mcpe/protocol/InteractPacket.php:			$this->putLFloat($this->z);
src/pocketmine/network/mcpe/protocol/InteractPacket.php:		return $session->handleInteract($this);
src/pocketmine/network/mcpe/protocol/PlayerInputPacket.php:		$this->motionX = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/PlayerInputPacket.php:		$this->motionY = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/PlayerInputPacket.php:		$this->jumping = $this->getBool();
src/pocketmine/network/mcpe/protocol/PlayerInputPacket.php:		$this->sneaking = $this->getBool();
src/pocketmine/network/mcpe/protocol/PlayerInputPacket.php:		$this->putLFloat($this->motionX);
src/pocketmine/network/mcpe/protocol/PlayerInputPacket.php:		$this->putLFloat($this->motionY);
src/pocketmine/network/mcpe/protocol/PlayerInputPacket.php:		$this->putBool($this->jumping);
src/pocketmine/network/mcpe/protocol/PlayerInputPacket.php:		$this->putBool($this->sneaking);
src/pocketmine/network/mcpe/protocol/PlayerInputPacket.php:		return $session->handlePlayerInput($this);
src/pocketmine/network/mcpe/protocol/LevelEventGenericPacket.php:	/** @var string network-format NBT */
src/pocketmine/network/mcpe/protocol/LevelEventGenericPacket.php:		$result->eventId = $eventId;
src/pocketmine/network/mcpe/protocol/LevelEventGenericPacket.php:		$result->eventData = (new NetworkLittleEndianNBTStream())->write($data);
src/pocketmine/network/mcpe/protocol/LevelEventGenericPacket.php:		return $this->eventId;
src/pocketmine/network/mcpe/protocol/LevelEventGenericPacket.php:		return $this->eventData;
src/pocketmine/network/mcpe/protocol/LevelEventGenericPacket.php:		$this->eventId = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/LevelEventGenericPacket.php:		$this->eventData = $this->getRemaining();
src/pocketmine/network/mcpe/protocol/LevelEventGenericPacket.php:		$this->putVarInt($this->eventId);
src/pocketmine/network/mcpe/protocol/LevelEventGenericPacket.php:		$this->put($this->eventData);
src/pocketmine/network/mcpe/protocol/LevelEventGenericPacket.php:		return $handler->handleLevelEventGeneric($this);
src/pocketmine/network/mcpe/protocol/StructureTemplateDataRequestPacket.php:		$this->structureTemplateName = $this->getString();
src/pocketmine/network/mcpe/protocol/StructureTemplateDataRequestPacket.php:		$this->getBlockPosition($this->structureBlockX, $this->structureBlockY, $this->structureBlockZ);
src/pocketmine/network/mcpe/protocol/StructureTemplateDataRequestPacket.php:		$this->structureSettings = $this->getStructureSettings();
src/pocketmine/network/mcpe/protocol/StructureTemplateDataRequestPacket.php:		$this->structureTemplateResponseType = $this->getByte();
src/pocketmine/network/mcpe/protocol/StructureTemplateDataRequestPacket.php:		$this->putString($this->structureTemplateName);
src/pocketmine/network/mcpe/protocol/StructureTemplateDataRequestPacket.php:		$this->putBlockPosition($this->structureBlockX, $this->structureBlockY, $this->structureBlockZ);
src/pocketmine/network/mcpe/protocol/StructureTemplateDataRequestPacket.php:		$this->putStructureSettings($this->structureSettings);
src/pocketmine/network/mcpe/protocol/StructureTemplateDataRequestPacket.php:		$this->putByte($this->structureTemplateResponseType);
src/pocketmine/network/mcpe/protocol/StructureTemplateDataRequestPacket.php:		return $handler->handleStructureTemplateDataRequest($this);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->sound = $this->getByte();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->extraData = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->entityType = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->isBabyMob = $this->getBool();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->disableRelativeVolume = $this->getBool();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->putByte($this->sound);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->putVarInt($this->extraData);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->putVarInt($this->entityType);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->putBool($this->isBabyMob);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		$this->putBool($this->disableRelativeVolume);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV1.php:		return $session->handleLevelSoundEventPacketV1($this);
src/pocketmine/network/mcpe/protocol/SetLastHurtByPacket.php:		$this->entityTypeId = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetLastHurtByPacket.php:		$this->putVarInt($this->entityTypeId);
src/pocketmine/network/mcpe/protocol/SetLastHurtByPacket.php:		return $session->handleSetLastHurtBy($this);
src/pocketmine/network/mcpe/protocol/ShowProfilePacket.php:		$this->xuid = $this->getString();
src/pocketmine/network/mcpe/protocol/ShowProfilePacket.php:		$this->putString($this->xuid);
src/pocketmine/network/mcpe/protocol/ShowProfilePacket.php:		return $session->handleShowProfile($this);
src/pocketmine/network/mcpe/protocol/StructureBlockUpdatePacket.php:		$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/StructureBlockUpdatePacket.php:		$this->structureEditorData = $this->getStructureEditorData();
src/pocketmine/network/mcpe/protocol/StructureBlockUpdatePacket.php:		$this->isPowered = $this->getBool();
src/pocketmine/network/mcpe/protocol/StructureBlockUpdatePacket.php:		$this->putBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/StructureBlockUpdatePacket.php:		$this->putStructureEditorData($this->structureEditorData);
src/pocketmine/network/mcpe/protocol/StructureBlockUpdatePacket.php:		$this->putBool($this->isPowered);
src/pocketmine/network/mcpe/protocol/StructureBlockUpdatePacket.php:		return $session->handleStructureBlockUpdate($this);
src/pocketmine/network/mcpe/protocol/BlockPickRequestPacket.php:		$this->getSignedBlockPosition($this->blockX, $this->blockY, $this->blockZ);
src/pocketmine/network/mcpe/protocol/BlockPickRequestPacket.php:		$this->addUserData = $this->getBool();
src/pocketmine/network/mcpe/protocol/BlockPickRequestPacket.php:		$this->hotbarSlot = $this->getByte();
src/pocketmine/network/mcpe/protocol/BlockPickRequestPacket.php:		$this->putSignedBlockPosition($this->blockX, $this->blockY, $this->blockZ);
src/pocketmine/network/mcpe/protocol/BlockPickRequestPacket.php:		$this->putBool($this->addUserData);
src/pocketmine/network/mcpe/protocol/BlockPickRequestPacket.php:		$this->putByte($this->hotbarSlot);
src/pocketmine/network/mcpe/protocol/BlockPickRequestPacket.php:		return $session->handleBlockPickRequest($this);
src/pocketmine/network/mcpe/protocol/UpdateBlockPacket.php:		$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/UpdateBlockPacket.php:		$this->blockRuntimeId = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/UpdateBlockPacket.php:		$this->flags = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/UpdateBlockPacket.php:		$this->dataLayerId = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/UpdateBlockPacket.php:		$this->putBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/UpdateBlockPacket.php:		$this->putUnsignedVarInt($this->blockRuntimeId);
src/pocketmine/network/mcpe/protocol/UpdateBlockPacket.php:		$this->putUnsignedVarInt($this->flags);
src/pocketmine/network/mcpe/protocol/UpdateBlockPacket.php:		$this->putUnsignedVarInt($this->dataLayerId);
src/pocketmine/network/mcpe/protocol/UpdateBlockPacket.php:		return $session->handleUpdateBlock($this);
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:		$this->type = $this->getByte();
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:			$entry->scoreboardId = $this->getVarLong();
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:			if($this->type === self::TYPE_REGISTER_IDENTITY){
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:				$entry->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:			$this->entries[] = $entry;
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:		$this->putByte($this->type);
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:		$this->putUnsignedVarInt(count($this->entries));
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:		foreach($this->entries as $entry){
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:			$this->putVarLong($entry->scoreboardId);
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:			if($this->type === self::TYPE_REGISTER_IDENTITY){
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:				$this->putEntityUniqueId($entry->entityUniqueId);
src/pocketmine/network/mcpe/protocol/SetScoreboardIdentityPacket.php:		return $session->handleSetScoreboardIdentity($this);
src/pocketmine/network/mcpe/protocol/NetworkSettingsPacket.php:		$result->compressionThreshold = $compressionThreshold;
src/pocketmine/network/mcpe/protocol/NetworkSettingsPacket.php:		return $this->compressionThreshold;
src/pocketmine/network/mcpe/protocol/NetworkSettingsPacket.php:		$this->compressionThreshold = $this->getLShort();
src/pocketmine/network/mcpe/protocol/NetworkSettingsPacket.php:		$this->putLShort($this->compressionThreshold);
src/pocketmine/network/mcpe/protocol/NetworkSettingsPacket.php:		return $handler->handleNetworkSettings($this);
src/pocketmine/network/mcpe/protocol/ItemFrameDropItemPacket.php:		$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/ItemFrameDropItemPacket.php:		$this->putBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/ItemFrameDropItemPacket.php:		return $session->handleItemFrameDropItem($this);
src/pocketmine/network/mcpe/protocol/FilterTextPacket.php:		$result->text = $text;
src/pocketmine/network/mcpe/protocol/FilterTextPacket.php:		$result->fromServer = $server;
src/pocketmine/network/mcpe/protocol/FilterTextPacket.php:	public function getText() : string{ return $this->text; }
src/pocketmine/network/mcpe/protocol/FilterTextPacket.php:	public function isFromServer() : bool{ return $this->fromServer; }
src/pocketmine/network/mcpe/protocol/FilterTextPacket.php:		$this->text = $this->getString();
src/pocketmine/network/mcpe/protocol/FilterTextPacket.php:		$this->fromServer = $this->getBool();
src/pocketmine/network/mcpe/protocol/FilterTextPacket.php:		$this->putString($this->text);
src/pocketmine/network/mcpe/protocol/FilterTextPacket.php:		$this->putBool($this->fromServer);
src/pocketmine/network/mcpe/protocol/FilterTextPacket.php:		return $handler->handleFilterText($this);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->isBlock = $this->getBool();
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		if($this->isBlock){
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:			$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:			$this->commandBlockMode = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:			$this->isRedstoneMode = $this->getBool();
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:			$this->isConditional = $this->getBool();
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:			$this->minecartEid = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->command = $this->getString();
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->lastOutput = $this->getString();
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->name = $this->getString();
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->shouldTrackOutput = $this->getBool();
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->tickDelay = $this->getLInt();
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->executeOnFirstTick = $this->getBool();
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->putBool($this->isBlock);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		if($this->isBlock){
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:			$this->putBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:			$this->putUnsignedVarInt($this->commandBlockMode);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:			$this->putBool($this->isRedstoneMode);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:			$this->putBool($this->isConditional);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:			$this->putEntityRuntimeId($this->minecartEid);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->putString($this->command);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->putString($this->lastOutput);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->putString($this->name);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->putBool($this->shouldTrackOutput);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->putLInt($this->tickDelay);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		$this->putBool($this->executeOnFirstTick);
src/pocketmine/network/mcpe/protocol/CommandBlockUpdatePacket.php:		return $session->handleCommandBlockUpdate($this);
src/pocketmine/network/mcpe/protocol/AddPaintingPacket.php:		$this->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/AddPaintingPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/AddPaintingPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/AddPaintingPacket.php:		$this->direction = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/AddPaintingPacket.php:		$this->title = $this->getString();
src/pocketmine/network/mcpe/protocol/AddPaintingPacket.php:		$this->putEntityUniqueId($this->entityUniqueId ?? $this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/AddPaintingPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/AddPaintingPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/AddPaintingPacket.php:		$this->putVarInt($this->direction);
src/pocketmine/network/mcpe/protocol/AddPaintingPacket.php:		$this->putString($this->title);
src/pocketmine/network/mcpe/protocol/AddPaintingPacket.php:		return $session->handleAddPainting($this);
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		$this->soundName = $this->getString();
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		$this->x /= 8;
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		$this->y /= 8;
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		$this->z /= 8;
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		$this->volume = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		$this->pitch = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		$this->putString($this->soundName);
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		$this->putBlockPosition((int) ($this->x * 8), (int) ($this->y * 8), (int) ($this->z * 8));
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		$this->putLFloat($this->volume);
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		$this->putLFloat($this->pitch);
src/pocketmine/network/mcpe/protocol/PlaySoundPacket.php:		return $session->handlePlaySound($this);
src/pocketmine/network/mcpe/protocol/EventPacket.php:		$this->playerRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/EventPacket.php:		$this->eventData = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/EventPacket.php:		$this->type = $this->getByte();
src/pocketmine/network/mcpe/protocol/EventPacket.php:		$this->putEntityRuntimeId($this->playerRuntimeId);
src/pocketmine/network/mcpe/protocol/EventPacket.php:		$this->putVarInt($this->eventData);
src/pocketmine/network/mcpe/protocol/EventPacket.php:		$this->putByte($this->type);
src/pocketmine/network/mcpe/protocol/EventPacket.php:		return $session->handleEvent($this);
src/pocketmine/network/mcpe/protocol/CommandRequestPacket.php:		$this->command = $this->getString();
src/pocketmine/network/mcpe/protocol/CommandRequestPacket.php:		$this->originData = $this->getCommandOriginData();
src/pocketmine/network/mcpe/protocol/CommandRequestPacket.php:		$this->isInternal = $this->getBool();
src/pocketmine/network/mcpe/protocol/CommandRequestPacket.php:		$this->putString($this->command);
src/pocketmine/network/mcpe/protocol/CommandRequestPacket.php:		$this->putCommandOriginData($this->originData);
src/pocketmine/network/mcpe/protocol/CommandRequestPacket.php:		$this->putBool($this->isInternal);
src/pocketmine/network/mcpe/protocol/CommandRequestPacket.php:		return $session->handleCommandRequest($this);
src/pocketmine/network/mcpe/protocol/BiomeDefinitionListPacket.php:		$this->namedtag = $this->getRemaining();
src/pocketmine/network/mcpe/protocol/BiomeDefinitionListPacket.php:		$this->put(
src/pocketmine/network/mcpe/protocol/BiomeDefinitionListPacket.php:			$this->namedtag ??
src/pocketmine/network/mcpe/protocol/BiomeDefinitionListPacket.php:		return $session->handleBiomeDefinitionList($this);
src/pocketmine/network/mcpe/protocol/SimpleEventPacket.php:		$this->eventType = $this->getLShort();
src/pocketmine/network/mcpe/protocol/SimpleEventPacket.php:		$this->putLShort($this->eventType);
src/pocketmine/network/mcpe/protocol/SimpleEventPacket.php:		return $session->handleSimpleEvent($this);
src/pocketmine/network/mcpe/protocol/ClientCacheStatusPacket.php:		$result->enabled = $enabled;
src/pocketmine/network/mcpe/protocol/ClientCacheStatusPacket.php:		return $this->enabled;
src/pocketmine/network/mcpe/protocol/ClientCacheStatusPacket.php:		$this->enabled = $this->getBool();
src/pocketmine/network/mcpe/protocol/ClientCacheStatusPacket.php:		$this->putBool($this->enabled);
src/pocketmine/network/mcpe/protocol/ClientCacheStatusPacket.php:		return $handler->handleClientCacheStatus($this);
src/pocketmine/network/mcpe/protocol/UpdatePlayerGameTypePacket.php:		$result->gameMode = $gameMode;
src/pocketmine/network/mcpe/protocol/UpdatePlayerGameTypePacket.php:		$result->playerEntityUniqueId = $playerEntityUniqueId;
src/pocketmine/network/mcpe/protocol/UpdatePlayerGameTypePacket.php:	public function getGameMode() : int{ return $this->gameMode; }
src/pocketmine/network/mcpe/protocol/UpdatePlayerGameTypePacket.php:	public function getPlayerEntityUniqueId() : int{ return $this->playerEntityUniqueId; }
src/pocketmine/network/mcpe/protocol/UpdatePlayerGameTypePacket.php:		$this->gameMode = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/UpdatePlayerGameTypePacket.php:		$this->playerEntityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/UpdatePlayerGameTypePacket.php:		$this->putVarInt($this->gameMode);
src/pocketmine/network/mcpe/protocol/UpdatePlayerGameTypePacket.php:		$this->putEntityUniqueId($this->playerEntityUniqueId);
src/pocketmine/network/mcpe/protocol/UpdatePlayerGameTypePacket.php:		return $handler->handleUpdatePlayerGameType($this);
src/pocketmine/network/mcpe/protocol/PlayerSkinPacket.php:		$this->uuid = $this->getUUID();
src/pocketmine/network/mcpe/protocol/PlayerSkinPacket.php:		$this->skin = $this->getSkin();
src/pocketmine/network/mcpe/protocol/PlayerSkinPacket.php:		$this->newSkinName = $this->getString();
src/pocketmine/network/mcpe/protocol/PlayerSkinPacket.php:		$this->oldSkinName = $this->getString();
src/pocketmine/network/mcpe/protocol/PlayerSkinPacket.php:		$this->skin->setVerified($this->getBool());
src/pocketmine/network/mcpe/protocol/PlayerSkinPacket.php:		$this->putUUID($this->uuid);
src/pocketmine/network/mcpe/protocol/PlayerSkinPacket.php:		$this->putSkin($this->skin);
src/pocketmine/network/mcpe/protocol/PlayerSkinPacket.php:		$this->putString($this->newSkinName);
src/pocketmine/network/mcpe/protocol/PlayerSkinPacket.php:		$this->putString($this->oldSkinName);
src/pocketmine/network/mcpe/protocol/PlayerSkinPacket.php:		$this->putBool($this->skin->isVerified());
src/pocketmine/network/mcpe/protocol/PlayerSkinPacket.php:		return $session->handlePlayerSkin($this);
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:		$this->type = $this->getByte();
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:		for($i = 0, $i2 = $this->getUnsignedVarInt(); $i < $i2; ++$i){
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:			$entry->scoreboardId = $this->getVarLong();
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:			$entry->objectiveName = $this->getString();
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:			$entry->score = $this->getLInt();
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:			if($this->type !== self::TYPE_REMOVE){
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:				$entry->type = $this->getByte();
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:				switch($entry->type){
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:						$entry->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:						$entry->customName = $this->getString();
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:						throw new \UnexpectedValueException("Unknown entry type $entry->type");
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:			$this->entries[] = $entry;
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:		$this->putByte($this->type);
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:		$this->putUnsignedVarInt(count($this->entries));
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:		foreach($this->entries as $entry){
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:			$this->putVarLong($entry->scoreboardId);
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:			$this->putString($entry->objectiveName);
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:			$this->putLInt($entry->score);
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:			if($this->type !== self::TYPE_REMOVE){
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:				$this->putByte($entry->type);
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:				switch($entry->type){
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:						$this->putEntityUniqueId($entry->entityUniqueId);
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:						$this->putString($entry->customName);
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:						throw new \InvalidArgumentException("Unknown entry type $entry->type");
src/pocketmine/network/mcpe/protocol/SetScorePacket.php:		return $session->handleSetScore($this);
src/pocketmine/network/mcpe/protocol/BlockEventPacket.php:		$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/BlockEventPacket.php:		$this->eventType = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/BlockEventPacket.php:		$this->eventData = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/BlockEventPacket.php:		$this->putBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/BlockEventPacket.php:		$this->putVarInt($this->eventType);
src/pocketmine/network/mcpe/protocol/BlockEventPacket.php:		$this->putVarInt($this->eventData);
src/pocketmine/network/mcpe/protocol/BlockEventPacket.php:		return $session->handleBlockEvent($this);
src/pocketmine/network/mcpe/protocol/StopSoundPacket.php:		$this->soundName = $this->getString();
src/pocketmine/network/mcpe/protocol/StopSoundPacket.php:		$this->stopAll = $this->getBool();
src/pocketmine/network/mcpe/protocol/StopSoundPacket.php:		$this->putString($this->soundName);
src/pocketmine/network/mcpe/protocol/StopSoundPacket.php:		$this->putBool($this->stopAll);
src/pocketmine/network/mcpe/protocol/StopSoundPacket.php:		return $session->handleStopSound($this);
src/pocketmine/network/mcpe/protocol/ServerToClientHandshakePacket.php:		$this->jwt = $this->getString();
src/pocketmine/network/mcpe/protocol/ServerToClientHandshakePacket.php:		$this->putString($this->jwt);
src/pocketmine/network/mcpe/protocol/ServerToClientHandshakePacket.php:		return $session->handleServerToClientHandshake($this);
src/pocketmine/network/mcpe/protocol/SpawnExperienceOrbPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/SpawnExperienceOrbPacket.php:		$this->amount = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SpawnExperienceOrbPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/SpawnExperienceOrbPacket.php:		$this->putVarInt($this->amount);
src/pocketmine/network/mcpe/protocol/SpawnExperienceOrbPacket.php:		return $session->handleSpawnExperienceOrb($this);
src/pocketmine/network/mcpe/protocol/UnknownPacket.php:	public const NETWORK_ID = -1; //Invalid, do not try to write this
src/pocketmine/network/mcpe/protocol/UnknownPacket.php:		if(strlen($this->payload ?? "") > 0){
src/pocketmine/network/mcpe/protocol/UnknownPacket.php:			return ord($this->payload[0]);
src/pocketmine/network/mcpe/protocol/UnknownPacket.php:		$this->payload = $this->getRemaining();
src/pocketmine/network/mcpe/protocol/UnknownPacket.php:		$this->put($this->payload);
src/pocketmine/network/mcpe/protocol/ClientCacheMissResponsePacket.php:		$result->blobs = $blobs;
src/pocketmine/network/mcpe/protocol/ClientCacheMissResponsePacket.php:		return $this->blobs;
src/pocketmine/network/mcpe/protocol/ClientCacheMissResponsePacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/ClientCacheMissResponsePacket.php:			$hash = $this->getLLong();
src/pocketmine/network/mcpe/protocol/ClientCacheMissResponsePacket.php:			$payload = $this->getString();
src/pocketmine/network/mcpe/protocol/ClientCacheMissResponsePacket.php:			$this->blobs[] = new ChunkCacheBlob($hash, $payload);
src/pocketmine/network/mcpe/protocol/ClientCacheMissResponsePacket.php:		$this->putUnsignedVarInt(count($this->blobs));
src/pocketmine/network/mcpe/protocol/ClientCacheMissResponsePacket.php:		foreach($this->blobs as $blob){
src/pocketmine/network/mcpe/protocol/ClientCacheMissResponsePacket.php:			$this->putLLong($blob->getHash());
src/pocketmine/network/mcpe/protocol/ClientCacheMissResponsePacket.php:			$this->putString($blob->getPayload());
src/pocketmine/network/mcpe/protocol/ClientCacheMissResponsePacket.php:		return $handler->handleClientCacheMissResponse($this);
src/pocketmine/network/mcpe/protocol/ResourcePackClientResponsePacket.php:		$this->status = $this->getByte();
src/pocketmine/network/mcpe/protocol/ResourcePackClientResponsePacket.php:		$entryCount = $this->getLShort();
src/pocketmine/network/mcpe/protocol/ResourcePackClientResponsePacket.php:		while($entryCount-- > 0){
src/pocketmine/network/mcpe/protocol/ResourcePackClientResponsePacket.php:			$this->packIds[] = $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackClientResponsePacket.php:		$this->putByte($this->status);
src/pocketmine/network/mcpe/protocol/ResourcePackClientResponsePacket.php:		$this->putLShort(count($this->packIds));
src/pocketmine/network/mcpe/protocol/ResourcePackClientResponsePacket.php:		foreach($this->packIds as $id){
src/pocketmine/network/mcpe/protocol/ResourcePackClientResponsePacket.php:			$this->putString($id);
src/pocketmine/network/mcpe/protocol/ResourcePackClientResponsePacket.php:		return $session->handleResourcePackClientResponse($this);
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->eventId = $this->getByte();
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->effectId = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->amplifier = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->particles = $this->getBool();
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->duration = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->putByte($this->eventId);
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->putVarInt($this->effectId);
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->putVarInt($this->amplifier);
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->putBool($this->particles);
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		$this->putVarInt($this->duration);
src/pocketmine/network/mcpe/protocol/MobEffectPacket.php:		return $session->handleMobEffect($this);
src/pocketmine/network/mcpe/protocol/MultiplayerSettingsPacket.php:		$result->action = $action;
src/pocketmine/network/mcpe/protocol/MultiplayerSettingsPacket.php:		return $this->action;
src/pocketmine/network/mcpe/protocol/MultiplayerSettingsPacket.php:		$this->action = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/MultiplayerSettingsPacket.php:		$this->putVarInt($this->action);
src/pocketmine/network/mcpe/protocol/MultiplayerSettingsPacket.php:		return $handler->handleMultiplayerSettings($this);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:	public $extraData = -1;
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->sound = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->extraData = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->entityType = $this->getString();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->isBabyMob = $this->getBool();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->disableRelativeVolume = $this->getBool();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->putUnsignedVarInt($this->sound);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->putVarInt($this->extraData);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->putString($this->entityType);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->putBool($this->isBabyMob);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		$this->putBool($this->disableRelativeVolume);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacket.php:		return $session->handleLevelSoundEvent($this);
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$this->originData = $this->getCommandOriginData();
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$this->outputType = $this->getByte();
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$this->successCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		for($i = 0, $size = $this->getUnsignedVarInt(); $i < $size; ++$i){
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:			$this->messages[] = $this->getCommandMessage();
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		if($this->outputType === 4){
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:			$this->unknownString = $this->getString();
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$message->isInternal = $this->getBool();
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$message->messageId = $this->getString();
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		for($i = 0, $size = $this->getUnsignedVarInt(); $i < $size; ++$i){
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:			$message->parameters[] = $this->getString();
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$this->putCommandOriginData($this->originData);
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$this->putByte($this->outputType);
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$this->putUnsignedVarInt($this->successCount);
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$this->putUnsignedVarInt(count($this->messages));
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		foreach($this->messages as $message){
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:			$this->putCommandMessage($message);
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		if($this->outputType === 4){
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:			$this->putString($this->unknownString);
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$this->putBool($message->isInternal);
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$this->putString($message->messageId);
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		$this->putUnsignedVarInt(count($message->parameters));
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		foreach($message->parameters as $parameter){
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:			$this->putString($parameter);
src/pocketmine/network/mcpe/protocol/CommandOutputPacket.php:		return $session->handleCommandOutput($this);
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:		$result->entityRuntimeId = $entityRuntimeId;
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:		$result->motion = $motion;
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:		$result->onGround = $onGround;
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:	public function getEntityRuntimeIdField() : int{ return $this->entityRuntimeId; } //TODO: rename this on PM4 (crap architecture, thanks shoghi)
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:	public function getMotion() : Vector3{ return $this->motion; }
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:	public function isOnGround() : bool{ return $this->onGround; }
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:		$this->motion = $this->getVector3();
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:		$this->onGround = $this->getBool();
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:		$this->putVector3($this->motion);
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:		$this->putBool($this->onGround);
src/pocketmine/network/mcpe/protocol/MotionPredictionHintsPacket.php:		return $handler->handleMotionPredictionHints($this);
src/pocketmine/network/mcpe/protocol/AnimatePacket.php:		$this->action = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/AnimatePacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/AnimatePacket.php:		if(($this->action & 0x80) !== 0){
src/pocketmine/network/mcpe/protocol/AnimatePacket.php:			$this->float = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/AnimatePacket.php:		$this->putVarInt($this->action);
src/pocketmine/network/mcpe/protocol/AnimatePacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/AnimatePacket.php:		if(($this->action & 0x80) !== 0){
src/pocketmine/network/mcpe/protocol/AnimatePacket.php:			$this->putLFloat($this->float);
src/pocketmine/network/mcpe/protocol/AnimatePacket.php:		return $session->handleAnimate($this);
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:	 * @phpstan-var list<int>
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:	 * @phpstan-param list<int> $actorRuntimeIds
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$result->animation = $animation;
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$result->nextState = $nextState;
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$result->stopExpression = $stopExpression;
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$result->controller = $controller;
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$result->blendOutTime = $blendOutTime;
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$result->actorRuntimeIds = $actorRuntimeIds;
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:	public function getAnimation() : string{ return $this->animation; }
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:	public function getNextState() : string{ return $this->nextState; }
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:	public function getStopExpression() : string{ return $this->stopExpression; }
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:	public function getController() : string{ return $this->controller; }
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:	public function getBlendOutTime() : float{ return $this->blendOutTime; }
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:	 * @phpstan-return list<int>
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:	public function getActorRuntimeIds() : array{ return $this->actorRuntimeIds; }
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->animation = $this->getString();
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->nextState = $this->getString();
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->stopExpression = $this->getString();
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->controller = $this->getString();
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->blendOutTime = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->actorRuntimeIds = [];
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		for($i = 0, $len = $this->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:			$this->actorRuntimeIds[] = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->putString($this->animation);
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->putString($this->nextState);
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->putString($this->stopExpression);
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->putString($this->controller);
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->putLFloat($this->blendOutTime);
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		$this->putUnsignedVarInt(count($this->actorRuntimeIds));
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		foreach($this->actorRuntimeIds as $id){
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:			$this->putEntityRuntimeId($id);
src/pocketmine/network/mcpe/protocol/AnimateEntityPacket.php:		return $handler->handleAnimateEntity($this);
src/pocketmine/network/mcpe/protocol/DisconnectPacket.php:		$this->hideDisconnectionScreen = $this->getBool();
src/pocketmine/network/mcpe/protocol/DisconnectPacket.php:		if(!$this->hideDisconnectionScreen){
src/pocketmine/network/mcpe/protocol/DisconnectPacket.php:			$this->message = $this->getString();
src/pocketmine/network/mcpe/protocol/DisconnectPacket.php:		$this->putBool($this->hideDisconnectionScreen);
src/pocketmine/network/mcpe/protocol/DisconnectPacket.php:		if(!$this->hideDisconnectionScreen){
src/pocketmine/network/mcpe/protocol/DisconnectPacket.php:			$this->putString($this->message);
src/pocketmine/network/mcpe/protocol/DisconnectPacket.php:		return $session->handleDisconnect($this);
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:	public $windowType = WindowTypes::TRADING; //Mojang hardcoded this -_-
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->windowId = $this->getByte();
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->windowType = $this->getByte();
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->windowSlotCount = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->tradeTier = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->traderEid = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->playerEid = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->displayName = $this->getString();
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->isV2Trading = $this->getBool();
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->isWilling = $this->getBool();
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->offers = $this->getRemaining();
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->putByte($this->windowId);
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->putByte($this->windowType);
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->putVarInt($this->windowSlotCount);
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->putVarInt($this->tradeTier);
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->putEntityUniqueId($this->traderEid);
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->putEntityUniqueId($this->playerEid);
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->putString($this->displayName);
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->putBool($this->isV2Trading);
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->putBool($this->isWilling);
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		$this->put($this->offers);
src/pocketmine/network/mcpe/protocol/UpdateTradePacket.php:		return $session->handleUpdateTrade($this);
src/pocketmine/network/mcpe/protocol/ItemStackResponsePacket.php:		$result->responses = $responses;
src/pocketmine/network/mcpe/protocol/ItemStackResponsePacket.php:	public function getResponses() : array{ return $this->responses; }
src/pocketmine/network/mcpe/protocol/ItemStackResponsePacket.php:		$this->responses = [];
src/pocketmine/network/mcpe/protocol/ItemStackResponsePacket.php:		for($i = 0, $len = $this->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/ItemStackResponsePacket.php:			$this->responses[] = ItemStackResponse::read($this);
src/pocketmine/network/mcpe/protocol/ItemStackResponsePacket.php:		$this->putUnsignedVarInt(count($this->responses));
src/pocketmine/network/mcpe/protocol/ItemStackResponsePacket.php:		foreach($this->responses as $response){
src/pocketmine/network/mcpe/protocol/ItemStackResponsePacket.php:			$response->write($this);
src/pocketmine/network/mcpe/protocol/ItemStackResponsePacket.php:		return $handler->handleItemStackResponse($this);
src/pocketmine/network/mcpe/protocol/ContainerOpenPacket.php:	public $entityUniqueId = -1;
src/pocketmine/network/mcpe/protocol/ContainerOpenPacket.php:		$this->windowId = $this->getByte();
src/pocketmine/network/mcpe/protocol/ContainerOpenPacket.php:		$this->type = $this->getByte();
src/pocketmine/network/mcpe/protocol/ContainerOpenPacket.php:		$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/ContainerOpenPacket.php:		$this->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/ContainerOpenPacket.php:		$this->putByte($this->windowId);
src/pocketmine/network/mcpe/protocol/ContainerOpenPacket.php:		$this->putByte($this->type);
src/pocketmine/network/mcpe/protocol/ContainerOpenPacket.php:		$this->putBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/ContainerOpenPacket.php:		$this->putEntityUniqueId($this->entityUniqueId);
src/pocketmine/network/mcpe/protocol/ContainerOpenPacket.php:		return $session->handleContainerOpen($this);
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$result->codeBuilderDefaultUri = $codeBuilderDefaultUri;
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$result->codeBuilderTitle = $codeBuilderTitle;
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$result->canResizeCodeBuilder = $canResizeCodeBuilder;
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$result->codeBuilderOverrideUri = $codeBuilderOverrideUri;
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$result->hasQuiz = $hasQuiz;
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		return $this->codeBuilderDefaultUri;
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		return $this->codeBuilderTitle;
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		return $this->canResizeCodeBuilder;
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		return $this->codeBuilderOverrideUri;
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		return $this->hasQuiz;
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$this->codeBuilderDefaultUri = $this->getString();
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$this->codeBuilderTitle = $this->getString();
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$this->canResizeCodeBuilder = $this->getBool();
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		if($this->getBool()){
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:			$this->codeBuilderOverrideUri = $this->getString();
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:			$this->codeBuilderOverrideUri = null;
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$this->hasQuiz = $this->getBool();
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$this->putString($this->codeBuilderDefaultUri);
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$this->putString($this->codeBuilderTitle);
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$this->putBool($this->canResizeCodeBuilder);
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$this->putBool($this->codeBuilderOverrideUri !== null);
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		if($this->codeBuilderOverrideUri !== null){
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:			$this->putString($this->codeBuilderOverrideUri);
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		$this->putBool($this->hasQuiz);
src/pocketmine/network/mcpe/protocol/EducationSettingsPacket.php:		return $handler->handleEducationSettings($this);
src/pocketmine/network/mcpe/protocol/PurchaseReceiptPacket.php:		$count = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/PurchaseReceiptPacket.php:			$this->entries[] = $this->getString();
src/pocketmine/network/mcpe/protocol/PurchaseReceiptPacket.php:		$this->putUnsignedVarInt(count($this->entries));
src/pocketmine/network/mcpe/protocol/PurchaseReceiptPacket.php:		foreach($this->entries as $entry){
src/pocketmine/network/mcpe/protocol/PurchaseReceiptPacket.php:			$this->putString($entry);
src/pocketmine/network/mcpe/protocol/PurchaseReceiptPacket.php:		return $session->handlePurchaseReceipt($this);
src/pocketmine/network/mcpe/protocol/LoginPacket.php:	 * @phpstan-var array{chain?: list<string>}
src/pocketmine/network/mcpe/protocol/LoginPacket.php:	 * @phpstan-var array<string, mixed>
src/pocketmine/network/mcpe/protocol/LoginPacket.php:		return $this->protocol !== ProtocolInfo::CURRENT_PROTOCOL;
src/pocketmine/network/mcpe/protocol/LoginPacket.php:		$this->protocol = $this->getInt();
src/pocketmine/network/mcpe/protocol/LoginPacket.php:			$this->decodeConnectionRequest();
src/pocketmine/network/mcpe/protocol/LoginPacket.php:			if($this->protocol === ProtocolInfo::CURRENT_PROTOCOL){
src/pocketmine/network/mcpe/protocol/LoginPacket.php:			$logger->debug(get_class($e) . " was thrown while decoding connection request in login (protocol version $this->protocol): " . $e->getMessage());
src/pocketmine/network/mcpe/protocol/LoginPacket.php:			foreach(Utils::printableTrace($e->getTrace()) as $line){
src/pocketmine/network/mcpe/protocol/LoginPacket.php:				$logger->debug($line);
src/pocketmine/network/mcpe/protocol/LoginPacket.php:		$buffer = new BinaryStream($this->getString());
src/pocketmine/network/mcpe/protocol/LoginPacket.php:		$this->chainData = json_decode($buffer->get($buffer->getLInt()), true);
src/pocketmine/network/mcpe/protocol/LoginPacket.php:		foreach($this->chainData["chain"] as $chain){
src/pocketmine/network/mcpe/protocol/LoginPacket.php:					$this->username = $webtoken["extraData"]["displayName"];
src/pocketmine/network/mcpe/protocol/LoginPacket.php:					$this->clientUUID = $webtoken["extraData"]["identity"];
src/pocketmine/network/mcpe/protocol/LoginPacket.php:					$this->xuid = $webtoken["extraData"]["XUID"];
src/pocketmine/network/mcpe/protocol/LoginPacket.php:				$this->identityPublicKey = $webtoken["identityPublicKey"];
src/pocketmine/network/mcpe/protocol/LoginPacket.php:		$this->clientDataJwt = $buffer->get($buffer->getLInt());
src/pocketmine/network/mcpe/protocol/LoginPacket.php:		$this->clientData = Utils::decodeJWT($this->clientDataJwt);
src/pocketmine/network/mcpe/protocol/LoginPacket.php:		$this->clientId = $this->clientData["ClientRandomId"] ?? null;
src/pocketmine/network/mcpe/protocol/LoginPacket.php:		$this->serverAddress = $this->clientData["ServerAddress"] ?? null;
src/pocketmine/network/mcpe/protocol/LoginPacket.php:		$this->locale = $this->clientData["LanguageCode"] ?? null;
src/pocketmine/network/mcpe/protocol/LoginPacket.php:		return $session->handleLogin($this);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$this->entries = [];
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$this->decodedEntries = [];
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$this->decodedEntries = [];
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$recipeCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$entry["type"] = $recipeType = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["recipe_id"] = $this->getString();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$ingredientCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:						$entry["input"][] = $in = $this->getRecipeIngredient();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:						$in->setCount(1); //TODO HACK: they send a useless count field which breaks the PM crafting system because it isn't always 1
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$resultCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:						$entry["output"][] = $this->getSlot();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["uuid"] = $this->getUUID()->toString();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["block"] = $this->getString();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["priority"] = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["net_id"] = $this->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["recipe_id"] = $this->getString();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["width"] = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["height"] = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:						$entry["input"][] = $in = $this->getRecipeIngredient();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:						$in->setCount(1); //TODO HACK: they send a useless count field which breaks the PM crafting system
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$resultCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:						$entry["output"][] = $this->getSlot();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["uuid"] = $this->getUUID()->toString();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["block"] = $this->getString();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["priority"] = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["net_id"] = $this->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$inputIdNet = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:						[$inputId, $inputData] = ItemTranslator::getInstance()->fromNetworkIdWithWildcardHandling($inputIdNet, 0x7fff);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:						$inputMetaNet = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:						[$inputId, $inputData] = ItemTranslator::getInstance()->fromNetworkIdWithWildcardHandling($inputIdNet, $inputMetaNet);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["output"] = $out = $this->getSlot();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					if($out->getDamage() === 0x7fff){
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:						$out->setDamage(0); //TODO HACK: some 1.12 furnace recipe outputs have wildcard damage values
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["block"] = $this->getString();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["uuid"] = $this->getUUID()->toString();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:					$entry["net_id"] = $this->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->decodedEntries[] = $entry;
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$inputIdNet = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$inputMetaNet = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			[$input, $inputMeta] = ItemTranslator::getInstance()->fromNetworkId($inputIdNet, $inputMetaNet);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$ingredientIdNet = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$ingredientMetaNet = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			[$ingredient, $ingredientMeta] = ItemTranslator::getInstance()->fromNetworkId($ingredientIdNet, $ingredientMetaNet);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$outputIdNet = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$outputMetaNet = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			[$output, $outputMeta] = ItemTranslator::getInstance()->fromNetworkId($outputIdNet, $outputMetaNet);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->potionTypeRecipes[] = new PotionTypeRecipe($input, $inputMeta, $ingredient, $ingredientMeta, $output, $outputMeta);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$inputIdNet = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			[$input, ] = ItemTranslator::getInstance()->fromNetworkId($inputIdNet, 0);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$ingredientIdNet = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			[$ingredient, ] = ItemTranslator::getInstance()->fromNetworkId($ingredientIdNet, 0);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$outputIdNet = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			[$output, ] = ItemTranslator::getInstance()->fromNetworkId($outputIdNet, 0);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->potionContainerRecipes[] = new PotionContainerChangeRecipe($input, $ingredient, $output);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$this->cleanRecipes = $this->getBool();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		return -1;
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putString(Binary::writeInt($pos)); //some kind of recipe ID, doesn't matter what it is as long as it's unique
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putUnsignedVarInt($recipe->getIngredientCount());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		foreach($recipe->getIngredientList() as $item){
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$stream->putRecipeIngredient($item);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$results = $recipe->getResults();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putUnsignedVarInt(count($results));
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$stream->putSlot($item);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->put(str_repeat("\x00", 16)); //Null UUID
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putString("crafting_table"); //TODO: blocktype (no prefix) (this might require internal API breaks)
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putVarInt(50); //TODO: priority
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->writeGenericTypeNetworkId($pos); //TODO: ANOTHER recipe ID, only used on the network
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putString(Binary::writeInt($pos)); //some kind of recipe ID, doesn't matter what it is as long as it's unique
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putVarInt($recipe->getWidth());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putVarInt($recipe->getHeight());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		for($z = 0; $z < $recipe->getHeight(); ++$z){
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			for($x = 0; $x < $recipe->getWidth(); ++$x){
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:				$stream->putRecipeIngredient($recipe->getIngredient($x, $z));
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$results = $recipe->getResults();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putUnsignedVarInt(count($results));
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$stream->putSlot($item);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->put(str_repeat("\x00", 16)); //Null UUID
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putString("crafting_table"); //TODO: blocktype (no prefix) (this might require internal API breaks)
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putVarInt(50); //TODO: priority
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->writeGenericTypeNetworkId($pos); //TODO: ANOTHER recipe ID, only used on the network
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$input = $recipe->getInput();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		if($input->hasAnyDamageValue()){
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			[$netId, ] = ItemTranslator::getInstance()->toNetworkId($input->getId(), 0);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			[$netId, $netData] = ItemTranslator::getInstance()->toNetworkId($input->getId(), $input->getDamage());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putVarInt($netId);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putVarInt($netData);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putSlot($recipe->getResult());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$stream->putString("furnace"); //TODO: blocktype (no prefix) (this might require internal API breaks)
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$this->entries[] = $recipe;
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$this->entries[] = $recipe;
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$this->entries[] = $recipe;
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$this->putUnsignedVarInt(count($this->entries));
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		foreach($this->entries as $d){
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:				$this->putVarInt($entryType);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:				$this->put($writer->getBuffer());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:				$this->putVarInt(-1);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$writer->reset();
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$this->putUnsignedVarInt(count($this->potionTypeRecipes));
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		foreach($this->potionTypeRecipes as $recipe){
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->putVarInt($recipe->getInputItemId());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->putVarInt($recipe->getInputItemMeta());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->putVarInt($recipe->getIngredientItemId());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->putVarInt($recipe->getIngredientItemMeta());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->putVarInt($recipe->getOutputItemId());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->putVarInt($recipe->getOutputItemMeta());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$this->putUnsignedVarInt(count($this->potionContainerRecipes));
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		foreach($this->potionContainerRecipes as $recipe){
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->putVarInt($recipe->getInputItemId());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->putVarInt($recipe->getIngredientItemId());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:			$this->putVarInt($recipe->getOutputItemId());
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		$this->putBool($this->cleanRecipes);
src/pocketmine/network/mcpe/protocol/CraftingDataPacket.php:		return $session->handleCraftingData($this);
src/pocketmine/network/mcpe/protocol/MapInfoRequestPacket.php:		$this->mapId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/MapInfoRequestPacket.php:		$this->putEntityUniqueId($this->mapId);
src/pocketmine/network/mcpe/protocol/MapInfoRequestPacket.php:		return $session->handleMapInfoRequest($this);
src/pocketmine/network/mcpe/protocol/SetCommandsEnabledPacket.php:		$this->enabled = $this->getBool();
src/pocketmine/network/mcpe/protocol/SetCommandsEnabledPacket.php:		$this->putBool($this->enabled);
src/pocketmine/network/mcpe/protocol/SetCommandsEnabledPacket.php:		return $session->handleSetCommandsEnabled($this);
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:	 * @phpstan-var array<int, array{0: int, 1: mixed}>
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->item = $this->getSlot();
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->motion = $this->getVector3();
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->metadata = $this->getEntityMetadata();
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->isFromFishing = $this->getBool();
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->putEntityUniqueId($this->entityUniqueId ?? $this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->putSlot($this->item);
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->putVector3Nullable($this->motion);
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->putEntityMetadata($this->metadata);
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		$this->putBool($this->isFromFishing);
src/pocketmine/network/mcpe/protocol/AddItemActorPacket.php:		return $session->handleAddItemActor($this);
src/pocketmine/network/mcpe/protocol/AnvilDamagePacket.php:		[$result->x, $result->y, $result->z] = [$x, $y, $z];
src/pocketmine/network/mcpe/protocol/AnvilDamagePacket.php:		$result->damageAmount = $damageAmount;
src/pocketmine/network/mcpe/protocol/AnvilDamagePacket.php:		return $this->damageAmount;
src/pocketmine/network/mcpe/protocol/AnvilDamagePacket.php:		return $this->x;
src/pocketmine/network/mcpe/protocol/AnvilDamagePacket.php:		return $this->y;
src/pocketmine/network/mcpe/protocol/AnvilDamagePacket.php:		return $this->z;
src/pocketmine/network/mcpe/protocol/AnvilDamagePacket.php:		$this->damageAmount = $this->getByte();
src/pocketmine/network/mcpe/protocol/AnvilDamagePacket.php:		$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/AnvilDamagePacket.php:		$this->putByte($this->damageAmount);
src/pocketmine/network/mcpe/protocol/AnvilDamagePacket.php:		$this->putBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/AnvilDamagePacket.php:		return $handler->handleAnvilDamage($this);
src/pocketmine/network/mcpe/protocol/ModalFormRequestPacket.php:		$this->formId = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/ModalFormRequestPacket.php:		$this->formData = $this->getString();
src/pocketmine/network/mcpe/protocol/ModalFormRequestPacket.php:		$this->putUnsignedVarInt($this->formId);
src/pocketmine/network/mcpe/protocol/ModalFormRequestPacket.php:		$this->putString($this->formData);
src/pocketmine/network/mcpe/protocol/ModalFormRequestPacket.php:		return $session->handleModalFormRequest($this);
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$result->action = $action;
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$result->trackingId = $trackingId;
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$result->nbt = $nbt;
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:	public function getAction() : int{ return $this->action; }
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:	public function getTrackingId() : int{ return $this->trackingId; }
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:	public function getNbt() : CompoundTag{ return $this->nbt; }
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$this->action = $this->getByte();
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$this->trackingId = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$offset = $this->getOffset();
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$nbt = (new NetworkLittleEndianNBTStream())->read($this->getBuffer(), false, $offset);
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$this->setOffset($offset);
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$this->nbt = $nbt;
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$this->putByte($this->action);
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$this->putVarInt($this->trackingId);
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		$this->put((new NetworkLittleEndianNBTStream())->write($this->nbt));
src/pocketmine/network/mcpe/protocol/PositionTrackingDBServerBroadcastPacket.php:		return $handler->handlePositionTrackingDBServerBroadcast($this);
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->packId = $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->maxChunkSize = $this->getLInt();
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->chunkCount = $this->getLInt();
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->compressedPackSize = $this->getLLong();
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->sha256 = $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->isPremium = $this->getBool();
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->packType = $this->getByte();
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->putString($this->packId);
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->putLInt($this->maxChunkSize);
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->putLInt($this->chunkCount);
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->putLLong($this->compressedPackSize);
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->putString($this->sha256);
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->putBool($this->isPremium);
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		$this->putByte($this->packType);
src/pocketmine/network/mcpe/protocol/ResourcePackDataInfoPacket.php:		return $session->handleResourcePackDataInfo($this);
src/pocketmine/network/mcpe/protocol/BlockActorDataPacket.php:		$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/BlockActorDataPacket.php:		$this->namedtag = $this->getRemaining();
src/pocketmine/network/mcpe/protocol/BlockActorDataPacket.php:		$this->putBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/BlockActorDataPacket.php:		$this->put($this->namedtag);
src/pocketmine/network/mcpe/protocol/BlockActorDataPacket.php:		return $session->handleBlockActorData($this);
src/pocketmine/network/mcpe/protocol/ServerSettingsResponsePacket.php:		$this->formId = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/ServerSettingsResponsePacket.php:		$this->formData = $this->getString();
src/pocketmine/network/mcpe/protocol/ServerSettingsResponsePacket.php:		$this->putUnsignedVarInt($this->formId);
src/pocketmine/network/mcpe/protocol/ServerSettingsResponsePacket.php:		$this->putString($this->formData);
src/pocketmine/network/mcpe/protocol/ServerSettingsResponsePacket.php:		return $session->handleServerSettingsResponse($this);
src/pocketmine/network/mcpe/protocol/ContainerClosePacket.php:		$this->windowId = $this->getByte();
src/pocketmine/network/mcpe/protocol/ContainerClosePacket.php:		$this->server = $this->getBool();
src/pocketmine/network/mcpe/protocol/ContainerClosePacket.php:		$this->putByte($this->windowId);
src/pocketmine/network/mcpe/protocol/ContainerClosePacket.php:		$this->putBool($this->server);
src/pocketmine/network/mcpe/protocol/ContainerClosePacket.php:		return $session->handleContainerClose($this);
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:		$result->hitHashes = $hitHashes;
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:		$result->missHashes = $missHashes;
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:		return $this->hitHashes;
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:		return $this->missHashes;
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:		$hitCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:		$missCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:			$this->hitHashes[] = $this->getLLong();
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:			$this->missHashes[] = $this->getLLong();
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:		$this->putUnsignedVarInt(count($this->hitHashes));
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:		$this->putUnsignedVarInt(count($this->missHashes));
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:		foreach($this->hitHashes as $hash){
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:			$this->putLLong($hash);
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:		foreach($this->missHashes as $hash){
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:			$this->putLLong($hash);
src/pocketmine/network/mcpe/protocol/ClientCacheBlobStatusPacket.php:		return $handler->handleClientCacheBlobStatus($this);
src/pocketmine/network/mcpe/protocol/DataPacket.php:		return (new \ReflectionClass($this))->getShortName();
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->offset = 0;
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->decodeHeader();
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->decodePayload();
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$header = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->senderSubId = ($header >> self::SENDER_SUBCLIENT_ID_SHIFT) & self::SUBCLIENT_ID_MASK;
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->recipientSubId = ($header >> self::RECIPIENT_SUBCLIENT_ID_SHIFT) & self::SUBCLIENT_ID_MASK;
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->reset();
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->encodeHeader();
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->encodePayload();
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->isEncoded = true;
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->putUnsignedVarInt(
src/pocketmine/network/mcpe/protocol/DataPacket.php:			($this->senderSubId << self::SENDER_SUBCLIENT_ID_SHIFT) |
src/pocketmine/network/mcpe/protocol/DataPacket.php:			($this->recipientSubId << self::RECIPIENT_SUBCLIENT_ID_SHIFT)
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->buffer = "";
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->isEncoded = false;
src/pocketmine/network/mcpe/protocol/DataPacket.php:		$this->offset = 0;
src/pocketmine/network/mcpe/protocol/GameRulesChangedPacket.php:	 * @phpstan-var array<string, array{0: int, 1: bool|int|float}>
src/pocketmine/network/mcpe/protocol/GameRulesChangedPacket.php:		$this->gameRules = $this->getGameRules();
src/pocketmine/network/mcpe/protocol/GameRulesChangedPacket.php:		$this->putGameRules($this->gameRules);
src/pocketmine/network/mcpe/protocol/GameRulesChangedPacket.php:		return $session->handleGameRulesChanged($this);
src/pocketmine/network/mcpe/protocol/LecternUpdatePacket.php:		$this->page = $this->getByte();
src/pocketmine/network/mcpe/protocol/LecternUpdatePacket.php:		$this->totalPages = $this->getByte();
src/pocketmine/network/mcpe/protocol/LecternUpdatePacket.php:		$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/LecternUpdatePacket.php:		$this->dropBook = $this->getBool();
src/pocketmine/network/mcpe/protocol/LecternUpdatePacket.php:		$this->putByte($this->page);
src/pocketmine/network/mcpe/protocol/LecternUpdatePacket.php:		$this->putByte($this->totalPages);
src/pocketmine/network/mcpe/protocol/LecternUpdatePacket.php:		$this->putBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/LecternUpdatePacket.php:		$this->putBool($this->dropBook);
src/pocketmine/network/mcpe/protocol/LecternUpdatePacket.php:		return $session->handleLecternUpdate($this);
src/pocketmine/network/mcpe/protocol/SetTimePacket.php:		$this->time = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetTimePacket.php:		$this->putVarInt($this->time);
src/pocketmine/network/mcpe/protocol/SetTimePacket.php:		return $session->handleSetTime($this);
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		$result->entityRuntimeId = $entityRuntimeId;
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		$result->emoteId = $emoteId;
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		$result->flags = $flags;
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		return $this->entityRuntimeId;
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		return $this->emoteId;
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		return $this->flags;
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		$this->emoteId = $this->getString();
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		$this->flags = $this->getByte();
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		$this->putString($this->emoteId);
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		$this->putByte($this->flags);
src/pocketmine/network/mcpe/protocol/EmotePacket.php:		return $handler->handleEmote($this);
src/pocketmine/network/mcpe/protocol/StructureTemplateDataResponsePacket.php:		$this->structureTemplateName = $this->getString();
src/pocketmine/network/mcpe/protocol/StructureTemplateDataResponsePacket.php:		if($this->getBool()){
src/pocketmine/network/mcpe/protocol/StructureTemplateDataResponsePacket.php:			$this->namedtag = $this->getRemaining();
src/pocketmine/network/mcpe/protocol/StructureTemplateDataResponsePacket.php:		$this->putString($this->structureTemplateName);
src/pocketmine/network/mcpe/protocol/StructureTemplateDataResponsePacket.php:		$this->putBool($this->namedtag !== null);
src/pocketmine/network/mcpe/protocol/StructureTemplateDataResponsePacket.php:		if($this->namedtag !== null){
src/pocketmine/network/mcpe/protocol/StructureTemplateDataResponsePacket.php:			$this->put($this->namedtag);
src/pocketmine/network/mcpe/protocol/StructureTemplateDataResponsePacket.php:		return $handler->handleStructureTemplateDataResponse($this);
src/pocketmine/network/mcpe/protocol/RemoveEntityPacket.php:		$result->uvarint1 = $uvarint1;
src/pocketmine/network/mcpe/protocol/RemoveEntityPacket.php:		return $this->uvarint1;
src/pocketmine/network/mcpe/protocol/RemoveEntityPacket.php:		$this->uvarint1 = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/RemoveEntityPacket.php:		$this->putUnsignedVarInt($this->uvarint1);
src/pocketmine/network/mcpe/protocol/RemoveEntityPacket.php:		return $handler->handleRemoveEntity($this);
src/pocketmine/network/mcpe/protocol/RiderJumpPacket.php:		$this->jumpStrength = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/RiderJumpPacket.php:		$this->putVarInt($this->jumpStrength);
src/pocketmine/network/mcpe/protocol/RiderJumpPacket.php:		return $session->handleRiderJump($this);
src/pocketmine/network/mcpe/protocol/PlayStatusPacket.php:		$this->status = $this->getInt();
src/pocketmine/network/mcpe/protocol/PlayStatusPacket.php:		$this->putInt($this->status);
src/pocketmine/network/mcpe/protocol/PlayStatusPacket.php:		return $session->handlePlayStatus($this);
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->flags = $this->getByte();
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->xRot = $this->getByteRotation();
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->yRot = $this->getByteRotation();
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->zRot = $this->getByteRotation();
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->putByte($this->flags);
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->putByteRotation($this->xRot);
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->putByteRotation($this->yRot);
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		$this->putByteRotation($this->zRot);
src/pocketmine/network/mcpe/protocol/MoveActorAbsolutePacket.php:		return $session->handleMoveActorAbsolute($this);
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$result->position = $position;
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$result->delta = $delta;
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$result->onGround = $onGround;
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$result->tick = $tick;
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:	public function getPosition() : Vector3{ return $this->position; }
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:	public function getDelta() : Vector3{ return $this->delta; }
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:	public function isOnGround() : bool{ return $this->onGround; }
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:	public function getTick() : int{ return $this->tick; }
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$this->delta = $this->getVector3();
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$this->onGround = $this->getBool();
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$this->tick = $this->getUnsignedVarLong();
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$this->putVector3($this->delta);
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$this->putBool($this->onGround);
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		$this->putUnsignedVarLong($this->tick);
src/pocketmine/network/mcpe/protocol/CorrectPlayerMovePredictionPacket.php:		return $handler->handleCorrectPlayerMovePrediction($this);
src/pocketmine/network/mcpe/protocol/SetActorLinkPacket.php:		$this->link = $this->getEntityLink();
src/pocketmine/network/mcpe/protocol/SetActorLinkPacket.php:		$this->putEntityLink($this->link);
src/pocketmine/network/mcpe/protocol/SetActorLinkPacket.php:		return $session->handleSetActorLink($this);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:	 * @phpstan-var array<int, array{0: int, 1: mixed}>
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->uuid = $this->getUUID();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->username = $this->getString();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->platformChatId = $this->getString();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->motion = $this->getVector3();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->pitch = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->yaw = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->headYaw = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->item = $this->getSlot();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->metadata = $this->getEntityMetadata();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->uvarint1 = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->uvarint2 = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->uvarint3 = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->uvarint4 = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->uvarint5 = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->long1 = $this->getLLong();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$linkCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:			$this->links[$i] = $this->getEntityLink();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->deviceId = $this->getString();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->buildPlatform = $this->getLInt();
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putUUID($this->uuid);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putString($this->username);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putEntityUniqueId($this->entityUniqueId ?? $this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putString($this->platformChatId);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putVector3Nullable($this->motion);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putLFloat($this->pitch);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putLFloat($this->yaw);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putLFloat($this->headYaw ?? $this->yaw);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putSlot($this->item);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putEntityMetadata($this->metadata);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putUnsignedVarInt($this->uvarint1);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putUnsignedVarInt($this->uvarint2);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putUnsignedVarInt($this->uvarint3);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putUnsignedVarInt($this->uvarint4);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putUnsignedVarInt($this->uvarint5);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putLLong($this->long1);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putUnsignedVarInt(count($this->links));
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		foreach($this->links as $link){
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:			$this->putEntityLink($link);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putString($this->deviceId);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		$this->putLInt($this->buildPlatform);
src/pocketmine/network/mcpe/protocol/AddPlayerPacket.php:		return $session->handleAddPlayer($this);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:		$this->entries = [];
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:		$this->type = $this->getByte();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:		$count = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:			if($this->type === self::TYPE_ADD){
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$entry->uuid = $this->getUUID();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$entry->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$entry->username = $this->getString();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$entry->xboxUserId = $this->getString();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$entry->platformChatId = $this->getString();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$entry->buildPlatform = $this->getLInt();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$entry->skinData = $this->getSkin();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$entry->isTeacher = $this->getBool();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$entry->isHost = $this->getBool();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$entry->uuid = $this->getUUID();
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:			$this->entries[$i] = $entry;
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:		if($this->type === self::TYPE_ADD){
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->entries[$i]->skinData->setVerified($this->getBool());
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:		$this->putByte($this->type);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:		$this->putUnsignedVarInt(count($this->entries));
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:		foreach($this->entries as $entry){
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:			if($this->type === self::TYPE_ADD){
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->putUUID($entry->uuid);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->putEntityUniqueId($entry->entityUniqueId);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->putString($entry->username);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->putString($entry->xboxUserId);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->putString($entry->platformChatId);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->putLInt($entry->buildPlatform);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->putSkin($entry->skinData);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->putBool($entry->isTeacher);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->putBool($entry->isHost);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->putUUID($entry->uuid);
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:		if($this->type === self::TYPE_ADD){
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:			foreach($this->entries as $entry){
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:				$this->putBool($entry->skinData->isVerified());
src/pocketmine/network/mcpe/protocol/PlayerListPacket.php:		return $session->handlePlayerList($this);
src/pocketmine/network/mcpe/protocol/MobArmorEquipmentPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/MobArmorEquipmentPacket.php:		$this->head = $this->getSlot();
src/pocketmine/network/mcpe/protocol/MobArmorEquipmentPacket.php:		$this->chest = $this->getSlot();
src/pocketmine/network/mcpe/protocol/MobArmorEquipmentPacket.php:		$this->legs = $this->getSlot();
src/pocketmine/network/mcpe/protocol/MobArmorEquipmentPacket.php:		$this->feet = $this->getSlot();
src/pocketmine/network/mcpe/protocol/MobArmorEquipmentPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/MobArmorEquipmentPacket.php:		$this->putSlot($this->head);
src/pocketmine/network/mcpe/protocol/MobArmorEquipmentPacket.php:		$this->putSlot($this->chest);
src/pocketmine/network/mcpe/protocol/MobArmorEquipmentPacket.php:		$this->putSlot($this->legs);
src/pocketmine/network/mcpe/protocol/MobArmorEquipmentPacket.php:		$this->putSlot($this->feet);
src/pocketmine/network/mcpe/protocol/MobArmorEquipmentPacket.php:		return $session->handleMobArmorEquipment($this);
src/pocketmine/network/mcpe/protocol/OnScreenTextureAnimationPacket.php:		$this->effectId = $this->getLInt(); //unsigned
src/pocketmine/network/mcpe/protocol/OnScreenTextureAnimationPacket.php:		$this->putLInt($this->effectId);
src/pocketmine/network/mcpe/protocol/OnScreenTextureAnimationPacket.php:		return $handler->handleOnScreenTextureAnimation($this);
src/pocketmine/network/mcpe/protocol/SetHealthPacket.php:		$this->health = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetHealthPacket.php:		$this->putVarInt($this->health);
src/pocketmine/network/mcpe/protocol/SetHealthPacket.php:		return $session->handleSetHealth($this);
src/pocketmine/network/mcpe/protocol/ActorPickRequestPacket.php:		$this->entityUniqueId = $this->getLLong();
src/pocketmine/network/mcpe/protocol/ActorPickRequestPacket.php:		$this->hotbarSlot = $this->getByte();
src/pocketmine/network/mcpe/protocol/ActorPickRequestPacket.php:		$this->putLLong($this->entityUniqueId);
src/pocketmine/network/mcpe/protocol/ActorPickRequestPacket.php:		$this->putByte($this->hotbarSlot);
src/pocketmine/network/mcpe/protocol/ActorPickRequestPacket.php:		return $session->handleActorPickRequest($this);
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$result->chunkX = $chunkX;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$result->chunkZ = $chunkZ;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$result->subChunkCount = $subChunkCount;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$result->extraPayload = $payload;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$result->cacheEnabled = false;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$result->chunkX = $chunkX;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$result->chunkZ = $chunkZ;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$result->subChunkCount = $subChunkCount;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$result->extraPayload = $extraPayload;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$result->cacheEnabled = true;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$result->usedBlobHashes = $usedBlobHashes;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		return $this->chunkX;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		return $this->chunkZ;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		return $this->subChunkCount;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		return $this->cacheEnabled;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		return $this->usedBlobHashes;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		return $this->extraPayload;
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$this->chunkX = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$this->chunkZ = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$this->subChunkCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$this->cacheEnabled = $this->getBool();
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		if($this->cacheEnabled){
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:			for($i =  0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:				$this->usedBlobHashes[] = $this->getLLong();
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$this->extraPayload = $this->getString();
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$this->putVarInt($this->chunkX);
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$this->putVarInt($this->chunkZ);
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$this->putUnsignedVarInt($this->subChunkCount);
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$this->putBool($this->cacheEnabled);
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		if($this->cacheEnabled){
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:			$this->putUnsignedVarInt(count($this->usedBlobHashes));
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:			foreach($this->usedBlobHashes as $hash){
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:				$this->putLLong($hash);
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		$this->putString($this->extraPayload);
src/pocketmine/network/mcpe/protocol/LevelChunkPacket.php:		return $handler->handleLevelChunk($this);
src/pocketmine/network/mcpe/protocol/ResourcePackChunkRequestPacket.php:		$this->packId = $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackChunkRequestPacket.php:		$this->chunkIndex = $this->getLInt();
src/pocketmine/network/mcpe/protocol/ResourcePackChunkRequestPacket.php:		$this->putString($this->packId);
src/pocketmine/network/mcpe/protocol/ResourcePackChunkRequestPacket.php:		$this->putLInt($this->chunkIndex);
src/pocketmine/network/mcpe/protocol/ResourcePackChunkRequestPacket.php:		return $session->handleResourcePackChunkRequest($this);
src/pocketmine/network/mcpe/protocol/CompletedUsingItemPacket.php:	public const ACTION_UNKNOWN = -1;
src/pocketmine/network/mcpe/protocol/CompletedUsingItemPacket.php:		$this->itemId = $this->getShort();
src/pocketmine/network/mcpe/protocol/CompletedUsingItemPacket.php:		$this->action = $this->getLInt();
src/pocketmine/network/mcpe/protocol/CompletedUsingItemPacket.php:		$this->putShort($this->itemId);
src/pocketmine/network/mcpe/protocol/CompletedUsingItemPacket.php:		$this->putLInt($this->action);
src/pocketmine/network/mcpe/protocol/CompletedUsingItemPacket.php:		return $session->handleCompletedUsingItem($this);
src/pocketmine/network/mcpe/protocol/NetworkChunkPublisherUpdatePacket.php:		$this->getSignedBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/NetworkChunkPublisherUpdatePacket.php:		$this->radius = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/NetworkChunkPublisherUpdatePacket.php:		$this->putSignedBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/NetworkChunkPublisherUpdatePacket.php:		$this->putUnsignedVarInt($this->radius);
src/pocketmine/network/mcpe/protocol/NetworkChunkPublisherUpdatePacket.php:		return $session->handleNetworkChunkPublisherUpdate($this);
src/pocketmine/network/mcpe/protocol/NpcRequestPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/NpcRequestPacket.php:		$this->requestType = $this->getByte();
src/pocketmine/network/mcpe/protocol/NpcRequestPacket.php:		$this->commandString = $this->getString();
src/pocketmine/network/mcpe/protocol/NpcRequestPacket.php:		$this->actionType = $this->getByte();
src/pocketmine/network/mcpe/protocol/NpcRequestPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/NpcRequestPacket.php:		$this->putByte($this->requestType);
src/pocketmine/network/mcpe/protocol/NpcRequestPacket.php:		$this->putString($this->commandString);
src/pocketmine/network/mcpe/protocol/NpcRequestPacket.php:		$this->putByte($this->actionType);
src/pocketmine/network/mcpe/protocol/NpcRequestPacket.php:		return $session->handleNpcRequest($this);
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		$pid = $this->getByte();
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		$data = $this->getRemaining();
src/pocketmine/network/mcpe/protocol/BatchPacket.php:			$this->payload = zlib_decode($data, 1024 * 1024 * 2); //Max 2MB
src/pocketmine/network/mcpe/protocol/BatchPacket.php:			$this->payload = "";
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		$this->putByte(static::NETWORK_ID);
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		$encoded = zlib_encode($this->payload, ZLIB_ENCODING_RAW, $this->compressionLevel);
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		$this->put($encoded);
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		if(!$packet->canBeBatched()){
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		if(!$packet->isEncoded){
src/pocketmine/network/mcpe/protocol/BatchPacket.php:			$packet->encode();
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		$this->payload .= Binary::writeUnsignedVarInt(strlen($packet->buffer)) . $packet->buffer;
src/pocketmine/network/mcpe/protocol/BatchPacket.php:	 * @phpstan-return \Generator<int, string, void, void>
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		$stream = new NetworkBinaryStream($this->payload);
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		while(!$stream->feof()){
src/pocketmine/network/mcpe/protocol/BatchPacket.php:			yield $stream->getString();
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		return $this->compressionLevel;
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		$this->compressionLevel = $level;
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		if($this->payload === ""){
src/pocketmine/network/mcpe/protocol/BatchPacket.php:		foreach($this->getPackets() as $buf){
src/pocketmine/network/mcpe/protocol/BatchPacket.php:			if(!$pk->canBeBatched()){
src/pocketmine/network/mcpe/protocol/BatchPacket.php:			$session->handleDataPacket($pk);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$result->position = $position->asVector3();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$result->pitch = $pitch;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$result->yaw = $yaw;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$result->headYaw = $headYaw;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$result->moveVecX = $moveVecX;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$result->moveVecZ = $moveVecZ;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$result->inputFlags = $inputFlags;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$result->inputMode = $inputMode;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$result->playMode = $playMode;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:			$result->vrGazeDirection = $vrGazeDirection->asVector3();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$result->tick = $tick;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$result->delta = $delta;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		return $this->position;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		return $this->pitch;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		return $this->yaw;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		return $this->headYaw;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		return $this->moveVecX;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		return $this->moveVecZ;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		return $this->inputFlags;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		return $this->inputMode;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		return $this->playMode;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		return $this->vrGazeDirection;
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:	public function getTick() : int{ return $this->tick; }
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:	public function getDelta() : Vector3{ return $this->delta; }
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->pitch = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->yaw = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->moveVecX = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->moveVecZ = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->headYaw = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->inputFlags = $this->getUnsignedVarLong();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->inputMode = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->playMode = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		if($this->playMode === PlayMode::VR){
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:			$this->vrGazeDirection = $this->getVector3();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->tick = $this->getUnsignedVarLong();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->delta = $this->getVector3();
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->putLFloat($this->pitch);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->putLFloat($this->yaw);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->putLFloat($this->moveVecX);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->putLFloat($this->moveVecZ);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->putLFloat($this->headYaw);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->putUnsignedVarLong($this->inputFlags);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->putUnsignedVarInt($this->inputMode);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->putUnsignedVarInt($this->playMode);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		if($this->playMode === PlayMode::VR){
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:			assert($this->vrGazeDirection !== null);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:			$this->putVector3($this->vrGazeDirection);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->putUnsignedVarLong($this->tick);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		$this->putVector3($this->delta);
src/pocketmine/network/mcpe/protocol/PlayerAuthInputPacket.php:		return $handler->handlePlayerAuthInput($this);
src/pocketmine/network/mcpe/protocol/UpdateAttributesPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/UpdateAttributesPacket.php:		$this->entries = $this->getAttributeList();
src/pocketmine/network/mcpe/protocol/UpdateAttributesPacket.php:		$this->tick = $this->getUnsignedVarLong();
src/pocketmine/network/mcpe/protocol/UpdateAttributesPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/UpdateAttributesPacket.php:		$this->putAttributeList(...$this->entries);
src/pocketmine/network/mcpe/protocol/UpdateAttributesPacket.php:		$this->putUnsignedVarLong($this->tick);
src/pocketmine/network/mcpe/protocol/UpdateAttributesPacket.php:		return $session->handleUpdateAttributes($this);
src/pocketmine/network/mcpe/protocol/CodeBuilderPacket.php:		$result->url = $url;
src/pocketmine/network/mcpe/protocol/CodeBuilderPacket.php:		$result->openCodeBuilder = $openCodeBuilder;
src/pocketmine/network/mcpe/protocol/CodeBuilderPacket.php:		return $this->url;
src/pocketmine/network/mcpe/protocol/CodeBuilderPacket.php:		return $this->openCodeBuilder;
src/pocketmine/network/mcpe/protocol/CodeBuilderPacket.php:		$this->url = $this->getString();
src/pocketmine/network/mcpe/protocol/CodeBuilderPacket.php:		$this->openCodeBuilder = $this->getBool();
src/pocketmine/network/mcpe/protocol/CodeBuilderPacket.php:		$this->putString($this->url);
src/pocketmine/network/mcpe/protocol/CodeBuilderPacket.php:		$this->putBool($this->openCodeBuilder);
src/pocketmine/network/mcpe/protocol/CodeBuilderPacket.php:		return $handler->handleCodeBuilder($this);
src/pocketmine/network/mcpe/protocol/PlayerHotbarPacket.php:		$this->selectedHotbarSlot = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/PlayerHotbarPacket.php:		$this->windowId = $this->getByte();
src/pocketmine/network/mcpe/protocol/PlayerHotbarPacket.php:		$this->selectHotbarSlot = $this->getBool();
src/pocketmine/network/mcpe/protocol/PlayerHotbarPacket.php:		$this->putUnsignedVarInt($this->selectedHotbarSlot);
src/pocketmine/network/mcpe/protocol/PlayerHotbarPacket.php:		$this->putByte($this->windowId);
src/pocketmine/network/mcpe/protocol/PlayerHotbarPacket.php:		$this->putBool($this->selectHotbarSlot);
src/pocketmine/network/mcpe/protocol/PlayerHotbarPacket.php:		return $session->handlePlayerHotbar($this);
src/pocketmine/network/mcpe/protocol/UpdateEquipPacket.php:		$this->windowId = $this->getByte();
src/pocketmine/network/mcpe/protocol/UpdateEquipPacket.php:		$this->windowType = $this->getByte();
src/pocketmine/network/mcpe/protocol/UpdateEquipPacket.php:		$this->windowSlotCount = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/UpdateEquipPacket.php:		$this->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/UpdateEquipPacket.php:		$this->namedtag = $this->getRemaining();
src/pocketmine/network/mcpe/protocol/UpdateEquipPacket.php:		$this->putByte($this->windowId);
src/pocketmine/network/mcpe/protocol/UpdateEquipPacket.php:		$this->putByte($this->windowType);
src/pocketmine/network/mcpe/protocol/UpdateEquipPacket.php:		$this->putVarInt($this->windowSlotCount);
src/pocketmine/network/mcpe/protocol/UpdateEquipPacket.php:		$this->putEntityUniqueId($this->entityUniqueId);
src/pocketmine/network/mcpe/protocol/UpdateEquipPacket.php:		$this->put($this->namedtag);
src/pocketmine/network/mcpe/protocol/UpdateEquipPacket.php:		return $session->handleUpdateEquip($this);
src/pocketmine/network/mcpe/protocol/TransferPacket.php:		$this->address = $this->getString();
src/pocketmine/network/mcpe/protocol/TransferPacket.php:		$this->port = $this->getLShort();
src/pocketmine/network/mcpe/protocol/TransferPacket.php:		$this->putString($this->address);
src/pocketmine/network/mcpe/protocol/TransferPacket.php:		$this->putLShort($this->port);
src/pocketmine/network/mcpe/protocol/TransferPacket.php:		return $session->handleTransfer($this);
src/pocketmine/network/mcpe/protocol/RemoveObjectivePacket.php:		$this->objectiveName = $this->getString();
src/pocketmine/network/mcpe/protocol/RemoveObjectivePacket.php:		$this->putString($this->objectiveName);
src/pocketmine/network/mcpe/protocol/RemoveObjectivePacket.php:		return $session->handleRemoveObjective($this);
src/pocketmine/network/mcpe/protocol/ClientToServerHandshakePacket.php:		return $session->handleClientToServerHandshake($this);
src/pocketmine/network/mcpe/protocol/UpdateSoftEnumPacket.php:		$this->enumName = $this->getString();
src/pocketmine/network/mcpe/protocol/UpdateSoftEnumPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/UpdateSoftEnumPacket.php:			$this->values[] = $this->getString();
src/pocketmine/network/mcpe/protocol/UpdateSoftEnumPacket.php:		$this->type = $this->getByte();
src/pocketmine/network/mcpe/protocol/UpdateSoftEnumPacket.php:		$this->putString($this->enumName);
src/pocketmine/network/mcpe/protocol/UpdateSoftEnumPacket.php:		$this->putUnsignedVarInt(count($this->values));
src/pocketmine/network/mcpe/protocol/UpdateSoftEnumPacket.php:		foreach($this->values as $v){
src/pocketmine/network/mcpe/protocol/UpdateSoftEnumPacket.php:			$this->putString($v);
src/pocketmine/network/mcpe/protocol/UpdateSoftEnumPacket.php:		$this->putByte($this->type);
src/pocketmine/network/mcpe/protocol/UpdateSoftEnumPacket.php:		return $session->handleUpdateSoftEnum($this);
src/pocketmine/network/mcpe/protocol/SetDefaultGameTypePacket.php:		$this->gamemode = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetDefaultGameTypePacket.php:		$this->putUnsignedVarInt($this->gamemode);
src/pocketmine/network/mcpe/protocol/SetDefaultGameTypePacket.php:		return $session->handleSetDefaultGameType($this);
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:		$result->intensity = $intensity;
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:		$result->duration = $duration;
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:		$result->shakeType = $shakeType;
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:	public function getIntensity() : float{ return $this->intensity; }
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:	public function getDuration() : float{ return $this->duration; }
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:	public function getShakeType() : int{ return $this->shakeType; }
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:		$this->intensity = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:		$this->duration = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:		$this->shakeType = $this->getByte();
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:		$this->putLFloat($this->intensity);
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:		$this->putLFloat($this->duration);
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:		$this->putByte($this->shakeType);
src/pocketmine/network/mcpe/protocol/CameraShakePacket.php:		return $handler->handleCameraShake($this);
src/pocketmine/network/mcpe/protocol/ItemStackRequestPacket.php:		$result->requests = $requests;
src/pocketmine/network/mcpe/protocol/ItemStackRequestPacket.php:	public function getRequests() : array{ return $this->requests; }
src/pocketmine/network/mcpe/protocol/ItemStackRequestPacket.php:		$this->requests = [];
src/pocketmine/network/mcpe/protocol/ItemStackRequestPacket.php:		for($i = 0, $len = $this->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/ItemStackRequestPacket.php:			$this->requests[] = ItemStackRequest::read($this);
src/pocketmine/network/mcpe/protocol/ItemStackRequestPacket.php:		$this->putUnsignedVarInt(count($this->requests));
src/pocketmine/network/mcpe/protocol/ItemStackRequestPacket.php:		foreach($this->requests as $request){
src/pocketmine/network/mcpe/protocol/ItemStackRequestPacket.php:			$request->write($this);
src/pocketmine/network/mcpe/protocol/ItemStackRequestPacket.php:		return $handler->handleItemStackRequest($this);
src/pocketmine/network/mcpe/protocol/CameraPacket.php:		$this->cameraUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/CameraPacket.php:		$this->playerUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/CameraPacket.php:		$this->putEntityUniqueId($this->cameraUniqueId);
src/pocketmine/network/mcpe/protocol/CameraPacket.php:		$this->putEntityUniqueId($this->playerUniqueId);
src/pocketmine/network/mcpe/protocol/CameraPacket.php:		return $session->handleCamera($this);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:	public $extraData = -1;
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->sound = $this->getByte();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->extraData = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->entityType = $this->getString();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->isBabyMob = $this->getBool();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->disableRelativeVolume = $this->getBool();
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->putByte($this->sound);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->putVarInt($this->extraData);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->putString($this->entityType);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->putBool($this->isBabyMob);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		$this->putBool($this->disableRelativeVolume);
src/pocketmine/network/mcpe/protocol/LevelSoundEventPacketV2.php:		return $session->handleLevelSoundEventPacketV2($this);
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->pitch = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->yaw = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->headYaw = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->mode = $this->getByte();
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->onGround = $this->getBool();
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->ridingEid = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		if($this->mode === MovePlayerPacket::MODE_TELEPORT){
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:			$this->teleportCause = $this->getLInt();
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:			$this->teleportItem = $this->getLInt();
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->tick = $this->getUnsignedVarLong();
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->putLFloat($this->pitch);
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->putLFloat($this->yaw);
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->putLFloat($this->headYaw); //TODO
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->putByte($this->mode);
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->putBool($this->onGround);
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->putEntityRuntimeId($this->ridingEid);
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		if($this->mode === MovePlayerPacket::MODE_TELEPORT){
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:			$this->putLInt($this->teleportCause);
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:			$this->putLInt($this->teleportItem);
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		$this->putUnsignedVarLong($this->tick);
src/pocketmine/network/mcpe/protocol/MovePlayerPacket.php:		return $session->handleMovePlayer($this);
src/pocketmine/network/mcpe/protocol/RequestChunkRadiusPacket.php:		$this->radius = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/RequestChunkRadiusPacket.php:		$this->putVarInt($this->radius);
src/pocketmine/network/mcpe/protocol/RequestChunkRadiusPacket.php:		return $session->handleRequestChunkRadius($this);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		$this->requestId = $this->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		$this->requestChangedSlots = [];
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		if($this->requestId !== 0){
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:			for($i = 0, $len = $this->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->requestChangedSlots[] = InventoryTransactionChangedSlotsHack::read($this);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		$this->transactionType = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		$this->hasItemStackIds = $this->getBool();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:			$this->actions[] = $action = (new NetworkInventoryAction())->read($this, $this->hasItemStackIds);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		$this->trData = new \stdClass();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		switch($this->transactionType){
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->actionType = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->getBlockPosition($this->trData->x, $this->trData->y, $this->trData->z);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->face = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->hotbarSlot = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->itemInHand = $this->getSlot();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->playerPos = $this->getVector3();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->clickPos = $this->getVector3();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->blockRuntimeId = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->actionType = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->hotbarSlot = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->itemInHand = $this->getSlot();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->playerPos = $this->getVector3();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->clickPos = $this->getVector3();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->actionType = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->hotbarSlot = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->itemInHand = $this->getSlot();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->trData->headPos = $this->getVector3();
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				throw new \UnexpectedValueException("Unknown transaction type $this->transactionType");
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		$this->writeGenericTypeNetworkId($this->requestId);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		if($this->requestId !== 0){
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:			$this->putUnsignedVarInt(count($this->requestChangedSlots));
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:			foreach($this->requestChangedSlots as $changedSlots){
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$changedSlots->write($this);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		$this->putUnsignedVarInt($this->transactionType);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		$this->putBool($this->hasItemStackIds);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		$this->putUnsignedVarInt(count($this->actions));
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		foreach($this->actions as $action){
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:			$action->write($this, $this->hasItemStackIds);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		switch($this->transactionType){
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putUnsignedVarInt($this->trData->actionType);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putBlockPosition($this->trData->x, $this->trData->y, $this->trData->z);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putVarInt($this->trData->face);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putVarInt($this->trData->hotbarSlot);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putSlot($this->trData->itemInHand);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putVector3($this->trData->playerPos);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putVector3($this->trData->clickPos);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putUnsignedVarInt($this->trData->blockRuntimeId);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putEntityRuntimeId($this->trData->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putUnsignedVarInt($this->trData->actionType);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putVarInt($this->trData->hotbarSlot);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putSlot($this->trData->itemInHand);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putVector3($this->trData->playerPos);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putVector3($this->trData->clickPos);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putUnsignedVarInt($this->trData->actionType);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putVarInt($this->trData->hotbarSlot);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putSlot($this->trData->itemInHand);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				$this->putVector3($this->trData->headPos);
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:				throw new \InvalidArgumentException("Unknown transaction type $this->transactionType");
src/pocketmine/network/mcpe/protocol/InventoryTransactionPacket.php:		return $session->handleInventoryTransaction($this);
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:	 * @phpstan-var list<ItemComponentPacketEntry>
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:	 * @phpstan-param list<ItemComponentPacketEntry> $entries
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:		$result->entries = $entries;
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:	 * @phpstan-return list<ItemComponentPacketEntry>
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:	public function getEntries() : array{ return $this->entries; }
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:		$this->entries = [];
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:		for($i = 0, $len = $this->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:			$name = $this->getString();
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:			$nbt = $this->getNbtCompoundRoot();
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:			$this->entries[] = new ItemComponentPacketEntry($name, $nbt);
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:		$this->putUnsignedVarInt(count($this->entries));
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:		foreach($this->entries as $entry){
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:			$this->putString($entry->getName());
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:			$this->put((new NetworkLittleEndianNBTStream())->write($entry->getComponentNbt()));
src/pocketmine/network/mcpe/protocol/ItemComponentPacket.php:		return $handler->handleItemComponent($this);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:		$this->type = $this->getByte();
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:		$this->inventorySlot = $this->getByte();
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:		switch($this->type){
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->pageNumber = $this->getByte();
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->text = $this->getString();
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->photoName = $this->getString();
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->pageNumber = $this->getByte();
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->pageNumber = $this->getByte();
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->secondaryPageNumber = $this->getByte();
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->title = $this->getString();
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->author = $this->getString();
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->xuid = $this->getString();
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				throw new \UnexpectedValueException("Unknown book edit type $this->type!");
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:		$this->putByte($this->type);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:		$this->putByte($this->inventorySlot);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:		switch($this->type){
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->putByte($this->pageNumber);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->putString($this->text);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->putString($this->photoName);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->putByte($this->pageNumber);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->putByte($this->pageNumber);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->putByte($this->secondaryPageNumber);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->putString($this->title);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->putString($this->author);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				$this->putString($this->xuid);
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:				throw new \InvalidArgumentException("Unknown book edit type $this->type!");
src/pocketmine/network/mcpe/protocol/BookEditPacket.php:		return $session->handleBookEdit($this);
src/pocketmine/network/mcpe/protocol/PhotoTransferPacket.php:		$this->photoName = $this->getString();
src/pocketmine/network/mcpe/protocol/PhotoTransferPacket.php:		$this->photoData = $this->getString();
src/pocketmine/network/mcpe/protocol/PhotoTransferPacket.php:		$this->bookId = $this->getString();
src/pocketmine/network/mcpe/protocol/PhotoTransferPacket.php:		$this->putString($this->photoName);
src/pocketmine/network/mcpe/protocol/PhotoTransferPacket.php:		$this->putString($this->photoData);
src/pocketmine/network/mcpe/protocol/PhotoTransferPacket.php:		$this->putString($this->bookId);
src/pocketmine/network/mcpe/protocol/PhotoTransferPacket.php:		return $session->handlePhotoTransfer($this);
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:	 * @phpstan-var list<string>
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:	 * @phpstan-param list<string> $fogLayers
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:		$result->fogLayers = $fogLayers;
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:	 * @phpstan-return list<string>
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:	public function getFogLayers() : array{ return $this->fogLayers; }
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:		$this->fogLayers = [];
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:		for($i = 0, $len = $this->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:			$this->fogLayers[] = $this->getString();
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:		$this->putUnsignedVarInt(count($this->fogLayers));
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:		foreach($this->fogLayers as $fogLayer){
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:			$this->putString($fogLayer);
src/pocketmine/network/mcpe/protocol/PlayerFogPacket.php:		return $handler->handlePlayerFog($this);
src/pocketmine/network/mcpe/protocol/SetActorDataPacket.php:	 * @phpstan-var array<int, array{0: int, 1: mixed}>
src/pocketmine/network/mcpe/protocol/SetActorDataPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/SetActorDataPacket.php:		$this->metadata = $this->getEntityMetadata();
src/pocketmine/network/mcpe/protocol/SetActorDataPacket.php:		$this->tick = $this->getUnsignedVarLong();
src/pocketmine/network/mcpe/protocol/SetActorDataPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/SetActorDataPacket.php:		$this->putEntityMetadata($this->metadata);
src/pocketmine/network/mcpe/protocol/SetActorDataPacket.php:		$this->putUnsignedVarLong($this->tick);
src/pocketmine/network/mcpe/protocol/SetActorDataPacket.php:		return $session->handleSetActorData($this);
src/pocketmine/network/mcpe/protocol/MapCreateLockedCopyPacket.php:		$this->originalMapId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/MapCreateLockedCopyPacket.php:		$this->newMapId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/MapCreateLockedCopyPacket.php:		$this->putEntityUniqueId($this->originalMapId);
src/pocketmine/network/mcpe/protocol/MapCreateLockedCopyPacket.php:		$this->putEntityUniqueId($this->newMapId);
src/pocketmine/network/mcpe/protocol/MapCreateLockedCopyPacket.php:		return $handler->handleMapCreateLockedCopy($this);
src/pocketmine/network/mcpe/protocol/SpawnParticleEffectPacket.php:	public $entityUniqueId = -1; //default none
src/pocketmine/network/mcpe/protocol/SpawnParticleEffectPacket.php:		$this->dimensionId = $this->getByte();
src/pocketmine/network/mcpe/protocol/SpawnParticleEffectPacket.php:		$this->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/SpawnParticleEffectPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/SpawnParticleEffectPacket.php:		$this->particleName = $this->getString();
src/pocketmine/network/mcpe/protocol/SpawnParticleEffectPacket.php:		$this->putByte($this->dimensionId);
src/pocketmine/network/mcpe/protocol/SpawnParticleEffectPacket.php:		$this->putEntityUniqueId($this->entityUniqueId);
src/pocketmine/network/mcpe/protocol/SpawnParticleEffectPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/SpawnParticleEffectPacket.php:		$this->putString($this->particleName);
src/pocketmine/network/mcpe/protocol/SpawnParticleEffectPacket.php:		return $session->handleSpawnParticleEffect($this);
src/pocketmine/network/mcpe/protocol/SetDisplayObjectivePacket.php:		$this->displaySlot = $this->getString();
src/pocketmine/network/mcpe/protocol/SetDisplayObjectivePacket.php:		$this->objectiveName = $this->getString();
src/pocketmine/network/mcpe/protocol/SetDisplayObjectivePacket.php:		$this->displayName = $this->getString();
src/pocketmine/network/mcpe/protocol/SetDisplayObjectivePacket.php:		$this->criteriaName = $this->getString();
src/pocketmine/network/mcpe/protocol/SetDisplayObjectivePacket.php:		$this->sortOrder = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetDisplayObjectivePacket.php:		$this->putString($this->displaySlot);
src/pocketmine/network/mcpe/protocol/SetDisplayObjectivePacket.php:		$this->putString($this->objectiveName);
src/pocketmine/network/mcpe/protocol/SetDisplayObjectivePacket.php:		$this->putString($this->displayName);
src/pocketmine/network/mcpe/protocol/SetDisplayObjectivePacket.php:		$this->putString($this->criteriaName);
src/pocketmine/network/mcpe/protocol/SetDisplayObjectivePacket.php:		$this->putVarInt($this->sortOrder);
src/pocketmine/network/mcpe/protocol/SetDisplayObjectivePacket.php:		return $session->handleSetDisplayObjective($this);
src/pocketmine/network/mcpe/protocol/TextPacket.php:		$this->type = $this->getByte();
src/pocketmine/network/mcpe/protocol/TextPacket.php:		$this->needsTranslation = $this->getBool();
src/pocketmine/network/mcpe/protocol/TextPacket.php:		switch($this->type){
src/pocketmine/network/mcpe/protocol/TextPacket.php:				$this->sourceName = $this->getString();
src/pocketmine/network/mcpe/protocol/TextPacket.php:				$this->message = $this->getString();
src/pocketmine/network/mcpe/protocol/TextPacket.php:				$this->message = $this->getString();
src/pocketmine/network/mcpe/protocol/TextPacket.php:				$count = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/TextPacket.php:					$this->parameters[] = $this->getString();
src/pocketmine/network/mcpe/protocol/TextPacket.php:		$this->xboxUserId = $this->getString();
src/pocketmine/network/mcpe/protocol/TextPacket.php:		$this->platformChatId = $this->getString();
src/pocketmine/network/mcpe/protocol/TextPacket.php:		$this->putByte($this->type);
src/pocketmine/network/mcpe/protocol/TextPacket.php:		$this->putBool($this->needsTranslation);
src/pocketmine/network/mcpe/protocol/TextPacket.php:		switch($this->type){
src/pocketmine/network/mcpe/protocol/TextPacket.php:				$this->putString($this->sourceName);
src/pocketmine/network/mcpe/protocol/TextPacket.php:				$this->putString($this->message);
src/pocketmine/network/mcpe/protocol/TextPacket.php:				$this->putString($this->message);
src/pocketmine/network/mcpe/protocol/TextPacket.php:				$this->putUnsignedVarInt(count($this->parameters));
src/pocketmine/network/mcpe/protocol/TextPacket.php:				foreach($this->parameters as $p){
src/pocketmine/network/mcpe/protocol/TextPacket.php:					$this->putString($p);
src/pocketmine/network/mcpe/protocol/TextPacket.php:		$this->putString($this->xboxUserId);
src/pocketmine/network/mcpe/protocol/TextPacket.php:		$this->putString($this->platformChatId);
src/pocketmine/network/mcpe/protocol/TextPacket.php:		return $session->handleText($this);
src/pocketmine/network/mcpe/protocol/PlayerActionPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/PlayerActionPacket.php:		$this->action = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/PlayerActionPacket.php:		$this->getBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/PlayerActionPacket.php:		$this->face = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/PlayerActionPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/PlayerActionPacket.php:		$this->putVarInt($this->action);
src/pocketmine/network/mcpe/protocol/PlayerActionPacket.php:		$this->putBlockPosition($this->x, $this->y, $this->z);
src/pocketmine/network/mcpe/protocol/PlayerActionPacket.php:		$this->putVarInt($this->face);
src/pocketmine/network/mcpe/protocol/PlayerActionPacket.php:		return $session->handlePlayerAction($this);
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		$this->mustAccept = $this->getBool();
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		$behaviorPackCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		while($behaviorPackCount-- > 0){
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		$resourcePackCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		while($resourcePackCount-- > 0){
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		$this->baseGameVersion = $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		$this->experiments = Experiments::read($this);
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		$this->putBool($this->mustAccept);
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		$this->putUnsignedVarInt(count($this->behaviorPackStack));
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		foreach($this->behaviorPackStack as $entry){
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->putString($entry->getPackId());
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->putString($entry->getPackVersion());
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->putString(""); //TODO: subpack name
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		$this->putUnsignedVarInt(count($this->resourcePackStack));
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		foreach($this->resourcePackStack as $entry){
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->putString($entry->getPackId());
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->putString($entry->getPackVersion());
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:			$this->putString(""); //TODO: subpack name
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		$this->putString($this->baseGameVersion);
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		$this->experiments->write($this);
src/pocketmine/network/mcpe/protocol/ResourcePackStackPacket.php:		return $session->handleResourcePackStack($this);
src/pocketmine/network/mcpe/protocol/ShowCreditsPacket.php:		$this->playerEid = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/ShowCreditsPacket.php:		$this->status = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/ShowCreditsPacket.php:		$this->putEntityRuntimeId($this->playerEid);
src/pocketmine/network/mcpe/protocol/ShowCreditsPacket.php:		$this->putVarInt($this->status);
src/pocketmine/network/mcpe/protocol/ShowCreditsPacket.php:		return $session->handleShowCredits($this);
src/pocketmine/network/mcpe/protocol/SetPlayerGameTypePacket.php:		$this->gamemode = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/SetPlayerGameTypePacket.php:		$this->putVarInt($this->gamemode);
src/pocketmine/network/mcpe/protocol/SetPlayerGameTypePacket.php:		return $session->handleSetPlayerGameType($this);
src/pocketmine/network/mcpe/protocol/types/EntityLink.php:		$this->fromEntityUniqueId = $fromEntityUniqueId;
src/pocketmine/network/mcpe/protocol/types/EntityLink.php:		$this->toEntityUniqueId = $toEntityUniqueId;
src/pocketmine/network/mcpe/protocol/types/EntityLink.php:		$this->type = $type;
src/pocketmine/network/mcpe/protocol/types/EntityLink.php:		$this->immediate = $immediate;
src/pocketmine/network/mcpe/protocol/types/EntityLink.php:		$this->causedByRider = $causedByRider;
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		$this->biomeType = $biomeType;
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		$this->biomeName = $biomeName;
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		$this->dimension = $dimension;
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		return $this->biomeType;
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		return $this->biomeName;
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		return $this->dimension;
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		$biomeType = $in->getLShort();
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		$biomeName = $in->getString();
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		$dimension = $in->getVarInt();
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		$out->putLShort($this->biomeType);
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		$out->putString($this->biomeName);
src/pocketmine/network/mcpe/protocol/types/SpawnSettings.php:		$out->putVarInt($this->dimension);
src/pocketmine/network/mcpe/protocol/types/Experiments.php:	 * @phpstan-var array<string, bool>
src/pocketmine/network/mcpe/protocol/types/Experiments.php:	 * @phpstan-param array<string, bool> $experiments
src/pocketmine/network/mcpe/protocol/types/Experiments.php:		$this->experiments = $experiments;
src/pocketmine/network/mcpe/protocol/types/Experiments.php:		$this->hasPreviouslyUsedExperiments = $hasPreviouslyUsedExperiments;
src/pocketmine/network/mcpe/protocol/types/Experiments.php:	public function getExperiments() : array{ return $this->experiments; }
src/pocketmine/network/mcpe/protocol/types/Experiments.php:	public function hasPreviouslyUsedExperiments() : bool{ return $this->hasPreviouslyUsedExperiments; }
src/pocketmine/network/mcpe/protocol/types/Experiments.php:		for($i = 0, $len = $in->getLInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/types/Experiments.php:			$experimentName = $in->getString();
src/pocketmine/network/mcpe/protocol/types/Experiments.php:			$enabled = $in->getBool();
src/pocketmine/network/mcpe/protocol/types/Experiments.php:		$hasPreviouslyUsedExperiments = $in->getBool();
src/pocketmine/network/mcpe/protocol/types/Experiments.php:		$out->putLInt(count($this->experiments));
src/pocketmine/network/mcpe/protocol/types/Experiments.php:		foreach($this->experiments as $experimentName => $enabled){
src/pocketmine/network/mcpe/protocol/types/Experiments.php:			$out->putString($experimentName);
src/pocketmine/network/mcpe/protocol/types/Experiments.php:			$out->putBool($enabled);
src/pocketmine/network/mcpe/protocol/types/Experiments.php:		$out->putBool($this->hasPreviouslyUsedExperiments);
src/pocketmine/network/mcpe/protocol/types/PotionContainerChangeRecipe.php:		$this->inputItemId = $inputItemId;
src/pocketmine/network/mcpe/protocol/types/PotionContainerChangeRecipe.php:		$this->ingredientItemId = $ingredientItemId;
src/pocketmine/network/mcpe/protocol/types/PotionContainerChangeRecipe.php:		$this->outputItemId = $outputItemId;
src/pocketmine/network/mcpe/protocol/types/PotionContainerChangeRecipe.php:		return $this->inputItemId;
src/pocketmine/network/mcpe/protocol/types/PotionContainerChangeRecipe.php:		return $this->ingredientItemId;
src/pocketmine/network/mcpe/protocol/types/PotionContainerChangeRecipe.php:		return $this->outputItemId;
src/pocketmine/network/mcpe/protocol/types/ContainerIds.php:	public const NONE = -1;
src/pocketmine/network/mcpe/protocol/types/PlayerListEntry.php:		$entry->uuid = $uuid;
src/pocketmine/network/mcpe/protocol/types/PlayerListEntry.php:	public static function createAdditionEntry(UUID $uuid, int $entityUniqueId, string $username, SkinData $skinData, string $xboxUserId = "", string $platformChatId = "", int $buildPlatform = -1, bool $isTeacher = false, bool $isHost = false) : PlayerListEntry{
src/pocketmine/network/mcpe/protocol/types/PlayerListEntry.php:		$entry->uuid = $uuid;
src/pocketmine/network/mcpe/protocol/types/PlayerListEntry.php:		$entry->entityUniqueId = $entityUniqueId;
src/pocketmine/network/mcpe/protocol/types/PlayerListEntry.php:		$entry->username = $username;
src/pocketmine/network/mcpe/protocol/types/PlayerListEntry.php:		$entry->skinData = $skinData;
src/pocketmine/network/mcpe/protocol/types/PlayerListEntry.php:		$entry->xboxUserId = $xboxUserId;
src/pocketmine/network/mcpe/protocol/types/PlayerListEntry.php:		$entry->platformChatId = $platformChatId;
src/pocketmine/network/mcpe/protocol/types/PlayerListEntry.php:		$entry->buildPlatform = $buildPlatform;
src/pocketmine/network/mcpe/protocol/types/PlayerListEntry.php:		$entry->isTeacher = $isTeacher;
src/pocketmine/network/mcpe/protocol/types/PlayerListEntry.php:		$entry->isHost = $isHost;
src/pocketmine/network/mcpe/protocol/types/DeviceOS.php:	public const UNKNOWN = -1;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		$this->icon = $icon;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		$this->rotation = $rotation;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		$this->xOffset = $xOffset;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		$this->yOffset = $yOffset;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		$this->label = $label;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		$this->color = $color;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		return $this->icon;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		return $this->rotation;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		return $this->xOffset;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		return $this->yOffset;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		return $this->label;
src/pocketmine/network/mcpe/protocol/types/MapDecoration.php:		return $this->color;
src/pocketmine/network/mcpe/protocol/types/Enchant.php:		$this->id = $id;
src/pocketmine/network/mcpe/protocol/types/Enchant.php:		$this->level = $level;
src/pocketmine/network/mcpe/protocol/types/Enchant.php:	public function getId() : int{ return $this->id; }
src/pocketmine/network/mcpe/protocol/types/Enchant.php:	public function getLevel() : int{ return $this->level; }
src/pocketmine/network/mcpe/protocol/types/Enchant.php:		$id = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/Enchant.php:		$level = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/Enchant.php:		$out->putByte($this->id);
src/pocketmine/network/mcpe/protocol/types/Enchant.php:		$out->putByte($this->level);
src/pocketmine/network/mcpe/protocol/types/BlockPaletteEntry.php:		$this->name = $name;
src/pocketmine/network/mcpe/protocol/types/BlockPaletteEntry.php:		$this->states = $states;
src/pocketmine/network/mcpe/protocol/types/BlockPaletteEntry.php:	public function getName() : string{ return $this->name; }
src/pocketmine/network/mcpe/protocol/types/BlockPaletteEntry.php:	public function getStates() : CompoundTag{ return $this->states; }
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		$this->inputItemId = $inputItemId;
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		$this->inputItemMeta = $inputItemMeta;
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		$this->ingredientItemId = $ingredientItemId;
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		$this->ingredientItemMeta = $ingredientItemMeta;
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		$this->outputItemId = $outputItemId;
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		$this->outputItemMeta = $outputItemMeta;
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		return $this->inputItemId;
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		return $this->inputItemMeta;
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		return $this->ingredientItemId;
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		return $this->ingredientItemMeta;
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		return $this->outputItemId;
src/pocketmine/network/mcpe/protocol/types/PotionTypeRecipe.php:		return $this->outputItemMeta;
src/pocketmine/network/mcpe/protocol/types/PersonaPieceTintColor.php:		$this->pieceType = $pieceType;
src/pocketmine/network/mcpe/protocol/types/PersonaPieceTintColor.php:		$this->colors = $colors;
src/pocketmine/network/mcpe/protocol/types/PersonaPieceTintColor.php:		return $this->pieceType;
src/pocketmine/network/mcpe/protocol/types/PersonaPieceTintColor.php:		return $this->colors;
src/pocketmine/network/mcpe/protocol/types/WindowTypes.php:	public const NONE = -9;
src/pocketmine/network/mcpe/protocol/types/WindowTypes.php:	public const INVENTORY = -1;
src/pocketmine/network/mcpe/protocol/types/CommandEnumConstraint.php:		if(!isset($enum->enumValues[$valueOffset])){
src/pocketmine/network/mcpe/protocol/types/CommandEnumConstraint.php:		$this->enum = $enum;
src/pocketmine/network/mcpe/protocol/types/CommandEnumConstraint.php:		$this->valueOffset = $valueOffset;
src/pocketmine/network/mcpe/protocol/types/CommandEnumConstraint.php:		$this->constraints = $constraints;
src/pocketmine/network/mcpe/protocol/types/CommandEnumConstraint.php:		return $this->enum;
src/pocketmine/network/mcpe/protocol/types/CommandEnumConstraint.php:		return $this->valueOffset;
src/pocketmine/network/mcpe/protocol/types/CommandEnumConstraint.php:		return $this->enum->enumValues[$this->valueOffset];
src/pocketmine/network/mcpe/protocol/types/CommandEnumConstraint.php:		return $this->constraints;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	 * These identifiers are used for inventory source types which are not currently implemented server-side in MCPE.
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	 * As a general rule of thumb, anything that doesn't have a permanent inventory is client-side. These types are
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	 * to allow servers to track what is going on in client-side windows.
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	public const SOURCE_TYPE_CRAFTING_RESULT = -4;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	public const SOURCE_TYPE_CRAFTING_USE_INGREDIENT = -5;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	public const SOURCE_TYPE_ANVIL_RESULT = -12;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	public const SOURCE_TYPE_ANVIL_OUTPUT = -13;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	public const SOURCE_TYPE_ENCHANT_OUTPUT = -17;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	public const SOURCE_TYPE_TRADING_INPUT_1 = -20;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	public const SOURCE_TYPE_TRADING_INPUT_2 = -21;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	public const SOURCE_TYPE_TRADING_USE_INPUTS = -22;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	public const SOURCE_TYPE_TRADING_OUTPUT = -23;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:	public const SOURCE_TYPE_BEACON = -24;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		$this->sourceType = $packet->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		switch($this->sourceType){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				$this->windowId = $packet->getVarInt();
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				$this->sourceFlags = $packet->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				$this->windowId = $packet->getVarInt();
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				throw new \UnexpectedValueException("Unknown inventory action source type $this->sourceType");
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		$this->inventorySlot = $packet->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		$this->oldItem = $packet->getSlot();
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		$this->newItem = $packet->getSlot();
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:			$this->newItemStackId = $packet->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		$packet->putUnsignedVarInt($this->sourceType);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		switch($this->sourceType){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				$packet->putVarInt($this->windowId);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				$packet->putUnsignedVarInt($this->sourceFlags);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				$packet->putVarInt($this->windowId);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				throw new \InvalidArgumentException("Unknown inventory action source type $this->sourceType");
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		$packet->putUnsignedVarInt($this->inventorySlot);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		$packet->putSlot($this->oldItem);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		$packet->putSlot($this->newItem);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:			if($this->newItemStackId === null){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:			$packet->writeGenericTypeNetworkId($this->newItemStackId);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		if($this->oldItem->equalsExact($this->newItem)){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:		switch($this->sourceType){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				if($this->windowId === ContainerIds::UI and $this->inventorySlot > 0){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:					if($this->inventorySlot === UIInventorySlotOffset::CREATED_ITEM_OUTPUT){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:					if(array_key_exists($this->inventorySlot, UIInventorySlotOffset::CRAFTING2X2_INPUT)){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:						$window = $player->getCraftingGrid();
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:						if($window->getGridWidth() !== CraftingGrid::SIZE_SMALL){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:						$slot = UIInventorySlotOffset::CRAFTING2X2_INPUT[$this->inventorySlot];
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:					}elseif(array_key_exists($this->inventorySlot, UIInventorySlotOffset::CRAFTING3X3_INPUT)){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:						$window = $player->getCraftingGrid();
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:						if($window->getGridWidth() !== CraftingGrid::SIZE_BIG){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:						$slot = UIInventorySlotOffset::CRAFTING3X3_INPUT[$this->inventorySlot];
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:						throw new \UnexpectedValueException("Unhandled magic UI slot offset $this->inventorySlot");
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:					$window = $player->getWindow($this->windowId);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:					$slot = $this->inventorySlot;
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:					return new SlotChangeAction($window, $slot, $this->oldItem, $this->newItem);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				throw new \UnexpectedValueException("Player " . $player->getName() . " has no open container with window ID $this->windowId");
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				if($this->inventorySlot !== self::ACTION_MAGIC_SLOT_DROP_ITEM){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:					throw new \UnexpectedValueException("Only expecting drop-item world actions from the client!");
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				return new DropItemAction($this->newItem);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				switch($this->inventorySlot){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:						throw new \UnexpectedValueException("Unexpected creative action type $this->inventorySlot");
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				return new CreativeInventoryAction($this->oldItem, $this->newItem, $type);
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				switch($this->windowId){
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				throw new \UnexpectedValueException("Player " . $player->getName() . " has no open container with window ID $this->windowId");
src/pocketmine/network/mcpe/protocol/types/NetworkInventoryAction.php:				throw new \UnexpectedValueException("Unknown inventory source type $this->sourceType");
src/pocketmine/network/mcpe/protocol/types/ItemTypeEntry.php:		$this->stringId = $stringId;
src/pocketmine/network/mcpe/protocol/types/ItemTypeEntry.php:		$this->numericId = $numericId;
src/pocketmine/network/mcpe/protocol/types/ItemTypeEntry.php:		$this->componentBased = $componentBased;
src/pocketmine/network/mcpe/protocol/types/ItemTypeEntry.php:	public function getStringId() : string{ return $this->stringId; }
src/pocketmine/network/mcpe/protocol/types/ItemTypeEntry.php:	public function getNumericId() : int{ return $this->numericId; }
src/pocketmine/network/mcpe/protocol/types/ItemTypeEntry.php:	public function isComponentBased() : bool{ return $this->componentBased; }
src/pocketmine/network/mcpe/protocol/types/CommandEnum.php:	 * @phpstan-var list<string>
src/pocketmine/network/mcpe/protocol/types/inventory/ItemStackWrapper.php:		$this->stackId = $stackId;
src/pocketmine/network/mcpe/protocol/types/inventory/ItemStackWrapper.php:		$this->itemStack = $itemStack;
src/pocketmine/network/mcpe/protocol/types/inventory/ItemStackWrapper.php:		return new self($itemStack->isNull() ? 0 : 1, $itemStack);
src/pocketmine/network/mcpe/protocol/types/inventory/ItemStackWrapper.php:	public function getStackId() : int{ return $this->stackId; }
src/pocketmine/network/mcpe/protocol/types/inventory/ItemStackWrapper.php:	public function getItemStack() : Item{ return $this->itemStack; }
src/pocketmine/network/mcpe/protocol/types/inventory/ItemStackWrapper.php:		$stackId = $in->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/types/inventory/ItemStackWrapper.php:		$stack = $in->getSlot();
src/pocketmine/network/mcpe/protocol/types/inventory/ItemStackWrapper.php:		$out->writeGenericTypeNetworkId($this->stackId);
src/pocketmine/network/mcpe/protocol/types/inventory/ItemStackWrapper.php:		$out->putSlot($this->itemStack);
src/pocketmine/network/mcpe/protocol/types/inventory/InventoryTransactionChangedSlotsHack.php:		$this->containerId = $containerId;
src/pocketmine/network/mcpe/protocol/types/inventory/InventoryTransactionChangedSlotsHack.php:		$this->changedSlotIndexes = $changedSlotIndexes;
src/pocketmine/network/mcpe/protocol/types/inventory/InventoryTransactionChangedSlotsHack.php:	public function getContainerId() : int{ return $this->containerId; }
src/pocketmine/network/mcpe/protocol/types/inventory/InventoryTransactionChangedSlotsHack.php:	public function getChangedSlotIndexes() : array{ return $this->changedSlotIndexes; }
src/pocketmine/network/mcpe/protocol/types/inventory/InventoryTransactionChangedSlotsHack.php:		$containerId = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/InventoryTransactionChangedSlotsHack.php:		for($i = 0, $len = $in->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/types/inventory/InventoryTransactionChangedSlotsHack.php:			$changedSlots[] = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/InventoryTransactionChangedSlotsHack.php:		$out->putByte($this->containerId);
src/pocketmine/network/mcpe/protocol/types/inventory/InventoryTransactionChangedSlotsHack.php:		$out->putUnsignedVarInt(count($this->changedSlotIndexes));
src/pocketmine/network/mcpe/protocol/types/inventory/InventoryTransactionChangedSlotsHack.php:		foreach($this->changedSlotIndexes as $index){
src/pocketmine/network/mcpe/protocol/types/inventory/InventoryTransactionChangedSlotsHack.php:			$out->putByte($index);
src/pocketmine/network/mcpe/protocol/types/inventory/CreativeContentEntry.php:		$this->entryId = $entryId;
src/pocketmine/network/mcpe/protocol/types/inventory/CreativeContentEntry.php:		$this->item = $item;
src/pocketmine/network/mcpe/protocol/types/inventory/CreativeContentEntry.php:	public function getEntryId() : int{ return $this->entryId; }
src/pocketmine/network/mcpe/protocol/types/inventory/CreativeContentEntry.php:	public function getItem() : Item{ return $this->item; }
src/pocketmine/network/mcpe/protocol/types/inventory/CreativeContentEntry.php:		$entryId = $in->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/types/inventory/CreativeContentEntry.php:		$item = $in->getSlot();
src/pocketmine/network/mcpe/protocol/types/inventory/CreativeContentEntry.php:		$out->writeGenericTypeNetworkId($this->entryId);
src/pocketmine/network/mcpe/protocol/types/inventory/CreativeContentEntry.php:		$out->putSlot($this->item);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/SwapStackRequestAction.php:		$this->slot1 = $slot1;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/SwapStackRequestAction.php:		$this->slot2 = $slot2;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/SwapStackRequestAction.php:	public function getSlot1() : ItemStackRequestSlotInfo{ return $this->slot1; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/SwapStackRequestAction.php:	public function getSlot2() : ItemStackRequestSlotInfo{ return $this->slot2; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/SwapStackRequestAction.php:		$this->slot1->write($out);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/SwapStackRequestAction.php:		$this->slot2->write($out);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DisappearStackRequestActionTrait.php:		$this->count = $count;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DisappearStackRequestActionTrait.php:		$this->source = $source;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DisappearStackRequestActionTrait.php:	final public function getCount() : int{ return $this->count; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DisappearStackRequestActionTrait.php:	final public function getSource() : ItemStackRequestSlotInfo{ return $this->source; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DisappearStackRequestActionTrait.php:		$count = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DisappearStackRequestActionTrait.php:		$out->putByte($this->count);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DisappearStackRequestActionTrait.php:		$this->source->write($out);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/BeaconPaymentStackRequestAction.php:		$this->primaryEffectId = $primaryEffectId;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/BeaconPaymentStackRequestAction.php:		$this->secondaryEffectId = $secondaryEffectId;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/BeaconPaymentStackRequestAction.php:	public function getPrimaryEffectId() : int{ return $this->primaryEffectId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/BeaconPaymentStackRequestAction.php:	public function getSecondaryEffectId() : int{ return $this->secondaryEffectId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/BeaconPaymentStackRequestAction.php:		$primary = $in->getVarInt();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/BeaconPaymentStackRequestAction.php:		$secondary = $in->getVarInt();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/BeaconPaymentStackRequestAction.php:		$out->putVarInt($this->primaryEffectId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/BeaconPaymentStackRequestAction.php:		$out->putVarInt($this->secondaryEffectId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CreativeCreateStackRequestAction.php:		$this->creativeItemId = $creativeItemId;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CreativeCreateStackRequestAction.php:	public function getCreativeItemId() : int{ return $this->creativeItemId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CreativeCreateStackRequestAction.php:		$creativeItemId = $in->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CreativeCreateStackRequestAction.php:		$out->writeGenericTypeNetworkId($this->creativeItemId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:		$this->containerId = $containerId;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:		$this->slotId = $slotId;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:		$this->stackId = $stackId;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:	public function getContainerId() : int{ return $this->containerId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:	public function getSlotId() : int{ return $this->slotId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:	public function getStackId() : int{ return $this->stackId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:		$containerId = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:		$slotId = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:		$stackId = $in->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:		$out->putByte($this->containerId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:		$out->putByte($this->slotId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequestSlotInfo.php:		$out->writeGenericTypeNetworkId($this->stackId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:	 * @phpstan-var list<string>
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:	 * @phpstan-param list<string> $filterStrings
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:		$this->requestId = $requestId;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:		$this->actions = $actions;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:		$this->filterStrings = $filterStrings;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:	public function getRequestId() : int{ return $this->requestId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:	public function getActions() : array{ return $this->actions; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:	 * @phpstan-return list<string>
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:	public function getFilterStrings() : array{ return $this->filterStrings; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:		$requestId = $in->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:		for($i = 0, $len = $in->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:			$typeId = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:		for($i = 0, $len = $in->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:			$filterStrings[] = $in->getString();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:		$out->writeGenericTypeNetworkId($this->requestId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:		$out->putUnsignedVarInt(count($this->actions));
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:		foreach($this->actions as $action){
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:			$out->putByte($action::getTypeId());
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:			$action->write($out);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:		$out->putUnsignedVarInt(count($this->filterStrings));
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:		foreach($this->filterStrings as $string){
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/ItemStackRequest.php:			$out->putString($string);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DropStackRequestAction.php:		$this->count = $count;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DropStackRequestAction.php:		$this->source = $source;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DropStackRequestAction.php:		$this->randomly = $randomly;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DropStackRequestAction.php:	public function getCount() : int{ return $this->count; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DropStackRequestAction.php:	public function getSource() : ItemStackRequestSlotInfo{ return $this->source; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DropStackRequestAction.php:	public function isRandomly() : bool{ return $this->randomly; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DropStackRequestAction.php:		$count = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DropStackRequestAction.php:		$random = $in->getBool();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DropStackRequestAction.php:		$out->putByte($this->count);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DropStackRequestAction.php:		$this->source->write($out);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DropStackRequestAction.php:		$out->putBool($this->randomly);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeOptionalStackRequestAction.php:		$this->recipeId = $type;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeOptionalStackRequestAction.php:		$this->filterStringIndex = $filterStringIndex;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeOptionalStackRequestAction.php:	public function getRecipeId() : int{ return $this->recipeId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeOptionalStackRequestAction.php:	public function getFilterStringIndex() : int{ return $this->filterStringIndex; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeOptionalStackRequestAction.php:		$recipeId = $in->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeOptionalStackRequestAction.php:		$filterStringIndex = $in->getLInt();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeOptionalStackRequestAction.php:		$out->writeGenericTypeNetworkId($this->recipeId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeOptionalStackRequestAction.php:		$out->putLInt($this->filterStringIndex);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftingMarkSecondaryResultStackRequestAction.php:		$this->craftingGridSlot = $craftingGridSlot;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftingMarkSecondaryResultStackRequestAction.php:	public function getCraftingGridSlot() : int{ return $this->craftingGridSlot; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftingMarkSecondaryResultStackRequestAction.php:		$slot = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftingMarkSecondaryResultStackRequestAction.php:		$out->putByte($this->craftingGridSlot);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/TakeOrPlaceStackRequestActionTrait.php:		$this->count = $count;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/TakeOrPlaceStackRequestActionTrait.php:		$this->source = $source;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/TakeOrPlaceStackRequestActionTrait.php:		$this->destination = $destination;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/TakeOrPlaceStackRequestActionTrait.php:	final public function getCount() : int{ return $this->count; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/TakeOrPlaceStackRequestActionTrait.php:	final public function getSource() : ItemStackRequestSlotInfo{ return $this->source; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/TakeOrPlaceStackRequestActionTrait.php:	final public function getDestination() : ItemStackRequestSlotInfo{ return $this->destination; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/TakeOrPlaceStackRequestActionTrait.php:		$count = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/TakeOrPlaceStackRequestActionTrait.php:		$out->putByte($this->count);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/TakeOrPlaceStackRequestActionTrait.php:		$this->source->write($out);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/TakeOrPlaceStackRequestActionTrait.php:		$this->destination->write($out);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeStackRequestActionTrait.php:		$this->recipeId = $recipeId;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeStackRequestActionTrait.php:	public function getRecipeId() : int{ return $this->recipeId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeStackRequestActionTrait.php:		$recipeId = $in->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/CraftRecipeStackRequestActionTrait.php:		$out->writeGenericTypeNetworkId($this->recipeId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DeprecatedCraftingResultsStackRequestAction.php:		$this->results = $results;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DeprecatedCraftingResultsStackRequestAction.php:		$this->iterations = $iterations;
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DeprecatedCraftingResultsStackRequestAction.php:	public function getResults() : array{ return $this->results; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DeprecatedCraftingResultsStackRequestAction.php:	public function getIterations() : int{ return $this->iterations; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DeprecatedCraftingResultsStackRequestAction.php:		for($i = 0, $len = $in->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DeprecatedCraftingResultsStackRequestAction.php:			$results[] = $in->getSlot();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DeprecatedCraftingResultsStackRequestAction.php:		$iterations = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DeprecatedCraftingResultsStackRequestAction.php:		$out->putUnsignedVarInt(count($this->results));
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DeprecatedCraftingResultsStackRequestAction.php:		foreach($this->results as $result){
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DeprecatedCraftingResultsStackRequestAction.php:			$out->putSlot($result);
src/pocketmine/network/mcpe/protocol/types/inventory/stackrequest/DeprecatedCraftingResultsStackRequestAction.php:		$out->putByte($this->iterations);
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$this->slot = $slot;
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$this->hotbarSlot = $hotbarSlot;
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$this->count = $count;
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$this->itemStackId = $itemStackId;
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$this->customName = $customName;
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:	public function getSlot() : int{ return $this->slot; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:	public function getHotbarSlot() : int{ return $this->hotbarSlot; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:	public function getCount() : int{ return $this->count; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:	public function getItemStackId() : int{ return $this->itemStackId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:	public function getCustomName() : string{ return $this->customName; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$slot = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$hotbarSlot = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$count = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$itemStackId = $in->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$customName = $in->getString();
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$out->putByte($this->slot);
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$out->putByte($this->hotbarSlot);
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$out->putByte($this->count);
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$out->writeGenericTypeNetworkId($this->itemStackId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseSlotInfo.php:		$out->putString($this->customName);
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseContainerInfo.php:		$this->containerId = $containerId;
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseContainerInfo.php:		$this->slots = $slots;
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseContainerInfo.php:	public function getContainerId() : int{ return $this->containerId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseContainerInfo.php:	public function getSlots() : array{ return $this->slots; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseContainerInfo.php:		$containerId = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseContainerInfo.php:		for($i = 0, $len = $in->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseContainerInfo.php:		$out->putByte($this->containerId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseContainerInfo.php:		$out->putUnsignedVarInt(count($this->slots));
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseContainerInfo.php:		foreach($this->slots as $slot){
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponseContainerInfo.php:			$slot->write($out);
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:		$this->result = $result;
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:		$this->requestId = $requestId;
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:		$this->containerInfos = $containerInfos;
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:	public function getResult() : int{ return $this->result; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:	public function getRequestId() : int{ return $this->requestId; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:	public function getContainerInfos() : array{ return $this->containerInfos; }
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:		$result = $in->getByte();
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:		$requestId = $in->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:		for($i = 0, $len = $in->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:		$out->putByte($this->result);
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:		$out->writeGenericTypeNetworkId($this->requestId);
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:		$out->putUnsignedVarInt(count($this->containerInfos));
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:		foreach($this->containerInfos as $containerInfo){
src/pocketmine/network/mcpe/protocol/types/inventory/stackresponse/ItemStackResponse.php:			$containerInfo->write($out);
src/pocketmine/network/mcpe/protocol/types/ItemComponentPacketEntry.php:		$this->name = $name;
src/pocketmine/network/mcpe/protocol/types/ItemComponentPacketEntry.php:		$this->componentNbt = $componentNbt;
src/pocketmine/network/mcpe/protocol/types/ItemComponentPacketEntry.php:	public function getName() : string{ return $this->name; }
src/pocketmine/network/mcpe/protocol/types/ItemComponentPacketEntry.php:	public function getComponentNbt() : CompoundTag{ return $this->componentNbt; }
src/pocketmine/network/mcpe/protocol/types/ChunkCacheBlob.php:		$this->hash = $hash;
src/pocketmine/network/mcpe/protocol/types/ChunkCacheBlob.php:		$this->payload = $payload;
src/pocketmine/network/mcpe/protocol/types/ChunkCacheBlob.php:		return $this->hash;
src/pocketmine/network/mcpe/protocol/types/ChunkCacheBlob.php:		return $this->payload;
src/pocketmine/network/mcpe/protocol/types/SkinAnimation.php:		$this->image = $image;
src/pocketmine/network/mcpe/protocol/types/SkinAnimation.php:		$this->type = $type;
src/pocketmine/network/mcpe/protocol/types/SkinAnimation.php:		$this->frames = $frames;
src/pocketmine/network/mcpe/protocol/types/SkinAnimation.php:		$this->expressionType = $expressionType;
src/pocketmine/network/mcpe/protocol/types/SkinAnimation.php:		return $this->image;
src/pocketmine/network/mcpe/protocol/types/SkinAnimation.php:		return $this->type;
src/pocketmine/network/mcpe/protocol/types/SkinAnimation.php:		return $this->frames;
src/pocketmine/network/mcpe/protocol/types/SkinAnimation.php:	public function getExpressionType() : int{ return $this->expressionType; }
src/pocketmine/network/mcpe/protocol/types/LegacySkinAdapter.php:		$capeData = $skin->getCapeData();
src/pocketmine/network/mcpe/protocol/types/LegacySkinAdapter.php:		$geometryName = $skin->getGeometryName();
src/pocketmine/network/mcpe/protocol/types/LegacySkinAdapter.php:			$skin->getSkinId(),
src/pocketmine/network/mcpe/protocol/types/LegacySkinAdapter.php:			SkinImage::fromLegacy($skin->getSkinData()), [],
src/pocketmine/network/mcpe/protocol/types/LegacySkinAdapter.php:			$skin->getGeometryData()
src/pocketmine/network/mcpe/protocol/types/LegacySkinAdapter.php:		if($data->isPersona()){
src/pocketmine/network/mcpe/protocol/types/LegacySkinAdapter.php:		$capeData = $data->isPersonaCapeOnClassic() ? "" : $data->getCapeImage()->getData();
src/pocketmine/network/mcpe/protocol/types/LegacySkinAdapter.php:		$resourcePatch = json_decode($data->getResourcePatch(), true);
src/pocketmine/network/mcpe/protocol/types/LegacySkinAdapter.php:		return new Skin($data->getSkinId(), $data->getSkinImage()->getData(), $capeData, $geometryName, $data->getGeometryData());
src/pocketmine/network/mcpe/protocol/types/SkinImage.php:		$this->height = $height;
src/pocketmine/network/mcpe/protocol/types/SkinImage.php:		$this->width = $width;
src/pocketmine/network/mcpe/protocol/types/SkinImage.php:		$this->data = $data;
src/pocketmine/network/mcpe/protocol/types/SkinImage.php:		return $this->height;
src/pocketmine/network/mcpe/protocol/types/SkinImage.php:		return $this->width;
src/pocketmine/network/mcpe/protocol/types/SkinImage.php:		return $this->data;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->skinId = $skinId;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->resourcePatch = $resourcePatch;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->skinImage = $skinImage;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->animations = $animations;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->capeImage = $capeImage ?? new SkinImage(0, 0, "");
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->geometryData = $geometryData;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->animationData = $animationData;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->premium = $premium;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->persona = $persona;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->personaCapeOnClassic = $personaCapeOnClassic;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->capeId = $capeId;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->fullSkinId = $fullSkinId ?? UUID::fromRandom()->toString();
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->armSize = $armSize;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->skinColor = $skinColor;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->personaPieces = $personaPieces;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->pieceTintColors = $pieceTintColors;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->isVerified = $isVerified;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->skinId;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->resourcePatch;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->skinImage;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->animations;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->capeImage;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->geometryData;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->animationData;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->persona;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->premium;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->personaCapeOnClassic;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->capeId;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->fullSkinId;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->armSize;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->skinColor;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->personaPieces;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->pieceTintColors;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		return $this->isVerified;
src/pocketmine/network/mcpe/protocol/types/SkinData.php:		$this->isVerified = $verified;
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$this->cost = $cost;
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$this->slotFlags = $slotFlags;
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$this->equipActivatedEnchantments = $equipActivatedEnchantments;
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$this->heldActivatedEnchantments = $heldActivatedEnchantments;
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$this->selfActivatedEnchantments = $selfActivatedEnchantments;
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$this->name = $name;
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$this->optionId = $optionId;
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:	public function getCost() : int{ return $this->cost; }
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:	public function getSlotFlags() : int{ return $this->slotFlags; }
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:	public function getEquipActivatedEnchantments() : array{ return $this->equipActivatedEnchantments; }
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:	public function getHeldActivatedEnchantments() : array{ return $this->heldActivatedEnchantments; }
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:	public function getSelfActivatedEnchantments() : array{ return $this->selfActivatedEnchantments; }
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:	public function getName() : string{ return $this->name; }
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:	public function getOptionId() : int{ return $this->optionId; }
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		for($i = 0, $len = $in->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$out->putUnsignedVarInt(count($list));
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:			$item->write($out);
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$cost = $in->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$slotFlags = $in->getLInt();
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$name = $in->getString();
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$optionId = $in->readGenericTypeNetworkId();
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$out->putUnsignedVarInt($this->cost);
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$out->putLInt($this->slotFlags);
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		self::writeEnchantList($out, $this->equipActivatedEnchantments);
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		self::writeEnchantList($out, $this->heldActivatedEnchantments);
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		self::writeEnchantList($out, $this->selfActivatedEnchantments);
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$out->putString($this->name);
src/pocketmine/network/mcpe/protocol/types/EnchantOption.php:		$out->writeGenericTypeNetworkId($this->optionId);
src/pocketmine/network/mcpe/protocol/types/PersonaSkinPiece.php:		$this->pieceId = $pieceId;
src/pocketmine/network/mcpe/protocol/types/PersonaSkinPiece.php:		$this->pieceType = $pieceType;
src/pocketmine/network/mcpe/protocol/types/PersonaSkinPiece.php:		$this->packId = $packId;
src/pocketmine/network/mcpe/protocol/types/PersonaSkinPiece.php:		$this->isDefaultPiece = $isDefaultPiece;
src/pocketmine/network/mcpe/protocol/types/PersonaSkinPiece.php:		$this->productId = $productId;
src/pocketmine/network/mcpe/protocol/types/PersonaSkinPiece.php:		return $this->pieceId;
src/pocketmine/network/mcpe/protocol/types/PersonaSkinPiece.php:		return $this->pieceType;
src/pocketmine/network/mcpe/protocol/types/PersonaSkinPiece.php:		return $this->packId;
src/pocketmine/network/mcpe/protocol/types/PersonaSkinPiece.php:		return $this->isDefaultPiece;
src/pocketmine/network/mcpe/protocol/types/PersonaSkinPiece.php:		return $this->productId;
src/pocketmine/network/mcpe/protocol/TakeItemActorPacket.php:		$this->target = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/TakeItemActorPacket.php:		$this->eid = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/TakeItemActorPacket.php:		$this->putEntityRuntimeId($this->target);
src/pocketmine/network/mcpe/protocol/TakeItemActorPacket.php:		$this->putEntityRuntimeId($this->eid);
src/pocketmine/network/mcpe/protocol/TakeItemActorPacket.php:		return $session->handleTakeItemActor($this);
src/pocketmine/network/mcpe/protocol/HurtArmorPacket.php:		$this->cause = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/HurtArmorPacket.php:		$this->health = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/HurtArmorPacket.php:		$this->putVarInt($this->cause);
src/pocketmine/network/mcpe/protocol/HurtArmorPacket.php:		$this->putVarInt($this->health);
src/pocketmine/network/mcpe/protocol/HurtArmorPacket.php:		return $session->handleHurtArmor($this);
src/pocketmine/network/mcpe/protocol/LevelEventPacket.php:	//TODO: check 2000-2017
src/pocketmine/network/mcpe/protocol/LevelEventPacket.php:	public const EVENT_PAUSE_GAME_NO_SCREEN = 3006; //data: 1 to pause, 0 to resume - same effect as normal pause but without screen
src/pocketmine/network/mcpe/protocol/LevelEventPacket.php:		$this->evid = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/LevelEventPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/LevelEventPacket.php:		$this->data = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/LevelEventPacket.php:		$this->putVarInt($this->evid);
src/pocketmine/network/mcpe/protocol/LevelEventPacket.php:		$this->putVector3Nullable($this->position);
src/pocketmine/network/mcpe/protocol/LevelEventPacket.php:		$this->putVarInt($this->data);
src/pocketmine/network/mcpe/protocol/LevelEventPacket.php:		return $session->handleLevelEvent($this);
src/pocketmine/network/mcpe/protocol/RemoveActorPacket.php:		$this->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/RemoveActorPacket.php:		$this->putEntityUniqueId($this->entityUniqueId);
src/pocketmine/network/mcpe/protocol/RemoveActorPacket.php:		return $session->handleRemoveActor($this);
src/pocketmine/network/mcpe/protocol/SetLocalPlayerAsInitializedPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/SetLocalPlayerAsInitializedPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/SetLocalPlayerAsInitializedPacket.php:		return $session->handleSetLocalPlayerAsInitialized($this);
src/pocketmine/network/mcpe/protocol/ActorEventPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/ActorEventPacket.php:		$this->event = $this->getByte();
src/pocketmine/network/mcpe/protocol/ActorEventPacket.php:		$this->data = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/ActorEventPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/ActorEventPacket.php:		$this->putByte($this->event);
src/pocketmine/network/mcpe/protocol/ActorEventPacket.php:		$this->putVarInt($this->data);
src/pocketmine/network/mcpe/protocol/ActorEventPacket.php:		return $session->handleActorEvent($this);
src/pocketmine/network/mcpe/protocol/ContainerSetDataPacket.php:		$this->windowId = $this->getByte();
src/pocketmine/network/mcpe/protocol/ContainerSetDataPacket.php:		$this->property = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/ContainerSetDataPacket.php:		$this->value = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/ContainerSetDataPacket.php:		$this->putByte($this->windowId);
src/pocketmine/network/mcpe/protocol/ContainerSetDataPacket.php:		$this->putVarInt($this->property);
src/pocketmine/network/mcpe/protocol/ContainerSetDataPacket.php:		$this->putVarInt($this->value);
src/pocketmine/network/mcpe/protocol/ContainerSetDataPacket.php:		return $session->handleContainerSetData($this);
src/pocketmine/network/mcpe/protocol/ResourcePackChunkDataPacket.php:		$this->packId = $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackChunkDataPacket.php:		$this->chunkIndex = $this->getLInt();
src/pocketmine/network/mcpe/protocol/ResourcePackChunkDataPacket.php:		$this->progress = $this->getLLong();
src/pocketmine/network/mcpe/protocol/ResourcePackChunkDataPacket.php:		$this->data = $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePackChunkDataPacket.php:		$this->putString($this->packId);
src/pocketmine/network/mcpe/protocol/ResourcePackChunkDataPacket.php:		$this->putLInt($this->chunkIndex);
src/pocketmine/network/mcpe/protocol/ResourcePackChunkDataPacket.php:		$this->putLLong($this->progress);
src/pocketmine/network/mcpe/protocol/ResourcePackChunkDataPacket.php:		$this->putString($this->data);
src/pocketmine/network/mcpe/protocol/ResourcePackChunkDataPacket.php:		return $session->handleResourcePackChunkData($this);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:	 * @phpstan-var array<int, array{0: int, 1: mixed}>
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->type = $this->getString();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->motion = $this->getVector3();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->pitch = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->yaw = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->headYaw = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$attrCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:			$name = $this->getString();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:			$min = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:			$current = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:			$max = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:				$attr->setMinValue($min);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:				$attr->setMaxValue($max);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:				$attr->setValue($current);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:				$this->attributes[] = $attr;
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->metadata = $this->getEntityMetadata();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$linkCount = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:			$this->links[] = $this->getEntityLink();
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->putEntityUniqueId($this->entityUniqueId ?? $this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->putString($this->type);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->putVector3Nullable($this->motion);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->putLFloat($this->pitch);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->putLFloat($this->yaw);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->putLFloat($this->headYaw);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->putUnsignedVarInt(count($this->attributes));
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		foreach($this->attributes as $attribute){
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:			$this->putString($attribute->getName());
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:			$this->putLFloat($attribute->getMinValue());
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:			$this->putLFloat($attribute->getValue());
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:			$this->putLFloat($attribute->getMaxValue());
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->putEntityMetadata($this->metadata);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		$this->putUnsignedVarInt(count($this->links));
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		foreach($this->links as $link){
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:			$this->putEntityLink($link);
src/pocketmine/network/mcpe/protocol/AddActorPacket.php:		return $session->handleAddActor($this);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:	 * List of dynamic command enums, also referred to as "soft" enums. These can by dynamically updated mid-game
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		for($i = 0, $enumValuesCount = $this->getUnsignedVarInt(); $i < $enumValuesCount; ++$i){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$enumValues[] = $this->getString();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$postfixes[] = $this->getString();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$enums[] = $enum = $this->getEnum($enumValues);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			if(isset(self::HARDCODED_ENUM_NAMES[$enum->enumName])){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$this->hardcodedEnums[] = $enum;
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->commandData[] = $this->getCommandData($enums, $postfixes);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->softEnums[] = $this->getSoftEnum();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->enumConstraints[] = $this->getEnumConstraint($enums, $enumValues);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$retval->enumName = $this->getString();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$index = $this->getEnumValueIndex($listSize);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$retval->enumValues[] = $enumValueList[$index];
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$retval->enumName = $this->getString();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$retval->enumValues[] = $this->getString();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:	 * @param int[]       $enumValueMap string enum name -> int index
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putString($enum->enumName);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putUnsignedVarInt(count($enum->enumValues));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		foreach($enum->enumValues as $value){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$index = $enumValueMap[$value] ?? -1;
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			if($index === -1){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putEnumValueIndex($index, $listSize);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putString($enum->enumName);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putUnsignedVarInt(count($enum->enumValues));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		foreach($enum->enumValues as $value){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putString($value);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			return $this->getByte();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			return $this->getLShort();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			return $this->getLInt();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putByte($index);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putLShort($index);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putLInt($index);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$valueIndex = $this->getLInt();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$enumIndex = $this->getLInt();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$valueOffset = array_search($enumValues[$valueIndex], $enum->enumValues, true);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			throw new \UnexpectedValueException("Value \"" . $enumValues[$valueIndex] . "\" does not belong to enum \"$enum->enumName\"");
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$constraintIds[] = $this->getByte();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:	 * @param int[]                 $enumIndexes string enum name -> int index
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:	 * @param int[]                 $enumValueIndexes string value -> int index
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putLInt($enumValueIndexes[$constraint->getAffectedValue()]);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putLInt($enumIndexes[$constraint->getEnum()->enumName]);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putUnsignedVarInt(count($constraint->getConstraints()));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		foreach($constraint->getConstraints() as $v){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putByte($v);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$retval->commandName = $this->getString();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$retval->commandDescription = $this->getString();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$retval->flags = $this->getByte();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$retval->permission = $this->getByte();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$retval->aliases = $enums[$this->getLInt()] ?? null;
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		for($overloadIndex = 0, $overloadCount = $this->getUnsignedVarInt(); $overloadIndex < $overloadCount; ++$overloadIndex){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$retval->overloads[$overloadIndex] = [];
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			for($paramIndex = 0, $paramCount = $this->getUnsignedVarInt(); $paramIndex < $paramCount; ++$paramIndex){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$parameter->paramName = $this->getString();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$parameter->paramType = $this->getLInt();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$parameter->isOptional = $this->getBool();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$parameter->flags = $this->getByte();
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				if(($parameter->paramType & self::ARG_FLAG_ENUM) !== 0){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					$index = ($parameter->paramType & 0xffff);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					$parameter->enum = $enums[$index] ?? null;
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					if($parameter->enum === null){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:						throw new \UnexpectedValueException("deserializing $retval->commandName parameter $parameter->paramName: expected enum at $index, but got none");
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				}elseif(($parameter->paramType & self::ARG_FLAG_POSTFIX) !== 0){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					$index = ($parameter->paramType & 0xffff);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					$parameter->postfix = $postfixes[$index] ?? null;
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					if($parameter->postfix === null){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:						throw new \UnexpectedValueException("deserializing $retval->commandName parameter $parameter->paramName: expected postfix at $index, but got none");
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				}elseif(($parameter->paramType & self::ARG_FLAG_VALID) === 0){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					throw new \UnexpectedValueException("deserializing $retval->commandName parameter $parameter->paramName: Invalid parameter type 0x" . dechex($parameter->paramType));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$retval->overloads[$overloadIndex][$paramIndex] = $parameter;
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:	 * @param int[]       $enumIndexes string enum name -> int index
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putString($data->commandName);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putString($data->commandDescription);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putByte($data->flags);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putByte($data->permission);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		if($data->aliases !== null){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putLInt($enumIndexes[$data->aliases->enumName] ?? -1);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putLInt(-1);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putUnsignedVarInt(count($data->overloads));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		foreach($data->overloads as $overload){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putUnsignedVarInt(count($overload));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$this->putString($parameter->paramName);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				if($parameter->enum !== null){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					$type = self::ARG_FLAG_ENUM | self::ARG_FLAG_VALID | ($enumIndexes[$parameter->enum->enumName] ?? -1);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				}elseif($parameter->postfix !== null){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					$key = $postfixIndexes[$parameter->postfix] ?? -1;
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					if($key === -1){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:						throw new \InvalidStateException("Postfix '$parameter->postfix' not in postfixes array");
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					$type = $parameter->paramType;
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$this->putLInt($type);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$this->putBool($parameter->isOptional);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$this->putByte($parameter->flags);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:	 * @phpstan-param array<int, string> $postfixes
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			if(!isset($enumIndexes[$enum->enumName])){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$enums[$enumIndexes[$enum->enumName] = count($enumIndexes)] = $enum;
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			foreach($enum->enumValues as $str){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		foreach($this->hardcodedEnums as $enum){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		foreach($this->commandData as $commandData){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			if($commandData->aliases !== null){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:				$addEnumFn($commandData->aliases);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			foreach($commandData->overloads as $overload){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					if($parameter->enum !== null){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:						$addEnumFn($parameter->enum);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:					if($parameter->postfix !== null){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:						$postfixIndexes[$parameter->postfix] = $postfixIndexes[$parameter->postfix] ?? count($postfixIndexes);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putUnsignedVarInt(count($enumValueIndexes));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putString((string) $enumValue); //stupid PHP key casting D:
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putUnsignedVarInt(count($postfixIndexes));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putString((string) $postfix); //stupid PHP key casting D:
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putUnsignedVarInt(count($enums));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putEnum($enum, $enumValueIndexes);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putUnsignedVarInt(count($this->commandData));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		foreach($this->commandData as $data){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putCommandData($data, $enumIndexes, $postfixIndexes);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putUnsignedVarInt(count($this->softEnums));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		foreach($this->softEnums as $enum){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putSoftEnum($enum);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		$this->putUnsignedVarInt(count($this->enumConstraints));
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		foreach($this->enumConstraints as $constraint){
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:			$this->putEnumConstraint($constraint, $enumIndexes, $enumValueIndexes);
src/pocketmine/network/mcpe/protocol/AvailableCommandsPacket.php:		return $session->handleAvailableCommands($this);
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        $this->ver = $version;
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        $this->mustAccept = $this->getBool();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        $this->hasScripts = $this->getBool();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        $behaviorPackCount = $this->getLShort();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        while ($behaviorPackCount-- > 0) {
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getLLong();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getBool();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        $resourcePackCount = $this->getLShort();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        while ($resourcePackCount-- > 0) {
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getLLong();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getString();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->getBool();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            if (422 <= $this->ver) {
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:                $this->getBool();
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        $this->putBool($this->mustAccept);
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        $this->putBool($this->hasScripts);
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        $this->putLShort(count($this->behaviorPackEntries));
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        foreach ($this->behaviorPackEntries as $entry) {
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putString($entry->getPackId());
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putString($entry->getPackVersion());
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putLLong($entry->getPackSize());
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putString(''); //TODO: encryption key
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putString(''); //TODO: subpack name
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putString(''); //TODO: content identity
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putBool(false); //TODO: has scripts (?)
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        $this->putLShort(count($this->resourcePackEntries));
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        foreach ($this->resourcePackEntries as $entry) {
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putString($entry->getPackId());
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putString($entry->getPackVersion());
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putLLong($entry->getPackSize());
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putString(''); //TODO: encryption key
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putString(''); //TODO: subpack name
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putString(''); //TODO: content identity
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            $this->putBool(false); //TODO: seems useless for resource packs
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:            if (422 <= $this->ver) {
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:                $this->putBool(false); //TODO: supports RTX
src/pocketmine/network/mcpe/protocol/ResourcePacksInfoPacket.php:        return $session->handleResourcePacksInfo($this);
src/pocketmine/network/mcpe/protocol/PlayerEnchantOptionsPacket.php:		$result->options = $options;
src/pocketmine/network/mcpe/protocol/PlayerEnchantOptionsPacket.php:	public function getOptions() : array{ return $this->options; }
src/pocketmine/network/mcpe/protocol/PlayerEnchantOptionsPacket.php:		$this->options = [];
src/pocketmine/network/mcpe/protocol/PlayerEnchantOptionsPacket.php:		for($i = 0, $len = $this->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/PlayerEnchantOptionsPacket.php:			$this->options[] = EnchantOption::read($this);
src/pocketmine/network/mcpe/protocol/PlayerEnchantOptionsPacket.php:		$this->putUnsignedVarInt(count($this->options));
src/pocketmine/network/mcpe/protocol/PlayerEnchantOptionsPacket.php:		foreach($this->options as $option){
src/pocketmine/network/mcpe/protocol/PlayerEnchantOptionsPacket.php:			$option->write($this);
src/pocketmine/network/mcpe/protocol/PlayerEnchantOptionsPacket.php:		return $handler->handlePlayerEnchantOptions($this);
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:	/* S2C: Shows the boss-bar to the player. */
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:	/* S2C: Removes the boss-bar from the client. */
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:	/* S2C: Not implemented :( Intended to alter bar appearance, but these currently produce no effect on client-side whatsoever. */
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:		$this->bossEid = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:		$this->eventType = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:		switch($this->eventType){
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->playerEid = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->title = $this->getString();
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->healthPercent = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->unknownShort = $this->getLShort();
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->color = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->overlay = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->healthPercent = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->title = $this->getString();
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:		$this->putEntityUniqueId($this->bossEid);
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:		$this->putUnsignedVarInt($this->eventType);
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:		switch($this->eventType){
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->putEntityUniqueId($this->playerEid);
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->putString($this->title);
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->putLFloat($this->healthPercent);
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->putLShort($this->unknownShort);
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->putUnsignedVarInt($this->color);
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->putUnsignedVarInt($this->overlay);
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->putLFloat($this->healthPercent);
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:				$this->putString($this->title);
src/pocketmine/network/mcpe/protocol/BossEventPacket.php:		return $session->handleBossEvent($this);
src/pocketmine/network/mcpe/protocol/NetworkStackLatencyPacket.php:		$this->timestamp = $this->getLLong();
src/pocketmine/network/mcpe/protocol/NetworkStackLatencyPacket.php:		$this->needResponse = $this->getBool();
src/pocketmine/network/mcpe/protocol/NetworkStackLatencyPacket.php:		$this->putLLong($this->timestamp);
src/pocketmine/network/mcpe/protocol/NetworkStackLatencyPacket.php:		$this->putBool($this->needResponse);
src/pocketmine/network/mcpe/protocol/NetworkStackLatencyPacket.php:		return $session->handleNetworkStackLatency($this);
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$result->headSlotDamage = $headSlotDamage;
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$result->chestSlotDamage = $chestSlotDamage;
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$result->legsSlotDamage = $legsSlotDamage;
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$result->feetSlotDamage = $feetSlotDamage;
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:	public function getHeadSlotDamage() : ?int{ return $this->headSlotDamage; }
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:	public function getChestSlotDamage() : ?int{ return $this->chestSlotDamage; }
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:	public function getLegsSlotDamage() : ?int{ return $this->legsSlotDamage; }
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:	public function getFeetSlotDamage() : ?int{ return $this->feetSlotDamage; }
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:			return $this->getVarInt();
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$flags = $this->getByte();
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$this->headSlotDamage = $this->maybeReadDamage($flags, self::FLAG_HEAD);
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$this->chestSlotDamage = $this->maybeReadDamage($flags, self::FLAG_CHEST);
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$this->legsSlotDamage = $this->maybeReadDamage($flags, self::FLAG_LEGS);
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$this->feetSlotDamage = $this->maybeReadDamage($flags, self::FLAG_FEET);
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:			$this->putVarInt($field);
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$this->putByte(
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:			$this->composeFlag($this->headSlotDamage, self::FLAG_HEAD) |
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:			$this->composeFlag($this->chestSlotDamage, self::FLAG_CHEST) |
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:			$this->composeFlag($this->legsSlotDamage, self::FLAG_LEGS) |
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:			$this->composeFlag($this->feetSlotDamage, self::FLAG_FEET)
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$this->maybeWriteDamage($this->headSlotDamage);
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$this->maybeWriteDamage($this->chestSlotDamage);
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$this->maybeWriteDamage($this->legsSlotDamage);
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		$this->maybeWriteDamage($this->feetSlotDamage);
src/pocketmine/network/mcpe/protocol/PlayerArmorDamagePacket.php:		return $handler->handlePlayerArmorDamage($this);
src/pocketmine/network/mcpe/protocol/UpdateBlockSyncedPacket.php:		$this->entityUniqueId = $this->getUnsignedVarLong();
src/pocketmine/network/mcpe/protocol/UpdateBlockSyncedPacket.php:		$this->updateType = $this->getUnsignedVarLong();
src/pocketmine/network/mcpe/protocol/UpdateBlockSyncedPacket.php:		$this->putUnsignedVarLong($this->entityUniqueId);
src/pocketmine/network/mcpe/protocol/UpdateBlockSyncedPacket.php:		$this->putUnsignedVarLong($this->updateType);
src/pocketmine/network/mcpe/protocol/UpdateBlockSyncedPacket.php:		return $session->handleUpdateBlockSynced($this);
src/pocketmine/network/mcpe/protocol/SubClientLoginPacket.php:		$this->connectionRequestData = $this->getString();
src/pocketmine/network/mcpe/protocol/SubClientLoginPacket.php:		$this->putString($this->connectionRequestData);
src/pocketmine/network/mcpe/protocol/SubClientLoginPacket.php:		return $session->handleSubClientLogin($this);
src/pocketmine/network/mcpe/protocol/InventoryContentPacket.php:		$this->windowId = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/InventoryContentPacket.php:		$count = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/InventoryContentPacket.php:			$this->items[] = ItemStackWrapper::read($this);
src/pocketmine/network/mcpe/protocol/InventoryContentPacket.php:		$this->putUnsignedVarInt($this->windowId);
src/pocketmine/network/mcpe/protocol/InventoryContentPacket.php:		$this->putUnsignedVarInt(count($this->items));
src/pocketmine/network/mcpe/protocol/InventoryContentPacket.php:		foreach($this->items as $item){
src/pocketmine/network/mcpe/protocol/InventoryContentPacket.php:			$item->write($this);
src/pocketmine/network/mcpe/protocol/InventoryContentPacket.php:		return $session->handleInventoryContent($this);
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:	public $flags2 = -1;
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:	public $entityUniqueId; //This is a little-endian long, NOT a var-long. (WTF Mojang)
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->flags = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->commandPermission = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->flags2 = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->playerPermission = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->customFlags = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->entityUniqueId = $this->getLLong();
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->putUnsignedVarInt($this->flags);
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->putUnsignedVarInt($this->commandPermission);
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->putUnsignedVarInt($this->flags2);
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->putUnsignedVarInt($this->playerPermission);
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->putUnsignedVarInt($this->customFlags);
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		$this->putLLong($this->entityUniqueId);
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:			return ($this->flags2 & $flag) !== 0;
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		return ($this->flags & $flag) !== 0;
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:			$flagSet =& $this->flags2;
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:			$flagSet =& $this->flags;
src/pocketmine/network/mcpe/protocol/AdventureSettingsPacket.php:		return $session->handleAdventureSettings($this);
src/pocketmine/network/mcpe/protocol/SetDifficultyPacket.php:		$this->difficulty = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/SetDifficultyPacket.php:		$this->putUnsignedVarInt($this->difficulty);
src/pocketmine/network/mcpe/protocol/SetDifficultyPacket.php:		return $session->handleSetDifficulty($this);
src/pocketmine/network/mcpe/protocol/MobEquipmentPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/MobEquipmentPacket.php:		$this->item = $this->getSlot();
src/pocketmine/network/mcpe/protocol/MobEquipmentPacket.php:		$this->inventorySlot = $this->getByte();
src/pocketmine/network/mcpe/protocol/MobEquipmentPacket.php:		$this->hotbarSlot = $this->getByte();
src/pocketmine/network/mcpe/protocol/MobEquipmentPacket.php:		$this->windowId = $this->getByte();
src/pocketmine/network/mcpe/protocol/MobEquipmentPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/MobEquipmentPacket.php:		$this->putSlot($this->item);
src/pocketmine/network/mcpe/protocol/MobEquipmentPacket.php:		$this->putByte($this->inventorySlot);
src/pocketmine/network/mcpe/protocol/MobEquipmentPacket.php:		$this->putByte($this->hotbarSlot);
src/pocketmine/network/mcpe/protocol/MobEquipmentPacket.php:		$this->putByte($this->windowId);
src/pocketmine/network/mcpe/protocol/MobEquipmentPacket.php:		return $session->handleMobEquipment($this);
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$this->input = [];
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$this->output = [];
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$this->windowId = $this->getByte();
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$this->type = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$this->id = $this->getUUID();
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$size = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:			$this->input[] = $this->getSlot();
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$size = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:			$this->output[] = $this->getSlot();
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$this->putByte($this->windowId);
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$this->putVarInt($this->type);
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$this->putUUID($this->id);
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$this->putUnsignedVarInt(count($this->input));
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		foreach($this->input as $item){
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:			$this->putSlot($item);
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		$this->putUnsignedVarInt(count($this->output));
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		foreach($this->output as $item){
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:			$this->putSlot($item);
src/pocketmine/network/mcpe/protocol/CraftingEventPacket.php:		return $session->handleCraftingEvent($this);
src/pocketmine/network/mcpe/protocol/AvailableActorIdentifiersPacket.php:		$this->namedtag = $this->getRemaining();
src/pocketmine/network/mcpe/protocol/AvailableActorIdentifiersPacket.php:		$this->put(
src/pocketmine/network/mcpe/protocol/AvailableActorIdentifiersPacket.php:			$this->namedtag ??
src/pocketmine/network/mcpe/protocol/AvailableActorIdentifiersPacket.php:		return $session->handleAvailableActorIdentifiers($this);
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:		$result->playerEntityRuntimeId = $playerEntityRuntimeId;
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:		$result->emoteIds = $emoteIds;
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:	public function getPlayerEntityRuntimeId() : int{ return $this->playerEntityRuntimeId; }
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:	public function getEmoteIds() : array{ return $this->emoteIds; }
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:		$this->playerEntityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:		$this->emoteIds = [];
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:		for($i = 0, $len = $this->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:			$this->emoteIds[] = $this->getUUID();
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:		$this->putEntityRuntimeId($this->playerEntityRuntimeId);
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:		$this->putUnsignedVarInt(count($this->emoteIds));
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:		foreach($this->emoteIds as $emoteId){
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:			$this->putUUID($emoteId);
src/pocketmine/network/mcpe/protocol/EmoteListPacket.php:		return $handler->handleEmoteList($this);
src/pocketmine/network/mcpe/protocol/SettingsCommandPacket.php:		$result->command = $command;
src/pocketmine/network/mcpe/protocol/SettingsCommandPacket.php:		$result->suppressOutput = $suppressOutput;
src/pocketmine/network/mcpe/protocol/SettingsCommandPacket.php:		return $this->command;
src/pocketmine/network/mcpe/protocol/SettingsCommandPacket.php:		return $this->suppressOutput;
src/pocketmine/network/mcpe/protocol/SettingsCommandPacket.php:		$this->command = $this->getString();
src/pocketmine/network/mcpe/protocol/SettingsCommandPacket.php:		$this->suppressOutput = $this->getBool();
src/pocketmine/network/mcpe/protocol/SettingsCommandPacket.php:		$this->putString($this->command);
src/pocketmine/network/mcpe/protocol/SettingsCommandPacket.php:		$this->putBool($this->suppressOutput);
src/pocketmine/network/mcpe/protocol/SettingsCommandPacket.php:		return $handler->handleSettingsCommand($this);
src/pocketmine/network/mcpe/protocol/ChangeDimensionPacket.php:		$this->dimension = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/ChangeDimensionPacket.php:		$this->position = $this->getVector3();
src/pocketmine/network/mcpe/protocol/ChangeDimensionPacket.php:		$this->respawn = $this->getBool();
src/pocketmine/network/mcpe/protocol/ChangeDimensionPacket.php:		$this->putVarInt($this->dimension);
src/pocketmine/network/mcpe/protocol/ChangeDimensionPacket.php:		$this->putVector3($this->position);
src/pocketmine/network/mcpe/protocol/ChangeDimensionPacket.php:		$this->putBool($this->respawn);
src/pocketmine/network/mcpe/protocol/ChangeDimensionPacket.php:		return $session->handleChangeDimension($this);
src/pocketmine/network/mcpe/protocol/SetActorMotionPacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/SetActorMotionPacket.php:		$this->motion = $this->getVector3();
src/pocketmine/network/mcpe/protocol/SetActorMotionPacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/SetActorMotionPacket.php:		$this->putVector3($this->motion);
src/pocketmine/network/mcpe/protocol/SetActorMotionPacket.php:		return $session->handleSetActorMotion($this);
src/pocketmine/network/mcpe/protocol/ServerSettingsRequestPacket.php:		return $session->handleServerSettingsRequest($this);
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$result->type = $type;
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$result->severity = $severity;
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$result->packetId = $packetId;
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$result->message = $message;
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:	public function getType() : int{ return $this->type; }
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:	public function getSeverity() : int{ return $this->severity; }
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:	public function getPacketId() : int{ return $this->packetId; }
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:	public function getMessage() : string{ return $this->message; }
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$this->type = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$this->severity = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$this->packetId = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$this->message = $this->getString();
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$this->putVarInt($this->type);
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$this->putVarInt($this->severity);
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$this->putVarInt($this->packetId);
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		$this->putString($this->message);
src/pocketmine/network/mcpe/protocol/PacketViolationWarningPacket.php:		return $handler->handlePacketViolationWarning($this);
src/pocketmine/network/mcpe/protocol/ShowStoreOfferPacket.php:		$this->offerId = $this->getString();
src/pocketmine/network/mcpe/protocol/ShowStoreOfferPacket.php:		$this->showAll = $this->getBool();
src/pocketmine/network/mcpe/protocol/ShowStoreOfferPacket.php:		$this->putString($this->offerId);
src/pocketmine/network/mcpe/protocol/ShowStoreOfferPacket.php:		$this->putBool($this->showAll);
src/pocketmine/network/mcpe/protocol/ShowStoreOfferPacket.php:		return $session->handleShowStoreOffer($this);
src/pocketmine/network/mcpe/protocol/ModalFormResponsePacket.php:		$this->formId = $this->getUnsignedVarInt();
src/pocketmine/network/mcpe/protocol/ModalFormResponsePacket.php:		$this->formData = $this->getString();
src/pocketmine/network/mcpe/protocol/ModalFormResponsePacket.php:		$this->putUnsignedVarInt($this->formId);
src/pocketmine/network/mcpe/protocol/ModalFormResponsePacket.php:		$this->putString($this->formData);
src/pocketmine/network/mcpe/protocol/ModalFormResponsePacket.php:		return $session->handleModalFormResponse($this);
src/pocketmine/network/mcpe/protocol/DebugInfoPacket.php:		$result->entityUniqueId = $entityUniqueId;
src/pocketmine/network/mcpe/protocol/DebugInfoPacket.php:		$result->data = $data;
src/pocketmine/network/mcpe/protocol/DebugInfoPacket.php:	public function getEntityUniqueIdField() : int{ return $this->entityUniqueId; }
src/pocketmine/network/mcpe/protocol/DebugInfoPacket.php:	public function getData() : string{ return $this->data; }
src/pocketmine/network/mcpe/protocol/DebugInfoPacket.php:		$this->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/DebugInfoPacket.php:		$this->data = $this->getString();
src/pocketmine/network/mcpe/protocol/DebugInfoPacket.php:		$this->putEntityUniqueId($this->entityUniqueId);
src/pocketmine/network/mcpe/protocol/DebugInfoPacket.php:		$this->putString($this->data);
src/pocketmine/network/mcpe/protocol/DebugInfoPacket.php:		return $handler->handleDebugInfo($this);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:	public $time = -1;
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:	 * @phpstan-var array<string, array{0: int, 1: bool|int|float}>
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:	 * @phpstan-var list<BlockPaletteEntry>
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:	 * @phpstan-var list<ItemTypeEntry>
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->entityUniqueId = $this->getEntityUniqueId();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->entityRuntimeId = $this->getEntityRuntimeId();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->playerGamemode = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->playerPosition = $this->getVector3();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->pitch = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->yaw = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->seed = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->spawnSettings = SpawnSettings::read($this);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->generator = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->worldGamemode = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->difficulty = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->getBlockPosition($this->spawnX, $this->spawnY, $this->spawnZ);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->hasAchievementsDisabled = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->time = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->eduEditionOffer = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->hasEduFeaturesEnabled = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->eduProductUUID = $this->getString();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->rainLevel = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->lightningLevel = $this->getLFloat();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->hasConfirmedPlatformLockedContent = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->isMultiplayerGame = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->hasLANBroadcast = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->xboxLiveBroadcastMode = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->platformBroadcastMode = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->commandsEnabled = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->isTexturePacksRequired = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->gameRules = $this->getGameRules();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->experiments = Experiments::read($this);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->hasBonusChestEnabled = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->hasStartWithMapEnabled = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->defaultPlayerPermission = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->serverChunkTickRadius = $this->getLInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->hasLockedBehaviorPack = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->hasLockedResourcePack = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->isFromLockedWorldTemplate = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->useMsaGamertagsOnly = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->isFromWorldTemplate = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->isWorldTemplateOptionLocked = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->onlySpawnV1Villagers = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->vanillaVersion = $this->getString();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->limitedWorldWidth = $this->getLInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->limitedWorldLength = $this->getLInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->isNewNether = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		if($this->getBool()){
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$this->experimentalGameplayOverride = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$this->experimentalGameplayOverride = null;
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->levelId = $this->getString();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->worldName = $this->getString();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->premiumWorldTemplateId = $this->getString();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->isTrial = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->playerMovementType = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->currentTick = $this->getLLong();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->enchantmentSeed = $this->getVarInt();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->blockPalette = [];
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		for($i = 0, $len = $this->getUnsignedVarInt(); $i < $len; ++$i){
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$blockName = $this->getString();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$state = $this->getNbtCompoundRoot();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$this->blockPalette[] = new BlockPaletteEntry($blockName, $state);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->itemTable = [];
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		for($i = 0, $count = $this->getUnsignedVarInt(); $i < $count; ++$i){
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$stringId = $this->getString();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$numericId = $this->getSignedLShort();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$isComponentBased = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$this->itemTable[] = new ItemTypeEntry($stringId, $numericId, $isComponentBased);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->multiplayerCorrelationId = $this->getString();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->enableNewInventorySystem = $this->getBool();
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putEntityUniqueId($this->entityUniqueId);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putEntityRuntimeId($this->entityRuntimeId);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->playerGamemode);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVector3($this->playerPosition);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putLFloat($this->pitch);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putLFloat($this->yaw);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->seed);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->spawnSettings->write($this);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->generator);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->worldGamemode);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->difficulty);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBlockPosition($this->spawnX, $this->spawnY, $this->spawnZ);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->hasAchievementsDisabled);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->time);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->eduEditionOffer);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->hasEduFeaturesEnabled);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putString($this->eduProductUUID);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putLFloat($this->rainLevel);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putLFloat($this->lightningLevel);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->hasConfirmedPlatformLockedContent);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->isMultiplayerGame);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->hasLANBroadcast);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->xboxLiveBroadcastMode);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->platformBroadcastMode);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->commandsEnabled);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->isTexturePacksRequired);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putGameRules($this->gameRules);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->experiments->write($this);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->hasBonusChestEnabled);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->hasStartWithMapEnabled);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->defaultPlayerPermission);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putLInt($this->serverChunkTickRadius);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->hasLockedBehaviorPack);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->hasLockedResourcePack);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->isFromLockedWorldTemplate);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->useMsaGamertagsOnly);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->isFromWorldTemplate);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->isWorldTemplateOptionLocked);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->onlySpawnV1Villagers);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putString($this->vanillaVersion);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putLInt($this->limitedWorldWidth);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putLInt($this->limitedWorldLength);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->isNewNether);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->experimentalGameplayOverride !== null);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		if($this->experimentalGameplayOverride !== null){
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$this->putBool($this->experimentalGameplayOverride);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putString($this->levelId);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putString($this->worldName);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putString($this->premiumWorldTemplateId);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->isTrial);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->playerMovementType);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putLLong($this->currentTick);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putVarInt($this->enchantmentSeed);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putUnsignedVarInt(count($this->blockPalette));
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		foreach($this->blockPalette as $entry){
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$this->putString($entry->getName());
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$this->put($nbtWriter->write($entry->getStates()));
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putUnsignedVarInt(count($this->itemTable));
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		foreach($this->itemTable as $entry){
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$this->putString($entry->getStringId());
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$this->putLShort($entry->getNumericId());
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:			$this->putBool($entry->isComponentBased());
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putString($this->multiplayerCorrelationId);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		$this->putBool($this->enableNewInventorySystem);
src/pocketmine/network/mcpe/protocol/StartGamePacket.php:		return $session->handleStartGame($this);
src/pocketmine/network/mcpe/VerifyLoginTask.php:	 * keychain is invalid for whatever reason (bad signature, not in nbf-exp window, etc). If this is non-null, the
src/pocketmine/network/mcpe/VerifyLoginTask.php:	 * keychain might have been tampered with. The player will always be disconnected if this is non-null.
src/pocketmine/network/mcpe/VerifyLoginTask.php:		$this->storeLocal([$player, $packet]);
src/pocketmine/network/mcpe/VerifyLoginTask.php:		$this->chainJwts = serialize($packet->chainData["chain"]);
src/pocketmine/network/mcpe/VerifyLoginTask.php:		$this->clientDataJwt = $packet->clientDataJwt;
src/pocketmine/network/mcpe/VerifyLoginTask.php:		$chainJwts = unserialize($this->chainJwts); //Get it in a local variable to make sure it stays unserialized
src/pocketmine/network/mcpe/VerifyLoginTask.php:				$this->validateToken($jwt, $currentKey, $first);
src/pocketmine/network/mcpe/VerifyLoginTask.php:			$this->validateToken($this->clientDataJwt, $currentKey);
src/pocketmine/network/mcpe/VerifyLoginTask.php:			$this->error = null;
src/pocketmine/network/mcpe/VerifyLoginTask.php:			$this->error = $e->getMessage();
src/pocketmine/network/mcpe/VerifyLoginTask.php:		$headers = json_decode(base64_decode(strtr($headB64, '-_', '+/'), true), true);
src/pocketmine/network/mcpe/VerifyLoginTask.php:			//First link, check that it is self-signed
src/pocketmine/network/mcpe/VerifyLoginTask.php:		$plainSignature = base64_decode(strtr($sigB64, '-_', '+/'), true);
src/pocketmine/network/mcpe/VerifyLoginTask.php:		//OpenSSL wants a DER-encoded signature, so we extract R and S from the plain signature and crudely serialize it.
src/pocketmine/network/mcpe/VerifyLoginTask.php:		$v = openssl_verify("$headB64.$payloadB64", $derSignature, "-----BEGIN PUBLIC KEY-----\n" . wordwrap($currentPublicKey, 64, "\n", true) . "\n-----END PUBLIC KEY-----\n", OPENSSL_ALGO_SHA384);
src/pocketmine/network/mcpe/VerifyLoginTask.php:			$this->authenticated = true; //we're signed into xbox live
src/pocketmine/network/mcpe/VerifyLoginTask.php:		$claims = json_decode(base64_decode(strtr($payloadB64, '-_', '+/'), true), true);
src/pocketmine/network/mcpe/VerifyLoginTask.php:		if(isset($claims["exp"]) and $claims["exp"] < $time - self::CLOCK_DRIFT_MAX){
src/pocketmine/network/mcpe/VerifyLoginTask.php:		[$player, $packet] = $this->fetchLocal();
src/pocketmine/network/mcpe/VerifyLoginTask.php:		if(!$player->isConnected()){
src/pocketmine/network/mcpe/VerifyLoginTask.php:			$server->getLogger()->error("Player " . $player->getName() . " was disconnected before their login could be verified");
src/pocketmine/network/mcpe/VerifyLoginTask.php:			$player->onVerifyCompleted($packet, $this->error, $this->authenticated);
src/pocketmine/network/CompressBatchedTask.php:		$this->data = $batch->payload;
src/pocketmine/network/CompressBatchedTask.php:		$this->level = $batch->getCompressionLevel();
src/pocketmine/network/CompressBatchedTask.php:		$this->storeLocal($targets);
src/pocketmine/network/CompressBatchedTask.php:		$batch->payload = $this->data;
src/pocketmine/network/CompressBatchedTask.php:		$batch->setCompressionLevel($this->level);
src/pocketmine/network/CompressBatchedTask.php:		$batch->encode();
src/pocketmine/network/CompressBatchedTask.php:		$this->setResult($batch->buffer);
src/pocketmine/network/CompressBatchedTask.php:		$pk = new BatchPacket($this->getResult());
src/pocketmine/network/CompressBatchedTask.php:		$pk->isEncoded = true;
src/pocketmine/network/CompressBatchedTask.php:		$targets = $this->fetchLocal();
src/pocketmine/network/CompressBatchedTask.php:		$server->broadcastPacketsCallback($pk, $targets);
src/pocketmine/network/AdvancedSourceInterface.php: * Network-related classes
src/pocketmine/network/AdvancedSourceInterface.php:	 * Unblocks a previously-blocked address.
src/pocketmine/network/SourceInterface.php: * Network-related classes
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -242
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -243
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -277
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -297
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -278
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -256
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -257
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -258
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -259
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -180
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -179
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -175
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -177
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -176
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -169
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -172
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -170
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -173
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -171
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -174
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -184
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -178
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -185
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -2
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -3
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -4
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -254
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -255
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -276
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -292
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -275
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -149
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -146
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -148
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -145
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -147
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -246
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -247
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -165
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -166,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -166
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -166,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -166,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -162,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -162,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -162,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -162,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -162,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -162,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -162,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -162
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -166,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -264
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -265
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -282
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -293
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -284
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -302
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -303
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -304
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -274
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -280
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -281
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -279
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -183
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -139
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -220
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -221
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -270
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -222
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -227
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -230
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -232
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -233
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -234
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -235
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -236
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -288
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -271
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -273
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -291
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -10
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -5
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -6
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -7
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -8
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -9
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -225
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -240
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -226
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -241
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -212,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -299
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -300
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -298
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -301
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -218
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -155
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -131,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -131,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -131,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -131
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -131,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -131,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -131,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -131,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -131,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -131,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -133,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -133,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -133,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -133
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -133,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -134,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -134,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -134,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -134
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -134,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -130
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -223
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -224
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -216
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -231
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -287
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -163
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -11
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -228
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -229
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -159
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -289
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -132
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -132,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -132,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -132,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -132,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -132,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -132,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -132,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -132,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -132,
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -268
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -156
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -208
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -269
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -200
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -201
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -202
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -219
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -196
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -198
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -272
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -195
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -194
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -213
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -203
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -206
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -157
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -197
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -12
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -13
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -14
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -15
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -16
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -17
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -18
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -19
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -20
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -21
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -22
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -23
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -24
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -25
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -26
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -27
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -28
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -29
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -30
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -31
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -32
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -33
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -34
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -35
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -36
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -37
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -38
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -39
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -40
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -41
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -42
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -43
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -44
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -45
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -46
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -47
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -48
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -49
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -50
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -51
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -52
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -53
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -54
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -55
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -56
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -57
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -58
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -59
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -60
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -61
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -62
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -63
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -64
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -65
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -66
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -67
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -68
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -69
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -70
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -71
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -72
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -73
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -74
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -75
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -76
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -77
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -78
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -79
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -80
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -81
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -82
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -83
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -84
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -85
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -86
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -87
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -88
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -89
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -90
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -91
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -92
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -93
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -94
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -95
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -96
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -97
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -98
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -99
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -100
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -101
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -102
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -103
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -104
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -105
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -106
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -107
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -108
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -109
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -110
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -111
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -112
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -113
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -114
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -115
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -116
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -117
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -118
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -119
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -120
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -121
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -122
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -123
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -124
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -125
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -126
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -127
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -128
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -129
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -144
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -141
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -143
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -140
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -142
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -260
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -261
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -296
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -154
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -151
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -153
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -150
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -152
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -262
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -263
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -295
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -204
src/pocketmine/resources/vanilla/creativeitems.json:        "id": -239
src/pocketmine/resources/vanilla/README.md:Blobs of data generated from Minecraft: Bedrock Edition used by PocketMine-MP
src/pocketmine/resources/vanilla/README.md:This file contains a network-format NBT list of all the blockstate permutations needed by MCPE's `StartGamePacket`.
src/pocketmine/resources/vanilla/README.md:It's provided as-is directly from `StartGamePacket` sent by the current vanilla server.
src/pocketmine/resources/vanilla/README.md:Where a block's legacy ID is > 255, its item ID is `255 - legacyBlockId`. This means prismarine stairs = -2 and so on.
src/pocketmine/resources/vanilla/README.md:This file contains a list of mappings from legacy pre-1.13 blockstates to states of the current version.
src/pocketmine/resources/vanilla/README.md:|------|-------------|
src/pocketmine/resources/vanilla/README.md:| little-endian int16 | r12 block metadata |
src/pocketmine/resources/vanilla/README.md:An example of how to read this file using the PocketMine-MP core library can be seen on the [stable branch](https://github.com/pmmp/PocketMine-MP/blob/41f7c07703bf3f7ef2d9504bbdbdf74257e75d12/src/pocketmine/network/mcpe/convert/RuntimeBlockMapping.php#L71-L86) or on the [master branch](https://github.com/pmmp/PocketMine-MP/blob/master/src/network/mcpe/convert/RuntimeBlockMapping.php#L74-L86).
src/pocketmine/resources/vanilla/README.md:This file defines all crafting-table, furnace and chemistry recipes. This includes recipes for the smoker, cartography table etc.
src/pocketmine/resources/vanilla/README.md:This file contains a network-format NBT blob containing biome definitions obtained from `BiomeDefinitionListPacket`.
src/pocketmine/resources/vanilla/README.md:This file contains a network-format NBT blob containing entity identifier mappings obtained from `AvailableActorIdentifiersPacket`.
src/pocketmine/resources/vanilla/.minify_json.php:	if(substr($file, -$extLen) === $ext){
src/pocketmine/resources/vanilla/recipes.json:                    "id": -10,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -10,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -10,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -139,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -155,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -163,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -165,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -163
src/pocketmine/resources/vanilla/recipes.json:                    "id": -183
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212
src/pocketmine/resources/vanilla/recipes.json:                    "id": -225,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -225,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -225,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -299,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -226,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -226,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -226,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -298,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -234,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -235,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -240,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -240,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -240,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -300,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -241,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -241,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -241,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -301,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -256,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -219
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -246,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -254,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -260
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -262
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -264,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -257,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -219
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -247,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -255,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -261
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -263
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -265,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -264,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -194
src/pocketmine/resources/vanilla/recipes.json:                    "id": -264,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -213
src/pocketmine/resources/vanilla/recipes.json:                    "id": -265,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -194
src/pocketmine/resources/vanilla/recipes.json:                    "id": -265,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -213
src/pocketmine/resources/vanilla/recipes.json:                    "id": -270,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -276,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -277,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -282,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -274,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -275,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -274,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -278,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -274,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -284,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -289,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -272
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -274,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -292,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -293,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -295
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -296
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -297,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -293,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -279
src/pocketmine/resources/vanilla/recipes.json:                    "id": -298,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -299,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -300,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -301,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -5,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -5,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -5,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -6,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -6,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -6,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -7,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -7,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -7,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -8,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -8,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -8,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -9,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -9,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -9,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -169,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -172,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -170,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -173,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -171,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -174,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -166,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -185,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -304
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -194
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -213
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -3,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -4,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -2,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -198
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -11
src/pocketmine/resources/vanilla/recipes.json:                    "id": -166,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -176,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -166,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -180,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -264,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -265,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -178,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -184,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -166,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -177,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -268,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -268,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -202
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -202
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -197
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -202
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -183,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -196
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -195
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -195
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -166,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -195
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -166,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -195
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -166,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -195
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -10,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -225,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -226,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -240,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -241,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -5,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -6,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -7,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -8,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -9,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -236,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -258
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -259
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -264,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -203
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -265,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -203
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -203
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -195
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -195
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -10,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -5,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -6,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -7,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -8,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -9,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -10,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -225,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -226,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -240,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -241,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -5,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -6,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -7,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -8,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -9,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -195
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -195
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -10,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -225,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -226,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -240,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -241,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -5,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -6,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -7,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -8,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -9,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -204
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -204
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -204
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -201
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -201
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -201
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -239
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -200
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -200
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -200
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -229,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -242,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -243,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -302
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -268,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -269
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -208
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -139
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -157
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -179,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -219
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -144
src/pocketmine/resources/vanilla/recipes.json:                    "id": -149,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -154
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -141
src/pocketmine/resources/vanilla/recipes.json:                    "id": -146,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -151
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -143
src/pocketmine/resources/vanilla/recipes.json:                    "id": -148,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -153
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -140
src/pocketmine/resources/vanilla/recipes.json:                    "id": -145,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -150
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -142
src/pocketmine/resources/vanilla/recipes.json:                    "id": -147,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -152
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -221
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -220
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -270
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -166,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -175,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -222
src/pocketmine/resources/vanilla/recipes.json:                    "id": -22
src/pocketmine/resources/vanilla/recipes.json:                    "id": -23
src/pocketmine/resources/vanilla/recipes.json:                    "id": -23
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -23
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -23
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -23
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -23
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -13
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -216,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -220,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -216,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -183
src/pocketmine/resources/vanilla/recipes.json:                    "id": -234,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -235
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -274
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -275
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -276
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -277
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -278
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -279
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -282,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -284,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -292
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -293,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -273,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -297
src/pocketmine/resources/vanilla/recipes.json:                    "id": -274,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -275
src/pocketmine/resources/vanilla/recipes.json:                    "id": -274,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -278
src/pocketmine/resources/vanilla/recipes.json:                    "id": -274,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -284,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -274
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -275
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -278
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -279
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -284,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -292
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -293,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -291,
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -297
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -169
src/pocketmine/resources/vanilla/recipes.json:                    "id": -172
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -172
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -170
src/pocketmine/resources/vanilla/recipes.json:                    "id": -173
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -173
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -171
src/pocketmine/resources/vanilla/recipes.json:                    "id": -174
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -174
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "id": -302
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -178
src/pocketmine/resources/vanilla/recipes.json:                    "id": -166,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -185
src/pocketmine/resources/vanilla/recipes.json:                    "id": -304
src/pocketmine/resources/vanilla/recipes.json:                    "id": -3
src/pocketmine/resources/vanilla/recipes.json:                    "id": -4
src/pocketmine/resources/vanilla/recipes.json:                    "id": -2
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -176
src/pocketmine/resources/vanilla/recipes.json:                    "id": -166,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -180
src/pocketmine/resources/vanilla/recipes.json:                    "id": -162,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -178
src/pocketmine/resources/vanilla/recipes.json:                    "id": -184
src/pocketmine/resources/vanilla/recipes.json:                    "id": -177
src/pocketmine/resources/vanilla/recipes.json:                    "id": -179
src/pocketmine/resources/vanilla/recipes.json:                    "id": -166,
src/pocketmine/resources/vanilla/recipes.json:                    "id": -175
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                    "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -271,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -288,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -10,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -156,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                "id": -212,
src/pocketmine/resources/vanilla/recipes.json:                "id": -212
src/pocketmine/resources/vanilla/recipes.json:                "id": -271,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -274,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -280
src/pocketmine/resources/vanilla/recipes.json:                "id": -288,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -5,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -6,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -7,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -8,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -9,
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -303
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "id": -183
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:                "damage": -1
src/pocketmine/resources/vanilla/recipes.json:        "00000000-0000-0000-0000-000000000001",
src/pocketmine/resources/vanilla/recipes.json:        "00000000-0000-0000-0000-000000000002",
src/pocketmine/resources/vanilla/recipes.json:        "442d85ed-8272-4543-a6f1-418f90ded05d",
src/pocketmine/resources/vanilla/recipes.json:        "602234e4-cac1-4353-8bb7-b1ebff70024b",
src/pocketmine/resources/vanilla/recipes.json:        "85939755-ba10-4d9d-a4cc-efb7a8e943c4",
src/pocketmine/resources/vanilla/recipes.json:        "8b36268c-1829-483c-a0f1-993b7156a8f2",
src/pocketmine/resources/vanilla/recipes.json:        "98c84b38-1085-46bd-b1ce-dd38c159e6cc",
src/pocketmine/resources/vanilla/recipes.json:        "aecd2294-4b94-434b-8667-4499bb2c9327",
src/pocketmine/resources/vanilla/recipes.json:        "b5c5d105-75a2-4076-af2b-923ea2bf4bf0",
src/pocketmine/resources/vanilla/recipes.json:        "d1ca6b84-338e-4f2f-9c6b-76cc8b4bd98d",
src/pocketmine/resources/vanilla/recipes.json:        "d392b075-4ba1-40ae-8789-af868d56f6ce",
src/pocketmine/resources/vanilla/recipes.json:        "d81aaeaf-e172-4440-9225-868df030d27b"
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -216,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -231,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -227,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -253,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -251,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -243,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -233,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -229,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -257,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -245,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -305,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -287,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -239,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -207,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -298,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -241,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -301,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -5,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -10,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -9,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -197,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -267,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -6,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -217,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -149,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -268,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -177,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -230,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -184,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -2,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -4,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -173,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -297,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -176,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -295,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -294,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -296,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -274,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -278,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -185,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -285,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -291,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -235,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -174,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -175,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -199,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -214,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -210,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -182,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -255,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -211,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -221,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -222,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -169,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -138,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -178,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -170,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -181,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -193,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -192,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -261,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -142,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -225,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -250,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -147,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -254,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -262,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -242,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -232,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -228,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -258,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -266,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -280,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -137,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -302,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -247,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -286,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -160,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -11,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -273,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -187,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -146,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -186,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -141,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -219,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -288,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -171,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -145,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -190,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -150,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -140,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -289,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -272,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -271,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -263,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -270,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -213,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -129,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -128,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -127,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -126,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -125,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -124,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -123,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -120,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -292,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -119,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -114,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -113,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -112,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -111,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -109,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -108,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -107,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -106,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -105,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -260,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -279,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -104,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -79,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -240,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -165,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -133,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -218,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -151,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -265,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -300,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -38,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -152,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -77,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -203,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -59,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -81,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -86,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -238,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -299,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -290,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -67,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -94,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -189,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -98,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -58,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -131,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -304,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -209,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -234,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -87,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -26,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -226,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -54,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -132,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -202,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -68,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -139,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -121,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -134,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -70,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -96,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -154,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -122,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -256,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -7,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -179,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -29,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -188,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -57,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -159,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -284,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -116,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -90,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -293,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -46,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -92,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -3,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -117,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -156,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -115,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -158,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -13,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -204,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -93,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -61,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -196,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -23,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -99,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -144,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -36,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -20,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -206,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -135,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -198,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -8,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -55,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -183,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -48,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -237,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -143,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -283,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -220,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -65,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -246,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -16,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -32,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -66,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -264,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -53,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -76,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -102,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -40,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -276,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -153,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -212,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -51,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -74,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -97,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -259,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -281,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -194,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -69,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -110,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -303,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -282,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -277,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -21,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -252,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -161,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -91,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -43,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -162,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -148,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -224,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -166,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -167,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -168,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -164,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -223,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -208,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -18,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -34,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -14,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -101,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -275,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -157,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -215,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -118,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -163,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -155,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -84,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -195,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -75,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -200,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -52,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -201,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -172,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -12,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -31,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -15,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -35,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -19,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -191,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -22,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -24,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -25,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -27,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -28,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -30,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -17,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -33,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -136,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -37,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -39,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -41,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -42,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -44,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -45,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -47,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -130,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -49,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -50,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -56,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -244,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -60,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -62,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -63,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -64,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -71,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -72,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -180,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -73,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -236,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -78,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -80,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -82,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -83,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -85,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -88,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -89,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -269,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -95,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -100,
src/pocketmine/resources/vanilla/required_item_list.json:        "runtime_id": -103,
src/pocketmine/resources/vanilla/LICENSE:       of the Library that is interface-compatible with the Linked
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:quartz_bricks": -304,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:cracked_nether_bricks": -303,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:chiseled_nether_bricks": -302,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stripped_warped_hyphae": -301,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stripped_crimson_hyphae": -300,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_hyphae": -299,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_hyphae": -298,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone_wall": -297,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone_button": -296,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone_pressure_plate": -295,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone_double_slab": -294,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone_slab": -293,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone_stairs": -292,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone": -291,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:item.soul_campfire": -290,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crying_obsidian": -289,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:nether_gold_ore": -288,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:twisting_vines": -287,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:item.chain": -286,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone_brick_double_slab": -285,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone_brick_slab": -284,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:blackstone_double_slab": -283,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:blackstone_slab": -282,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:gilded_blackstone": -281,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:cracked_polished_blackstone_bricks": -280,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:chiseled_polished_blackstone": -279,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone_brick_wall": -278,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:blackstone_wall": -277,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:blackstone_stairs": -276,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone_brick_stairs": -275,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_blackstone_bricks": -274,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:blackstone": -273,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:respawn_anchor": -272,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:ancient_debris": -271,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:netherite_block": -270,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:soul_lantern": -269,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:soul_torch": -268,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_double_slab": -267,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_double_slab": -266,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_slab": -265,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_slab": -264,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_pressure_plate": -263,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_pressure_plate": -262,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_button": -261,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_button": -260,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_fence_gate": -259,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_fence_gate": -258,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_fence": -257,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_fence": -256,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_stairs": -255,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_stairs": -254,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_wall_sign": -253,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_wall_sign": -252,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_standing_sign": -251,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_standing_sign": -250,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_trapdoor": -247,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_trapdoor": -246,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:item.warped_door": -245,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:item.crimson_door": -244,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_planks": -243,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_planks": -242,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stripped_warped_stem": -241,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stripped_crimson_stem": -240,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:target": -239,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:item.nether_sprouts": -238,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:soul_fire": -237,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:soul_soil": -236,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_basalt": -235,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:basalt": -234,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_nylium": -233,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_nylium": -232,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:weeping_vines": -231,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:shroomlight": -230,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_fungus": -229,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_fungus": -228,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_wart_block": -227,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_stem": -226,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_stem": -225,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:warped_roots": -224,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:crimson_roots": -223,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:lodestone": -222,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:honeycomb_block": -221,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:honey_block": -220,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:beehive": -219,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:bee_nest": -218,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stickypistonarmcollision": -217,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:wither_rose": -216,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:light_block": -215,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:lit_blast_furnace": -214,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:composter": -213,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:wood": -212,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:jigsaw": -211,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:lava_cauldron": -210,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:item.campfire": -209,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:lantern": -208,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:sweet_berry_bush": -207,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:bell": -206,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:loom": -204,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:barrel": -203,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:smithing_table": -202,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:fletching_table": -201,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:cartography_table": -200,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:lit_smoker": -199,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:smoker": -198,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stonecutter_block": -197,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:blast_furnace": -196,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:grindstone": -195,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:lectern": -194,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:darkoak_wall_sign": -193,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:darkoak_standing_sign": -192,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:acacia_wall_sign": -191,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:acacia_standing_sign": -190,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:jungle_wall_sign": -189,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:jungle_standing_sign": -188,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:birch_wall_sign": -187,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:birch_standing_sign": -186,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:smooth_quartz_stairs": -185,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:red_nether_brick_stairs": -184,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:smooth_stone": -183,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:spruce_wall_sign": -182,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:spruce_standing_sign": -181,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:normal_stone_stairs": -180,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:mossy_cobblestone_stairs": -179,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:end_brick_stairs": -178,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:smooth_sandstone_stairs": -177,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:smooth_red_sandstone_stairs": -176,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:mossy_stone_brick_stairs": -175,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_andesite_stairs": -174,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_diorite_stairs": -173,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:polished_granite_stairs": -172,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:andesite_stairs": -171,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:diorite_stairs": -170,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:granite_stairs": -169,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:real_double_stone_slab4": -168,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:real_double_stone_slab3": -167,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:double_stone_slab4": -166,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:scaffolding": -165,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:bamboo_sapling": -164,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:bamboo": -163,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:double_stone_slab3": -162,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:barrier": -161,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:bubble_column": -160,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:turtle_egg": -159,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:air": -158,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:conduit": -157,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:sea_pickle": -156,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:carved_pumpkin": -155,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:spruce_pressure_plate": -154,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:jungle_pressure_plate": -153,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:dark_oak_pressure_plate": -152,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:birch_pressure_plate": -151,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:acacia_pressure_plate": -150,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:spruce_trapdoor": -149,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:jungle_trapdoor": -148,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:dark_oak_trapdoor": -147,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:birch_trapdoor": -146,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:acacia_trapdoor": -145,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:spruce_button": -144,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:jungle_button": -143,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:dark_oak_button": -142,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:birch_button": -141,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:acacia_button": -140,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:dried_kelp_block": -139,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:item.kelp": -138,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:coral_fan_hang3": -137,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:coral_fan_hang2": -136,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:coral_fan_hang": -135,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:coral_fan_dead": -134,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:coral_fan": -133,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:coral_block": -132,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:coral": -131,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:seagrass": -130,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_118": -129,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_117": -128,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_116": -127,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_115": -126,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_114": -125,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_113": -124,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_112": -123,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_111": -122,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_110": -121,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_109": -120,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_108": -119,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_107": -118,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_106": -117,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_105": -116,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_104": -115,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_103": -114,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_102": -113,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_101": -112,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_100": -111,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_99": -110,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_98": -109,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_97": -108,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_96": -107,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_95": -106,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_94": -105,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_93": -104,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_92": -103,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_91": -102,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_90": -101,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_89": -100,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_88": -99,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_87": -98,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_86": -97,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_85": -96,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_84": -95,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_83": -94,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_82": -93,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_81": -92,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_80": -91,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_79": -90,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_78": -89,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_77": -88,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_76": -87,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_75": -86,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_74": -85,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_73": -84,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_72": -83,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_71": -82,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_70": -81,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_69": -80,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_68": -79,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_67": -78,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_66": -77,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_65": -76,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_64": -75,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_63": -74,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_62": -73,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_61": -72,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_60": -71,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_59": -70,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_58": -69,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_57": -68,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_56": -67,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_55": -66,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_54": -65,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_53": -64,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_52": -63,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_51": -62,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_50": -61,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_49": -60,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_48": -59,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_47": -58,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_46": -57,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_45": -56,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_44": -55,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_43": -54,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_42": -53,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_41": -52,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_40": -51,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_39": -50,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_38": -49,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_37": -48,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_36": -47,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_35": -46,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_34": -45,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_33": -44,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_32": -43,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_31": -42,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_30": -41,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_29": -40,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_28": -39,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_27": -38,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_26": -37,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_25": -36,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_24": -35,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_23": -34,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_22": -33,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_21": -32,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_20": -31,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_19": -30,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_18": -29,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_17": -28,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_16": -27,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_15": -26,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_14": -25,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_13": -24,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_12": -23,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_11": -22,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_10": -21,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_9": -20,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_8": -19,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_7": -18,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_6": -17,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_5": -16,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_4": -15,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_3": -14,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_2": -13,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:element_1": -12,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:blue_ice": -11,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stripped_oak_log": -10,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stripped_dark_oak_log": -9,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stripped_acacia_log": -8,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stripped_jungle_log": -7,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stripped_birch_log": -6,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:stripped_spruce_log": -5,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:prismarine_bricks_stairs": -4,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:dark_prismarine_stairs": -3,
src/pocketmine/resources/vanilla/item_id_map.json:    "minecraft:prismarine_stairs": -2,
src/pocketmine/resources/pocketmine.yml:# Main configuration file for PocketMine-MP
src/pocketmine/resources/pocketmine.yml:  force-language: false
src/pocketmine/resources/pocketmine.yml:  shutdown-message: "Server closed"
src/pocketmine/resources/pocketmine.yml:  query-plugins: true
src/pocketmine/resources/pocketmine.yml:  enable-profiling: false
src/pocketmine/resources/pocketmine.yml:  profile-report-trigger: 20
src/pocketmine/resources/pocketmine.yml:  async-workers: auto
src/pocketmine/resources/pocketmine.yml:  enable-dev-builds: false
src/pocketmine/resources/pocketmine.yml:  #This will trigger low-memory-triggers and fire an event to free memory when the usage goes over this
src/pocketmine/resources/pocketmine.yml:  global-limit: 0
src/pocketmine/resources/pocketmine.yml:  #This will trigger low-memory-triggers and fire an event to free memory when the usage goes over this
src/pocketmine/resources/pocketmine.yml:  main-limit: 0
src/pocketmine/resources/pocketmine.yml:  main-hard-limit: 1024
src/pocketmine/resources/pocketmine.yml:  async-worker-hard-limit: 256
src/pocketmine/resources/pocketmine.yml:  check-rate: 20
src/pocketmine/resources/pocketmine.yml:  #Continue firing low-memory-triggers and event while on low memory
src/pocketmine/resources/pocketmine.yml:  continuous-trigger: true
src/pocketmine/resources/pocketmine.yml:  #Only if memory.continuous-trigger is enabled. Specifies the rate in memory.check-rate steps (default 30 seconds)
src/pocketmine/resources/pocketmine.yml:  continuous-trigger-rate: 30
src/pocketmine/resources/pocketmine.yml:  garbage-collection:
src/pocketmine/resources/pocketmine.yml:    collect-async-worker: true
src/pocketmine/resources/pocketmine.yml:    low-memory-trigger: true
src/pocketmine/resources/pocketmine.yml:  memory-dump:
src/pocketmine/resources/pocketmine.yml:    dump-async-worker: true
src/pocketmine/resources/pocketmine.yml:  max-chunks:
src/pocketmine/resources/pocketmine.yml:    chunk-radius: 4
src/pocketmine/resources/pocketmine.yml:    trigger-chunk-collect: true
src/pocketmine/resources/pocketmine.yml:  world-caches:
src/pocketmine/resources/pocketmine.yml:    #Disallow adding to world chunk-packet caches when memory is low
src/pocketmine/resources/pocketmine.yml:    disable-chunk-cache: true
src/pocketmine/resources/pocketmine.yml:    low-memory-trigger: true
src/pocketmine/resources/pocketmine.yml:  #Set to 0 to compress everything, -1 to disable.
src/pocketmine/resources/pocketmine.yml:  batch-threshold: 256
src/pocketmine/resources/pocketmine.yml:  compression-level: 6
src/pocketmine/resources/pocketmine.yml:  async-compression: false
src/pocketmine/resources/pocketmine.yml:  upnp-forwarding: false
src/pocketmine/resources/pocketmine.yml:  max-mtu-size: 1492
src/pocketmine/resources/pocketmine.yml:  save-player-data: true
src/pocketmine/resources/pocketmine.yml:  #This also prevents non-XBL players using XBL players' usernames to steal their data on servers with xbox-auth=off.
src/pocketmine/resources/pocketmine.yml:  verify-xuid: true
src/pocketmine/resources/pocketmine.yml:  anti-cheat:
src/pocketmine/resources/pocketmine.yml:    allow-movement-cheats: true
src/pocketmine/resources/pocketmine.yml:level-settings:
src/pocketmine/resources/pocketmine.yml:  default-format: pmanvil
src/pocketmine/resources/pocketmine.yml:chunk-sending:
src/pocketmine/resources/pocketmine.yml:  #To change server normal render distance, change view-distance in server.properties.
src/pocketmine/resources/pocketmine.yml:  per-tick: 4
src/pocketmine/resources/pocketmine.yml:  spawn-radius: 4
src/pocketmine/resources/pocketmine.yml:chunk-ticking:
src/pocketmine/resources/pocketmine.yml:  per-tick: 40
src/pocketmine/resources/pocketmine.yml:  tick-radius: 3
src/pocketmine/resources/pocketmine.yml:  light-updates: false
src/pocketmine/resources/pocketmine.yml:  clear-tick-list: true
src/pocketmine/resources/pocketmine.yml:  disable-block-ticking:
src/pocketmine/resources/pocketmine.yml:    #- 2 # grass
src/pocketmine/resources/pocketmine.yml:chunk-generation:
src/pocketmine/resources/pocketmine.yml:  population-queue-size: 32
src/pocketmine/resources/pocketmine.yml:ticks-per:
src/pocketmine/resources/pocketmine.yml:auto-report:
src/pocketmine/resources/pocketmine.yml:  send-code: true
src/pocketmine/resources/pocketmine.yml:  send-settings: true
src/pocketmine/resources/pocketmine.yml:  send-phpinfo: false
src/pocketmine/resources/pocketmine.yml:  use-https: true
src/pocketmine/resources/pocketmine.yml:anonymous-statistics:
src/pocketmine/resources/pocketmine.yml:  enabled: false #TODO: re-enable this when we have a new stats host
src/pocketmine/resources/pocketmine.yml:auto-updater:
src/pocketmine/resources/pocketmine.yml:  on-update:
src/pocketmine/resources/pocketmine.yml:    warn-console: true
src/pocketmine/resources/pocketmine.yml:    warn-ops: true
src/pocketmine/resources/pocketmine.yml:  preferred-channel: stable
src/pocketmine/resources/pocketmine.yml:  suggest-channels: true
src/pocketmine/resources/pocketmine.yml:  title-tick: true
src/pocketmine/resources/pocketmine.yml:  #savestop: [save-all, stop]
src/pocketmine/resources/pocketmine.yml:  #Setting this to true will cause the legacy structure to be used where plugin data is placed inside the --plugins dir.
src/pocketmine/resources/pocketmine.yml:  #False will place plugin data under plugin_data under --data.
src/pocketmine/resources/pocketmine.yml:  legacy-data-dir: false
src/pocketmine/resources/resource_packs.yml:#This configuration file controls global resources used on your PocketMine-MP server.
src/pocketmine/resources/resource_packs.yml:  # - natural.zip
src/pocketmine/resources/resource_packs.yml:  # - vanilla.zip
src/pocketmine/level/Position.php:		$this->setLevel($level);
src/pocketmine/level/Position.php:		return new Position($pos->x, $pos->y, $pos->z, $level);
src/pocketmine/level/Position.php:		return new Position($this->x, $this->y, $this->z, $this->level);
src/pocketmine/level/Position.php:		if($this->level !== null and $this->level->isClosed()){
src/pocketmine/level/Position.php:			MainLogger::getLogger()->debug("Position was holding a reference to an unloaded world");
src/pocketmine/level/Position.php:			$this->level = null;
src/pocketmine/level/Position.php:		return $this->level;
src/pocketmine/level/Position.php:		$world = $this->getLevel();
src/pocketmine/level/Position.php:		if($level !== null and $level->isClosed()){
src/pocketmine/level/Position.php:		$this->level = $level;
src/pocketmine/level/Position.php:		if($this->level !== null and $this->level->isClosed()){
src/pocketmine/level/Position.php:			$this->level = null;
src/pocketmine/level/Position.php:		return $this->level !== null;
src/pocketmine/level/Position.php:		assert($this->isValid());
src/pocketmine/level/Position.php:		return Position::fromObject(parent::getSide($side, $step), $this->level);
src/pocketmine/level/Position.php:		return "Position(level=" . ($this->isValid() ? $this->getLevelNonNull()->getName() : "null") . ",x=" . $this->x . ",y=" . $this->y . ",z=" . $this->z . ")";
src/pocketmine/level/Position.php:			return parent::equals($v) and $v->getLevel() === $this->getLevel();
src/pocketmine/level/sound/GenericSound.php:		parent::__construct($pos->x, $pos->y, $pos->z);
src/pocketmine/level/sound/GenericSound.php:		$this->id = $id;
src/pocketmine/level/sound/GenericSound.php:		$this->pitch = $pitch * 1000;
src/pocketmine/level/sound/GenericSound.php:		return $this->pitch / 1000;
src/pocketmine/level/sound/GenericSound.php:		$this->pitch = $pitch * 1000;
src/pocketmine/level/sound/GenericSound.php:		$pk->evid = $this->id;
src/pocketmine/level/sound/GenericSound.php:		$pk->position = $this->asVector3();
src/pocketmine/level/sound/GenericSound.php:		$pk->data = (int) $this->pitch;
src/pocketmine/level/Level.php:     * @phpstan-var ReversePriorityQueue<int, Vector3>
src/pocketmine/level/Level.php:     * @phpstan-var \SplQueue<int>
src/pocketmine/level/Level.php:     * @phpstan-var \SplFixedArray<Block>
src/pocketmine/level/Level.php:     * @phpstan-var class-string<\pocketmine\level\generator\Generator>
src/pocketmine/level/Level.php:        if (0 === $loader->getLoaderId()) {
src/pocketmine/level/Level.php:            throw new \InvalidStateException('ChunkLoader has a loader id already assigned: '.$loader->getLoaderId());
src/pocketmine/level/Level.php:        return -1;
src/pocketmine/level/Level.php:        $this->blockStates = BlockFactory::getBlockStatesArray();
src/pocketmine/level/Level.php:        $this->levelId = static::$levelIdCounter++;
src/pocketmine/level/Level.php:        $this->blockMetadata = new BlockMetadataStore($this);
src/pocketmine/level/Level.php:        $this->server = $server;
src/pocketmine/level/Level.php:        $this->autoSave = $server->getAutoSave();
src/pocketmine/level/Level.php:        $this->provider = $provider;
src/pocketmine/level/Level.php:        $this->displayName = $this->provider->getName();
src/pocketmine/level/Level.php:        $this->worldHeight = $this->provider->getWorldHeight();
src/pocketmine/level/Level.php:        $this->server->getLogger()->info($this->server->getLanguage()->translateString('pocketmine.level.preparing', [$this->displayName]));
src/pocketmine/level/Level.php:        $this->generator = GeneratorManager::getGenerator($this->provider->getGenerator(), true);
src/pocketmine/level/Level.php:        $this->folderName = $name;
src/pocketmine/level/Level.php:        $this->scheduledBlockUpdateQueue = new ReversePriorityQueue();
src/pocketmine/level/Level.php:        $this->scheduledBlockUpdateQueue->setExtractFlags(\SplPriorityQueue::EXTR_BOTH);
src/pocketmine/level/Level.php:        $this->neighbourBlockUpdateQueue = new \SplQueue();
src/pocketmine/level/Level.php:        $this->time = $this->provider->getTime();
src/pocketmine/level/Level.php:        $this->chunkTickRadius = min($this->server->getViewDistance(), max(1, (int) $this->server->getProperty('chunk-ticking.tick-radius', 4)));
src/pocketmine/level/Level.php:        $this->chunksPerTick = (int) $this->server->getProperty('chunk-ticking.per-tick', 40);
src/pocketmine/level/Level.php:        $this->chunkPopulationQueueSize = (int) $this->server->getProperty('chunk-generation.population-queue-size', 2);
src/pocketmine/level/Level.php:        $this->clearChunksOnTick = (bool) $this->server->getProperty('chunk-ticking.clear-tick-list', true);
src/pocketmine/level/Level.php:        $dontTickBlocks = array_fill_keys($this->server->getProperty('chunk-ticking.disable-block-ticking', []), true);
src/pocketmine/level/Level.php:        $this->randomTickBlocks = new \SplFixedArray(256);
src/pocketmine/level/Level.php:        foreach ($this->randomTickBlocks as $id => $null) {
src/pocketmine/level/Level.php:            if (!isset($dontTickBlocks[$id]) and $block->ticksRandomly()) {
src/pocketmine/level/Level.php:                $this->randomTickBlocks[$id] = $block;
src/pocketmine/level/Level.php:        $this->timings = new LevelTimings($this);
src/pocketmine/level/Level.php:        $this->temporalPosition = new Position(0, 0, 0, $this);
src/pocketmine/level/Level.php:        $this->temporalVector = new Vector3(0, 0, 0);
src/pocketmine/level/Level.php:        return $this->tickRateTime;
src/pocketmine/level/Level.php:        $this->generatorRegisteredWorkers[$worker] = true;
src/pocketmine/level/Level.php:        $this->server->getAsyncPool()->submitTaskToWorker(new GeneratorRegisterTask($this, $this->generator, $this->provider->getGeneratorOptions()), $worker);
src/pocketmine/level/Level.php:        $pool = $this->server->getAsyncPool();
src/pocketmine/level/Level.php:        foreach ($pool->getRunningWorkers() as $i) {
src/pocketmine/level/Level.php:            if (isset($this->generatorRegisteredWorkers[$i])) {
src/pocketmine/level/Level.php:                $pool->submitTaskToWorker(new GeneratorUnregisterTask($this), $i);
src/pocketmine/level/Level.php:        $this->generatorRegisteredWorkers = [];
src/pocketmine/level/Level.php:        return $this->blockMetadata;
src/pocketmine/level/Level.php:        return $this->server;
src/pocketmine/level/Level.php:        return $this->provider;
src/pocketmine/level/Level.php:        return $this->levelId;
src/pocketmine/level/Level.php:        return $this->closed;
src/pocketmine/level/Level.php:        if ($this->closed) {
src/pocketmine/level/Level.php:        foreach ($this->chunks as $chunk) {
src/pocketmine/level/Level.php:            $this->unloadChunk($chunk->getX(), $chunk->getZ(), false);
src/pocketmine/level/Level.php:        $this->save();
src/pocketmine/level/Level.php:        $this->unregisterGenerator();
src/pocketmine/level/Level.php:        $this->provider->close();
src/pocketmine/level/Level.php:        $this->provider = null;
src/pocketmine/level/Level.php:        $this->blockMetadata = null;
src/pocketmine/level/Level.php:        $this->blockCache = [];
src/pocketmine/level/Level.php:        $this->temporalPosition = null;
src/pocketmine/level/Level.php:        $this->closed = true;
src/pocketmine/level/Level.php:        $pk = $sound->encode();
src/pocketmine/level/Level.php:                    $this->broadcastPacketToViewers($sound, $e);
src/pocketmine/level/Level.php:                $this->server->batchPackets($players, $pk, false);
src/pocketmine/level/Level.php:        $pk = $particle->encode();
src/pocketmine/level/Level.php:                    $this->broadcastPacketToViewers($particle, $e);
src/pocketmine/level/Level.php:                $this->server->batchPackets($players, $pk, false);
src/pocketmine/level/Level.php:        $pk->evid = $evid;
src/pocketmine/level/Level.php:        $pk->data = $data;
src/pocketmine/level/Level.php:            $pk->position = $pos->asVector3();
src/pocketmine/level/Level.php:            $this->broadcastPacketToViewers($pos, $pk);
src/pocketmine/level/Level.php:            $pk->position = null;
src/pocketmine/level/Level.php:            $this->broadcastGlobalPacket($pk);
src/pocketmine/level/Level.php:     * @param bool $disableRelativeVolume If true, all players receiving this sound-event will hear the sound at full volume regardless of distance
src/pocketmine/level/Level.php:    public function broadcastLevelSoundEvent(Vector3 $pos, int $soundId, int $extraData = -1, int $entityTypeId = -1, bool $isBabyMob = false, bool $disableRelativeVolume = false)
src/pocketmine/level/Level.php:        $pk->sound = $soundId;
src/pocketmine/level/Level.php:        $pk->extraData = $extraData;
src/pocketmine/level/Level.php:        $pk->entityType = AddActorPacket::LEGACY_ID_MAP_BC[$entityTypeId] ?? ':';
src/pocketmine/level/Level.php:        $pk->isBabyMob = $isBabyMob;
src/pocketmine/level/Level.php:        $pk->disableRelativeVolume = $disableRelativeVolume;
src/pocketmine/level/Level.php:        $pk->position = $pos->asVector3();
src/pocketmine/level/Level.php:        $this->broadcastPacketToViewers($pos, $pk);
src/pocketmine/level/Level.php:        return $this->autoSave;
src/pocketmine/level/Level.php:        $this->autoSave = $value;
src/pocketmine/level/Level.php:        if ($this->doingTick and !$force) {
src/pocketmine/level/Level.php:        if ($this === $this->server->getDefaultLevel() and !$force) {
src/pocketmine/level/Level.php:            $ev->setCancelled(true);
src/pocketmine/level/Level.php:        $ev->call();
src/pocketmine/level/Level.php:        if (!$force and $ev->isCancelled()) {
src/pocketmine/level/Level.php:        $this->server->getLogger()->info($this->server->getLanguage()->translateString('pocketmine.level.unloading', [$this->getName()]));
src/pocketmine/level/Level.php:        $defaultLevel = $this->server->getDefaultLevel();
src/pocketmine/level/Level.php:        foreach ($this->getPlayers() as $player) {
src/pocketmine/level/Level.php:                $player->close($player->getLeaveMessage(), 'Forced default world unload');
src/pocketmine/level/Level.php:                $player->teleport($defaultLevel->getSafeSpawn());
src/pocketmine/level/Level.php:            $this->server->setDefaultLevel(null);
src/pocketmine/level/Level.php:        $this->server->removeLevel($this);
src/pocketmine/level/Level.php:        $this->close();
src/pocketmine/level/Level.php:        return $this->playerLoaders[Level::chunkHash($chunkX, $chunkZ)] ?? [];
src/pocketmine/level/Level.php:        return $this->chunkLoaders[Level::chunkHash($chunkX, $chunkZ)] ?? [];
src/pocketmine/level/Level.php:        return $this->getChunkPlayers($pos->getFloorX() >> 4, $pos->getFloorZ() >> 4);
src/pocketmine/level/Level.php:        if (!isset($this->chunkPackets[$index = Level::chunkHash($chunkX, $chunkZ)])) {
src/pocketmine/level/Level.php:            $this->chunkPackets[$index] = [$packet];
src/pocketmine/level/Level.php:            $this->chunkPackets[$index][] = $packet;
src/pocketmine/level/Level.php:        $this->addChunkPacket($pos->getFloorX() >> 4, $pos->getFloorZ() >> 4, $packet);
src/pocketmine/level/Level.php:        $this->globalPackets[] = $packet;
src/pocketmine/level/Level.php:        $this->globalPackets[] = $packet;
src/pocketmine/level/Level.php:        $loaderId = $loader->getLoaderId();
src/pocketmine/level/Level.php:        if (!isset($this->chunkLoaders[$chunkHash = Level::chunkHash($chunkX, $chunkZ)])) {
src/pocketmine/level/Level.php:            $this->chunkLoaders[$chunkHash] = [];
src/pocketmine/level/Level.php:            $this->playerLoaders[$chunkHash] = [];
src/pocketmine/level/Level.php:        } elseif (isset($this->chunkLoaders[$chunkHash][$loaderId])) {
src/pocketmine/level/Level.php:        $this->chunkLoaders[$chunkHash][$loaderId] = $loader;
src/pocketmine/level/Level.php:            $this->playerLoaders[$chunkHash][$loaderId] = $loader;
src/pocketmine/level/Level.php:        if (!isset($this->loaders[$loaderId])) {
src/pocketmine/level/Level.php:            $this->loaderCounter[$loaderId] = 1;
src/pocketmine/level/Level.php:            $this->loaders[$loaderId] = $loader;
src/pocketmine/level/Level.php:            ++$this->loaderCounter[$loaderId];
src/pocketmine/level/Level.php:        $this->cancelUnloadChunkRequest($chunkX, $chunkZ);
src/pocketmine/level/Level.php:            $this->loadChunk($chunkX, $chunkZ);
src/pocketmine/level/Level.php:        $loaderId = $loader->getLoaderId();
src/pocketmine/level/Level.php:        if (isset($this->chunkLoaders[$chunkHash][$loaderId])) {
src/pocketmine/level/Level.php:            unset($this->chunkLoaders[$chunkHash][$loaderId]);
src/pocketmine/level/Level.php:            unset($this->playerLoaders[$chunkHash][$loaderId]);
src/pocketmine/level/Level.php:            if (0 === count($this->chunkLoaders[$chunkHash])) {
src/pocketmine/level/Level.php:                unset($this->chunkLoaders[$chunkHash]);
src/pocketmine/level/Level.php:                unset($this->playerLoaders[$chunkHash]);
src/pocketmine/level/Level.php:                $this->unloadChunkRequest($chunkX, $chunkZ, true);
src/pocketmine/level/Level.php:            if (0 === --$this->loaderCounter[$loaderId]) {
src/pocketmine/level/Level.php:                unset($this->loaderCounter[$loaderId]);
src/pocketmine/level/Level.php:                unset($this->loaders[$loaderId]);
src/pocketmine/level/Level.php:        $pk->time = $this->time & 0xffffffff; //avoid overflowing the field, since the packet uses an int32
src/pocketmine/level/Level.php:        $this->server->broadcastPacket(count($targets) > 0 ? $targets : $this->players, $pk);
src/pocketmine/level/Level.php:        if ($this->closed) {
src/pocketmine/level/Level.php:        $this->timings->doTick->startTiming();
src/pocketmine/level/Level.php:        $this->doingTick = true;
src/pocketmine/level/Level.php:            $this->actuallyDoTick($currentTick);
src/pocketmine/level/Level.php:            $this->doingTick = false;
src/pocketmine/level/Level.php:            $this->timings->doTick->stopTiming();
src/pocketmine/level/Level.php:        if (!$this->stopTime) {
src/pocketmine/level/Level.php:            if (PHP_INT_MAX === $this->time) {
src/pocketmine/level/Level.php:                $this->time = PHP_INT_MIN;
src/pocketmine/level/Level.php:                ++$this->time;
src/pocketmine/level/Level.php:        $this->sunAnglePercentage = $this->computeSunAnglePercentage(); //Sun angle depends on the current time
src/pocketmine/level/Level.php:        $this->skyLightReduction = $this->computeSkyLightReduction(); //Sky light reduction depends on the sun angle
src/pocketmine/level/Level.php:        if (200 === ++$this->sendTimeTicker) {
src/pocketmine/level/Level.php:            $this->sendTime();
src/pocketmine/level/Level.php:            $this->sendTimeTicker = 0;
src/pocketmine/level/Level.php:        $this->unloadChunks();
src/pocketmine/level/Level.php:        if (++$this->providerGarbageCollectionTicker >= 6000) {
src/pocketmine/level/Level.php:            $this->provider->doGarbageCollection();
src/pocketmine/level/Level.php:            $this->providerGarbageCollectionTicker = 0;
src/pocketmine/level/Level.php:        $this->timings->doTickPending->startTiming();
src/pocketmine/level/Level.php:        while ($this->scheduledBlockUpdateQueue->count() > 0 and $this->scheduledBlockUpdateQueue->current()['priority'] <= $currentTick) {
src/pocketmine/level/Level.php:            $vec = $this->scheduledBlockUpdateQueue->extract()['data'];
src/pocketmine/level/Level.php:            unset($this->scheduledBlockUpdateQueueIndex[Level::blockHash($vec->x, $vec->y, $vec->z)]);
src/pocketmine/level/Level.php:            if (!$this->isInLoadedTerrain($vec)) {
src/pocketmine/level/Level.php:            $block = $this->getBlock($vec);
src/pocketmine/level/Level.php:            $block->onScheduledUpdate();
src/pocketmine/level/Level.php:        while ($this->neighbourBlockUpdateQueue->count() > 0) {
src/pocketmine/level/Level.php:            $index = $this->neighbourBlockUpdateQueue->dequeue();
src/pocketmine/level/Level.php:            $block = $this->getBlockAt($x, $y, $z);
src/pocketmine/level/Level.php:            $block->clearCaches(); //for blocks like fences, force recalculation of connected AABBs
src/pocketmine/level/Level.php:            $ev->call();
src/pocketmine/level/Level.php:            if (!$ev->isCancelled()) {
src/pocketmine/level/Level.php:                $block->onNearbyBlockChange();
src/pocketmine/level/Level.php:        $this->timings->doTickPending->stopTiming();
src/pocketmine/level/Level.php:        $this->timings->entityTick->startTiming();
src/pocketmine/level/Level.php:        Timings::$tickEntityTimer->startTiming();
src/pocketmine/level/Level.php:        foreach ($this->updateEntities as $id => $entity) {
src/pocketmine/level/Level.php:            if ($entity->isClosed() or !$entity->onUpdate($currentTick)) {
src/pocketmine/level/Level.php:                unset($this->updateEntities[$id]);
src/pocketmine/level/Level.php:            if ($entity->isFlaggedForDespawn()) {
src/pocketmine/level/Level.php:                $entity->close();
src/pocketmine/level/Level.php:        Timings::$tickEntityTimer->stopTiming();
src/pocketmine/level/Level.php:        $this->timings->entityTick->stopTiming();
src/pocketmine/level/Level.php:        $this->timings->tileEntityTick->startTiming();
src/pocketmine/level/Level.php:        Timings::$tickTileEntityTimer->startTiming();
src/pocketmine/level/Level.php:        foreach ($this->updateTiles as $id => $tile) {
src/pocketmine/level/Level.php:            if (!$tile->onUpdate()) {
src/pocketmine/level/Level.php:                unset($this->updateTiles[$id]);
src/pocketmine/level/Level.php:        Timings::$tickTileEntityTimer->stopTiming();
src/pocketmine/level/Level.php:        $this->timings->tileEntityTick->stopTiming();
src/pocketmine/level/Level.php:        $this->timings->doTickTiles->startTiming();
src/pocketmine/level/Level.php:        $this->tickChunks();
src/pocketmine/level/Level.php:        $this->timings->doTickTiles->stopTiming();
src/pocketmine/level/Level.php:        $this->executeQueuedLightUpdates();
src/pocketmine/level/Level.php:        if (count($this->changedBlocks) > 0) {
src/pocketmine/level/Level.php:            if (count($this->players) > 0) {
src/pocketmine/level/Level.php:                foreach ($this->changedBlocks as $index => $blocks) {
src/pocketmine/level/Level.php:                    if (0 === count($blocks)) { //blocks can be set normally and then later re-set with direct send
src/pocketmine/level/Level.php:                    unset($this->chunkCache[$index]);
src/pocketmine/level/Level.php:                        $chunk = $this->getChunk($chunkX, $chunkZ);
src/pocketmine/level/Level.php:                        foreach ($this->getChunkPlayers($chunkX, $chunkZ) as $p) {
src/pocketmine/level/Level.php:                            $p->onChunkChanged($chunk);
src/pocketmine/level/Level.php:                        $this->sendBlocks($this->getChunkPlayers($chunkX, $chunkZ), $blocks, UpdateBlockPacket::FLAG_ALL);
src/pocketmine/level/Level.php:                $this->chunkCache = [];
src/pocketmine/level/Level.php:            $this->changedBlocks = [];
src/pocketmine/level/Level.php:        $this->processChunkRequest();
src/pocketmine/level/Level.php:        if ($this->sleepTicks > 0 and --$this->sleepTicks <= 0) {
src/pocketmine/level/Level.php:            $this->checkSleep();
src/pocketmine/level/Level.php:        if (count($this->globalPackets) > 0) {
src/pocketmine/level/Level.php:            if (count($this->players) > 0) {
src/pocketmine/level/Level.php:                $this->server->batchPackets($this->players, $this->globalPackets);
src/pocketmine/level/Level.php:            $this->globalPackets = [];
src/pocketmine/level/Level.php:        foreach ($this->chunkPackets as $index => $entries) {
src/pocketmine/level/Level.php:            $chunkPlayers = $this->getChunkPlayers($chunkX, $chunkZ);
src/pocketmine/level/Level.php:                $this->server->batchPackets($chunkPlayers, $entries, false, false);
src/pocketmine/level/Level.php:        $this->chunkPackets = [];
src/pocketmine/level/Level.php:        if (0 === count($this->players)) {
src/pocketmine/level/Level.php:        foreach ($this->getPlayers() as $p) {
src/pocketmine/level/Level.php:            if (!$p->isSleeping()) {
src/pocketmine/level/Level.php:            $time = $this->getTimeOfDay();
src/pocketmine/level/Level.php:                $this->setTime($this->getTime() + Level::TIME_FULL - $time);
src/pocketmine/level/Level.php:                foreach ($this->getPlayers() as $p) {
src/pocketmine/level/Level.php:                    $p->stopSleep();
src/pocketmine/level/Level.php:        $this->sleepTicks = $ticks;
src/pocketmine/level/Level.php:                if (!isset($chunks[$index = Level::chunkHash($b->x >> 4, $b->z >> 4)])) {
src/pocketmine/level/Level.php:                $pk->x = $b->x;
src/pocketmine/level/Level.php:                $pk->y = $b->y;
src/pocketmine/level/Level.php:                $pk->z = $b->z;
src/pocketmine/level/Level.php:                    $pk->blockRuntimeId = $b->getRuntimeId();
src/pocketmine/level/Level.php:                    $fullBlock = $this->getFullBlock($b->x, $b->y, $b->z);
src/pocketmine/level/Level.php:                    $pk->blockRuntimeId = RuntimeBlockMapping::toStaticRuntimeId($fullBlock >> 4, $fullBlock & 0xf);
src/pocketmine/level/Level.php:                $pk->flags = $first ? $flags : UpdateBlockPacket::FLAG_NONE;
src/pocketmine/level/Level.php:                $pk->x = $b->x;
src/pocketmine/level/Level.php:                $pk->y = $b->y;
src/pocketmine/level/Level.php:                $pk->z = $b->z;
src/pocketmine/level/Level.php:                    $pk->blockRuntimeId = $b->getRuntimeId();
src/pocketmine/level/Level.php:                    $fullBlock = $this->getFullBlock($b->x, $b->y, $b->z);
src/pocketmine/level/Level.php:                    $pk->blockRuntimeId = RuntimeBlockMapping::toStaticRuntimeId($fullBlock >> 4, $fullBlock & 0xf);
src/pocketmine/level/Level.php:                $pk->flags = $flags;
src/pocketmine/level/Level.php:        $this->server->batchPackets($target, $packets, false, false);
src/pocketmine/level/Level.php:            $this->chunkCache = [];
src/pocketmine/level/Level.php:            $this->blockCache = [];
src/pocketmine/level/Level.php:            foreach ($this->blockCache as $list) {
src/pocketmine/level/Level.php:                    $this->blockCache = [];
src/pocketmine/level/Level.php:        unset($this->chunkCache[Level::chunkHash($chunkX, $chunkZ)]);
src/pocketmine/level/Level.php:     * @phpstan-return \SplFixedArray<Block|null>
src/pocketmine/level/Level.php:        return $this->randomTickBlocks;
src/pocketmine/level/Level.php:        $this->randomTickBlocks[$id] = BlockFactory::get($id);
src/pocketmine/level/Level.php:        $this->randomTickBlocks[$id] = null;
src/pocketmine/level/Level.php:        if ($this->chunksPerTick <= 0 or 0 === count($this->loaders)) {
src/pocketmine/level/Level.php:            $this->chunkTickList = [];
src/pocketmine/level/Level.php:        $chunksPerLoader = min(200, max(1, (int) ((($this->chunksPerTick - count($this->loaders)) / count($this->loaders)) + 0.5)));
src/pocketmine/level/Level.php:        $randRange = (int) ($randRange > $this->chunkTickRadius ? $this->chunkTickRadius : $randRange);
src/pocketmine/level/Level.php:        foreach ($this->loaders as $loader) {
src/pocketmine/level/Level.php:            $chunkX = (int) floor($loader->getX()) >> 4;
src/pocketmine/level/Level.php:            $chunkZ = (int) floor($loader->getZ()) >> 4;
src/pocketmine/level/Level.php:            $existingLoaders = max(0, $this->chunkTickList[$index] ?? 0);
src/pocketmine/level/Level.php:            $this->chunkTickList[$index] = $existingLoaders + 1;
src/pocketmine/level/Level.php:                $dx = mt_rand(-$randRange, $randRange);
src/pocketmine/level/Level.php:                $dz = mt_rand(-$randRange, $randRange);
src/pocketmine/level/Level.php:                if (!isset($this->chunkTickList[$hash]) and isset($this->chunks[$hash])) {
src/pocketmine/level/Level.php:                    $this->chunkTickList[$hash] = -1;
src/pocketmine/level/Level.php:        foreach ($this->chunkTickList as $index => $loaders) {
src/pocketmine/level/Level.php:            for ($cx = -1; $cx <= 1; ++$cx) {
src/pocketmine/level/Level.php:                for ($cz = -1; $cz <= 1; ++$cz) {
src/pocketmine/level/Level.php:                    if (!isset($this->chunks[Level::chunkHash($chunkX + $cx, $chunkZ + $cz)])) {
src/pocketmine/level/Level.php:                        unset($this->chunkTickList[$index]);
src/pocketmine/level/Level.php:                unset($this->chunkTickList[$index]);
src/pocketmine/level/Level.php:            $chunk = $this->chunks[$index];
src/pocketmine/level/Level.php:            foreach ($chunk->getEntities() as $entity) {
src/pocketmine/level/Level.php:                $entity->scheduleUpdate();
src/pocketmine/level/Level.php:            foreach ($chunk->getSubChunks() as $Y => $subChunk) {
src/pocketmine/level/Level.php:                        $blockId = $subChunk->getBlockId($x, $y, $z);
src/pocketmine/level/Level.php:                        if (null !== $this->randomTickBlocks[$blockId]) {
src/pocketmine/level/Level.php:                            $block = clone $this->randomTickBlocks[$blockId];
src/pocketmine/level/Level.php:                            $block->setDamage($subChunk->getBlockData($x, $y, $z));
src/pocketmine/level/Level.php:                            $block->x = $chunkX * 16 + $x;
src/pocketmine/level/Level.php:                            $block->y = ($Y << 4) + $y;
src/pocketmine/level/Level.php:                            $block->z = $chunkZ * 16 + $z;
src/pocketmine/level/Level.php:                            $block->level = $this;
src/pocketmine/level/Level.php:                            $block->onRandomTick();
src/pocketmine/level/Level.php:        if ($this->clearChunksOnTick) {
src/pocketmine/level/Level.php:            $this->chunkTickList = [];
src/pocketmine/level/Level.php:        if (!$this->getAutoSave() and !$force) {
src/pocketmine/level/Level.php:        (new LevelSaveEvent($this))->call();
src/pocketmine/level/Level.php:        $this->provider->setTime($this->time);
src/pocketmine/level/Level.php:        $this->saveChunks();
src/pocketmine/level/Level.php:        if ($this->provider instanceof BaseLevelProvider) {
src/pocketmine/level/Level.php:            $this->provider->saveLevelData();
src/pocketmine/level/Level.php:        $this->timings->syncChunkSaveTimer->startTiming();
src/pocketmine/level/Level.php:            foreach ($this->chunks as $chunk) {
src/pocketmine/level/Level.php:                if (($chunk->hasChanged() or count($chunk->getTiles()) > 0 or count($chunk->getSavableEntities()) > 0) and $chunk->isGenerated()) {
src/pocketmine/level/Level.php:                    $this->provider->saveChunk($chunk);
src/pocketmine/level/Level.php:                    $chunk->setChanged(false);
src/pocketmine/level/Level.php:            $this->timings->syncChunkSaveTimer->stopTiming();
src/pocketmine/level/Level.php:        if (!$this->isInWorld($pos->x, $pos->y, $pos->z) or
src/pocketmine/level/Level.php:            (isset($this->scheduledBlockUpdateQueueIndex[$index = Level::blockHash($pos->x, $pos->y, $pos->z)]) and $this->scheduledBlockUpdateQueueIndex[$index] <= $delay)
src/pocketmine/level/Level.php:        $this->scheduledBlockUpdateQueueIndex[$index] = $delay;
src/pocketmine/level/Level.php:        $this->scheduledBlockUpdateQueue->insert(new Vector3((int) $pos->x, (int) $pos->y, (int) $pos->z), $delay + $this->server->getTick());
src/pocketmine/level/Level.php:        $pos = $pos->floor();
src/pocketmine/level/Level.php:            $side = $pos->getSide($i);
src/pocketmine/level/Level.php:            if ($this->isInWorld($side->x, $side->y, $side->z)) {
src/pocketmine/level/Level.php:                $this->neighbourBlockUpdateQueue->enqueue(Level::blockHash($side->x, $side->y, $side->z));
src/pocketmine/level/Level.php:        $minX = (int) floor($bb->minX - 1);
src/pocketmine/level/Level.php:        $minY = (int) floor($bb->minY - 1);
src/pocketmine/level/Level.php:        $minZ = (int) floor($bb->minZ - 1);
src/pocketmine/level/Level.php:        $maxX = (int) floor($bb->maxX + 1);
src/pocketmine/level/Level.php:        $maxY = (int) floor($bb->maxY + 1);
src/pocketmine/level/Level.php:        $maxZ = (int) floor($bb->maxZ + 1);
src/pocketmine/level/Level.php:                        $block = $this->getBlockAt($x, $y, $z);
src/pocketmine/level/Level.php:                        if (!$block->canPassThrough() and $block->collidesWithBB($bb)) {
src/pocketmine/level/Level.php:                        $block = $this->getBlockAt($x, $y, $z);
src/pocketmine/level/Level.php:                        if (!$block->canPassThrough() and $block->collidesWithBB($bb)) {
src/pocketmine/level/Level.php:            if ($pos->isSolid()) {
src/pocketmine/level/Level.php:            $bb = $pos->getBoundingBox();
src/pocketmine/level/Level.php:            $bb = $this->getBlock($pos)->getBoundingBox();
src/pocketmine/level/Level.php:        return null !== $bb and $bb->getAverageEdgeLength() >= 1;
src/pocketmine/level/Level.php:        $minX = (int) floor($bb->minX - 1);
src/pocketmine/level/Level.php:        $minY = (int) floor($bb->minY - 1);
src/pocketmine/level/Level.php:        $minZ = (int) floor($bb->minZ - 1);
src/pocketmine/level/Level.php:        $maxX = (int) floor($bb->maxX + 1);
src/pocketmine/level/Level.php:        $maxY = (int) floor($bb->maxY + 1);
src/pocketmine/level/Level.php:        $maxZ = (int) floor($bb->maxZ + 1);
src/pocketmine/level/Level.php:                    $block = $this->getBlockAt($x, $y, $z);
src/pocketmine/level/Level.php:                    if (!$block->canPassThrough()) {
src/pocketmine/level/Level.php:                        foreach ($block->getCollisionBoxes() as $blockBB) {
src/pocketmine/level/Level.php:                            if ($blockBB->intersectsWith($bb)) {
src/pocketmine/level/Level.php:            foreach ($this->getCollidingEntities($bb->expandedCopy(0.25, 0.25, 0.25), $entity) as $ent) {
src/pocketmine/level/Level.php:                $collides[] = clone $ent->boundingBox;
src/pocketmine/level/Level.php:        return $this->getFullLightAt($pos->x, $pos->y, $pos->z);
src/pocketmine/level/Level.php:        $skyLight = $this->getRealBlockSkyLightAt($x, $y, $z);
src/pocketmine/level/Level.php:            return max($skyLight, $this->getBlockLightAt($x, $y, $z));
src/pocketmine/level/Level.php:        $timeProgress = ($this->time % 24000) / 24000;
src/pocketmine/level/Level.php:        $sunProgress = $timeProgress + ($timeProgress < 0.25 ? 0.75 : -0.25);
src/pocketmine/level/Level.php:        $diff = (((1 - ((cos($sunProgress * M_PI) + 1) / 2)) - $sunProgress) / 3);
src/pocketmine/level/Level.php:        return $this->sunAnglePercentage;
src/pocketmine/level/Level.php:        return $this->sunAnglePercentage * 2 * M_PI;
src/pocketmine/level/Level.php:        return $this->sunAnglePercentage * 360.0;
src/pocketmine/level/Level.php:        $percentage = max(0, min(1, -(cos($this->getSunAngleRadians()) * 2 - 0.5)));
src/pocketmine/level/Level.php:        return $this->skyLightReduction;
src/pocketmine/level/Level.php:     * @return int 0-15
src/pocketmine/level/Level.php:        $light = $this->getBlockSkyLightAt($x, $y, $z) - $this->skyLightReduction;
src/pocketmine/level/Level.php:        return $this->getChunk($x >> 4, $z >> 4, false)->getFullBlock($x & 0x0f, $y, $z & 0x0f);
src/pocketmine/level/Level.php:            $y < $this->worldHeight and $y >= 0 and
src/pocketmine/level/Level.php:     * Note: If you're using this for performance-sensitive code, and you're guaranteed to be supplying ints in the
src/pocketmine/level/Level.php:        return $this->getBlockAt((int) floor($pos->x), (int) floor($pos->y), (int) floor($pos->z), $cached, $addToCache);
src/pocketmine/level/Level.php:        if ($this->isInWorld($x, $y, $z)) {
src/pocketmine/level/Level.php:            if ($cached and isset($this->blockCache[$chunkHash][$relativeBlockHash])) {
src/pocketmine/level/Level.php:                return $this->blockCache[$chunkHash][$relativeBlockHash];
src/pocketmine/level/Level.php:            $chunk = $this->chunks[$chunkHash] ?? null;
src/pocketmine/level/Level.php:                $fullState = $chunk->getFullBlock($x & 0x0f, $y, $z & 0x0f);
src/pocketmine/level/Level.php:        $block = clone $this->blockStates[$fullState & 0xfff];
src/pocketmine/level/Level.php:        $block->x = $x;
src/pocketmine/level/Level.php:        $block->y = $y;
src/pocketmine/level/Level.php:        $block->z = $z;
src/pocketmine/level/Level.php:        $block->level = $this;
src/pocketmine/level/Level.php:            $this->blockCache[$chunkHash][$relativeBlockHash] = $block;
src/pocketmine/level/Level.php:        $this->updateBlockSkyLight($pos->x, $pos->y, $pos->z);
src/pocketmine/level/Level.php:        $this->updateBlockLight($pos->x, $pos->y, $pos->z);
src/pocketmine/level/Level.php:            $this->getBlockSkyLightAt($x + 1, $y, $z),
src/pocketmine/level/Level.php:            $this->getBlockSkyLightAt($x - 1, $y, $z),
src/pocketmine/level/Level.php:            $this->getBlockSkyLightAt($x, $y + 1, $z),
src/pocketmine/level/Level.php:            $this->getBlockSkyLightAt($x, $y - 1, $z),
src/pocketmine/level/Level.php:            $this->getBlockSkyLightAt($x, $y, $z + 1),
src/pocketmine/level/Level.php:            $this->getBlockSkyLightAt($x, $y, $z - 1),
src/pocketmine/level/Level.php:        $this->timings->doBlockSkyLightUpdates->startTiming();
src/pocketmine/level/Level.php:        $oldHeightMap = $this->getHeightMap($x, $z);
src/pocketmine/level/Level.php:        $sourceId = $this->getBlockIdAt($x, $y, $z);
src/pocketmine/level/Level.php:        if ($yPlusOne === $oldHeightMap) { //Block changed directly beneath the heightmap. Check if a block was removed or changed to a different light-filter.
src/pocketmine/level/Level.php:            $newHeightMap = $this->getChunk($x >> 4, $z >> 4)->recalculateHeightMapColumn($x & 0x0f, $z & 0x0f);
src/pocketmine/level/Level.php:                $this->setHeightMap($x, $z, $yPlusOne);
src/pocketmine/level/Level.php:                $this->timings->doBlockSkyLightUpdates->stopTiming();
src/pocketmine/level/Level.php:        if (null === $this->skyLightUpdate) {
src/pocketmine/level/Level.php:            $this->skyLightUpdate = new SkyLightUpdate($this);
src/pocketmine/level/Level.php:            for ($i = $y; $i >= $oldHeightMap; --$i) {
src/pocketmine/level/Level.php:                $this->skyLightUpdate->setAndUpdateLight($x, $i, $z, 0); //Remove all light beneath, adjacent recalculation will handle the rest.
src/pocketmine/level/Level.php:            for ($i = $y; $i >= $newHeightMap; --$i) {
src/pocketmine/level/Level.php:                $this->skyLightUpdate->setAndUpdateLight($x, $i, $z, 15);
src/pocketmine/level/Level.php:            $this->skyLightUpdate->setAndUpdateLight($x, $y, $z, max(0, $this->getHighestAdjacentBlockSkyLight($x, $y, $z) - BlockFactory::$lightFilter[$sourceId]));
src/pocketmine/level/Level.php:        $this->timings->doBlockSkyLightUpdates->stopTiming();
src/pocketmine/level/Level.php:            $this->getBlockLightAt($x + 1, $y, $z),
src/pocketmine/level/Level.php:            $this->getBlockLightAt($x - 1, $y, $z),
src/pocketmine/level/Level.php:            $this->getBlockLightAt($x, $y + 1, $z),
src/pocketmine/level/Level.php:            $this->getBlockLightAt($x, $y - 1, $z),
src/pocketmine/level/Level.php:            $this->getBlockLightAt($x, $y, $z + 1),
src/pocketmine/level/Level.php:            $this->getBlockLightAt($x, $y, $z - 1),
src/pocketmine/level/Level.php:        if (16 != $this->lightUpdateReduction) {
src/pocketmine/level/Level.php:            ++$this->lightUpdateReduction;
src/pocketmine/level/Level.php:        $this->lightUpdateReduction = 0;
src/pocketmine/level/Level.php:        $this->timings->doBlockLightUpdates->startTiming();
src/pocketmine/level/Level.php:        $id = $this->getBlockIdAt($x, $y, $z);
src/pocketmine/level/Level.php:        $newLevel = max(BlockFactory::$light[$id], $this->getHighestAdjacentBlockLight($x, $y, $z) - BlockFactory::$lightFilter[$id]);
src/pocketmine/level/Level.php:        if (null === $this->blockLightUpdate) {
src/pocketmine/level/Level.php:            $this->blockLightUpdate = new BlockLightUpdate($this);
src/pocketmine/level/Level.php:        $this->blockLightUpdate->setAndUpdateLight($x, $y, $z, $newLevel);
src/pocketmine/level/Level.php:        $this->timings->doBlockLightUpdates->stopTiming();
src/pocketmine/level/Level.php:        if (null !== $this->blockLightUpdate) {
src/pocketmine/level/Level.php:            $this->timings->doBlockLightUpdates->startTiming();
src/pocketmine/level/Level.php:            $this->blockLightUpdate->execute();
src/pocketmine/level/Level.php:            $this->blockLightUpdate = null;
src/pocketmine/level/Level.php:            $this->timings->doBlockLightUpdates->stopTiming();
src/pocketmine/level/Level.php:        if (null !== $this->skyLightUpdate) {
src/pocketmine/level/Level.php:            $this->timings->doBlockSkyLightUpdates->startTiming();
src/pocketmine/level/Level.php:            $this->skyLightUpdate->execute();
src/pocketmine/level/Level.php:            $this->skyLightUpdate = null;
src/pocketmine/level/Level.php:            $this->timings->doBlockSkyLightUpdates->stopTiming();
src/pocketmine/level/Level.php:        $pos = $pos->floor();
src/pocketmine/level/Level.php:        if (!$this->isInWorld($pos->x, $pos->y, $pos->z)) {
src/pocketmine/level/Level.php:        $this->timings->setBlock->startTiming();
src/pocketmine/level/Level.php:        if ($this->getChunkAtPosition($pos, true)->setBlock($pos->x & 0x0f, $pos->y, $pos->z & 0x0f, $block->getId(), $block->getDamage())) {
src/pocketmine/level/Level.php:                $pos = $this->temporalPosition->setComponents($pos->x, $pos->y, $pos->z);
src/pocketmine/level/Level.php:            $block->position($pos);
src/pocketmine/level/Level.php:            $block->clearCaches();
src/pocketmine/level/Level.php:            $chunkHash = Level::chunkHash($pos->x >> 4, $pos->z >> 4);
src/pocketmine/level/Level.php:            $relativeBlockHash = Level::chunkBlockHash($pos->x, $pos->y, $pos->z);
src/pocketmine/level/Level.php:            unset($this->blockCache[$chunkHash][$relativeBlockHash]);
src/pocketmine/level/Level.php:                $this->sendBlocks($this->getChunkPlayers($pos->x >> 4, $pos->z >> 4), [$block], UpdateBlockPacket::FLAG_ALL_PRIORITY);
src/pocketmine/level/Level.php:                unset($this->chunkCache[$chunkHash], $this->changedBlocks[$chunkHash][$relativeBlockHash]);
src/pocketmine/level/Level.php:                if (!isset($this->changedBlocks[$chunkHash])) {
src/pocketmine/level/Level.php:                    $this->changedBlocks[$chunkHash] = [];
src/pocketmine/level/Level.php:                $this->changedBlocks[$chunkHash][$relativeBlockHash] = $block;
src/pocketmine/level/Level.php:            foreach ($this->getChunkLoaders($pos->x >> 4, $pos->z >> 4) as $loader) {
src/pocketmine/level/Level.php:                $loader->onBlockChanged($block);
src/pocketmine/level/Level.php:                $this->updateAllLight($block);
src/pocketmine/level/Level.php:                $ev->call();
src/pocketmine/level/Level.php:                if (!$ev->isCancelled()) {
src/pocketmine/level/Level.php:                    foreach ($this->getNearbyEntities(new AxisAlignedBB($block->x - 1, $block->y - 1, $block->z - 1, $block->x + 2, $block->y + 2, $block->z + 2)) as $entity) {
src/pocketmine/level/Level.php:                        $entity->onNearbyBlockChange();
src/pocketmine/level/Level.php:                    $ev->getBlock()->onNearbyBlockChange();
src/pocketmine/level/Level.php:                    $this->scheduleNeighbourBlockUpdates($pos);
src/pocketmine/level/Level.php:            $this->timings->setBlock->stopTiming();
src/pocketmine/level/Level.php:        $this->timings->setBlock->stopTiming();
src/pocketmine/level/Level.php:        $motion = $motion ?? new Vector3(lcg_value() * 0.2 - 0.1, 0.2, lcg_value() * 0.2 - 0.1);
src/pocketmine/level/Level.php:        $itemTag = $item->nbtSerialize();
src/pocketmine/level/Level.php:        $itemTag->setName('Item');
src/pocketmine/level/Level.php:        if (!$item->isNull()) {
src/pocketmine/level/Level.php:            $nbt->setShort('Health', 5);
src/pocketmine/level/Level.php:            $nbt->setShort('PickupDelay', $delay);
src/pocketmine/level/Level.php:            $nbt->setTag($itemTag);
src/pocketmine/level/Level.php:                $itemEntity->spawnToAll();
src/pocketmine/level/Level.php:                $this->temporalVector->setComponents((lcg_value() * 0.2 - 0.1) * 2, lcg_value() * 0.4, (lcg_value() * 0.2 - 0.1) * 2),
src/pocketmine/level/Level.php:            $nbt->setShort(ExperienceOrb::TAG_VALUE_PC, $split);
src/pocketmine/level/Level.php:            $orb->spawnToAll();
src/pocketmine/level/Level.php:        if (!$player->hasPermission('pocketmine.spawnprotect.bypass') and ($distance = $this->server->getSpawnRadius()) > -1) {
src/pocketmine/level/Level.php:            $t = new Vector2($vector->x, $vector->z);
src/pocketmine/level/Level.php:            $spawnLocation = $this->getSpawnLocation();
src/pocketmine/level/Level.php:            $s = new Vector2($spawnLocation->x, $spawnLocation->z);
src/pocketmine/level/Level.php:            if ($t->distance($s) <= $distance) {
src/pocketmine/level/Level.php:        $target = $this->getBlock($vector);
src/pocketmine/level/Level.php:        $affectedBlocks = $target->getAffectedBlocks();
src/pocketmine/level/Level.php:        if (null === $player or !$player->isCreative()) {
src/pocketmine/level/Level.php:                return $block->getDrops($item);
src/pocketmine/level/Level.php:        if (null !== $player and !$player->isCreative()) {
src/pocketmine/level/Level.php:                return $block->getXpDropForTool($item);
src/pocketmine/level/Level.php:            $ev = new BlockBreakEvent($player, $target, $item, $player->isCreative(), $drops, $xpDrop);
src/pocketmine/level/Level.php:            if ($target instanceof Air or ($player->isSurvival() and !$target->isBreakable($item)) or $player->isSpectator()) {
src/pocketmine/level/Level.php:                $ev->setCancelled();
src/pocketmine/level/Level.php:            } elseif ($this->checkSpawnProtection($player, $target)) {
src/pocketmine/level/Level.php:                $ev->setCancelled(); //set it to cancelled so plugins can bypass this
src/pocketmine/level/Level.php:            if ($player->isAdventure(true) and !$ev->isCancelled()) {
src/pocketmine/level/Level.php:                $tag = $item->getNamedTagEntry('CanDestroy');
src/pocketmine/level/Level.php:                            $entry = ItemFactory::fromStringSingle($v->getValue());
src/pocketmine/level/Level.php:                            if ($entry->getId() > 0 and $entry->getBlock()->getId() === $target->getId()) {
src/pocketmine/level/Level.php:                $ev->setCancelled(!$canBreak);
src/pocketmine/level/Level.php:            $ev->call();
src/pocketmine/level/Level.php:            if ($ev->isCancelled()) {
src/pocketmine/level/Level.php:            $drops = $ev->getDrops();
src/pocketmine/level/Level.php:            $xpDrop = $ev->getXpDropAmount();
src/pocketmine/level/Level.php:        } elseif (!$target->isBreakable($item)) {
src/pocketmine/level/Level.php:            $this->destroyBlockInternal($t, $item, $player, $createParticles);
src/pocketmine/level/Level.php:        $item->onDestroyBlock($target);
src/pocketmine/level/Level.php:            $dropPos = $target->add(0.5, 0.5, 0.5);
src/pocketmine/level/Level.php:                if (!$drop->isNull()) {
src/pocketmine/level/Level.php:                    $this->dropItem($dropPos, $drop);
src/pocketmine/level/Level.php:            $this->dropExperience($target->add(0.5, 0.5, 0.5), $xpDrop);
src/pocketmine/level/Level.php:            $this->addParticle(new DestroyBlockParticle($target->add(0.5, 0.5, 0.5), $target));
src/pocketmine/level/Level.php:        $target->onBreak($item, $player);
src/pocketmine/level/Level.php:        $tile = $this->getTile($target);
src/pocketmine/level/Level.php:                    $tile->unpair();
src/pocketmine/level/Level.php:                $tile->getInventory()->dropContents($this, $target);
src/pocketmine/level/Level.php:            $tile->close();
src/pocketmine/level/Level.php:     * @param bool        $playSound whether to play a block-place sound if the block was placed successfully
src/pocketmine/level/Level.php:        $blockClicked = $this->getBlock($vector);
src/pocketmine/level/Level.php:        $blockReplace = $blockClicked->getSide($face);
src/pocketmine/level/Level.php:        if (!$this->isInWorld($blockReplace->x, $blockReplace->y, $blockReplace->z)) {
src/pocketmine/level/Level.php:        if (Block::AIR === $blockClicked->getId()) {
src/pocketmine/level/Level.php:            if ($this->checkSpawnProtection($player, $blockClicked) or $player->isSpectator()) {
src/pocketmine/level/Level.php:                $ev->setCancelled(); //set it to cancelled so plugins can bypass this
src/pocketmine/level/Level.php:            $ev->call();
src/pocketmine/level/Level.php:            if (!$ev->isCancelled()) {
src/pocketmine/level/Level.php:                if ((!$player->isSneaking() or $item->isNull()) and $blockClicked->onActivate($item, $player)) {
src/pocketmine/level/Level.php:                if ($item->onActivate($player, $blockReplace, $blockClicked, $face, $clickVector)) {
src/pocketmine/level/Level.php:        } elseif ($blockClicked->onActivate($item, $player)) {
src/pocketmine/level/Level.php:        if ($item->canBePlaced()) {
src/pocketmine/level/Level.php:            $hand = $item->getBlock();
src/pocketmine/level/Level.php:            $hand->position($blockReplace);
src/pocketmine/level/Level.php:        if ($hand->canBePlacedAt($blockClicked, $clickVector, $face, true)) {
src/pocketmine/level/Level.php:            $hand->position($blockReplace);
src/pocketmine/level/Level.php:        } elseif (!$hand->canBePlacedAt($blockReplace, $clickVector, $face, false)) {
src/pocketmine/level/Level.php:        if ($hand->isSolid()) {
src/pocketmine/level/Level.php:            foreach ($hand->getCollisionBoxes() as $collisionBox) {
src/pocketmine/level/Level.php:                if (count($this->getCollidingEntities($collisionBox)) > 0) {
src/pocketmine/level/Level.php:            if ($this->checkSpawnProtection($player, $blockReplace) or $player->isSpectator()) {
src/pocketmine/level/Level.php:                $ev->setCancelled();
src/pocketmine/level/Level.php:            if ($player->isAdventure(true) and !$ev->isCancelled()) {
src/pocketmine/level/Level.php:                $tag = $item->getNamedTagEntry('CanPlaceOn');
src/pocketmine/level/Level.php:                            $entry = ItemFactory::fromStringSingle($v->getValue());
src/pocketmine/level/Level.php:                            if ($entry->getId() > 0 and $entry->getBlock()->getId() === $blockClicked->getId()) {
src/pocketmine/level/Level.php:                $ev->setCancelled(!$canPlace);
src/pocketmine/level/Level.php:            $ev->call();
src/pocketmine/level/Level.php:            if ($ev->isCancelled()) {
src/pocketmine/level/Level.php:        if (!$hand->place($item, $blockReplace, $blockClicked, $face, $clickVector, $player)) {
src/pocketmine/level/Level.php:            $this->broadcastLevelSoundEvent($hand, LevelSoundEventPacket::SOUND_PLACE, $hand->getRuntimeId());
src/pocketmine/level/Level.php:        $item->pop();
src/pocketmine/level/Level.php:        return $this->entities[$entityId] ?? null;
src/pocketmine/level/Level.php:        return $this->entities;
src/pocketmine/level/Level.php:        if (null === $entity or $entity->canCollide) {
src/pocketmine/level/Level.php:            $minX = ((int) floor($bb->minX - 2)) >> 4;
src/pocketmine/level/Level.php:            $maxX = ((int) floor($bb->maxX + 2)) >> 4;
src/pocketmine/level/Level.php:            $minZ = ((int) floor($bb->minZ - 2)) >> 4;
src/pocketmine/level/Level.php:            $maxZ = ((int) floor($bb->maxZ + 2)) >> 4;
src/pocketmine/level/Level.php:                    foreach ($this->getChunkEntities($x, $z) as $ent) {
src/pocketmine/level/Level.php:                        if ($ent->canBeCollidedWith() and (null === $entity or ($ent !== $entity and $entity->canCollideWith($ent))) and $ent->boundingBox->intersectsWith($bb)) {
src/pocketmine/level/Level.php:        $minX = ((int) floor($bb->minX - 2)) >> 4;
src/pocketmine/level/Level.php:        $maxX = ((int) floor($bb->maxX + 2)) >> 4;
src/pocketmine/level/Level.php:        $minZ = ((int) floor($bb->minZ - 2)) >> 4;
src/pocketmine/level/Level.php:        $maxZ = ((int) floor($bb->maxZ + 2)) >> 4;
src/pocketmine/level/Level.php:                foreach ($this->getChunkEntities($x, $z) as $ent) {
src/pocketmine/level/Level.php:                    if ($ent !== $entity and $ent->boundingBox->intersectsWith($bb)) {
src/pocketmine/level/Level.php:     * @phpstan-template TEntity of Entity
src/pocketmine/level/Level.php:     * @phpstan-param class-string<TEntity> $entityType
src/pocketmine/level/Level.php:     * @phpstan-return TEntity
src/pocketmine/level/Level.php:        $minX = ((int) floor($pos->x - $maxDistance)) >> 4;
src/pocketmine/level/Level.php:        $maxX = ((int) floor($pos->x + $maxDistance)) >> 4;
src/pocketmine/level/Level.php:        $minZ = ((int) floor($pos->z - $maxDistance)) >> 4;
src/pocketmine/level/Level.php:        $maxZ = ((int) floor($pos->z + $maxDistance)) >> 4;
src/pocketmine/level/Level.php:         * @phpstan-var TEntity|null $currentTarget
src/pocketmine/level/Level.php:                foreach ($this->getChunkEntities($x, $z) as $entity) {
src/pocketmine/level/Level.php:                    if (!($entity instanceof $entityType) or $entity->isClosed() or $entity->isFlaggedForDespawn() or (!$includeDead and !$entity->isAlive())) {
src/pocketmine/level/Level.php:                    $distSq = $entity->distanceSquared($pos);
src/pocketmine/level/Level.php:        return $this->tiles;
src/pocketmine/level/Level.php:        return $this->tiles[$tileId] ?? null;
src/pocketmine/level/Level.php:        return $this->players;
src/pocketmine/level/Level.php:        return $this->loaders;
src/pocketmine/level/Level.php:     * in performance-sensitive code, consider using getTileAt() instead of this method for better performance.
src/pocketmine/level/Level.php:        return $this->getTileAt((int) floor($pos->x), (int) floor($pos->y), (int) floor($pos->z));
src/pocketmine/level/Level.php:        $chunk = $this->getChunk($x >> 4, $z >> 4);
src/pocketmine/level/Level.php:            return $chunk->getTile($x & 0x0f, $y, $z & 0x0f);
src/pocketmine/level/Level.php:        return null !== ($chunk = $this->getChunk($X, $Z)) ? $chunk->getEntities() : [];
src/pocketmine/level/Level.php:        return null !== ($chunk = $this->getChunk($X, $Z)) ? $chunk->getTiles() : [];
src/pocketmine/level/Level.php:     * @return int 0-255
src/pocketmine/level/Level.php:        return $this->getChunk($x >> 4, $z >> 4, true)->getBlockId($x & 0x0f, $y, $z & 0x0f);
src/pocketmine/level/Level.php:     * @param int $id 0-255
src/pocketmine/level/Level.php:        if (!$this->isInWorld($x, $y, $z)) { //TODO: bad hack but fixing this requires BC breaks to do properly :(
src/pocketmine/level/Level.php:        unset($this->blockCache[$chunkHash][$relativeBlockHash]);
src/pocketmine/level/Level.php:        $this->getChunk($x >> 4, $z >> 4, true)->setBlockId($x & 0x0f, $y, $z & 0x0f, $id & 0xff);
src/pocketmine/level/Level.php:        if (!isset($this->changedBlocks[$chunkHash])) {
src/pocketmine/level/Level.php:            $this->changedBlocks[$chunkHash] = [];
src/pocketmine/level/Level.php:        $this->changedBlocks[$chunkHash][$relativeBlockHash] = $v = new Vector3($x, $y, $z);
src/pocketmine/level/Level.php:        foreach ($this->getChunkLoaders($x >> 4, $z >> 4) as $loader) {
src/pocketmine/level/Level.php:            $loader->onBlockChanged($v);
src/pocketmine/level/Level.php:     * @return int 0-15
src/pocketmine/level/Level.php:        return $this->getChunk($x >> 4, $z >> 4, true)->getBlockData($x & 0x0f, $y, $z & 0x0f);
src/pocketmine/level/Level.php:     * @param int $data 0-15
src/pocketmine/level/Level.php:        if (!$this->isInWorld($x, $y, $z)) { //TODO: bad hack but fixing this requires BC breaks to do properly :(
src/pocketmine/level/Level.php:        unset($this->blockCache[$chunkHash][$relativeBlockHash]);
src/pocketmine/level/Level.php:        $this->getChunk($x >> 4, $z >> 4, true)->setBlockData($x & 0x0f, $y, $z & 0x0f, $data & 0x0f);
src/pocketmine/level/Level.php:        if (!isset($this->changedBlocks[$chunkHash])) {
src/pocketmine/level/Level.php:            $this->changedBlocks[$chunkHash] = [];
src/pocketmine/level/Level.php:        $this->changedBlocks[$chunkHash][$relativeBlockHash] = $v = new Vector3($x, $y, $z);
src/pocketmine/level/Level.php:        foreach ($this->getChunkLoaders($x >> 4, $z >> 4) as $loader) {
src/pocketmine/level/Level.php:            $loader->onBlockChanged($v);
src/pocketmine/level/Level.php:     * @return int 0-15
src/pocketmine/level/Level.php:        return $this->getChunk($x >> 4, $z >> 4, true)->getBlockSkyLight($x & 0x0f, $y, $z & 0x0f);
src/pocketmine/level/Level.php:     * @param int $level 0-15
src/pocketmine/level/Level.php:        $this->getChunk($x >> 4, $z >> 4, true)->setBlockSkyLight($x & 0x0f, $y, $z & 0x0f, $level & 0x0f);
src/pocketmine/level/Level.php:     * @return int 0-15
src/pocketmine/level/Level.php:        return $this->getChunk($x >> 4, $z >> 4, true)->getBlockLight($x & 0x0f, $y, $z & 0x0f);
src/pocketmine/level/Level.php:     * @param int $level 0-15
src/pocketmine/level/Level.php:        $this->getChunk($x >> 4, $z >> 4, true)->setBlockLight($x & 0x0f, $y, $z & 0x0f, $level & 0x0f);
src/pocketmine/level/Level.php:        return $this->getChunk($x >> 4, $z >> 4, true)->getBiomeId($x & 0x0f, $z & 0x0f);
src/pocketmine/level/Level.php:        return Biome::getBiome($this->getBiomeId($x, $z));
src/pocketmine/level/Level.php:        $this->getChunk($x >> 4, $z >> 4, true)->setBiomeId($x & 0x0f, $z & 0x0f, $biomeId);
src/pocketmine/level/Level.php:        return $this->getChunk($x >> 4, $z >> 4, true)->getHeightMap($x & 0x0f, $z & 0x0f);
src/pocketmine/level/Level.php:        $this->getChunk($x >> 4, $z >> 4, true)->setHeightMap($x & 0x0f, $z & 0x0f, $value);
src/pocketmine/level/Level.php:        return $this->chunks;
src/pocketmine/level/Level.php:        if (isset($this->chunks[$index = Level::chunkHash($x, $z)])) {
src/pocketmine/level/Level.php:            return $this->chunks[$index];
src/pocketmine/level/Level.php:        } elseif ($this->loadChunk($x, $z, $create)) {
src/pocketmine/level/Level.php:            return $this->chunks[$index];
src/pocketmine/level/Level.php:        return $this->getChunk($pos->getFloorX() >> 4, $pos->getFloorZ() >> 4, $create);
src/pocketmine/level/Level.php:                $result[$i] = $this->getChunk($x + $xx - 1, $z + $zz - 1, false);
src/pocketmine/level/Level.php:        Timings::$generationCallbackTimer->startTiming();
src/pocketmine/level/Level.php:        if (isset($this->chunkPopulationQueue[$index = Level::chunkHash($x, $z)])) {
src/pocketmine/level/Level.php:            for ($xx = -1; $xx <= 1; ++$xx) {
src/pocketmine/level/Level.php:                for ($zz = -1; $zz <= 1; ++$zz) {
src/pocketmine/level/Level.php:                    unset($this->chunkPopulationLock[Level::chunkHash($x + $xx, $z + $zz)]);
src/pocketmine/level/Level.php:            unset($this->chunkPopulationQueue[$index]);
src/pocketmine/level/Level.php:                $oldChunk = $this->getChunk($x, $z, false);
src/pocketmine/level/Level.php:                $this->setChunk($x, $z, $chunk, false);
src/pocketmine/level/Level.php:                if ((null === $oldChunk or !$oldChunk->isPopulated()) and $chunk->isPopulated()) {
src/pocketmine/level/Level.php:                    (new ChunkPopulateEvent($this, $chunk))->call();
src/pocketmine/level/Level.php:                    foreach ($this->getChunkLoaders($x, $z) as $loader) {
src/pocketmine/level/Level.php:                        $loader->onChunkPopulated($chunk);
src/pocketmine/level/Level.php:        } elseif (isset($this->chunkPopulationLock[$index])) {
src/pocketmine/level/Level.php:            unset($this->chunkPopulationLock[$index]);
src/pocketmine/level/Level.php:                $this->setChunk($x, $z, $chunk, false);
src/pocketmine/level/Level.php:            $this->setChunk($x, $z, $chunk, false);
src/pocketmine/level/Level.php:        Timings::$generationCallbackTimer->stopTiming();
src/pocketmine/level/Level.php:        $chunk->setX($chunkX);
src/pocketmine/level/Level.php:        $chunk->setZ($chunkZ);
src/pocketmine/level/Level.php:        $oldChunk = $this->getChunk($chunkX, $chunkZ, false);
src/pocketmine/level/Level.php:                foreach ($oldChunk->getEntities() as $player) {
src/pocketmine/level/Level.php:                    $chunk->addEntity($player);
src/pocketmine/level/Level.php:                    $oldChunk->removeEntity($player);
src/pocketmine/level/Level.php:                    $player->chunk = $chunk;
src/pocketmine/level/Level.php:                $this->unloadChunk($chunkX, $chunkZ, false, false);
src/pocketmine/level/Level.php:                foreach ($oldChunk->getEntities() as $entity) {
src/pocketmine/level/Level.php:                    $chunk->addEntity($entity);
src/pocketmine/level/Level.php:                    $oldChunk->removeEntity($entity);
src/pocketmine/level/Level.php:                    $entity->chunk = $chunk;
src/pocketmine/level/Level.php:                foreach ($oldChunk->getTiles() as $tile) {
src/pocketmine/level/Level.php:                    $chunk->addTile($tile);
src/pocketmine/level/Level.php:                    $oldChunk->removeTile($tile);
src/pocketmine/level/Level.php:        $this->chunks[$chunkHash] = $chunk;
src/pocketmine/level/Level.php:        unset($this->blockCache[$chunkHash]);
src/pocketmine/level/Level.php:        unset($this->chunkCache[$chunkHash]);
src/pocketmine/level/Level.php:        unset($this->changedBlocks[$chunkHash]);
src/pocketmine/level/Level.php:        if (isset($this->chunkSendTasks[$chunkHash])) { //invalidate pending caches
src/pocketmine/level/Level.php:            $this->chunkSendTasks[$chunkHash]->cancelRun();
src/pocketmine/level/Level.php:            unset($this->chunkSendTasks[$chunkHash]);
src/pocketmine/level/Level.php:        $chunk->setChanged();
src/pocketmine/level/Level.php:        if (!$this->isChunkInUse($chunkX, $chunkZ)) {
src/pocketmine/level/Level.php:            $this->unloadChunkRequest($chunkX, $chunkZ);
src/pocketmine/level/Level.php:            foreach ($this->getChunkLoaders($chunkX, $chunkZ) as $loader) {
src/pocketmine/level/Level.php:                $loader->onChunkChanged($chunk);
src/pocketmine/level/Level.php:     * @return int 0-255
src/pocketmine/level/Level.php:        return $this->getChunk($x >> 4, $z >> 4, true)->getHighestBlockAt($x & 0x0f, $z & 0x0f);
src/pocketmine/level/Level.php:        return $this->isChunkLoaded($pos->getFloorX() >> 4, $pos->getFloorZ() >> 4);
src/pocketmine/level/Level.php:        return isset($this->chunks[Level::chunkHash($x, $z)]);
src/pocketmine/level/Level.php:        $chunk = $this->getChunk($x, $z);
src/pocketmine/level/Level.php:        return null !== $chunk ? $chunk->isGenerated() : false;
src/pocketmine/level/Level.php:        $chunk = $this->getChunk($x, $z);
src/pocketmine/level/Level.php:        return null !== $chunk ? $chunk->isPopulated() : false;
src/pocketmine/level/Level.php:        return Position::fromObject($this->provider->getSpawn(), $this);
src/pocketmine/level/Level.php:        $previousSpawn = $this->getSpawnLocation();
src/pocketmine/level/Level.php:        $this->provider->setSpawn($pos);
src/pocketmine/level/Level.php:        (new SpawnChangeEvent($this, $previousSpawn))->call();
src/pocketmine/level/Level.php:        if (!isset($this->chunkSendQueue[$index])) {
src/pocketmine/level/Level.php:            $this->chunkSendQueue[$index] = [];
src/pocketmine/level/Level.php:        $this->chunkSendQueue[$index][$player->getLoaderId()] = $player;
src/pocketmine/level/Level.php:        if (isset($this->chunkSendQueue[$index = Level::chunkHash($x, $z)])) {
src/pocketmine/level/Level.php:            foreach ($this->chunkSendQueue[$index] as $player) {
src/pocketmine/level/Level.php:                if ($player->isConnected() and isset($player->usedChunks[$index])) {
src/pocketmine/level/Level.php:                    $player->sendChunk($x, $z, $this->chunkCache[$index]);
src/pocketmine/level/Level.php:            unset($this->chunkSendQueue[$index]);
src/pocketmine/level/Level.php:        if (count($this->chunkSendQueue) > 0) {
src/pocketmine/level/Level.php:            $this->timings->syncChunkSendTimer->startTiming();
src/pocketmine/level/Level.php:            foreach ($this->chunkSendQueue as $index => $players) {
src/pocketmine/level/Level.php:                if (isset($this->chunkSendTasks[$index])) {
src/pocketmine/level/Level.php:                    if ($this->chunkSendTasks[$index]->isCrashed()) {
src/pocketmine/level/Level.php:                        unset($this->chunkSendTasks[$index]);
src/pocketmine/level/Level.php:                        $this->server->getLogger()->error("Failed to prepare chunk $x $z for sending, retrying");
src/pocketmine/level/Level.php:                if (isset($this->chunkCache[$index])) {
src/pocketmine/level/Level.php:                    $this->sendChunkFromCache($x, $z);
src/pocketmine/level/Level.php:                $this->timings->syncChunkSendPrepareTimer->startTiming();
src/pocketmine/level/Level.php:                $chunk = $this->chunks[$index] ?? null;
src/pocketmine/level/Level.php:                assert($chunk->getX() === $x and $chunk->getZ() === $z, "Chunk coordinate mismatch: expected $x $z, but chunk has coordinates ".$chunk->getX().' '.$chunk->getZ().', did you forget to clone a chunk before setting?');
src/pocketmine/level/Level.php:                $this->server->getAsyncPool()->submitTask($task = new ChunkRequestTask($this, $x, $z, $chunk));
src/pocketmine/level/Level.php:                $this->chunkSendTasks[$index] = $task;
src/pocketmine/level/Level.php:                $this->timings->syncChunkSendPrepareTimer->stopTiming();
src/pocketmine/level/Level.php:            $this->timings->syncChunkSendTimer->stopTiming();
src/pocketmine/level/Level.php:        $this->timings->syncChunkSendTimer->startTiming();
src/pocketmine/level/Level.php:        unset($this->chunkSendTasks[$index]);
src/pocketmine/level/Level.php:        $this->chunkCache[$index] = $payload;
src/pocketmine/level/Level.php:        $this->sendChunkFromCache($x, $z);
src/pocketmine/level/Level.php:        if (!$this->server->getMemoryManager()->canUseChunkCache()) {
src/pocketmine/level/Level.php:            unset($this->chunkCache[$index]);
src/pocketmine/level/Level.php:        $this->timings->syncChunkSendTimer->stopTiming();
src/pocketmine/level/Level.php:        if ($entity->isClosed()) {
src/pocketmine/level/Level.php:        if ($entity->getLevel() !== $this) {
src/pocketmine/level/Level.php:            $this->players[$entity->getId()] = $entity;
src/pocketmine/level/Level.php:        $this->entities[$entity->getId()] = $entity;
src/pocketmine/level/Level.php:        if ($entity->getLevel() !== $this) {
src/pocketmine/level/Level.php:            unset($this->players[$entity->getId()]);
src/pocketmine/level/Level.php:            $this->checkSleep();
src/pocketmine/level/Level.php:        unset($this->entities[$entity->getId()]);
src/pocketmine/level/Level.php:        unset($this->updateEntities[$entity->getId()]);
src/pocketmine/level/Level.php:        if ($tile->isClosed()) {
src/pocketmine/level/Level.php:        if ($tile->getLevel() !== $this) {
src/pocketmine/level/Level.php:        $chunkX = $tile->getFloorX() >> 4;
src/pocketmine/level/Level.php:        $chunkZ = $tile->getFloorZ() >> 4;
src/pocketmine/level/Level.php:        if (isset($this->chunks[$hash = Level::chunkHash($chunkX, $chunkZ)])) {
src/pocketmine/level/Level.php:            $this->chunks[$hash]->addTile($tile);
src/pocketmine/level/Level.php:        $this->tiles[$tile->getId()] = $tile;
src/pocketmine/level/Level.php:        $this->clearChunkCache($chunkX, $chunkZ);
src/pocketmine/level/Level.php:        if ($tile->getLevel() !== $this) {
src/pocketmine/level/Level.php:        unset($this->tiles[$tile->getId()], $this->updateTiles[$tile->getId()]);
src/pocketmine/level/Level.php:        $chunkX = $tile->getFloorX() >> 4;
src/pocketmine/level/Level.php:        $chunkZ = $tile->getFloorZ() >> 4;
src/pocketmine/level/Level.php:        if (isset($this->chunks[$hash = Level::chunkHash($chunkX, $chunkZ)])) {
src/pocketmine/level/Level.php:            $this->chunks[$hash]->removeTile($tile);
src/pocketmine/level/Level.php:        $this->clearChunkCache($chunkX, $chunkZ);
src/pocketmine/level/Level.php:        return isset($this->chunkLoaders[$index = Level::chunkHash($x, $z)]) and count($this->chunkLoaders[$index]) > 0;
src/pocketmine/level/Level.php:        if (isset($this->chunks[$chunkHash = Level::chunkHash($x, $z)])) {
src/pocketmine/level/Level.php:        $this->timings->syncChunkLoadTimer->startTiming();
src/pocketmine/level/Level.php:        $this->cancelUnloadChunkRequest($x, $z);
src/pocketmine/level/Level.php:        $this->timings->syncChunkLoadDataTimer->startTiming();
src/pocketmine/level/Level.php:            $chunk = $this->provider->loadChunk($x, $z);
src/pocketmine/level/Level.php:            $logger = $this->server->getLogger();
src/pocketmine/level/Level.php:            $logger->critical("Failed to load chunk x=$x z=$z: ".$e->getMessage());
src/pocketmine/level/Level.php:        $this->timings->syncChunkLoadDataTimer->stopTiming();
src/pocketmine/level/Level.php:            $this->timings->syncChunkLoadTimer->stopTiming();
src/pocketmine/level/Level.php:        $this->chunks[$chunkHash] = $chunk;
src/pocketmine/level/Level.php:        unset($this->blockCache[$chunkHash]);
src/pocketmine/level/Level.php:        $chunk->initChunk($this);
src/pocketmine/level/Level.php:        (new ChunkLoadEvent($this, $chunk, !$chunk->isGenerated()))->call();
src/pocketmine/level/Level.php:        if (!$chunk->isLightPopulated() and $chunk->isPopulated() and $this->getServer()->getProperty('chunk-ticking.light-updates', false)) {
src/pocketmine/level/Level.php:            $this->getServer()->getAsyncPool()->submitTask(new LightPopulationTask($this, $chunk));
src/pocketmine/level/Level.php:        if ($this->isChunkInUse($x, $z)) {
src/pocketmine/level/Level.php:            foreach ($this->getChunkLoaders($x, $z) as $loader) {
src/pocketmine/level/Level.php:                $loader->onChunkLoaded($chunk);
src/pocketmine/level/Level.php:            $this->server->getLogger()->debug("Newly loaded chunk $x $z has no loaders registered, will be unloaded at next available opportunity");
src/pocketmine/level/Level.php:            $this->unloadChunkRequest($x, $z);
src/pocketmine/level/Level.php:        $this->timings->syncChunkLoadTimer->stopTiming();
src/pocketmine/level/Level.php:        $this->unloadQueue[$index = Level::chunkHash($x, $z)] = microtime(true);
src/pocketmine/level/Level.php:        unset($this->chunkTickList[$index]);
src/pocketmine/level/Level.php:        if (($safe and $this->isChunkInUse($x, $z)) or $this->isSpawnChunk($x, $z)) {
src/pocketmine/level/Level.php:        $this->queueUnloadChunk($x, $z);
src/pocketmine/level/Level.php:        unset($this->unloadQueue[Level::chunkHash($x, $z)]);
src/pocketmine/level/Level.php:        if ($safe and $this->isChunkInUse($x, $z)) {
src/pocketmine/level/Level.php:        if (!$this->isChunkLoaded($x, $z)) {
src/pocketmine/level/Level.php:        $this->timings->doChunkUnload->startTiming();
src/pocketmine/level/Level.php:        $chunk = $this->chunks[$chunkHash] ?? null;
src/pocketmine/level/Level.php:            $ev->call();
src/pocketmine/level/Level.php:            if ($ev->isCancelled()) {
src/pocketmine/level/Level.php:                $this->timings->doChunkUnload->stopTiming();
src/pocketmine/level/Level.php:            if ($trySave and $this->getAutoSave() and $chunk->isGenerated()) {
src/pocketmine/level/Level.php:                if ($chunk->hasChanged() or count($chunk->getTiles()) > 0 or count($chunk->getSavableEntities()) > 0) {
src/pocketmine/level/Level.php:                    $this->timings->syncChunkSaveTimer->startTiming();
src/pocketmine/level/Level.php:                        $this->provider->saveChunk($chunk);
src/pocketmine/level/Level.php:                        $this->timings->syncChunkSaveTimer->stopTiming();
src/pocketmine/level/Level.php:            foreach ($this->getChunkLoaders($x, $z) as $loader) {
src/pocketmine/level/Level.php:                $loader->onChunkUnloaded($chunk);
src/pocketmine/level/Level.php:            $chunk->onUnload();
src/pocketmine/level/Level.php:        unset($this->chunks[$chunkHash]);
src/pocketmine/level/Level.php:        unset($this->chunkTickList[$chunkHash]);
src/pocketmine/level/Level.php:        unset($this->chunkCache[$chunkHash]);
src/pocketmine/level/Level.php:        unset($this->blockCache[$chunkHash]);
src/pocketmine/level/Level.php:        unset($this->changedBlocks[$chunkHash]);
src/pocketmine/level/Level.php:        unset($this->chunkSendQueue[$chunkHash]);
src/pocketmine/level/Level.php:        unset($this->chunkSendTasks[$chunkHash]);
src/pocketmine/level/Level.php:        $this->timings->doChunkUnload->stopTiming();
src/pocketmine/level/Level.php:        $spawn = $this->provider->getSpawn();
src/pocketmine/level/Level.php:        $spawnX = $spawn->x >> 4;
src/pocketmine/level/Level.php:        $spawnZ = $spawn->z >> 4;
src/pocketmine/level/Level.php:        return abs($X - $spawnX) <= 1 and abs($Z - $spawnZ) <= 1;
src/pocketmine/level/Level.php:        if (!($spawn instanceof Vector3) or $spawn->y < 1) {
src/pocketmine/level/Level.php:            $spawn = $this->getSpawnLocation();
src/pocketmine/level/Level.php:        $max = $this->worldHeight;
src/pocketmine/level/Level.php:        $v = $spawn->floor();
src/pocketmine/level/Level.php:        $chunk = $this->getChunkAtPosition($v, false);
src/pocketmine/level/Level.php:        $x = (int) $v->x;
src/pocketmine/level/Level.php:        $z = (int) $v->z;
src/pocketmine/level/Level.php:        if (null !== $chunk and $chunk->isGenerated()) {
src/pocketmine/level/Level.php:            $y = (int) min($max - 2, $v->y);
src/pocketmine/level/Level.php:            $wasAir = (0 === $chunk->getBlockId($x & 0x0f, $y - 1, $z & 0x0f));
src/pocketmine/level/Level.php:            for (; $y > 0; --$y) {
src/pocketmine/level/Level.php:                if ($this->isFullBlock($this->getBlockAt($x, $y, $z))) {
src/pocketmine/level/Level.php:                if (!$this->isFullBlock($this->getBlockAt($x, $y + 1, $z))) {
src/pocketmine/level/Level.php:                    if (!$this->isFullBlock($this->getBlockAt($x, $y, $z))) {
src/pocketmine/level/Level.php:                        return new Position($spawn->x, $y === (int) $spawn->y ? $spawn->y : $y, $spawn->z, $this);
src/pocketmine/level/Level.php:            $v->y = $y;
src/pocketmine/level/Level.php:        return new Position($spawn->x, $v->y, $spawn->z, $this);
src/pocketmine/level/Level.php:        return $this->time;
src/pocketmine/level/Level.php:        return $this->time % self::TIME_FULL;
src/pocketmine/level/Level.php:        return $this->displayName;
src/pocketmine/level/Level.php:        return $this->folderName;
src/pocketmine/level/Level.php:        $this->time = $time;
src/pocketmine/level/Level.php:        $this->sendTime();
src/pocketmine/level/Level.php:        $this->stopTime = true;
src/pocketmine/level/Level.php:        $this->sendTime();
src/pocketmine/level/Level.php:        $this->stopTime = false;
src/pocketmine/level/Level.php:        $this->sendTime();
src/pocketmine/level/Level.php:        return $this->provider->getSeed();
src/pocketmine/level/Level.php:        $this->provider->setSeed($seed);
src/pocketmine/level/Level.php:        return $this->worldHeight;
src/pocketmine/level/Level.php:        return $this->provider->getDifficulty();
src/pocketmine/level/Level.php:        $this->provider->setDifficulty($difficulty);
src/pocketmine/level/Level.php:        $this->sendDifficulty();
src/pocketmine/level/Level.php:            $targets = $this->getPlayers();
src/pocketmine/level/Level.php:        $pk->difficulty = $this->getDifficulty();
src/pocketmine/level/Level.php:        $this->server->broadcastPacket($targets, $pk);
src/pocketmine/level/Level.php:        if (isset($this->chunkPopulationQueue[$index = Level::chunkHash($x, $z)]) or (count($this->chunkPopulationQueue) >= $this->chunkPopulationQueueSize and !$force)) {
src/pocketmine/level/Level.php:        for ($xx = -1; $xx <= 1; ++$xx) {
src/pocketmine/level/Level.php:            for ($zz = -1; $zz <= 1; ++$zz) {
src/pocketmine/level/Level.php:                if (isset($this->chunkPopulationLock[Level::chunkHash($x + $xx, $z + $zz)])) {
src/pocketmine/level/Level.php:        $chunk = $this->getChunk($x, $z, true);
src/pocketmine/level/Level.php:        if (!$chunk->isPopulated()) {
src/pocketmine/level/Level.php:            Timings::$populationTimer->startTiming();
src/pocketmine/level/Level.php:            $this->chunkPopulationQueue[$index] = true;
src/pocketmine/level/Level.php:            for ($xx = -1; $xx <= 1; ++$xx) {
src/pocketmine/level/Level.php:                for ($zz = -1; $zz <= 1; ++$zz) {
src/pocketmine/level/Level.php:                    $this->chunkPopulationLock[Level::chunkHash($x + $xx, $z + $zz)] = true;
src/pocketmine/level/Level.php:            $workerId = $this->server->getAsyncPool()->selectWorker();
src/pocketmine/level/Level.php:            if (!isset($this->generatorRegisteredWorkers[$workerId])) {
src/pocketmine/level/Level.php:                $this->registerGeneratorToWorker($workerId);
src/pocketmine/level/Level.php:            $this->server->getAsyncPool()->submitTaskToWorker($task, $workerId);
src/pocketmine/level/Level.php:            Timings::$populationTimer->stopTiming();
src/pocketmine/level/Level.php:        $this->timings->doChunkGC->startTiming();
src/pocketmine/level/Level.php:        foreach ($this->chunks as $index => $chunk) {
src/pocketmine/level/Level.php:            if (!isset($this->unloadQueue[$index])) {
src/pocketmine/level/Level.php:                if (!$this->isSpawnChunk($X, $Z)) {
src/pocketmine/level/Level.php:                    $this->unloadChunkRequest($X, $Z, true);
src/pocketmine/level/Level.php:            $chunk->collectGarbage();
src/pocketmine/level/Level.php:        $this->provider->doGarbageCollection();
src/pocketmine/level/Level.php:        $this->timings->doChunkGC->stopTiming();
src/pocketmine/level/Level.php:        if (count($this->unloadQueue) > 0) {
src/pocketmine/level/Level.php:            foreach ($this->unloadQueue as $index => $time) {
src/pocketmine/level/Level.php:                    } elseif ($time > ($now - 30)) {
src/pocketmine/level/Level.php:                if ($this->unloadChunk($X, $Z, true)) {
src/pocketmine/level/Level.php:                    unset($this->unloadQueue[$index]);
src/pocketmine/level/Level.php:                    --$maxUnload;
src/pocketmine/level/Level.php:        $this->server->getLevelMetadata()->setMetadata($this, $metadataKey, $newMetadataValue);
src/pocketmine/level/Level.php:        return $this->server->getLevelMetadata()->getMetadata($this, $metadataKey);
src/pocketmine/level/Level.php:        return $this->server->getLevelMetadata()->hasMetadata($this, $metadataKey);
src/pocketmine/level/Level.php:        $this->server->getLevelMetadata()->removeMetadata($this, $metadataKey, $owningPlugin);
src/pocketmine/level/light/LightUpdate.php:	 * @phpstan-var array<int, array{int, int, int, int}>
src/pocketmine/level/light/LightUpdate.php:	 * @phpstan-var \SplQueue<array{int, int, int}>
src/pocketmine/level/light/LightUpdate.php:	 * @phpstan-var array<int, true>
src/pocketmine/level/light/LightUpdate.php:	 * @phpstan-var \SplQueue<array{int, int, int, int}>
src/pocketmine/level/light/LightUpdate.php:	 * @phpstan-var array<int, true>
src/pocketmine/level/light/LightUpdate.php:		$this->level = $level;
src/pocketmine/level/light/LightUpdate.php:		$this->removalQueue = new \SplQueue();
src/pocketmine/level/light/LightUpdate.php:		$this->spreadQueue = new \SplQueue();
src/pocketmine/level/light/LightUpdate.php:		$this->subChunkHandler = new SubChunkIteratorManager($this->level);
src/pocketmine/level/light/LightUpdate.php:		$this->updateNodes[Level::blockHash($x, $y, $z)] = [$x, $y, $z, $newLevel];
src/pocketmine/level/light/LightUpdate.php:		foreach($this->updateNodes as $blockHash => [$x, $y, $z, $newLevel]){
src/pocketmine/level/light/LightUpdate.php:			if($this->subChunkHandler->moveTo($x, $y, $z)){
src/pocketmine/level/light/LightUpdate.php:				$oldLevel = $this->getLight($x, $y, $z);
src/pocketmine/level/light/LightUpdate.php:					$this->setLight($x, $y, $z, $newLevel);
src/pocketmine/level/light/LightUpdate.php:						$this->spreadVisited[$blockHash] = true;
src/pocketmine/level/light/LightUpdate.php:						$this->spreadQueue->enqueue([$x, $y, $z]);
src/pocketmine/level/light/LightUpdate.php:						$this->removalVisited[$blockHash] = true;
src/pocketmine/level/light/LightUpdate.php:						$this->removalQueue->enqueue([$x, $y, $z, $oldLevel]);
src/pocketmine/level/light/LightUpdate.php:		$this->prepareNodes();
src/pocketmine/level/light/LightUpdate.php:		while(!$this->removalQueue->isEmpty()){
src/pocketmine/level/light/LightUpdate.php:			list($x, $y, $z, $oldAdjacentLight) = $this->removalQueue->dequeue();
src/pocketmine/level/light/LightUpdate.php:				[$x - 1, $y, $z],
src/pocketmine/level/light/LightUpdate.php:				[$x, $y - 1, $z],
src/pocketmine/level/light/LightUpdate.php:				[$x, $y, $z - 1]
src/pocketmine/level/light/LightUpdate.php:				if($this->subChunkHandler->moveTo($cx, $cy, $cz)){
src/pocketmine/level/light/LightUpdate.php:					$this->computeRemoveLight($cx, $cy, $cz, $oldAdjacentLight);
src/pocketmine/level/light/LightUpdate.php:		while(!$this->spreadQueue->isEmpty()){
src/pocketmine/level/light/LightUpdate.php:			list($x, $y, $z) = $this->spreadQueue->dequeue();
src/pocketmine/level/light/LightUpdate.php:			unset($this->spreadVisited[Level::blockHash($x, $y, $z)]);
src/pocketmine/level/light/LightUpdate.php:			if(!$this->subChunkHandler->moveTo($x, $y, $z)){
src/pocketmine/level/light/LightUpdate.php:			$newAdjacentLight = $this->getLight($x, $y, $z);
src/pocketmine/level/light/LightUpdate.php:				[$x - 1, $y, $z],
src/pocketmine/level/light/LightUpdate.php:				[$x, $y - 1, $z],
src/pocketmine/level/light/LightUpdate.php:				[$x, $y, $z - 1]
src/pocketmine/level/light/LightUpdate.php:				if($this->subChunkHandler->moveTo($cx, $cy, $cz)){
src/pocketmine/level/light/LightUpdate.php:					$this->computeSpreadLight($cx, $cy, $cz, $newAdjacentLight);
src/pocketmine/level/light/LightUpdate.php:		$current = $this->getLight($x, $y, $z);
src/pocketmine/level/light/LightUpdate.php:			$this->setLight($x, $y, $z, 0);
src/pocketmine/level/light/LightUpdate.php:			if(!isset($this->removalVisited[$index = Level::blockHash($x, $y, $z)])){
src/pocketmine/level/light/LightUpdate.php:				$this->removalVisited[$index] = true;
src/pocketmine/level/light/LightUpdate.php:					$this->removalQueue->enqueue([$x, $y, $z, $current]);
src/pocketmine/level/light/LightUpdate.php:			if(!isset($this->spreadVisited[$index = Level::blockHash($x, $y, $z)])){
src/pocketmine/level/light/LightUpdate.php:				$this->spreadVisited[$index] = true;
src/pocketmine/level/light/LightUpdate.php:				$this->spreadQueue->enqueue([$x, $y, $z]);
src/pocketmine/level/light/LightUpdate.php:		$current = $this->getLight($x, $y, $z);
src/pocketmine/level/light/LightUpdate.php:		$potentialLight = $newAdjacentLevel - BlockFactory::$lightFilter[$this->subChunkHandler->currentSubChunk->getBlockId($x & 0x0f, $y & 0x0f, $z & 0x0f)];
src/pocketmine/level/light/LightUpdate.php:			$this->setLight($x, $y, $z, $potentialLight);
src/pocketmine/level/light/LightUpdate.php:			if(!isset($this->spreadVisited[$index = Level::blockHash($x, $y, $z)]) and $potentialLight > 1){
src/pocketmine/level/light/LightUpdate.php:				$this->spreadVisited[$index] = true;
src/pocketmine/level/light/LightUpdate.php:				$this->spreadQueue->enqueue([$x, $y, $z]);
src/pocketmine/level/light/LightPopulationTask.php:		$this->levelId = $level->getId();
src/pocketmine/level/light/LightPopulationTask.php:		$this->chunk = $chunk->fastSerialize();
src/pocketmine/level/light/LightPopulationTask.php:		$chunk = Chunk::fastDeserialize($this->chunk);
src/pocketmine/level/light/LightPopulationTask.php:		$chunk->recalculateHeightMap();
src/pocketmine/level/light/LightPopulationTask.php:		$chunk->populateSkyLight();
src/pocketmine/level/light/LightPopulationTask.php:		$chunk->setLightPopulated();
src/pocketmine/level/light/LightPopulationTask.php:		$this->chunk = $chunk->fastSerialize();
src/pocketmine/level/light/LightPopulationTask.php:		$level = $server->getLevel($this->levelId);
src/pocketmine/level/light/LightPopulationTask.php:			$chunk = Chunk::fastDeserialize($this->chunk);
src/pocketmine/level/light/LightPopulationTask.php:			$level->generateChunkCallback($chunk->getX(), $chunk->getZ(), $chunk);
src/pocketmine/level/light/SkyLightUpdate.php:		return $this->subChunkHandler->currentSubChunk->getBlockSkyLight($x & 0x0f, $y & 0x0f, $z & 0x0f);
src/pocketmine/level/light/SkyLightUpdate.php:		$this->subChunkHandler->currentSubChunk->setBlockSkyLight($x & 0x0f, $y & 0x0f, $z & 0x0f, $level);
src/pocketmine/level/light/BlockLightUpdate.php:		return $this->subChunkHandler->currentSubChunk->getBlockLight($x & 0x0f, $y & 0x0f, $z & 0x0f);
src/pocketmine/level/light/BlockLightUpdate.php:		$this->subChunkHandler->currentSubChunk->setBlockLight($x & 0x0f, $y & 0x0f, $z & 0x0f, $level);
src/pocketmine/level/ChunkLoader.php: * Register Level->registerChunkLoader($this, $chunkX, $chunkZ)
src/pocketmine/level/ChunkLoader.php: * Unregister Level->unregisterChunkLoader($this, $chunkX, $chunkZ)
src/pocketmine/level/Location.php:		$this->yaw = $yaw;
src/pocketmine/level/Location.php:		$this->pitch = $pitch;
src/pocketmine/level/Location.php:		return new Location($pos->x, $pos->y, $pos->z, $yaw, $pitch, $level ?? (($pos instanceof Position) ? $pos->level : null));
src/pocketmine/level/Location.php:		return new Location($this->x, $this->y, $this->z, $this->yaw, $this->pitch, $this->level);
src/pocketmine/level/Location.php:		return $this->yaw;
src/pocketmine/level/Location.php:		return $this->pitch;
src/pocketmine/level/Location.php:		return "Location (level=" . ($this->isValid() ? $this->getLevelNonNull()->getName() : "null") . ", x=$this->x, y=$this->y, z=$this->z, yaw=$this->yaw, pitch=$this->pitch)";
src/pocketmine/level/Location.php:			return parent::equals($v) and $v->yaw == $this->yaw and $v->pitch == $this->pitch;
src/pocketmine/level/biome/RiverBiome.php:		$this->setGroundCover([
src/pocketmine/level/biome/RiverBiome.php:		$tallGrass->setBaseAmount(5);
src/pocketmine/level/biome/RiverBiome.php:		$this->addPopulator($tallGrass);
src/pocketmine/level/biome/RiverBiome.php:		$this->setElevation(58, 62);
src/pocketmine/level/biome/RiverBiome.php:		$this->temperature = 0.5;
src/pocketmine/level/biome/RiverBiome.php:		$this->rainfall = 0.7;
src/pocketmine/level/biome/PlainBiome.php:		$tallGrass->setBaseAmount(12);
src/pocketmine/level/biome/PlainBiome.php:		$this->addPopulator($tallGrass);
src/pocketmine/level/biome/PlainBiome.php:		$this->setElevation(63, 68);
src/pocketmine/level/biome/PlainBiome.php:		$this->temperature = 0.8;
src/pocketmine/level/biome/PlainBiome.php:		$this->rainfall = 0.4;
src/pocketmine/level/biome/SnowyBiome.php:		$this->setGroundCover([
src/pocketmine/level/biome/SmallMountainsBiome.php:		$this->setElevation(63, 97);
src/pocketmine/level/biome/SandyBiome.php:		$this->setGroundCover([
src/pocketmine/level/biome/SwampBiome.php:		$this->setElevation(62, 63);
src/pocketmine/level/biome/SwampBiome.php:		$this->temperature = 0.8;
src/pocketmine/level/biome/SwampBiome.php:		$this->rainfall = 0.9;
src/pocketmine/level/biome/DesertBiome.php:		$this->setElevation(63, 74);
src/pocketmine/level/biome/DesertBiome.php:		$this->temperature = 2;
src/pocketmine/level/biome/DesertBiome.php:		$this->rainfall = 0;
src/pocketmine/level/biome/Biome.php:	 * @phpstan-var \SplFixedArray<Biome>
src/pocketmine/level/biome/Biome.php:		$biome->setId($id);
src/pocketmine/level/biome/Biome.php:		$this->populators = [];
src/pocketmine/level/biome/Biome.php:		$this->populators[] = $populator;
src/pocketmine/level/biome/Biome.php:		foreach($this->populators as $populator){
src/pocketmine/level/biome/Biome.php:			$populator->populate($level, $chunkX, $chunkZ, $random);
src/pocketmine/level/biome/Biome.php:		return $this->populators;
src/pocketmine/level/biome/Biome.php:		if(!$this->registered){
src/pocketmine/level/biome/Biome.php:			$this->registered = true;
src/pocketmine/level/biome/Biome.php:			$this->id = $id;
src/pocketmine/level/biome/Biome.php:		return $this->id;
src/pocketmine/level/biome/Biome.php:		return $this->minElevation;
src/pocketmine/level/biome/Biome.php:		return $this->maxElevation;
src/pocketmine/level/biome/Biome.php:		$this->minElevation = $min;
src/pocketmine/level/biome/Biome.php:		$this->maxElevation = $max;
src/pocketmine/level/biome/Biome.php:		return $this->groundCover;
src/pocketmine/level/biome/Biome.php:		$this->groundCover = $covers;
src/pocketmine/level/biome/Biome.php:		return $this->temperature;
src/pocketmine/level/biome/Biome.php:		return $this->rainfall;
src/pocketmine/level/biome/MountainsBiome.php:		$trees->setBaseAmount(1);
src/pocketmine/level/biome/MountainsBiome.php:		$this->addPopulator($trees);
src/pocketmine/level/biome/MountainsBiome.php:		$tallGrass->setBaseAmount(1);
src/pocketmine/level/biome/MountainsBiome.php:		$this->addPopulator($tallGrass);
src/pocketmine/level/biome/MountainsBiome.php:		$this->setElevation(63, 127);
src/pocketmine/level/biome/MountainsBiome.php:		$this->temperature = 0.4;
src/pocketmine/level/biome/MountainsBiome.php:		$this->rainfall = 0.5;
src/pocketmine/level/biome/ForestBiome.php:		$this->type = $type;
src/pocketmine/level/biome/ForestBiome.php:		$trees->setBaseAmount(5);
src/pocketmine/level/biome/ForestBiome.php:		$this->addPopulator($trees);
src/pocketmine/level/biome/ForestBiome.php:		$tallGrass->setBaseAmount(3);
src/pocketmine/level/biome/ForestBiome.php:		$this->addPopulator($tallGrass);
src/pocketmine/level/biome/ForestBiome.php:		$this->setElevation(63, 81);
src/pocketmine/level/biome/ForestBiome.php:			$this->temperature = 0.6;
src/pocketmine/level/biome/ForestBiome.php:			$this->rainfall = 0.5;
src/pocketmine/level/biome/ForestBiome.php:			$this->temperature = 0.7;
src/pocketmine/level/biome/ForestBiome.php:			$this->rainfall = 0.8;
src/pocketmine/level/biome/ForestBiome.php:		return $this->type === self::TYPE_BIRCH ? "Birch Forest" : "Forest";
src/pocketmine/level/biome/TaigaBiome.php:		$trees->setBaseAmount(10);
src/pocketmine/level/biome/TaigaBiome.php:		$this->addPopulator($trees);
src/pocketmine/level/biome/TaigaBiome.php:		$tallGrass->setBaseAmount(1);
src/pocketmine/level/biome/TaigaBiome.php:		$this->addPopulator($tallGrass);
src/pocketmine/level/biome/TaigaBiome.php:		$this->setElevation(63, 81);
src/pocketmine/level/biome/TaigaBiome.php:		$this->temperature = 0.05;
src/pocketmine/level/biome/TaigaBiome.php:		$this->rainfall = 0.8;
src/pocketmine/level/biome/IcePlainsBiome.php:		$tallGrass->setBaseAmount(5);
src/pocketmine/level/biome/IcePlainsBiome.php:		$this->addPopulator($tallGrass);
src/pocketmine/level/biome/IcePlainsBiome.php:		$this->setElevation(63, 74);
src/pocketmine/level/biome/IcePlainsBiome.php:		$this->temperature = 0.05;
src/pocketmine/level/biome/IcePlainsBiome.php:		$this->rainfall = 0.8;
src/pocketmine/level/biome/UnknownBiome.php: * Polyfill class for biomes that are unknown to PocketMine-MP
src/pocketmine/level/biome/OceanBiome.php:		$this->setGroundCover([
src/pocketmine/level/biome/OceanBiome.php:		$tallGrass->setBaseAmount(5);
src/pocketmine/level/biome/OceanBiome.php:		$this->addPopulator($tallGrass);
src/pocketmine/level/biome/OceanBiome.php:		$this->setElevation(46, 58);
src/pocketmine/level/biome/OceanBiome.php:		$this->temperature = 0.5;
src/pocketmine/level/biome/OceanBiome.php:		$this->rainfall = 0.5;
src/pocketmine/level/biome/GrassyBiome.php:		$this->setGroundCover([
src/pocketmine/level/ChunkManager.php:	 * @return int 0-255
src/pocketmine/level/ChunkManager.php:	 * @param int $id 0-255
src/pocketmine/level/ChunkManager.php:	 * @return int 0-15
src/pocketmine/level/ChunkManager.php:	 * @param int $data 0-15
src/pocketmine/level/Explosion.php:		if(!$center->isValid()){
src/pocketmine/level/Explosion.php:		$this->source = $center;
src/pocketmine/level/Explosion.php:		$this->level = $center->getLevelNonNull();
src/pocketmine/level/Explosion.php:		$this->size = $size;
src/pocketmine/level/Explosion.php:		$this->what = $what;
src/pocketmine/level/Explosion.php:		$this->subChunkHandler = new SubChunkIteratorManager($this->level, false);
src/pocketmine/level/Explosion.php:		if($this->size < 0.1){
src/pocketmine/level/Explosion.php:		$vBlock = new Position(0, 0, 0, $this->level);
src/pocketmine/level/Explosion.php:		$mRays = $this->rays - 1;
src/pocketmine/level/Explosion.php:		for($i = 0; $i < $this->rays; ++$i){
src/pocketmine/level/Explosion.php:			for($j = 0; $j < $this->rays; ++$j){
src/pocketmine/level/Explosion.php:				for($k = 0; $k < $this->rays; ++$k){
src/pocketmine/level/Explosion.php:						$vector->setComponents($i / $mRays * 2 - 1, $j / $mRays * 2 - 1, $k / $mRays * 2 - 1);
src/pocketmine/level/Explosion.php:						$vector->setComponents(($vector->x / ($len = $vector->length())) * $this->stepLen, ($vector->y / $len) * $this->stepLen, ($vector->z / $len) * $this->stepLen);
src/pocketmine/level/Explosion.php:						$pointerX = $this->source->x;
src/pocketmine/level/Explosion.php:						$pointerY = $this->source->y;
src/pocketmine/level/Explosion.php:						$pointerZ = $this->source->z;
src/pocketmine/level/Explosion.php:						for($blastForce = $this->size * (mt_rand(700, 1300) / 1000); $blastForce > 0; $blastForce -= $this->stepLen * 0.75){
src/pocketmine/level/Explosion.php:							$vBlock->x = $pointerX >= $x ? $x : $x - 1;
src/pocketmine/level/Explosion.php:							$vBlock->y = $pointerY >= $y ? $y : $y - 1;
src/pocketmine/level/Explosion.php:							$vBlock->z = $pointerZ >= $z ? $z : $z - 1;
src/pocketmine/level/Explosion.php:							$pointerX += $vector->x;
src/pocketmine/level/Explosion.php:							$pointerY += $vector->y;
src/pocketmine/level/Explosion.php:							$pointerZ += $vector->z;
src/pocketmine/level/Explosion.php:							if(!$this->subChunkHandler->moveTo($vBlock->x, $vBlock->y, $vBlock->z)){
src/pocketmine/level/Explosion.php:							$blockId = $this->subChunkHandler->currentSubChunk->getBlockId($vBlock->x & 0x0f, $vBlock->y & 0x0f, $vBlock->z & 0x0f);
src/pocketmine/level/Explosion.php:								$blastForce -= (BlockFactory::$blastResistance[$blockId] / 5 + 0.3) * $this->stepLen;
src/pocketmine/level/Explosion.php:									if(!isset($this->affectedBlocks[Level::blockHash($vBlock->x, $vBlock->y, $vBlock->z)])){
src/pocketmine/level/Explosion.php:										$_block = BlockFactory::get($blockId, $this->subChunkHandler->currentSubChunk->getBlockData($vBlock->x & 0x0f, $vBlock->y & 0x0f, $vBlock->z & 0x0f), $vBlock);
src/pocketmine/level/Explosion.php:										foreach($_block->getAffectedBlocks() as $_affectedBlock){
src/pocketmine/level/Explosion.php:											$this->affectedBlocks[Level::blockHash($_affectedBlock->x, $_affectedBlock->y, $_affectedBlock->z)] = $_affectedBlock;
src/pocketmine/level/Explosion.php:		$source = (new Vector3($this->source->x, $this->source->y, $this->source->z))->floor();
src/pocketmine/level/Explosion.php:		$yield = (1 / $this->size) * 100;
src/pocketmine/level/Explosion.php:		if($this->what instanceof Entity){
src/pocketmine/level/Explosion.php:			$ev = new EntityExplodeEvent($this->what, $this->source, $this->affectedBlocks, $yield);
src/pocketmine/level/Explosion.php:			$ev->call();
src/pocketmine/level/Explosion.php:			if($ev->isCancelled()){
src/pocketmine/level/Explosion.php:				$yield = $ev->getYield();
src/pocketmine/level/Explosion.php:				$this->affectedBlocks = $ev->getBlockList();
src/pocketmine/level/Explosion.php:		$explosionSize = $this->size * 2;
src/pocketmine/level/Explosion.php:		$minX = (int) floor($this->source->x - $explosionSize - 1);
src/pocketmine/level/Explosion.php:		$maxX = (int) ceil($this->source->x + $explosionSize + 1);
src/pocketmine/level/Explosion.php:		$minY = (int) floor($this->source->y - $explosionSize - 1);
src/pocketmine/level/Explosion.php:		$maxY = (int) ceil($this->source->y + $explosionSize + 1);
src/pocketmine/level/Explosion.php:		$minZ = (int) floor($this->source->z - $explosionSize - 1);
src/pocketmine/level/Explosion.php:		$maxZ = (int) ceil($this->source->z + $explosionSize + 1);
src/pocketmine/level/Explosion.php:		$list = $this->level->getNearbyEntities($explosionBB, $this->what instanceof Entity ? $this->what : null);
src/pocketmine/level/Explosion.php:			$distance = $entity->distance($this->source) / $explosionSize;
src/pocketmine/level/Explosion.php:				$motion = $entity->subtract($this->source)->normalize();
src/pocketmine/level/Explosion.php:				$impact = (1 - $distance) * ($exposure = 1);
src/pocketmine/level/Explosion.php:				if($this->what instanceof Entity){
src/pocketmine/level/Explosion.php:					$ev = new EntityDamageByEntityEvent($this->what, $entity, EntityDamageEvent::CAUSE_ENTITY_EXPLOSION, $damage);
src/pocketmine/level/Explosion.php:				}elseif($this->what instanceof Block){
src/pocketmine/level/Explosion.php:					$ev = new EntityDamageByBlockEvent($this->what, $entity, EntityDamageEvent::CAUSE_BLOCK_EXPLOSION, $damage);
src/pocketmine/level/Explosion.php:				$entity->attack($ev);
src/pocketmine/level/Explosion.php:				$entity->setMotion($motion->multiply($impact));
src/pocketmine/level/Explosion.php:		foreach($this->affectedBlocks as $block){
src/pocketmine/level/Explosion.php:				$block->ignite(mt_rand(10, 30));
src/pocketmine/level/Explosion.php:				foreach($block->getDrops($air) as $drop){
src/pocketmine/level/Explosion.php:					$this->level->dropItem($block->add(0.5, 0.5, 0.5), $drop);
src/pocketmine/level/Explosion.php:			$this->level->setBlockIdAt($block->x, $block->y, $block->z, 0);
src/pocketmine/level/Explosion.php:			$this->level->setBlockDataAt($block->x, $block->y, $block->z, 0);
src/pocketmine/level/Explosion.php:			$t = $this->level->getTileAt($block->x, $block->y, $block->z);
src/pocketmine/level/Explosion.php:					$t->unpair();
src/pocketmine/level/Explosion.php:					$t->getInventory()->dropContents($this->level, $t->add(0.5, 0.5, 0.5));
src/pocketmine/level/Explosion.php:				$t->close();
src/pocketmine/level/Explosion.php:		foreach($this->affectedBlocks as $block){
src/pocketmine/level/Explosion.php:			$pos = new Vector3($block->x, $block->y, $block->z);
src/pocketmine/level/Explosion.php:				$sideBlock = $pos->getSide($side);
src/pocketmine/level/Explosion.php:				if(!$this->level->isInWorld($sideBlock->x, $sideBlock->y, $sideBlock->z)){
src/pocketmine/level/Explosion.php:				if(!isset($this->affectedBlocks[$index = Level::blockHash($sideBlock->x, $sideBlock->y, $sideBlock->z)]) and !isset($updateBlocks[$index])){
src/pocketmine/level/Explosion.php:					$ev = new BlockUpdateEvent($this->level->getBlockAt($sideBlock->x, $sideBlock->y, $sideBlock->z));
src/pocketmine/level/Explosion.php:					$ev->call();
src/pocketmine/level/Explosion.php:					if(!$ev->isCancelled()){
src/pocketmine/level/Explosion.php:						foreach($this->level->getNearbyEntities(new AxisAlignedBB($sideBlock->x - 1, $sideBlock->y - 1, $sideBlock->z - 1, $sideBlock->x + 2, $sideBlock->y + 2, $sideBlock->z + 2)) as $entity){
src/pocketmine/level/Explosion.php:							$entity->onNearbyBlockChange();
src/pocketmine/level/Explosion.php:						$ev->getBlock()->onNearbyBlockChange();
src/pocketmine/level/Explosion.php:		$this->level->addParticle(new HugeExplodeSeedParticle($source));
src/pocketmine/level/Explosion.php:		$this->level->broadcastLevelSoundEvent($source, LevelSoundEventPacket::SOUND_EXPLODE);
src/pocketmine/level/utils/SubChunkIteratorManager.php:		$this->level = $level;
src/pocketmine/level/utils/SubChunkIteratorManager.php:		$this->allocateEmptySubs = $allocateEmptySubs;
src/pocketmine/level/utils/SubChunkIteratorManager.php:		if($this->currentChunk === null or $this->currentX !== ($x >> 4) or $this->currentZ !== ($z >> 4)){
src/pocketmine/level/utils/SubChunkIteratorManager.php:			$this->currentX = $x >> 4;
src/pocketmine/level/utils/SubChunkIteratorManager.php:			$this->currentZ = $z >> 4;
src/pocketmine/level/utils/SubChunkIteratorManager.php:			$this->currentSubChunk = null;
src/pocketmine/level/utils/SubChunkIteratorManager.php:			$this->currentChunk = $this->level->getChunk($this->currentX, $this->currentZ);
src/pocketmine/level/utils/SubChunkIteratorManager.php:			if($this->currentChunk === null){
src/pocketmine/level/utils/SubChunkIteratorManager.php:		if($this->currentSubChunk === null or $this->currentY !== ($y >> 4)){
src/pocketmine/level/utils/SubChunkIteratorManager.php:			$this->currentY = $y >> 4;
src/pocketmine/level/utils/SubChunkIteratorManager.php:			$this->currentSubChunk = $this->currentChunk->getSubChunk($y >> 4, $this->allocateEmptySubs);
src/pocketmine/level/utils/SubChunkIteratorManager.php:			if($this->currentSubChunk instanceof EmptySubChunk){
src/pocketmine/level/utils/SubChunkIteratorManager.php:		$this->currentChunk = null;
src/pocketmine/level/utils/SubChunkIteratorManager.php:		$this->currentSubChunk = null;
src/pocketmine/level/LevelTimings.php:		$name = $level->getFolderName() . " - ";
src/pocketmine/level/LevelTimings.php:		$this->setBlock = new TimingsHandler("** " . $name . "setBlock");
src/pocketmine/level/LevelTimings.php:		$this->doBlockLightUpdates = new TimingsHandler("** " . $name . "doBlockLightUpdates");
src/pocketmine/level/LevelTimings.php:		$this->doBlockSkyLightUpdates = new TimingsHandler("** " . $name . "doBlockSkyLightUpdates");
src/pocketmine/level/LevelTimings.php:		$this->doChunkUnload = new TimingsHandler("** " . $name . "doChunkUnload");
src/pocketmine/level/LevelTimings.php:		$this->doTickPending = new TimingsHandler("** " . $name . "doTickPending");
src/pocketmine/level/LevelTimings.php:		$this->doTickTiles = new TimingsHandler("** " . $name . "doTickTiles");
src/pocketmine/level/LevelTimings.php:		$this->doChunkGC = new TimingsHandler("** " . $name . "doChunkGC");
src/pocketmine/level/LevelTimings.php:		$this->entityTick = new TimingsHandler("** " . $name . "entityTick");
src/pocketmine/level/LevelTimings.php:		$this->tileEntityTick = new TimingsHandler("** " . $name . "tileEntityTick");
src/pocketmine/level/LevelTimings.php:		$this->syncChunkSendTimer = new TimingsHandler("** " . $name . "syncChunkSend", Timings::$playerChunkSendTimer);
src/pocketmine/level/LevelTimings.php:		$this->syncChunkSendPrepareTimer = new TimingsHandler("** " . $name . "syncChunkSendPrepare", Timings::$playerChunkSendTimer);
src/pocketmine/level/LevelTimings.php:		$this->syncChunkLoadTimer = new TimingsHandler("** " . $name . "syncChunkLoad", Timings::$worldLoadTimer);
src/pocketmine/level/LevelTimings.php:		$this->syncChunkLoadDataTimer = new TimingsHandler("** " . $name . "syncChunkLoad - Data");
src/pocketmine/level/LevelTimings.php:		$this->syncChunkLoadEntitiesTimer = new TimingsHandler("** " . $name . "syncChunkLoad - Entities");
src/pocketmine/level/LevelTimings.php:		$this->syncChunkLoadTileEntitiesTimer = new TimingsHandler("** " . $name . "syncChunkLoad - TileEntities");
src/pocketmine/level/LevelTimings.php:		$this->syncChunkSaveTimer = new TimingsHandler("** " . $name . "syncChunkSave", Timings::$worldSaveTimer);
src/pocketmine/level/LevelTimings.php:		$this->doTick = new TimingsHandler($name . "doTick");
src/pocketmine/level/SimpleChunkManager.php:		$this->seed = $seed;
src/pocketmine/level/SimpleChunkManager.php:		$this->worldHeight = $worldHeight;
src/pocketmine/level/SimpleChunkManager.php:	 * @return int 0-255
src/pocketmine/level/SimpleChunkManager.php:		if(($chunk = $this->getChunk($x >> 4, $z >> 4)) !== null){
src/pocketmine/level/SimpleChunkManager.php:			return $chunk->getBlockId($x & 0xf, $y, $z & 0xf);
src/pocketmine/level/SimpleChunkManager.php:	 * @param int $id 0-255
src/pocketmine/level/SimpleChunkManager.php:		if(($chunk = $this->getChunk($x >> 4, $z >> 4)) !== null){
src/pocketmine/level/SimpleChunkManager.php:			$chunk->setBlockId($x & 0xf, $y, $z & 0xf, $id);
src/pocketmine/level/SimpleChunkManager.php:	 * @return int 0-15
src/pocketmine/level/SimpleChunkManager.php:		if(($chunk = $this->getChunk($x >> 4, $z >> 4)) !== null){
src/pocketmine/level/SimpleChunkManager.php:			return $chunk->getBlockData($x & 0xf, $y, $z & 0xf);
src/pocketmine/level/SimpleChunkManager.php:	 * @param int $data 0-15
src/pocketmine/level/SimpleChunkManager.php:		if(($chunk = $this->getChunk($x >> 4, $z >> 4)) !== null){
src/pocketmine/level/SimpleChunkManager.php:			$chunk->setBlockData($x & 0xf, $y, $z & 0xf, $data);
src/pocketmine/level/SimpleChunkManager.php:		if(($chunk = $this->getChunk($x >> 4, $z >> 4)) !== null){
src/pocketmine/level/SimpleChunkManager.php:			return $chunk->getBlockLight($x & 0xf, $y, $z & 0xf);
src/pocketmine/level/SimpleChunkManager.php:		if(($chunk = $this->getChunk($x >> 4, $z >> 4)) !== null){
src/pocketmine/level/SimpleChunkManager.php:			$chunk->setBlockLight($x & 0xf, $y, $z & 0xf, $level);
src/pocketmine/level/SimpleChunkManager.php:		if(($chunk = $this->getChunk($x >> 4, $z >> 4)) !== null){
src/pocketmine/level/SimpleChunkManager.php:			return $chunk->getBlockSkyLight($x & 0xf, $y, $z & 0xf);
src/pocketmine/level/SimpleChunkManager.php:		if(($chunk = $this->getChunk($x >> 4, $z >> 4)) !== null){
src/pocketmine/level/SimpleChunkManager.php:			$chunk->setBlockSkyLight($x & 0xf, $y, $z & 0xf, $level);
src/pocketmine/level/SimpleChunkManager.php:		return $this->chunks[Level::chunkHash($chunkX, $chunkZ)] ?? null;
src/pocketmine/level/SimpleChunkManager.php:			unset($this->chunks[Level::chunkHash($chunkX, $chunkZ)]);
src/pocketmine/level/SimpleChunkManager.php:		$this->chunks[Level::chunkHash($chunkX, $chunkZ)] = $chunk;
src/pocketmine/level/SimpleChunkManager.php:		$this->chunks = [];
src/pocketmine/level/SimpleChunkManager.php:		return $this->seed;
src/pocketmine/level/SimpleChunkManager.php:		return $this->worldHeight;
src/pocketmine/level/SimpleChunkManager.php:			$y < $this->worldHeight and $y >= 0 and
src/pocketmine/level/particle/MobSpawnParticle.php:		parent::__construct($pos->x, $pos->y, $pos->z);
src/pocketmine/level/particle/MobSpawnParticle.php:		$this->width = $width;
src/pocketmine/level/particle/MobSpawnParticle.php:		$this->height = $height;
src/pocketmine/level/particle/MobSpawnParticle.php:		$pk->evid = LevelEventPacket::EVENT_PARTICLE_SPAWN;
src/pocketmine/level/particle/MobSpawnParticle.php:		$pk->position = $this->asVector3();
src/pocketmine/level/particle/MobSpawnParticle.php:		$pk->data = ($this->width & 0xff) + (($this->height & 0xff) << 8);
src/pocketmine/level/particle/DestroyBlockParticle.php:		parent::__construct($pos->x, $pos->y, $pos->z);
src/pocketmine/level/particle/DestroyBlockParticle.php:		$this->data = $b->getRuntimeId();
src/pocketmine/level/particle/DestroyBlockParticle.php:		$pk->evid = LevelEventPacket::EVENT_PARTICLE_DESTROY;
src/pocketmine/level/particle/DestroyBlockParticle.php:		$pk->position = $this->asVector3();
src/pocketmine/level/particle/DestroyBlockParticle.php:		$pk->data = $this->data;
src/pocketmine/level/particle/GenericParticle.php:		parent::__construct($pos->x, $pos->y, $pos->z);
src/pocketmine/level/particle/GenericParticle.php:		$this->id = $id & 0xFFF;
src/pocketmine/level/particle/GenericParticle.php:		$this->data = $data;
src/pocketmine/level/particle/GenericParticle.php:		$pk->evid = LevelEventPacket::EVENT_ADD_PARTICLE_MASK | $this->id;
src/pocketmine/level/particle/GenericParticle.php:		$pk->position = $this->asVector3();
src/pocketmine/level/particle/GenericParticle.php:		$pk->data = $this->data;
src/pocketmine/level/particle/EnchantParticle.php:		parent::__construct($pos, Particle::TYPE_MOB_SPELL, $color !== null ? $color->toARGB() : 0);
src/pocketmine/level/particle/InstantEnchantParticle.php:		parent::__construct($pos, Particle::TYPE_MOB_SPELL_INSTANTANEOUS, $color !== null ? $color->toARGB() : 0);
src/pocketmine/level/particle/TerrainParticle.php:		parent::__construct($pos, Particle::TYPE_TERRAIN, $b->getRuntimeId());
src/pocketmine/level/particle/FloatingTextParticle.php:		parent::__construct($pos->x, $pos->y, $pos->z);
src/pocketmine/level/particle/FloatingTextParticle.php:		$this->text = $text;
src/pocketmine/level/particle/FloatingTextParticle.php:		$this->title = $title;
src/pocketmine/level/particle/FloatingTextParticle.php:		return $this->text;
src/pocketmine/level/particle/FloatingTextParticle.php:		$this->text = $text;
src/pocketmine/level/particle/FloatingTextParticle.php:		return $this->title;
src/pocketmine/level/particle/FloatingTextParticle.php:		$this->title = $title;
src/pocketmine/level/particle/FloatingTextParticle.php:		return $this->invisible;
src/pocketmine/level/particle/FloatingTextParticle.php:		$this->invisible = $value;
src/pocketmine/level/particle/FloatingTextParticle.php:		if($this->entityId === null){
src/pocketmine/level/particle/FloatingTextParticle.php:			$this->entityId = Entity::$entityCount++;
src/pocketmine/level/particle/FloatingTextParticle.php:			$pk0->entityUniqueId = $this->entityId;
src/pocketmine/level/particle/FloatingTextParticle.php:		if(!$this->invisible){
src/pocketmine/level/particle/FloatingTextParticle.php:			$name = $this->title . ($this->text !== "" ? "\n" . $this->text : "");
src/pocketmine/level/particle/FloatingTextParticle.php:			$add->type = PlayerListPacket::TYPE_ADD;
src/pocketmine/level/particle/FloatingTextParticle.php:			$add->entries = [PlayerListEntry::createAdditionEntry($uuid, $this->entityId, $name, SkinAdapterSingleton::get()->toSkinData(new Skin("Standard_Custom", str_repeat("\x00", 8192))))];
src/pocketmine/level/particle/FloatingTextParticle.php:			$pk->uuid = $uuid;
src/pocketmine/level/particle/FloatingTextParticle.php:			$pk->username = $name;
src/pocketmine/level/particle/FloatingTextParticle.php:			$pk->entityRuntimeId = $this->entityId;
src/pocketmine/level/particle/FloatingTextParticle.php:			$pk->position = $this->asVector3(); //TODO: check offset
src/pocketmine/level/particle/FloatingTextParticle.php:			$pk->item = ItemFactory::get(Item::AIR, 0, 0);
src/pocketmine/level/particle/FloatingTextParticle.php:			$pk->metadata = [
src/pocketmine/level/particle/FloatingTextParticle.php:			$remove->type = PlayerListPacket::TYPE_REMOVE;
src/pocketmine/level/particle/FloatingTextParticle.php:			$remove->entries = [PlayerListEntry::createRemovalEntry($uuid)];
src/pocketmine/level/particle/ItemBreakParticle.php:		parent::__construct($pos, Particle::TYPE_ITEM_BREAK, ($item->getId() << 16) | $item->getDamage());
src/pocketmine/level/generator/GeneratorManager.php:	 * @phpstan-var array<string, class-string<Generator>>
src/pocketmine/level/generator/GeneratorManager.php:	 * @phpstan-param class-string<Generator> $class
src/pocketmine/level/generator/GeneratorManager.php:	 * @phpstan-return class-string<Generator>
src/pocketmine/level/generator/GeneratorManager.php:	 * @phpstan-param class-string<Generator> $class
src/pocketmine/level/generator/GeneratorUnregisterTask.php:		$this->levelId = $level->getId();
src/pocketmine/level/generator/GeneratorUnregisterTask.php:		$this->removeFromThreadStore("generation.level{$this->levelId}.manager");
src/pocketmine/level/generator/GeneratorUnregisterTask.php:		$this->removeFromThreadStore("generation.level{$this->levelId}.generator");
src/pocketmine/level/generator/PopulationTask.php:		$this->state = true;
src/pocketmine/level/generator/PopulationTask.php:		$this->levelId = $level->getId();
src/pocketmine/level/generator/PopulationTask.php:		$this->chunk = $chunk->fastSerialize();
src/pocketmine/level/generator/PopulationTask.php:		foreach($level->getAdjacentChunks($chunk->getX(), $chunk->getZ()) as $i => $c){
src/pocketmine/level/generator/PopulationTask.php:			$this->{"chunk$i"} = $c !== null ? $c->fastSerialize() : null;
src/pocketmine/level/generator/PopulationTask.php:		$manager = $this->getFromThreadStore("generation.level{$this->levelId}.manager");
src/pocketmine/level/generator/PopulationTask.php:		$generator = $this->getFromThreadStore("generation.level{$this->levelId}.generator");
src/pocketmine/level/generator/PopulationTask.php:			$this->state = false;
src/pocketmine/level/generator/PopulationTask.php:		$chunk = Chunk::fastDeserialize($this->chunk);
src/pocketmine/level/generator/PopulationTask.php:			$xx = -1 + $i % 3;
src/pocketmine/level/generator/PopulationTask.php:			$zz = -1 + (int) ($i / 3);
src/pocketmine/level/generator/PopulationTask.php:			$ck = $this->{"chunk$i"};
src/pocketmine/level/generator/PopulationTask.php:				$chunks[$i] = new Chunk($chunk->getX() + $xx, $chunk->getZ() + $zz);
src/pocketmine/level/generator/PopulationTask.php:		$manager->setChunk($chunk->getX(), $chunk->getZ(), $chunk);
src/pocketmine/level/generator/PopulationTask.php:		if(!$chunk->isGenerated()){
src/pocketmine/level/generator/PopulationTask.php:			$generator->generateChunk($chunk->getX(), $chunk->getZ());
src/pocketmine/level/generator/PopulationTask.php:			$chunk = $manager->getChunk($chunk->getX(), $chunk->getZ());
src/pocketmine/level/generator/PopulationTask.php:			$chunk->setGenerated();
src/pocketmine/level/generator/PopulationTask.php:			$manager->setChunk($c->getX(), $c->getZ(), $c);
src/pocketmine/level/generator/PopulationTask.php:			if(!$c->isGenerated()){
src/pocketmine/level/generator/PopulationTask.php:				$generator->generateChunk($c->getX(), $c->getZ());
src/pocketmine/level/generator/PopulationTask.php:				$chunks[$i] = $manager->getChunk($c->getX(), $c->getZ());
src/pocketmine/level/generator/PopulationTask.php:				$chunks[$i]->setGenerated();
src/pocketmine/level/generator/PopulationTask.php:		$generator->populateChunk($chunk->getX(), $chunk->getZ());
src/pocketmine/level/generator/PopulationTask.php:		$chunk = $manager->getChunk($chunk->getX(), $chunk->getZ());
src/pocketmine/level/generator/PopulationTask.php:		$chunk->setPopulated();
src/pocketmine/level/generator/PopulationTask.php:		$chunk->recalculateHeightMap();
src/pocketmine/level/generator/PopulationTask.php:		$chunk->populateSkyLight();
src/pocketmine/level/generator/PopulationTask.php:		$chunk->setLightPopulated();
src/pocketmine/level/generator/PopulationTask.php:		$this->chunk = $chunk->fastSerialize();
src/pocketmine/level/generator/PopulationTask.php:			$this->{"chunk$i"} = $c->hasChanged() ? $c->fastSerialize() : null;
src/pocketmine/level/generator/PopulationTask.php:		$manager->cleanChunks();
src/pocketmine/level/generator/PopulationTask.php:		$level = $server->getLevel($this->levelId);
src/pocketmine/level/generator/PopulationTask.php:			if(!$this->state){
src/pocketmine/level/generator/PopulationTask.php:				$level->registerGeneratorToWorker($this->worker->getAsyncWorkerId());
src/pocketmine/level/generator/PopulationTask.php:			$chunk = Chunk::fastDeserialize($this->chunk);
src/pocketmine/level/generator/PopulationTask.php:				$c = $this->{"chunk$i"};
src/pocketmine/level/generator/PopulationTask.php:					$level->generateChunkCallback($c->getX(), $c->getZ(), $this->state ? $c : null);
src/pocketmine/level/generator/PopulationTask.php:			$level->generateChunkCallback($chunk->getX(), $chunk->getZ(), $this->state ? $chunk : null);
src/pocketmine/level/generator/hell/Nether.php:	 * @phpstan-param array<string, mixed> $options
src/pocketmine/level/generator/hell/Nether.php:		$this->random->setSeed($this->level->getSeed());
src/pocketmine/level/generator/hell/Nether.php:		$this->noiseBase = new Simplex($this->random, 4, 1 / 4, 1 / 64);
src/pocketmine/level/generator/hell/Nether.php:		$this->random->setSeed($this->level->getSeed());
src/pocketmine/level/generator/hell/Nether.php:		$ores->setOreTypes([
src/pocketmine/level/generator/hell/Nether.php:		$this->populators[] = $ores;*/
src/pocketmine/level/generator/hell/Nether.php:		$this->random->setSeed(0xdeadbeef ^ ($chunkX << 8) ^ $chunkZ ^ $this->level->getSeed());
src/pocketmine/level/generator/hell/Nether.php:		$noise = $this->noiseBase->getFastNoise3D(16, 128, 16, 4, 8, 4, $chunkX * 16, 0, $chunkZ * 16);
src/pocketmine/level/generator/hell/Nether.php:		$chunk = $this->level->getChunk($chunkX, $chunkZ);
src/pocketmine/level/generator/hell/Nether.php:				$chunk->setBiomeId($x, $z, $biome->getId());
src/pocketmine/level/generator/hell/Nether.php:						$chunk->setBlockId($x, $y, $z, Block::BEDROCK);
src/pocketmine/level/generator/hell/Nether.php:					$noiseValue = (abs($this->emptyHeight - $y) / $this->emptyHeight) * $this->emptyAmplitude - $noise[$x][$z][$y];
src/pocketmine/level/generator/hell/Nether.php:					$noiseValue -= 1 - $this->density;
src/pocketmine/level/generator/hell/Nether.php:						$chunk->setBlockId($x, $y, $z, Block::NETHERRACK);
src/pocketmine/level/generator/hell/Nether.php:					}elseif($y <= $this->waterHeight){
src/pocketmine/level/generator/hell/Nether.php:						$chunk->setBlockId($x, $y, $z, Block::STILL_LAVA);
src/pocketmine/level/generator/hell/Nether.php:		foreach($this->generationPopulators as $populator){
src/pocketmine/level/generator/hell/Nether.php:			$populator->populate($this->level, $chunkX, $chunkZ, $this->random);
src/pocketmine/level/generator/hell/Nether.php:		$this->random->setSeed(0xdeadbeef ^ ($chunkX << 8) ^ $chunkZ ^ $this->level->getSeed());
src/pocketmine/level/generator/hell/Nether.php:		foreach($this->populators as $populator){
src/pocketmine/level/generator/hell/Nether.php:			$populator->populate($this->level, $chunkX, $chunkZ, $this->random);
src/pocketmine/level/generator/hell/Nether.php:		$chunk = $this->level->getChunk($chunkX, $chunkZ);
src/pocketmine/level/generator/hell/Nether.php:		$biome = Biome::getBiome($chunk->getBiomeId(7, 7));
src/pocketmine/level/generator/hell/Nether.php:		$biome->populateChunk($this->level, $chunkX, $chunkZ, $this->random);
src/pocketmine/level/generator/GeneratorRegisterTask.php:	 * @phpstan-var class-string<Generator>
src/pocketmine/level/generator/GeneratorRegisterTask.php:	 * @phpstan-param class-string<Generator> $generatorClass
src/pocketmine/level/generator/GeneratorRegisterTask.php:	 * @phpstan-param array<string, mixed> $generatorSettings
src/pocketmine/level/generator/GeneratorRegisterTask.php:		$this->generatorClass = $generatorClass;
src/pocketmine/level/generator/GeneratorRegisterTask.php:		$this->settings = serialize($generatorSettings);
src/pocketmine/level/generator/GeneratorRegisterTask.php:		$this->seed = $level->getSeed();
src/pocketmine/level/generator/GeneratorRegisterTask.php:		$this->levelId = $level->getId();
src/pocketmine/level/generator/GeneratorRegisterTask.php:		$this->worldHeight = $level->getWorldHeight();
src/pocketmine/level/generator/GeneratorRegisterTask.php:		$manager = new SimpleChunkManager($this->seed, $this->worldHeight);
src/pocketmine/level/generator/GeneratorRegisterTask.php:		$this->saveToThreadStore("generation.level{$this->levelId}.manager", $manager);
src/pocketmine/level/generator/GeneratorRegisterTask.php:		$generator = new $this->generatorClass(unserialize($this->settings));
src/pocketmine/level/generator/GeneratorRegisterTask.php:		$generator->init($manager, new Random($manager->getSeed()));
src/pocketmine/level/generator/GeneratorRegisterTask.php:		$this->saveToThreadStore("generation.level{$this->levelId}.generator", $generator);
src/pocketmine/level/generator/Flat.php:	 * @phpstan-var array<int, array{0: int, 1: int}>
src/pocketmine/level/generator/Flat.php:	 * @phpstan-var array<string, mixed>
src/pocketmine/level/generator/Flat.php:		return $this->options;
src/pocketmine/level/generator/Flat.php:	 * @phpstan-param array<string, mixed> $options
src/pocketmine/level/generator/Flat.php:		$this->options = $options;
src/pocketmine/level/generator/Flat.php:		if(isset($this->options["preset"]) and $this->options["preset"] != ""){
src/pocketmine/level/generator/Flat.php:			$this->preset = $this->options["preset"];
src/pocketmine/level/generator/Flat.php:			$this->preset = "2;7,2x3,2;1;";
src/pocketmine/level/generator/Flat.php:			//$this->preset = "2;7,59x1,3x3,2;1;spawn(radius=10 block=89),decoration(treecount=80 grasscount=45)";
src/pocketmine/level/generator/Flat.php:		$this->parsePreset();
src/pocketmine/level/generator/Flat.php:		if(isset($this->options["decoration"])){
src/pocketmine/level/generator/Flat.php:			$ores->setOreTypes([
src/pocketmine/level/generator/Flat.php:			$this->populators[] = $ores;
src/pocketmine/level/generator/Flat.php:	 * @phpstan-return array<int, array{0: int, 1: int}>
src/pocketmine/level/generator/Flat.php:				$b = ItemFactory::fromStringSingle($matches[2])->getBlock();
src/pocketmine/level/generator/Flat.php:				throw new InvalidGeneratorOptionsException("Invalid preset layer \"$line\": " . $e->getMessage(), 0, $e);
src/pocketmine/level/generator/Flat.php:				$result[$cY] = [$b->getId(), $b->getDamage()];
src/pocketmine/level/generator/Flat.php:		$preset = explode(";", $this->preset);
src/pocketmine/level/generator/Flat.php:		$this->biome = (int) ($preset[2] ?? 1);
src/pocketmine/level/generator/Flat.php:		$this->structure = self::parseLayers($blocks);
src/pocketmine/level/generator/Flat.php:		$this->floorLevel = count($this->structure);
src/pocketmine/level/generator/Flat.php:		preg_match_all('#(([0-9a-z_]{1,})\(?([0-9a-z_ =:]{0,})\)?),?#', $options, $matches);
src/pocketmine/level/generator/Flat.php:			$this->options[$option] = $params;
src/pocketmine/level/generator/Flat.php:		$this->chunk = new Chunk(0, 0);
src/pocketmine/level/generator/Flat.php:		$this->chunk->setGenerated();
src/pocketmine/level/generator/Flat.php:				$this->chunk->setBiomeId($X, $Z, $this->biome);
src/pocketmine/level/generator/Flat.php:		$count = count($this->structure);
src/pocketmine/level/generator/Flat.php:			$subchunk = $this->chunk->getSubChunk($sy >> 4, true);
src/pocketmine/level/generator/Flat.php:			for($y = 0; $y < 16 and isset($this->structure[$y | $sy]); ++$y){
src/pocketmine/level/generator/Flat.php:				list($id, $meta) = $this->structure[$y | $sy];
src/pocketmine/level/generator/Flat.php:						$subchunk->setBlock($X, $y, $Z, $id, $meta);
src/pocketmine/level/generator/Flat.php:		$this->generateBaseChunk();
src/pocketmine/level/generator/Flat.php:		$chunk = clone $this->chunk;
src/pocketmine/level/generator/Flat.php:		$chunk->setX($chunkX);
src/pocketmine/level/generator/Flat.php:		$chunk->setZ($chunkZ);
src/pocketmine/level/generator/Flat.php:		$this->level->setChunk($chunkX, $chunkZ, $chunk);
src/pocketmine/level/generator/Flat.php:		$this->random->setSeed(0xdeadbeef ^ ($chunkX << 8) ^ $chunkZ ^ $this->level->getSeed());
src/pocketmine/level/generator/Flat.php:		foreach($this->populators as $populator){
src/pocketmine/level/generator/Flat.php:			$populator->populate($this->level, $chunkX, $chunkZ, $this->random);
src/pocketmine/level/generator/Flat.php:		return new Vector3(128, $this->floorLevel, 128);
src/pocketmine/level/generator/object/Tree.php:				if($random->nextBoundedInt(39) === 0){
src/pocketmine/level/generator/object/Tree.php:				/*if($random->nextRange(0, 9) === 0){
src/pocketmine/level/generator/object/Tree.php:		if($tree->canPlaceObject($level, $x, $y, $z, $random)){
src/pocketmine/level/generator/object/Tree.php:			$tree->placeObject($level, $x, $y, $z, $random);
src/pocketmine/level/generator/object/Tree.php:		for($yy = 0; $yy < $this->treeHeight + 3; ++$yy){
src/pocketmine/level/generator/object/Tree.php:			if($yy === 1 or $yy === $this->treeHeight){
src/pocketmine/level/generator/object/Tree.php:			for($xx = -$radiusToCheck; $xx < ($radiusToCheck + 1); ++$xx){
src/pocketmine/level/generator/object/Tree.php:				for($zz = -$radiusToCheck; $zz < ($radiusToCheck + 1); ++$zz){
src/pocketmine/level/generator/object/Tree.php:					if(!isset($this->overridable[$level->getBlockIdAt($x + $xx, $y + $yy, $z + $zz)])){
src/pocketmine/level/generator/object/Tree.php:		$this->placeTrunk($level, $x, $y, $z, $random, $this->treeHeight - 1);
src/pocketmine/level/generator/object/Tree.php:		for($yy = $y - 3 + $this->treeHeight; $yy <= $y + $this->treeHeight; ++$yy){
src/pocketmine/level/generator/object/Tree.php:			$yOff = $yy - ($y + $this->treeHeight);
src/pocketmine/level/generator/object/Tree.php:			$mid = (int) (1 - $yOff / 2);
src/pocketmine/level/generator/object/Tree.php:			for($xx = $x - $mid; $xx <= $x + $mid; ++$xx){
src/pocketmine/level/generator/object/Tree.php:				$xOff = abs($xx - $x);
src/pocketmine/level/generator/object/Tree.php:				for($zz = $z - $mid; $zz <= $z + $mid; ++$zz){
src/pocketmine/level/generator/object/Tree.php:					$zOff = abs($zz - $z);
src/pocketmine/level/generator/object/Tree.php:					if($xOff === $mid and $zOff === $mid and ($yOff === 0 or $random->nextBoundedInt(2) === 0)){
src/pocketmine/level/generator/object/Tree.php:					if(!BlockFactory::$solid[$level->getBlockIdAt($xx, $yy, $zz)]){
src/pocketmine/level/generator/object/Tree.php:						$level->setBlockIdAt($xx, $yy, $zz, $this->leafBlock);
src/pocketmine/level/generator/object/Tree.php:						$level->setBlockDataAt($xx, $yy, $zz, $this->type);
src/pocketmine/level/generator/object/Tree.php:		$level->setBlockIdAt($x, $y - 1, $z, Block::DIRT);
src/pocketmine/level/generator/object/Tree.php:			$blockId = $level->getBlockIdAt($x, $y + $yy, $z);
src/pocketmine/level/generator/object/Tree.php:			if(isset($this->overridable[$blockId])){
src/pocketmine/level/generator/object/Tree.php:				$level->setBlockIdAt($x, $y + $yy, $z, $this->trunkBlock);
src/pocketmine/level/generator/object/Tree.php:				$level->setBlockDataAt($x, $y + $yy, $z, $this->type);
src/pocketmine/level/generator/object/OreType.php:		$this->material = $material;
src/pocketmine/level/generator/object/OreType.php:		$this->clusterCount = $clusterCount;
src/pocketmine/level/generator/object/OreType.php:		$this->clusterSize = $clusterSize;
src/pocketmine/level/generator/object/OreType.php:		$this->maxHeight = $maxHeight;
src/pocketmine/level/generator/object/OreType.php:		$this->minHeight = $minHeight;
src/pocketmine/level/generator/object/Ore.php:		$this->type = $type;
src/pocketmine/level/generator/object/Ore.php:		$this->random = $random;
src/pocketmine/level/generator/object/Ore.php:		return $this->type;
src/pocketmine/level/generator/object/Ore.php:		return $level->getBlockIdAt($x, $y, $z) === Block::STONE;
src/pocketmine/level/generator/object/Ore.php:		$clusterSize = $this->type->clusterSize;
src/pocketmine/level/generator/object/Ore.php:		$angle = $this->random->nextFloat() * M_PI;
src/pocketmine/level/generator/object/Ore.php:		$offset = VectorMath::getDirection2D($angle)->multiply($clusterSize / 8);
src/pocketmine/level/generator/object/Ore.php:		$x1 = $x + 8 + $offset->x;
src/pocketmine/level/generator/object/Ore.php:		$x2 = $x + 8 - $offset->x;
src/pocketmine/level/generator/object/Ore.php:		$z1 = $z + 8 + $offset->y;
src/pocketmine/level/generator/object/Ore.php:		$z2 = $z + 8 - $offset->y;
src/pocketmine/level/generator/object/Ore.php:		$y1 = $y + $this->random->nextBoundedInt(3) + 2;
src/pocketmine/level/generator/object/Ore.php:		$y2 = $y + $this->random->nextBoundedInt(3) + 2;
src/pocketmine/level/generator/object/Ore.php:			$seedX = $x1 + ($x2 - $x1) * $count / $clusterSize;
src/pocketmine/level/generator/object/Ore.php:			$seedY = $y1 + ($y2 - $y1) * $count / $clusterSize;
src/pocketmine/level/generator/object/Ore.php:			$seedZ = $z1 + ($z2 - $z1) * $count / $clusterSize;
src/pocketmine/level/generator/object/Ore.php:			$size = ((sin($count * (M_PI / $clusterSize)) + 1) * $this->random->nextFloat() * $clusterSize / 16 + 1) / 2;
src/pocketmine/level/generator/object/Ore.php:			$startX = (int) ($seedX - $size);
src/pocketmine/level/generator/object/Ore.php:			$startY = (int) ($seedY - $size);
src/pocketmine/level/generator/object/Ore.php:			$startZ = (int) ($seedZ - $size);
src/pocketmine/level/generator/object/Ore.php:				$sizeX = ($xx + 0.5 - $seedX) / $size;
src/pocketmine/level/generator/object/Ore.php:						$sizeY = ($yy + 0.5 - $seedY) / $size;
src/pocketmine/level/generator/object/Ore.php:								$sizeZ = ($zz + 0.5 - $seedZ) / $size;
src/pocketmine/level/generator/object/Ore.php:								if(($sizeX + $sizeY + $sizeZ) < 1 and $level->getBlockIdAt($xx, $yy, $zz) === Block::STONE){
src/pocketmine/level/generator/object/Ore.php:									$level->setBlockIdAt($xx, $yy, $zz, $this->type->material->getId());
src/pocketmine/level/generator/object/Ore.php:									if($this->type->material->getDamage() !== 0){
src/pocketmine/level/generator/object/Ore.php:										$level->setBlockDataAt($xx, $yy, $zz, $this->type->material->getDamage());
src/pocketmine/level/generator/object/TallGrass.php:		$arrC = count($arr) - 1;
src/pocketmine/level/generator/object/TallGrass.php:			$x = $random->nextRange($pos->x - $radius, $pos->x + $radius);
src/pocketmine/level/generator/object/TallGrass.php:			$z = $random->nextRange($pos->z - $radius, $pos->z + $radius);
src/pocketmine/level/generator/object/TallGrass.php:			if($level->getBlockIdAt($x, $pos->y + 1, $z) === Block::AIR and $level->getBlockIdAt($x, $pos->y, $z) === Block::GRASS){
src/pocketmine/level/generator/object/TallGrass.php:				$t = $arr[$random->nextRange(0, $arrC)];
src/pocketmine/level/generator/object/TallGrass.php:				$level->setBlockIdAt($x, $pos->y + 1, $z, $t[0]);
src/pocketmine/level/generator/object/TallGrass.php:				$level->setBlockDataAt($x, $pos->y + 1, $z, $t[1]);
src/pocketmine/level/generator/object/JungleTree.php:		$this->trunkBlock = Block::LOG;
src/pocketmine/level/generator/object/JungleTree.php:		$this->leafBlock = Block::LEAVES;
src/pocketmine/level/generator/object/JungleTree.php:		$this->type = Wood::JUNGLE;
src/pocketmine/level/generator/object/JungleTree.php:		$this->treeHeight = 8;
src/pocketmine/level/generator/object/Pond.php:		$this->type = $type;
src/pocketmine/level/generator/object/Pond.php:		$this->random = $random;
src/pocketmine/level/generator/object/BirchTree.php:		$this->trunkBlock = Block::LOG;
src/pocketmine/level/generator/object/BirchTree.php:		$this->leafBlock = Block::LEAVES;
src/pocketmine/level/generator/object/BirchTree.php:		$this->type = Wood::BIRCH;
src/pocketmine/level/generator/object/BirchTree.php:		$this->superBirch = $superBirch;
src/pocketmine/level/generator/object/BirchTree.php:		$this->treeHeight = $random->nextBoundedInt(3) + 5;
src/pocketmine/level/generator/object/BirchTree.php:		if($this->superBirch){
src/pocketmine/level/generator/object/BirchTree.php:			$this->treeHeight += 5;
src/pocketmine/level/generator/object/OakTree.php:		$this->trunkBlock = Block::LOG;
src/pocketmine/level/generator/object/OakTree.php:		$this->leafBlock = Block::LEAVES;
src/pocketmine/level/generator/object/OakTree.php:		$this->type = Wood::OAK;
src/pocketmine/level/generator/object/OakTree.php:		$this->treeHeight = $random->nextBoundedInt(3) + 4;
src/pocketmine/level/generator/object/SpruceTree.php:		$this->trunkBlock = Block::LOG;
src/pocketmine/level/generator/object/SpruceTree.php:		$this->leafBlock = Block::LEAVES;
src/pocketmine/level/generator/object/SpruceTree.php:		$this->type = Wood::SPRUCE;
src/pocketmine/level/generator/object/SpruceTree.php:		$this->treeHeight = 10;
src/pocketmine/level/generator/object/SpruceTree.php:		$this->treeHeight = $random->nextBoundedInt(4) + 6;
src/pocketmine/level/generator/object/SpruceTree.php:		$topSize = $this->treeHeight - (1 + $random->nextBoundedInt(2));
src/pocketmine/level/generator/object/SpruceTree.php:		$lRadius = 2 + $random->nextBoundedInt(2);
src/pocketmine/level/generator/object/SpruceTree.php:		$this->placeTrunk($level, $x, $y, $z, $random, $this->treeHeight - $random->nextBoundedInt(3));
src/pocketmine/level/generator/object/SpruceTree.php:		$radius = $random->nextBoundedInt(2);
src/pocketmine/level/generator/object/SpruceTree.php:			$yyy = $y + $this->treeHeight - $yy;
src/pocketmine/level/generator/object/SpruceTree.php:			for($xx = $x - $radius; $xx <= $x + $radius; ++$xx){
src/pocketmine/level/generator/object/SpruceTree.php:				$xOff = abs($xx - $x);
src/pocketmine/level/generator/object/SpruceTree.php:				for($zz = $z - $radius; $zz <= $z + $radius; ++$zz){
src/pocketmine/level/generator/object/SpruceTree.php:					$zOff = abs($zz - $z);
src/pocketmine/level/generator/object/SpruceTree.php:					if(!BlockFactory::$solid[$level->getBlockIdAt($xx, $yyy, $zz)]){
src/pocketmine/level/generator/object/SpruceTree.php:						$level->setBlockIdAt($xx, $yyy, $zz, $this->leafBlock);
src/pocketmine/level/generator/object/SpruceTree.php:						$level->setBlockDataAt($xx, $yyy, $zz, $this->type);
src/pocketmine/level/generator/biome/BiomeSelector.php:	 * @phpstan-var \SplFixedArray<Biome>
src/pocketmine/level/generator/biome/BiomeSelector.php:		$this->temperature = new Simplex($random, 2, 1 / 16, 1 / 512);
src/pocketmine/level/generator/biome/BiomeSelector.php:		$this->rainfall = new Simplex($random, 2, 1 / 16, 1 / 512);
src/pocketmine/level/generator/biome/BiomeSelector.php:	 * @return int biome ID 0-255
src/pocketmine/level/generator/biome/BiomeSelector.php:		$this->map = new \SplFixedArray(64 * 64);
src/pocketmine/level/generator/biome/BiomeSelector.php:				$biome = Biome::getBiome($this->lookup($i / 63, $j / 63));
src/pocketmine/level/generator/biome/BiomeSelector.php:					throw new \RuntimeException("Unknown biome returned by selector with ID " . $biome->getId());
src/pocketmine/level/generator/biome/BiomeSelector.php:				$this->map[$i + ($j << 6)] = $biome;
src/pocketmine/level/generator/biome/BiomeSelector.php:		return ($this->temperature->noise2D($x, $z, true) + 1) / 2;
src/pocketmine/level/generator/biome/BiomeSelector.php:		return ($this->rainfall->noise2D($x, $z, true) + 1) / 2;
src/pocketmine/level/generator/biome/BiomeSelector.php:		$temperature = (int) ($this->getTemperature($x, $z) * 63);
src/pocketmine/level/generator/biome/BiomeSelector.php:		$rainfall = (int) ($this->getRainfall($x, $z) * 63);
src/pocketmine/level/generator/biome/BiomeSelector.php:		return $this->map[$temperature + ($rainfall << 6)];
src/pocketmine/level/generator/Generator.php:		if($seed === ""){ //empty seed should cause a random seed to be selected - can't use 0 here because 0 is a valid seed
src/pocketmine/level/generator/Generator.php:		}elseif(preg_match('/^-?\d+$/', $seed) === 1){ //this avoids treating seeds like "404.4" as integer seeds
src/pocketmine/level/generator/Generator.php:	 * @phpstan-param array<string, mixed> $settings
src/pocketmine/level/generator/Generator.php:		$this->level = $level;
src/pocketmine/level/generator/Generator.php:		$this->random = $random;
src/pocketmine/level/generator/Generator.php:	 * @phpstan-return array<string, mixed>
src/pocketmine/level/generator/normal/Normal.php:	 * @phpstan-param array<string, mixed> $options
src/pocketmine/level/generator/normal/Normal.php:		for($sx = -self::$SMOOTH_SIZE; $sx <= self::$SMOOTH_SIZE; ++$sx){
src/pocketmine/level/generator/normal/Normal.php:			for($sz = -self::$SMOOTH_SIZE; $sz <= self::$SMOOTH_SIZE; ++$sz){
src/pocketmine/level/generator/normal/Normal.php:				self::$GAUSSIAN_KERNEL[$sx + self::$SMOOTH_SIZE][$sz + self::$SMOOTH_SIZE] = $bellHeight * exp(-($bx * $bx + $bz * $bz) / 2);
src/pocketmine/level/generator/normal/Normal.php:		$hash = $x * 2345803 ^ $z * 9236449 ^ $this->level->getSeed();
src/pocketmine/level/generator/normal/Normal.php:		return $this->selector->pickBiome($x + $xNoise - 1, $z + $zNoise - 1);
src/pocketmine/level/generator/normal/Normal.php:		$this->random->setSeed($this->level->getSeed());
src/pocketmine/level/generator/normal/Normal.php:		$this->noiseBase = new Simplex($this->random, 4, 1 / 4, 1 / 32);
src/pocketmine/level/generator/normal/Normal.php:		$this->random->setSeed($this->level->getSeed());
src/pocketmine/level/generator/normal/Normal.php:		$this->selector = new class($this->random) extends BiomeSelector{
src/pocketmine/level/generator/normal/Normal.php:		$this->selector->recalculate();
src/pocketmine/level/generator/normal/Normal.php:		$this->generationPopulators[] = $cover;
src/pocketmine/level/generator/normal/Normal.php:		$ores->setOreTypes([
src/pocketmine/level/generator/normal/Normal.php:		$this->populators[] = $ores;
src/pocketmine/level/generator/normal/Normal.php:		$this->random->setSeed(0xdeadbeef ^ ($chunkX << 8) ^ $chunkZ ^ $this->level->getSeed());
src/pocketmine/level/generator/normal/Normal.php:		$noise = $this->noiseBase->getFastNoise3D(16, 128, 16, 4, 8, 4, $chunkX * 16, 0, $chunkZ * 16);
src/pocketmine/level/generator/normal/Normal.php:		$chunk = $this->level->getChunk($chunkX, $chunkZ);
src/pocketmine/level/generator/normal/Normal.php:				$biome = $this->pickBiome($chunkX * 16 + $x, $chunkZ * 16 + $z);
src/pocketmine/level/generator/normal/Normal.php:				$chunk->setBiomeId($x, $z, $biome->getId());
src/pocketmine/level/generator/normal/Normal.php:				for($sx = -self::$SMOOTH_SIZE; $sx <= self::$SMOOTH_SIZE; ++$sx){
src/pocketmine/level/generator/normal/Normal.php:					for($sz = -self::$SMOOTH_SIZE; $sz <= self::$SMOOTH_SIZE; ++$sz){
src/pocketmine/level/generator/normal/Normal.php:								$biomeCache[$index] = $adjacent = $this->pickBiome($chunkX * 16 + $x + $sx, $chunkZ * 16 + $z + $sz);
src/pocketmine/level/generator/normal/Normal.php:						$minSum += ($adjacent->getMinElevation() - 1) * $weight;
src/pocketmine/level/generator/normal/Normal.php:						$maxSum += $adjacent->getMaxElevation() * $weight;
src/pocketmine/level/generator/normal/Normal.php:				$smoothHeight = ($maxSum - $minSum) / 2;
src/pocketmine/level/generator/normal/Normal.php:						$chunk->setBlockId($x, $y, $z, Block::BEDROCK);
src/pocketmine/level/generator/normal/Normal.php:					$noiseValue = $noise[$x][$z][$y] - 1 / $smoothHeight * ($y - $smoothHeight - $minSum);
src/pocketmine/level/generator/normal/Normal.php:						$chunk->setBlockId($x, $y, $z, Block::STONE);
src/pocketmine/level/generator/normal/Normal.php:					}elseif($y <= $this->waterHeight){
src/pocketmine/level/generator/normal/Normal.php:						$chunk->setBlockId($x, $y, $z, Block::STILL_WATER);
src/pocketmine/level/generator/normal/Normal.php:		foreach($this->generationPopulators as $populator){
src/pocketmine/level/generator/normal/Normal.php:			$populator->populate($this->level, $chunkX, $chunkZ, $this->random);
src/pocketmine/level/generator/normal/Normal.php:		$this->random->setSeed(0xdeadbeef ^ ($chunkX << 8) ^ $chunkZ ^ $this->level->getSeed());
src/pocketmine/level/generator/normal/Normal.php:		foreach($this->populators as $populator){
src/pocketmine/level/generator/normal/Normal.php:			$populator->populate($this->level, $chunkX, $chunkZ, $this->random);
src/pocketmine/level/generator/normal/Normal.php:		$chunk = $this->level->getChunk($chunkX, $chunkZ);
src/pocketmine/level/generator/normal/Normal.php:		$biome = Biome::getBiome($chunk->getBiomeId(7, 7));
src/pocketmine/level/generator/normal/Normal.php:		$biome->populateChunk($this->level, $chunkX, $chunkZ, $this->random);
src/pocketmine/level/generator/populator/Tree.php:		$this->type = $type;
src/pocketmine/level/generator/populator/Tree.php:		$this->randomAmount = $amount;
src/pocketmine/level/generator/populator/Tree.php:		$this->baseAmount = $amount;
src/pocketmine/level/generator/populator/Tree.php:		$this->level = $level;
src/pocketmine/level/generator/populator/Tree.php:		$amount = $random->nextRange(0, $this->randomAmount) + $this->baseAmount;
src/pocketmine/level/generator/populator/Tree.php:			$x = $random->nextRange($chunkX << 4, ($chunkX << 4) + 15);
src/pocketmine/level/generator/populator/Tree.php:			$z = $random->nextRange($chunkZ << 4, ($chunkZ << 4) + 15);
src/pocketmine/level/generator/populator/Tree.php:			$y = $this->getHighestWorkableBlock($x, $z);
src/pocketmine/level/generator/populator/Tree.php:			if($y === -1){
src/pocketmine/level/generator/populator/Tree.php:			ObjectTree::growTree($this->level, $x, $y, $z, $random, $this->type);
src/pocketmine/level/generator/populator/Tree.php:		for($y = 127; $y >= 0; --$y){
src/pocketmine/level/generator/populator/Tree.php:			$b = $this->level->getBlockIdAt($x, $y, $z);
src/pocketmine/level/generator/populator/Tree.php:				return -1;
src/pocketmine/level/generator/populator/Tree.php:		return -1;
src/pocketmine/level/generator/populator/GroundCover.php:		$chunk = $level->getChunk($chunkX, $chunkZ);
src/pocketmine/level/generator/populator/GroundCover.php:				$biome = Biome::getBiome($chunk->getBiomeId($x, $z));
src/pocketmine/level/generator/populator/GroundCover.php:				$cover = $biome->getGroundCover();
src/pocketmine/level/generator/populator/GroundCover.php:					if(!$cover[0]->isSolid()){
src/pocketmine/level/generator/populator/GroundCover.php:					$column = $chunk->getBlockIdColumn($x, $z);
src/pocketmine/level/generator/populator/GroundCover.php:					for(; $startY > 0; --$startY){
src/pocketmine/level/generator/populator/GroundCover.php:						if($column[$startY] !== "\x00" and !BlockFactory::get(ord($column[$startY]))->isTransparent()){
src/pocketmine/level/generator/populator/GroundCover.php:					$endY = $startY - count($cover);
src/pocketmine/level/generator/populator/GroundCover.php:					for($y = $startY; $y > $endY and $y >= 0; --$y){
src/pocketmine/level/generator/populator/GroundCover.php:						$b = $cover[$startY - $y];
src/pocketmine/level/generator/populator/GroundCover.php:						if($column[$y] === "\x00" and $b->isSolid()){
src/pocketmine/level/generator/populator/GroundCover.php:						if($b->canBeFlowedInto() and BlockFactory::get(ord($column[$y])) instanceof Liquid){
src/pocketmine/level/generator/populator/GroundCover.php:						if($b->getDamage() === 0){
src/pocketmine/level/generator/populator/GroundCover.php:							$chunk->setBlockId($x, $y, $z, $b->getId());
src/pocketmine/level/generator/populator/GroundCover.php:							$chunk->setBlock($x, $y, $z, $b->getId(), $b->getDamage());
src/pocketmine/level/generator/populator/Ore.php:		foreach($this->oreTypes as $type){
src/pocketmine/level/generator/populator/Ore.php:			for($i = 0; $i < $ore->type->clusterCount; ++$i){
src/pocketmine/level/generator/populator/Ore.php:				$x = $random->nextRange($chunkX << 4, ($chunkX << 4) + 15);
src/pocketmine/level/generator/populator/Ore.php:				$y = $random->nextRange($ore->type->minHeight, $ore->type->maxHeight);
src/pocketmine/level/generator/populator/Ore.php:				$z = $random->nextRange($chunkZ << 4, ($chunkZ << 4) + 15);
src/pocketmine/level/generator/populator/Ore.php:				if($ore->canPlaceObject($level, $x, $y, $z)){
src/pocketmine/level/generator/populator/Ore.php:					$ore->placeObject($level, $x, $y, $z);
src/pocketmine/level/generator/populator/Ore.php:		$this->oreTypes = $types;
src/pocketmine/level/generator/populator/TallGrass.php:		$this->randomAmount = $amount;
src/pocketmine/level/generator/populator/TallGrass.php:		$this->baseAmount = $amount;
src/pocketmine/level/generator/populator/TallGrass.php:		$this->level = $level;
src/pocketmine/level/generator/populator/TallGrass.php:		$amount = $random->nextRange(0, $this->randomAmount) + $this->baseAmount;
src/pocketmine/level/generator/populator/TallGrass.php:			$x = $random->nextRange($chunkX * 16, $chunkX * 16 + 15);
src/pocketmine/level/generator/populator/TallGrass.php:			$z = $random->nextRange($chunkZ * 16, $chunkZ * 16 + 15);
src/pocketmine/level/generator/populator/TallGrass.php:			$y = $this->getHighestWorkableBlock($x, $z);
src/pocketmine/level/generator/populator/TallGrass.php:			if($y !== -1 and $this->canTallGrassStay($x, $y, $z)){
src/pocketmine/level/generator/populator/TallGrass.php:				$this->level->setBlockIdAt($x, $y, $z, Block::TALL_GRASS);
src/pocketmine/level/generator/populator/TallGrass.php:				$this->level->setBlockDataAt($x, $y, $z, 1);
src/pocketmine/level/generator/populator/TallGrass.php:		$b = $this->level->getBlockIdAt($x, $y, $z);
src/pocketmine/level/generator/populator/TallGrass.php:		return ($b === Block::AIR or $b === Block::SNOW_LAYER) and $this->level->getBlockIdAt($x, $y - 1, $z) === Block::GRASS;
src/pocketmine/level/generator/populator/TallGrass.php:		for($y = 127; $y >= 0; --$y){
src/pocketmine/level/generator/populator/TallGrass.php:			$b = $this->level->getBlockIdAt($x, $y, $z);
src/pocketmine/level/generator/populator/TallGrass.php:		return -1;
src/pocketmine/level/generator/populator/Pond.php:		if($random->nextRange(0, $this->waterOdd) === 0){
src/pocketmine/level/generator/populator/Pond.php:			$x = $random->nextRange($chunkX << 4, ($chunkX << 4) + 16);
src/pocketmine/level/generator/populator/Pond.php:			$y = $random->nextBoundedInt(128);
src/pocketmine/level/generator/populator/Pond.php:			$z = $random->nextRange($chunkZ << 4, ($chunkZ << 4) + 16);
src/pocketmine/level/generator/populator/Pond.php:			if($pond->canPlaceObject($level, $v = new Vector3($x, $y, $z))){
src/pocketmine/level/generator/populator/Pond.php:				$pond->placeObject($level, $v);
src/pocketmine/level/generator/populator/Pond.php:		$this->waterOdd = $waterOdd;
src/pocketmine/level/generator/populator/Pond.php:		$this->lavaOdd = $lavaOdd;
src/pocketmine/level/generator/populator/Pond.php:		$this->lavaSurfaceOdd = $lavaSurfaceOdd;
src/pocketmine/level/generator/noise/Perlin.php:		[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],
src/pocketmine/level/generator/noise/Perlin.php:		[1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],
src/pocketmine/level/generator/noise/Perlin.php:		[0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]
src/pocketmine/level/generator/noise/Perlin.php:		$this->octaves = $octaves;
src/pocketmine/level/generator/noise/Perlin.php:		$this->persistence = $persistence;
src/pocketmine/level/generator/noise/Perlin.php:		$this->expansion = $expansion;
src/pocketmine/level/generator/noise/Perlin.php:		$this->offsetX = $random->nextFloat() * 256;
src/pocketmine/level/generator/noise/Perlin.php:		$this->offsetY = $random->nextFloat() * 256;
src/pocketmine/level/generator/noise/Perlin.php:		$this->offsetZ = $random->nextFloat() * 256;
src/pocketmine/level/generator/noise/Perlin.php:			$this->perm[$i] = 0;
src/pocketmine/level/generator/noise/Perlin.php:			$this->perm[$i] = $random->nextBoundedInt(256);
src/pocketmine/level/generator/noise/Perlin.php:			$pos = $random->nextBoundedInt(256 - $i) + $i;
src/pocketmine/level/generator/noise/Perlin.php:			$old = $this->perm[$i];
src/pocketmine/level/generator/noise/Perlin.php:			$this->perm[$i] = $this->perm[$pos];
src/pocketmine/level/generator/noise/Perlin.php:			$this->perm[$pos] = $old;
src/pocketmine/level/generator/noise/Perlin.php:			$this->perm[$i + 256] = $this->perm[$i];
src/pocketmine/level/generator/noise/Perlin.php:		$x += $this->offsetX;
src/pocketmine/level/generator/noise/Perlin.php:		$y += $this->offsetY;
src/pocketmine/level/generator/noise/Perlin.php:		$z += $this->offsetZ;
src/pocketmine/level/generator/noise/Perlin.php:		$x -= $floorX;
src/pocketmine/level/generator/noise/Perlin.php:		$y -= $floorY;
src/pocketmine/level/generator/noise/Perlin.php:		$z -= $floorZ;
src/pocketmine/level/generator/noise/Perlin.php:		$fX = $x * $x * $x * ($x * ($x * 6 - 15) + 10);
src/pocketmine/level/generator/noise/Perlin.php:		$fY = $y * $y * $y * ($y * ($y * 6 - 15) + 10);
src/pocketmine/level/generator/noise/Perlin.php:		$fZ = $z * $z * $z * ($z * ($z * 6 - 15) + 10);
src/pocketmine/level/generator/noise/Perlin.php:		$A = $this->perm[$X] + $Y;
src/pocketmine/level/generator/noise/Perlin.php:		$B = $this->perm[$X + 1] + $Y;
src/pocketmine/level/generator/noise/Perlin.php:		$AA = $this->perm[$A] + $Z;
src/pocketmine/level/generator/noise/Perlin.php:		$AB = $this->perm[$A + 1] + $Z;
src/pocketmine/level/generator/noise/Perlin.php:		$BA = $this->perm[$B] + $Z;
src/pocketmine/level/generator/noise/Perlin.php:		$BB = $this->perm[$B + 1] + $Z;
src/pocketmine/level/generator/noise/Perlin.php:		$AA1 = self::grad($this->perm[$AA], $x, $y, $z);
src/pocketmine/level/generator/noise/Perlin.php:		$BA1 = self::grad($this->perm[$BA], $x - 1, $y, $z);
src/pocketmine/level/generator/noise/Perlin.php:		$AB1 = self::grad($this->perm[$AB], $x, $y - 1, $z);
src/pocketmine/level/generator/noise/Perlin.php:		$BB1 = self::grad($this->perm[$BB], $x - 1, $y - 1, $z);
src/pocketmine/level/generator/noise/Perlin.php:		$AA2 = self::grad($this->perm[$AA + 1], $x, $y, $z - 1);
src/pocketmine/level/generator/noise/Perlin.php:		$BA2 = self::grad($this->perm[$BA + 1], $x - 1, $y, $z - 1);
src/pocketmine/level/generator/noise/Perlin.php:		$AB2 = self::grad($this->perm[$AB + 1], $x, $y - 1, $z - 1);
src/pocketmine/level/generator/noise/Perlin.php:		$BB2 = self::grad($this->perm[$BB + 1], $x - 1, $y - 1, $z - 1);
src/pocketmine/level/generator/noise/Perlin.php:		$xLerp11 = $AA1 + $fX * ($BA1 - $AA1);
src/pocketmine/level/generator/noise/Perlin.php:		$zLerp1 = $xLerp11 + $fY * ($AB1 + $fX * ($BB1 - $AB1) - $xLerp11);
src/pocketmine/level/generator/noise/Perlin.php:		$xLerp21 = $AA2 + $fX * ($BA2 - $AA2);
src/pocketmine/level/generator/noise/Perlin.php:		return $zLerp1 + $fZ * ($xLerp21 + $fY * ($AB2 + $fX * ($BB2 - $AB2) - $xLerp21) - $zLerp1);
src/pocketmine/level/generator/noise/Perlin.php:					self::grad($this->perm[$AA], $x, $y, $z),
src/pocketmine/level/generator/noise/Perlin.php:					self::grad($this->perm[$BA], $x - 1, $y, $z)
src/pocketmine/level/generator/noise/Perlin.php:					self::grad($this->perm[$AB], $x, $y - 1, $z),
src/pocketmine/level/generator/noise/Perlin.php:					self::grad($this->perm[$BB], $x - 1, $y - 1, $z)
src/pocketmine/level/generator/noise/Perlin.php:					self::grad($this->perm[$AA + 1], $x, $y, $z - 1),
src/pocketmine/level/generator/noise/Perlin.php:					self::grad($this->perm[$BA + 1], $x - 1, $y, $z - 1)
src/pocketmine/level/generator/noise/Perlin.php:					self::grad($this->perm[$AB + 1], $x, $y - 1, $z - 1),
src/pocketmine/level/generator/noise/Perlin.php:					self::grad($this->perm[$BB + 1], $x - 1, $y - 1, $z - 1)
src/pocketmine/level/generator/noise/Perlin.php:		return $this->getNoise3D($x, $y, 0);
src/pocketmine/level/generator/noise/Noise.php:		return $x >= 0 ? (int) $x : (int) ($x - 1);
src/pocketmine/level/generator/noise/Noise.php:		return $x * $x * $x * ($x * ($x * 6 - 15) + 10);
src/pocketmine/level/generator/noise/Noise.php:		return $y + $x * ($z - $y);
src/pocketmine/level/generator/noise/Noise.php:		return (($x2 - $x) / ($x2 - $x1)) * $q0 + (($x - $x1) / ($x2 - $x1)) * $q1;
src/pocketmine/level/generator/noise/Noise.php:		$dx1 = (($x2 - $x) / ($x2 - $x1));
src/pocketmine/level/generator/noise/Noise.php:		$dx2 = (($x - $x1) / ($x2 - $x1));
src/pocketmine/level/generator/noise/Noise.php:		return (($y2 - $y) / ($y2 - $y1)) * (
src/pocketmine/level/generator/noise/Noise.php:		) + (($y - $y1) / ($y2 - $y1)) * (
src/pocketmine/level/generator/noise/Noise.php:		$dx1 = (($x2 - $x) / ($x2 - $x1));
src/pocketmine/level/generator/noise/Noise.php:		$dx2 = (($x - $x1) / ($x2 - $x1));
src/pocketmine/level/generator/noise/Noise.php:		$dy1 = (($y2 - $y) / ($y2 - $y1));
src/pocketmine/level/generator/noise/Noise.php:		$dy2 = (($y - $y1) / ($y2 - $y1));
src/pocketmine/level/generator/noise/Noise.php:		return (($z2 - $z) / ($z2 - $z1)) * (
src/pocketmine/level/generator/noise/Noise.php:		) + (($z - $z1) / ($z2 - $z1)) * (
src/pocketmine/level/generator/noise/Noise.php:		return (($hash & 1) === 0 ? $u : -$u) + (($hash & 2) === 0 ? $v : -$v);
src/pocketmine/level/generator/noise/Noise.php:		$x *= $this->expansion;
src/pocketmine/level/generator/noise/Noise.php:		$z *= $this->expansion;
src/pocketmine/level/generator/noise/Noise.php:		for($i = 0; $i < $this->octaves; ++$i){
src/pocketmine/level/generator/noise/Noise.php:			$result += $this->getNoise2D($x * $freq, $z * $freq) * $amp;
src/pocketmine/level/generator/noise/Noise.php:			$amp *= $this->persistence;
src/pocketmine/level/generator/noise/Noise.php:		$x *= $this->expansion;
src/pocketmine/level/generator/noise/Noise.php:		$y *= $this->expansion;
src/pocketmine/level/generator/noise/Noise.php:		$z *= $this->expansion;
src/pocketmine/level/generator/noise/Noise.php:		for($i = 0; $i < $this->octaves; ++$i){
src/pocketmine/level/generator/noise/Noise.php:			$result += $this->getNoise3D($x * $freq, $y * $freq, $z * $freq) * $amp;
src/pocketmine/level/generator/noise/Noise.php:			$amp *= $this->persistence;
src/pocketmine/level/generator/noise/Noise.php:	 * @phpstan-return \SplFixedArray<float>
src/pocketmine/level/generator/noise/Noise.php:			$noiseArray[$xx] = $this->noise3D($xx + $x, $y, $z);
src/pocketmine/level/generator/noise/Noise.php:	 * @phpstan-return \SplFixedArray<\SplFixedArray<float>>
src/pocketmine/level/generator/noise/Noise.php:				$noiseArray[$xx][$zz] = $this->noise3D($x + $xx, $y, $z + $zz);
src/pocketmine/level/generator/noise/Noise.php:					$noiseArray[$xx][$zz][$yy] = $this->noise3D($x + $xx, $y + $yy, $z + $zz, true);
src/pocketmine/level/generator/noise/Noise.php:						$dx1 = (($nnx - $xx) / ($nnx - $nx));
src/pocketmine/level/generator/noise/Noise.php:						$dx2 = (($xx - $nx) / ($nnx - $nx));
src/pocketmine/level/generator/noise/Noise.php:						$dy1 = (($nny - $yy) / ($nny - $ny));
src/pocketmine/level/generator/noise/Noise.php:						$dy2 = (($yy - $ny) / ($nny - $ny));
src/pocketmine/level/generator/noise/Noise.php:						$noiseArray[$xx][$zz][$yy] = (($nnz - $zz) / ($nnz - $nz)) * (
src/pocketmine/level/generator/noise/Noise.php:							) + (($zz - $nz) / ($nnz - $nz)) * (
src/pocketmine/level/generator/noise/Noise.php:		$this->offsetX = $x;
src/pocketmine/level/generator/noise/Noise.php:		$this->offsetY = $y;
src/pocketmine/level/generator/noise/Noise.php:		$this->offsetZ = $z;
src/pocketmine/level/generator/noise/Simplex.php: * Generates simplex-based noise.
src/pocketmine/level/generator/noise/Simplex.php:	protected static $grad4 = [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1],
src/pocketmine/level/generator/noise/Simplex.php:		[0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1],
src/pocketmine/level/generator/noise/Simplex.php:		[1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1],
src/pocketmine/level/generator/noise/Simplex.php:		[-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1],
src/pocketmine/level/generator/noise/Simplex.php:		[1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1],
src/pocketmine/level/generator/noise/Simplex.php:		[-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1],
src/pocketmine/level/generator/noise/Simplex.php:		[1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0],
src/pocketmine/level/generator/noise/Simplex.php:		[-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]];
src/pocketmine/level/generator/noise/Simplex.php:		$this->offsetW = $random->nextFloat() * 256;
src/pocketmine/level/generator/noise/Simplex.php:		self::$F2 = 0.5 * (self::$SQRT_3 - 1);
src/pocketmine/level/generator/noise/Simplex.php:		self::$G2 = (3 - self::$SQRT_3) / 6;
src/pocketmine/level/generator/noise/Simplex.php:		self::$G22 = self::$G2 * 2.0 - 1;
src/pocketmine/level/generator/noise/Simplex.php:		self::$F4 = (self::$SQRT_5 - 1.0) / 4.0;
src/pocketmine/level/generator/noise/Simplex.php:		self::$G4 = (5.0 - self::$SQRT_5) / 20.0;
src/pocketmine/level/generator/noise/Simplex.php:		self::$G44 = self::$G4 * 4.0 - 1.0;
src/pocketmine/level/generator/noise/Simplex.php:		$x += $this->offsetX;
src/pocketmine/level/generator/noise/Simplex.php:		$y += $this->offsetY;
src/pocketmine/level/generator/noise/Simplex.php:		$z += $this->offsetZ;
src/pocketmine/level/generator/noise/Simplex.php:		$x0 = $x - ($i - $t); // The x,y,z distances from the cell origin
src/pocketmine/level/generator/noise/Simplex.php:		$y0 = $y - ($j - $t);
src/pocketmine/level/generator/noise/Simplex.php:		$z0 = $z - ($k - $t);
src/pocketmine/level/generator/noise/Simplex.php:		// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),
src/pocketmine/level/generator/noise/Simplex.php:		// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and
src/pocketmine/level/generator/noise/Simplex.php:		// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where
src/pocketmine/level/generator/noise/Simplex.php:		$x1 = $x0 - $i1 + self::$G3; // Offsets for second corner in (x,y,z) coords
src/pocketmine/level/generator/noise/Simplex.php:		$y1 = $y0 - $j1 + self::$G3;
src/pocketmine/level/generator/noise/Simplex.php:		$z1 = $z0 - $k1 + self::$G3;
src/pocketmine/level/generator/noise/Simplex.php:		$x2 = $x0 - $i2 + 2.0 * self::$G3; // Offsets for third corner in (x,y,z) coords
src/pocketmine/level/generator/noise/Simplex.php:		$y2 = $y0 - $j2 + 2.0 * self::$G3;
src/pocketmine/level/generator/noise/Simplex.php:		$z2 = $z0 - $k2 + 2.0 * self::$G3;
src/pocketmine/level/generator/noise/Simplex.php:		$x3 = $x0 - 1.0 + 3.0 * self::$G3; // Offsets for last corner in (x,y,z) coords
src/pocketmine/level/generator/noise/Simplex.php:		$y3 = $y0 - 1.0 + 3.0 * self::$G3;
src/pocketmine/level/generator/noise/Simplex.php:		$z3 = $z0 - 1.0 + 3.0 * self::$G3;
src/pocketmine/level/generator/noise/Simplex.php:		$t0 = 0.6 - $x0 * $x0 - $y0 * $y0 - $z0 * $z0;
src/pocketmine/level/generator/noise/Simplex.php:			$gi0 = self::$grad3[$this->perm[$ii + $this->perm[$jj + $this->perm[$kk]]] % 12];
src/pocketmine/level/generator/noise/Simplex.php:		$t1 = 0.6 - $x1 * $x1 - $y1 * $y1 - $z1 * $z1;
src/pocketmine/level/generator/noise/Simplex.php:			$gi1 = self::$grad3[$this->perm[$ii + $i1 + $this->perm[$jj + $j1 + $this->perm[$kk + $k1]]] % 12];
src/pocketmine/level/generator/noise/Simplex.php:		$t2 = 0.6 - $x2 * $x2 - $y2 * $y2 - $z2 * $z2;
src/pocketmine/level/generator/noise/Simplex.php:			$gi2 = self::$grad3[$this->perm[$ii + $i2 + $this->perm[$jj + $j2 + $this->perm[$kk + $k2]]] % 12];
src/pocketmine/level/generator/noise/Simplex.php:		$t3 = 0.6 - $x3 * $x3 - $y3 * $y3 - $z3 * $z3;
src/pocketmine/level/generator/noise/Simplex.php:			$gi3 = self::$grad3[$this->perm[$ii + 1 + $this->perm[$jj + 1 + $this->perm[$kk + 1]]] % 12];
src/pocketmine/level/generator/noise/Simplex.php:		// The result is scaled to stay just inside [-1,1]
src/pocketmine/level/generator/noise/Simplex.php:		$x += $this->offsetX;
src/pocketmine/level/generator/noise/Simplex.php:		$y += $this->offsetY;
src/pocketmine/level/generator/noise/Simplex.php:		$x0 = $x - ($i - $t); // The x,y distances from the cell origin
src/pocketmine/level/generator/noise/Simplex.php:		$y0 = $y - ($j - $t);
src/pocketmine/level/generator/noise/Simplex.php:		} // lower triangle, XY order: (0,0)->(1,0)->(1,1)
src/pocketmine/level/generator/noise/Simplex.php:		// upper triangle, YX order: (0,0)->(0,1)->(1,1)
src/pocketmine/level/generator/noise/Simplex.php:		// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
src/pocketmine/level/generator/noise/Simplex.php:		// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
src/pocketmine/level/generator/noise/Simplex.php:		// c = (3-sqrt(3))/6
src/pocketmine/level/generator/noise/Simplex.php:		$x1 = $x0 - $i1 + self::$G2; // Offsets for middle corner in (x,y) unskewed coords
src/pocketmine/level/generator/noise/Simplex.php:		$y1 = $y0 - $j1 + self::$G2;
src/pocketmine/level/generator/noise/Simplex.php:		$t0 = 0.5 - $x0 * $x0 - $y0 * $y0;
src/pocketmine/level/generator/noise/Simplex.php:			$gi0 = self::$grad3[$this->perm[$ii + $this->perm[$jj]] % 12];
src/pocketmine/level/generator/noise/Simplex.php:		$t1 = 0.5 - $x1 * $x1 - $y1 * $y1;
src/pocketmine/level/generator/noise/Simplex.php:			$gi1 = self::$grad3[$this->perm[$ii + $i1 + $this->perm[$jj + $j1]] % 12];
src/pocketmine/level/generator/noise/Simplex.php:		$t2 = 0.5 - $x2 * $x2 - $y2 * $y2;
src/pocketmine/level/generator/noise/Simplex.php:			$gi2 = self::$grad3[$this->perm[$ii + 1 + $this->perm[$jj + 1]] % 12];
src/pocketmine/level/generator/noise/Simplex.php:		// The result is scaled to return values in the interval [-1,1].
src/pocketmine/level/generator/noise/Simplex.php:	 * @return float Noise at given location, from range -1 to 1
src/pocketmine/level/generator/noise/Simplex.php:		X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space
src/pocketmine/level/generator/noise/Simplex.php:		Y0 = j - t;
src/pocketmine/level/generator/noise/Simplex.php:		Z0 = k - t;
src/pocketmine/level/generator/noise/Simplex.php:		W0 = l - t;
src/pocketmine/level/generator/noise/Simplex.php:		x0 = x - X0; // The x,y,z,w distances from the cell origin
src/pocketmine/level/generator/noise/Simplex.php:		y0 = y - Y0;
src/pocketmine/level/generator/noise/Simplex.php:		z0 = z - Z0;
src/pocketmine/level/generator/noise/Simplex.php:		w0 = w - W0;
src/pocketmine/level/generator/noise/Simplex.php:		// First, six pair-wise comparisons are performed between each possible pair
src/pocketmine/level/generator/noise/Simplex.php:		// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.
src/pocketmine/level/generator/noise/Simplex.php:		// impossible. Only the 24 indices which have non-zero entries make any sense.
src/pocketmine/level/generator/noise/Simplex.php:		x1 = x0 - i1 + self::$G4; // Offsets for second corner in (x,y,z,w) coords
src/pocketmine/level/generator/noise/Simplex.php:		y1 = y0 - j1 + self::$G4;
src/pocketmine/level/generator/noise/Simplex.php:		z1 = z0 - k1 + self::$G4;
src/pocketmine/level/generator/noise/Simplex.php:		w1 = w0 - l1 + self::$G4;
src/pocketmine/level/generator/noise/Simplex.php:		x2 = x0 - i2 + self::$G42; // Offsets for third corner in (x,y,z,w) coords
src/pocketmine/level/generator/noise/Simplex.php:		y2 = y0 - j2 + self::$G42;
src/pocketmine/level/generator/noise/Simplex.php:		z2 = z0 - k2 + self::$G42;
src/pocketmine/level/generator/noise/Simplex.php:		w2 = w0 - l2 + self::$G42;
src/pocketmine/level/generator/noise/Simplex.php:		x3 = x0 - i3 + self::$G43; // Offsets for fourth corner in (x,y,z,w) coords
src/pocketmine/level/generator/noise/Simplex.php:		y3 = y0 - j3 + self::$G43;
src/pocketmine/level/generator/noise/Simplex.php:		z3 = z0 - k3 + self::$G43;
src/pocketmine/level/generator/noise/Simplex.php:		w3 = w0 - l3 + self::$G43;
src/pocketmine/level/generator/noise/Simplex.php:		gi0 = $this->perm[ii + $this->perm[jj + $this->perm[kk + $this->perm[ll]]]] % 32;
src/pocketmine/level/generator/noise/Simplex.php:		gi1 = $this->perm[ii + i1 + $this->perm[jj + j1 + $this->perm[kk + k1 + $this->perm[ll + l1]]]] % 32;
src/pocketmine/level/generator/noise/Simplex.php:		gi2 = $this->perm[ii + i2 + $this->perm[jj + j2 + $this->perm[kk + k2 + $this->perm[ll + l2]]]] % 32;
src/pocketmine/level/generator/noise/Simplex.php:		gi3 = $this->perm[ii + i3 + $this->perm[jj + j3 + $this->perm[kk + k3 + $this->perm[ll + l3]]]] % 32;
src/pocketmine/level/generator/noise/Simplex.php:		gi4 = $this->perm[ii + 1 + $this->perm[jj + 1 + $this->perm[kk + 1 + $this->perm[ll + 1]]]] % 32;
src/pocketmine/level/generator/noise/Simplex.php:		t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
src/pocketmine/level/generator/noise/Simplex.php:		t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;
src/pocketmine/level/generator/noise/Simplex.php:		t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;
src/pocketmine/level/generator/noise/Simplex.php:		t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;
src/pocketmine/level/generator/noise/Simplex.php:		t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;
src/pocketmine/level/generator/noise/Simplex.php:		// Sum up and scale the result to cover the range [-1,1]
src/pocketmine/level/format/io/BaseLevelProvider.php:		$this->path = $path;
src/pocketmine/level/format/io/BaseLevelProvider.php:		if(!file_exists($this->path)){
src/pocketmine/level/format/io/BaseLevelProvider.php:			mkdir($this->path, 0777, true);
src/pocketmine/level/format/io/BaseLevelProvider.php:		$this->loadLevelData();
src/pocketmine/level/format/io/BaseLevelProvider.php:		$this->fixLevelData();
src/pocketmine/level/format/io/BaseLevelProvider.php:		$compressedLevelData = @file_get_contents($this->getPath() . "level.dat");
src/pocketmine/level/format/io/BaseLevelProvider.php:			$levelData = $nbt->read($rawLevelData);
src/pocketmine/level/format/io/BaseLevelProvider.php:			throw new LevelException("Failed to decode level.dat (" . $e->getMessage() . ")", 0, $e);
src/pocketmine/level/format/io/BaseLevelProvider.php:		if(!($levelData instanceof CompoundTag) or !$levelData->hasTag("Data", CompoundTag::class)){
src/pocketmine/level/format/io/BaseLevelProvider.php:		$this->levelData = $levelData->getCompoundTag("Data");
src/pocketmine/level/format/io/BaseLevelProvider.php:		if(!$this->levelData->hasTag("generatorName", StringTag::class)){
src/pocketmine/level/format/io/BaseLevelProvider.php:			$this->levelData->setString("generatorName", "default", true);
src/pocketmine/level/format/io/BaseLevelProvider.php:		}elseif(($generatorName = self::hackyFixForGeneratorClasspathInLevelDat($this->levelData->getString("generatorName"))) !== null){
src/pocketmine/level/format/io/BaseLevelProvider.php:			$this->levelData->setString("generatorName", $generatorName);
src/pocketmine/level/format/io/BaseLevelProvider.php:		if(!$this->levelData->hasTag("generatorOptions", StringTag::class)){
src/pocketmine/level/format/io/BaseLevelProvider.php:			$this->levelData->setString("generatorOptions", "");
src/pocketmine/level/format/io/BaseLevelProvider.php:	 * Hack to fix worlds broken previously by older versions of PocketMine-MP which incorrectly saved classpaths of
src/pocketmine/level/format/io/BaseLevelProvider.php:		return $this->path;
src/pocketmine/level/format/io/BaseLevelProvider.php:		return $this->levelData->getString("LevelName");
src/pocketmine/level/format/io/BaseLevelProvider.php:		return $this->levelData->getLong("Time", 0, true);
src/pocketmine/level/format/io/BaseLevelProvider.php:		$this->levelData->setLong("Time", $value, true); //some older PM worlds had this in the wrong format
src/pocketmine/level/format/io/BaseLevelProvider.php:		return $this->levelData->getLong("RandomSeed");
src/pocketmine/level/format/io/BaseLevelProvider.php:		$this->levelData->setLong("RandomSeed", $value);
src/pocketmine/level/format/io/BaseLevelProvider.php:		return new Vector3($this->levelData->getInt("SpawnX"), $this->levelData->getInt("SpawnY"), $this->levelData->getInt("SpawnZ"));
src/pocketmine/level/format/io/BaseLevelProvider.php:		$this->levelData->setInt("SpawnX", $pos->getFloorX());
src/pocketmine/level/format/io/BaseLevelProvider.php:		$this->levelData->setInt("SpawnY", $pos->getFloorY());
src/pocketmine/level/format/io/BaseLevelProvider.php:		$this->levelData->setInt("SpawnZ", $pos->getFloorZ());
src/pocketmine/level/format/io/BaseLevelProvider.php:		return $this->levelData;
src/pocketmine/level/format/io/BaseLevelProvider.php:		$buffer = $nbt->writeCompressed(new CompoundTag("", [
src/pocketmine/level/format/io/BaseLevelProvider.php:			$this->levelData
src/pocketmine/level/format/io/BaseLevelProvider.php:		file_put_contents($this->getPath() . "level.dat", $buffer);
src/pocketmine/level/format/io/BaseLevelProvider.php:		return $this->readChunk($chunkX, $chunkZ);
src/pocketmine/level/format/io/BaseLevelProvider.php:		if(!$chunk->isGenerated()){
src/pocketmine/level/format/io/BaseLevelProvider.php:			throw new \InvalidStateException("Cannot save un-generated chunk");
src/pocketmine/level/format/io/BaseLevelProvider.php:		$this->writeChunk($chunk);
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setInt("xPos", $chunk->getX());
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setInt("zPos", $chunk->getZ());
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setByte("V", 1);
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setLong("LastUpdate", 0); //TODO
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setLong("InhabitedTime", 0); //TODO
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setByte("TerrainPopulated", $chunk->isPopulated() ? 1 : 0);
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setByte("LightPopulated", $chunk->isLightPopulated() ? 1 : 0);
src/pocketmine/level/format/io/region/Anvil.php:		foreach($chunk->getSubChunks() as $y => $subChunk){
src/pocketmine/level/format/io/region/Anvil.php:			if(!($subChunk instanceof SubChunk) or $subChunk->isEmpty()){
src/pocketmine/level/format/io/region/Anvil.php:			$tag = $this->serializeSubChunk($subChunk);
src/pocketmine/level/format/io/region/Anvil.php:			$tag->setByte("Y", $y);
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setTag(new ListTag("Sections", $subChunks, NBT::TAG_Compound));
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setByteArray("Biomes", $chunk->getBiomeIdArray());
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setIntArray("HeightMap", $chunk->getHeightMapArray());
src/pocketmine/level/format/io/region/Anvil.php:		foreach($chunk->getSavableEntities() as $entity){
src/pocketmine/level/format/io/region/Anvil.php:			$entity->saveNBT();
src/pocketmine/level/format/io/region/Anvil.php:			$entities[] = $entity->namedtag;
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setTag(new ListTag("Entities", $entities, NBT::TAG_Compound));
src/pocketmine/level/format/io/region/Anvil.php:		foreach($chunk->getTiles() as $tile){
src/pocketmine/level/format/io/region/Anvil.php:			$tiles[] = $tile->saveNBT();
src/pocketmine/level/format/io/region/Anvil.php:		$nbt->setTag(new ListTag("TileEntities", $tiles, NBT::TAG_Compound));
src/pocketmine/level/format/io/region/Anvil.php:		return $writer->writeCompressed(new CompoundTag("", [$nbt]), ZLIB_ENCODING_DEFLATE, RegionLoader::$COMPRESSION_LEVEL);
src/pocketmine/level/format/io/region/Anvil.php:			new ByteArrayTag("Blocks", ChunkUtils::reorderByteArray($subChunk->getBlockIdArray())), //Generic in-memory chunks are currently always XZY
src/pocketmine/level/format/io/region/Anvil.php:			new ByteArrayTag("Data", ChunkUtils::reorderNibbleArray($subChunk->getBlockDataArray())),
src/pocketmine/level/format/io/region/Anvil.php:			new ByteArrayTag("SkyLight", ChunkUtils::reorderNibbleArray($subChunk->getBlockSkyLightArray(), "\xff")),
src/pocketmine/level/format/io/region/Anvil.php:			new ByteArrayTag("BlockLight", ChunkUtils::reorderNibbleArray($subChunk->getBlockLightArray()))
src/pocketmine/level/format/io/region/Anvil.php:		$chunk = $nbt->read($data);
src/pocketmine/level/format/io/region/Anvil.php:		if(!($chunk instanceof CompoundTag) or !$chunk->hasTag("Level")){
src/pocketmine/level/format/io/region/Anvil.php:		$chunk = $chunk->getCompoundTag("Level");
src/pocketmine/level/format/io/region/Anvil.php:		$subChunksTag = $chunk->getListTag("Sections") ?? [];
src/pocketmine/level/format/io/region/Anvil.php:				$subChunks[$subChunk->getByte("Y")] = $this->deserializeSubChunk($subChunk);
src/pocketmine/level/format/io/region/Anvil.php:		if($chunk->hasTag("BiomeColors", IntArrayTag::class)){
src/pocketmine/level/format/io/region/Anvil.php:			$biomeIds = ChunkUtils::convertBiomeColors($chunk->getIntArray("BiomeColors")); //Convert back to original format
src/pocketmine/level/format/io/region/Anvil.php:			$biomeIds = $chunk->getByteArray("Biomes", "", true);
src/pocketmine/level/format/io/region/Anvil.php:			$chunk->getInt("xPos"),
src/pocketmine/level/format/io/region/Anvil.php:			$chunk->getInt("zPos"),
src/pocketmine/level/format/io/region/Anvil.php:			$chunk->hasTag("Entities", ListTag::class) ? self::getCompoundList("Entities", $chunk->getListTag("Entities")) : [],
src/pocketmine/level/format/io/region/Anvil.php:			$chunk->hasTag("TileEntities", ListTag::class) ? self::getCompoundList("TileEntities", $chunk->getListTag("TileEntities")) : [],
src/pocketmine/level/format/io/region/Anvil.php:			$chunk->getIntArray("HeightMap", [])
src/pocketmine/level/format/io/region/Anvil.php:		$result->setLightPopulated($chunk->getByte("LightPopulated", 0) !== 0);
src/pocketmine/level/format/io/region/Anvil.php:		$result->setPopulated($chunk->getByte("TerrainPopulated", 0) !== 0);
src/pocketmine/level/format/io/region/Anvil.php:		$result->setGenerated();
src/pocketmine/level/format/io/region/Anvil.php:			ChunkUtils::reorderByteArray($subChunk->getByteArray("Blocks")),
src/pocketmine/level/format/io/region/Anvil.php:			ChunkUtils::reorderNibbleArray($subChunk->getByteArray("Data")),
src/pocketmine/level/format/io/region/Anvil.php:			ChunkUtils::reorderNibbleArray($subChunk->getByteArray("SkyLight"), "\xff"),
src/pocketmine/level/format/io/region/Anvil.php:			ChunkUtils::reorderNibbleArray($subChunk->getByteArray("BlockLight"))
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:		$this->firstSector = $firstSector;
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:		$this->sectorCount = $sectorCount;
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:		$this->timestamp = $timestamp;
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:		return $this->firstSector;
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:		return $this->firstSector + $this->sectorCount - 1;
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:		return range($this->getFirstSector(), $this->getLastSector());
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:		return $this->sectorCount;
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:		return $this->timestamp;
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:			$entry1Last = $entry1->getLastSector();
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:			$entry2Last = $entry2->getLastSector();
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:				($entry2->firstSector >= $entry1->firstSector and $entry2->firstSector <= $entry1Last) or
src/pocketmine/level/format/io/region/RegionLocationTableEntry.php:				($entry2Last >= $entry1->firstSector and $entry2Last <= $entry1Last)
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setInt("xPos", $chunk->getX());
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setInt("zPos", $chunk->getZ());
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setLong("LastUpdate", 0); //TODO
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setByte("TerrainPopulated", $chunk->isPopulated() ? 1 : 0);
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setByte("LightPopulated", $chunk->isLightPopulated() ? 1 : 0);
src/pocketmine/level/format/io/region/McRegion.php:		$subChunks = $chunk->getSubChunks();
src/pocketmine/level/format/io/region/McRegion.php:					$ids .= $subChunk->getBlockIdColumn($x, $z);
src/pocketmine/level/format/io/region/McRegion.php:					$data .= $subChunk->getBlockDataColumn($x, $z);
src/pocketmine/level/format/io/region/McRegion.php:					$skyLight .= $subChunk->getBlockSkyLightColumn($x, $z);
src/pocketmine/level/format/io/region/McRegion.php:					$blockLight .= $subChunk->getBlockLightColumn($x, $z);
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setByteArray("Blocks", $ids);
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setByteArray("Data", $data);
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setByteArray("SkyLight", $skyLight);
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setByteArray("BlockLight", $blockLight);
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setByteArray("Biomes", $chunk->getBiomeIdArray()); //doesn't exist in regular McRegion, this is here for PocketMine-MP only
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setByteArray("HeightMap", pack("C*", ...$chunk->getHeightMapArray())); //this is ByteArray in McRegion, but IntArray in Anvil (due to raised build height)
src/pocketmine/level/format/io/region/McRegion.php:		foreach($chunk->getSavableEntities() as $entity){
src/pocketmine/level/format/io/region/McRegion.php:			$entity->saveNBT();
src/pocketmine/level/format/io/region/McRegion.php:			$entities[] = $entity->namedtag;
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setTag(new ListTag("Entities", $entities, NBT::TAG_Compound));
src/pocketmine/level/format/io/region/McRegion.php:		foreach($chunk->getTiles() as $tile){
src/pocketmine/level/format/io/region/McRegion.php:			$tiles[] = $tile->saveNBT();
src/pocketmine/level/format/io/region/McRegion.php:		$nbt->setTag(new ListTag("TileEntities", $tiles, NBT::TAG_Compound));
src/pocketmine/level/format/io/region/McRegion.php:		return $writer->writeCompressed(new CompoundTag("", [$nbt]), ZLIB_ENCODING_DEFLATE, RegionLoader::$COMPRESSION_LEVEL);
src/pocketmine/level/format/io/region/McRegion.php:		$chunk = $nbt->read($data);
src/pocketmine/level/format/io/region/McRegion.php:		if(!($chunk instanceof CompoundTag) or !$chunk->hasTag("Level")){
src/pocketmine/level/format/io/region/McRegion.php:		$chunk = $chunk->getCompoundTag("Level");
src/pocketmine/level/format/io/region/McRegion.php:		$fullIds = $chunk->hasTag("Blocks", ByteArrayTag::class) ? $chunk->getByteArray("Blocks") : str_repeat("\x00", 32768);
src/pocketmine/level/format/io/region/McRegion.php:		$fullData = $chunk->hasTag("Data", ByteArrayTag::class) ? $chunk->getByteArray("Data") : str_repeat("\x00", 16384);
src/pocketmine/level/format/io/region/McRegion.php:		$fullSkyLight = $chunk->hasTag("SkyLight", ByteArrayTag::class) ? $chunk->getByteArray("SkyLight") : str_repeat("\xff", 16384);
src/pocketmine/level/format/io/region/McRegion.php:		$fullBlockLight = $chunk->hasTag("BlockLight", ByteArrayTag::class) ? $chunk->getByteArray("BlockLight") : str_repeat("\x00", 16384);
src/pocketmine/level/format/io/region/McRegion.php:		if($chunk->hasTag("BiomeColors", IntArrayTag::class)){
src/pocketmine/level/format/io/region/McRegion.php:			$biomeIds = ChunkUtils::convertBiomeColors($chunk->getIntArray("BiomeColors")); //Convert back to original format
src/pocketmine/level/format/io/region/McRegion.php:		}elseif($chunk->hasTag("Biomes", ByteArrayTag::class)){
src/pocketmine/level/format/io/region/McRegion.php:			$biomeIds = $chunk->getByteArray("Biomes");
src/pocketmine/level/format/io/region/McRegion.php:		if($chunk->hasTag("HeightMap", ByteArrayTag::class)){
src/pocketmine/level/format/io/region/McRegion.php:			$unpackedHeightMap = unpack("C*", $chunk->getByteArray("HeightMap")); //unpack() will never fail here
src/pocketmine/level/format/io/region/McRegion.php:		}elseif($chunk->hasTag("HeightMap", IntArrayTag::class)){
src/pocketmine/level/format/io/region/McRegion.php:			$heightMap = $chunk->getIntArray("HeightMap"); #blameshoghicp
src/pocketmine/level/format/io/region/McRegion.php:			$chunk->getInt("xPos"),
src/pocketmine/level/format/io/region/McRegion.php:			$chunk->getInt("zPos"),
src/pocketmine/level/format/io/region/McRegion.php:			$chunk->hasTag("Entities", ListTag::class) ? self::getCompoundList("Entities", $chunk->getListTag("Entities")) : [],
src/pocketmine/level/format/io/region/McRegion.php:			$chunk->hasTag("TileEntities", ListTag::class) ? self::getCompoundList("TileEntities", $chunk->getListTag("TileEntities")) : [],
src/pocketmine/level/format/io/region/McRegion.php:		$result->setLightPopulated($chunk->getByte("LightPopulated", 0) !== 0);
src/pocketmine/level/format/io/region/McRegion.php:		$result->setPopulated($chunk->getByte("TerrainPopulated", 0) !== 0);
src/pocketmine/level/format/io/region/McRegion.php:		$result->setGenerated(true);
src/pocketmine/level/format/io/region/McRegion.php:		if($list->count() === 0){ //empty lists might have wrong types, we don't care
src/pocketmine/level/format/io/region/McRegion.php:		if($list->getTagType() !== NBT::TAG_Compound){
src/pocketmine/level/format/io/region/McRegion.php:		$buffer = $nbt->writeCompressed(new CompoundTag("", [
src/pocketmine/level/format/io/region/McRegion.php:		return $this->levelData->getString("generatorName", "DEFAULT");
src/pocketmine/level/format/io/region/McRegion.php:		return ["preset" => $this->levelData->getString("generatorOptions", "")];
src/pocketmine/level/format/io/region/McRegion.php:		return $this->levelData->getByte("Difficulty", Level::DIFFICULTY_NORMAL);
src/pocketmine/level/format/io/region/McRegion.php:		$this->levelData->setByte("Difficulty", $difficulty);
src/pocketmine/level/format/io/region/McRegion.php:		$limit = time() - 300;
src/pocketmine/level/format/io/region/McRegion.php:		foreach($this->regions as $index => $region){
src/pocketmine/level/format/io/region/McRegion.php:			if($region->lastUsed <= $limit){
src/pocketmine/level/format/io/region/McRegion.php:				$region->close();
src/pocketmine/level/format/io/region/McRegion.php:				unset($this->regions[$index]);
src/pocketmine/level/format/io/region/McRegion.php:		return $this->regions[Level::chunkHash($regionX, $regionZ)] ?? null;
src/pocketmine/level/format/io/region/McRegion.php:		return $this->path . "region/r.$regionX.$regionZ." . static::REGION_FILE_EXTENSION;
src/pocketmine/level/format/io/region/McRegion.php:		if(!isset($this->regions[$index = Level::chunkHash($regionX, $regionZ)])){
src/pocketmine/level/format/io/region/McRegion.php:			$path = $this->pathToRegion($regionX, $regionZ);
src/pocketmine/level/format/io/region/McRegion.php:				$region->open();
src/pocketmine/level/format/io/region/McRegion.php:				$logger->error("Corrupted region file detected: " . $e->getMessage());
src/pocketmine/level/format/io/region/McRegion.php:				$region->close(false); //Do not write anything to the file
src/pocketmine/level/format/io/region/McRegion.php:				$logger->error("Corrupted region file has been backed up to " . $backupPath);
src/pocketmine/level/format/io/region/McRegion.php:				$region->open(); //this will create a new empty region to replace the corrupted one
src/pocketmine/level/format/io/region/McRegion.php:			$this->regions[$index] = $region;
src/pocketmine/level/format/io/region/McRegion.php:		foreach($this->regions as $index => $region){
src/pocketmine/level/format/io/region/McRegion.php:			$region->close();
src/pocketmine/level/format/io/region/McRegion.php:			unset($this->regions[$index]);
src/pocketmine/level/format/io/region/McRegion.php:		if(!file_exists($this->pathToRegion($regionX, $regionZ))){
src/pocketmine/level/format/io/region/McRegion.php:		$this->loadRegion($regionX, $regionZ);
src/pocketmine/level/format/io/region/McRegion.php:		$chunkData = $this->getRegion($regionX, $regionZ)->readChunk($chunkX & 0x1f, $chunkZ & 0x1f);
src/pocketmine/level/format/io/region/McRegion.php:			return $this->nbtDeserialize($chunkData);
src/pocketmine/level/format/io/region/McRegion.php:		$chunkX = $chunk->getX();
src/pocketmine/level/format/io/region/McRegion.php:		$chunkZ = $chunk->getZ();
src/pocketmine/level/format/io/region/McRegion.php:		$this->loadRegion($regionX, $regionZ);
src/pocketmine/level/format/io/region/McRegion.php:		$this->getRegion($regionX, $regionZ)->writeChunk($chunkX & 0x1f, $chunkZ & 0x1f, $this->nbtSerialize($chunk));
src/pocketmine/level/format/io/region/PMAnvil.php:			new ByteArrayTag("Blocks",     $subChunk->getBlockIdArray()),
src/pocketmine/level/format/io/region/PMAnvil.php:			new ByteArrayTag("Data",       $subChunk->getBlockDataArray()),
src/pocketmine/level/format/io/region/PMAnvil.php:			new ByteArrayTag("SkyLight",   $subChunk->getBlockSkyLightArray()),
src/pocketmine/level/format/io/region/PMAnvil.php:			new ByteArrayTag("BlockLight", $subChunk->getBlockLightArray())
src/pocketmine/level/format/io/region/PMAnvil.php:			$subChunk->getByteArray("Blocks"),
src/pocketmine/level/format/io/region/PMAnvil.php:			$subChunk->getByteArray("Data"),
src/pocketmine/level/format/io/region/PMAnvil.php:			$subChunk->getByteArray("SkyLight"),
src/pocketmine/level/format/io/region/PMAnvil.php:			$subChunk->getByteArray("BlockLight")
src/pocketmine/level/format/io/region/PMAnvil.php:		return -1; //Not a PC format, only PocketMine-MP
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->x = $regionX;
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->z = $regionZ;
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->filePath = $filePath;
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->garbageTable = new RegionGarbageMap([]);
src/pocketmine/level/format/io/region/RegionLoader.php:		clearstatcache(false, $this->filePath);
src/pocketmine/level/format/io/region/RegionLoader.php:		$exists = file_exists($this->filePath);
src/pocketmine/level/format/io/region/RegionLoader.php:			touch($this->filePath);
src/pocketmine/level/format/io/region/RegionLoader.php:		}elseif(filesize($this->filePath) % 4096 !== 0){
src/pocketmine/level/format/io/region/RegionLoader.php:		$filePointer = fopen($this->filePath, "r+b");
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->filePointer = $filePointer;
src/pocketmine/level/format/io/region/RegionLoader.php:		stream_set_read_buffer($this->filePointer, 1024 * 16); //16KB
src/pocketmine/level/format/io/region/RegionLoader.php:		stream_set_write_buffer($this->filePointer, 1024 * 16); //16KB
src/pocketmine/level/format/io/region/RegionLoader.php:			$this->createBlank();
src/pocketmine/level/format/io/region/RegionLoader.php:			$this->loadLocationTable();
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->lastUsed = time();
src/pocketmine/level/format/io/region/RegionLoader.php:		if(is_resource($this->filePointer)){
src/pocketmine/level/format/io/region/RegionLoader.php:			$this->writeLocationTable();
src/pocketmine/level/format/io/region/RegionLoader.php:			fclose($this->filePointer);
src/pocketmine/level/format/io/region/RegionLoader.php:		return $this->locationTable[$index] !== null;
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->lastUsed = time();
src/pocketmine/level/format/io/region/RegionLoader.php:		if($this->locationTable[$index] === null){
src/pocketmine/level/format/io/region/RegionLoader.php:		fseek($this->filePointer, $this->locationTable[$index]->getFirstSector() << 12);
src/pocketmine/level/format/io/region/RegionLoader.php:		$bytesToRead = $this->locationTable[$index]->getSectorCount() << 12;
src/pocketmine/level/format/io/region/RegionLoader.php:		$payload = fread($this->filePointer, $bytesToRead);
src/pocketmine/level/format/io/region/RegionLoader.php:			throw new CorruptedChunkException("Corrupted chunk detected (unexpected EOF, truncated or non-padded chunk found)");
src/pocketmine/level/format/io/region/RegionLoader.php:			$length = $stream->getInt();
src/pocketmine/level/format/io/region/RegionLoader.php:			$compression = $stream->getByte();
src/pocketmine/level/format/io/region/RegionLoader.php:			return $stream->get($length - 1); //length prefix includes the compression byte
src/pocketmine/level/format/io/region/RegionLoader.php:			throw new CorruptedChunkException("Corrupted chunk detected: " . $e->getMessage(), 0, $e);
src/pocketmine/level/format/io/region/RegionLoader.php:		return $this->isChunkGenerated(self::getChunkOffset($x, $z));
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->garbageTable->add($oldLocation);
src/pocketmine/level/format/io/region/RegionLoader.php:		$endGarbage = $this->garbageTable->end();
src/pocketmine/level/format/io/region/RegionLoader.php:		$nextSector = $this->nextSector;
src/pocketmine/level/format/io/region/RegionLoader.php:		for(; $endGarbage !== null and $endGarbage->getLastSector() + 1 === $nextSector; $endGarbage = $this->garbageTable->end()){
src/pocketmine/level/format/io/region/RegionLoader.php:			$nextSector = $endGarbage->getFirstSector();
src/pocketmine/level/format/io/region/RegionLoader.php:			$this->garbageTable->remove($endGarbage);
src/pocketmine/level/format/io/region/RegionLoader.php:		if($nextSector !== $this->nextSector){
src/pocketmine/level/format/io/region/RegionLoader.php:			$this->nextSector = $nextSector;
src/pocketmine/level/format/io/region/RegionLoader.php:			ftruncate($this->filePointer, $this->nextSector << 12);
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->lastUsed = time();
src/pocketmine/level/format/io/region/RegionLoader.php:		 * this is corruption-resistant (it leaves the old data intact if a failure occurs when writing new data), and
src/pocketmine/level/format/io/region/RegionLoader.php:		$newLocation = $this->garbageTable->allocate($newSize);
src/pocketmine/level/format/io/region/RegionLoader.php:			$newLocation = new RegionLocationTableEntry($this->nextSector, $newSize, time());
src/pocketmine/level/format/io/region/RegionLoader.php:			$this->bumpNextFreeSector($newLocation);
src/pocketmine/level/format/io/region/RegionLoader.php:		fseek($this->filePointer, $newLocation->getFirstSector() << 12);
src/pocketmine/level/format/io/region/RegionLoader.php:		fwrite($this->filePointer, str_pad(Binary::writeInt($length) . chr(self::COMPRESSION_ZLIB) . $chunkData, $newSize << 12, "\x00", STR_PAD_RIGHT));
src/pocketmine/level/format/io/region/RegionLoader.php:		 * update the file header - we do this after writing the main data, so that if a failure occurs while writing,
src/pocketmine/level/format/io/region/RegionLoader.php:		$oldLocation = $this->locationTable[$index];
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->locationTable[$index] = $newLocation;
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->writeLocationIndex($index);
src/pocketmine/level/format/io/region/RegionLoader.php:			$this->disposeGarbageArea($oldLocation);
src/pocketmine/level/format/io/region/RegionLoader.php:		$oldLocation = $this->locationTable[$index];
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->locationTable[$index] = null;
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->writeLocationIndex($index);
src/pocketmine/level/format/io/region/RegionLoader.php:			$this->disposeGarbageArea($oldLocation);
src/pocketmine/level/format/io/region/RegionLoader.php:			throw new \InvalidArgumentException("Invalid chunk position in region, expected x/z in range 0-31, got x=$x, z=$z");
src/pocketmine/level/format/io/region/RegionLoader.php:		if(is_resource($this->filePointer)){
src/pocketmine/level/format/io/region/RegionLoader.php:				$this->writeLocationTable();
src/pocketmine/level/format/io/region/RegionLoader.php:			fclose($this->filePointer);
src/pocketmine/level/format/io/region/RegionLoader.php:		fseek($this->filePointer, 0);
src/pocketmine/level/format/io/region/RegionLoader.php:		$headerRaw = fread($this->filePointer, self::REGION_HEADER_LENGTH);
src/pocketmine/level/format/io/region/RegionLoader.php:				$this->locationTable[$i] = null;
src/pocketmine/level/format/io/region/RegionLoader.php:				$this->bumpNextFreeSector($this->locationTable[$i] = new RegionLocationTableEntry($offset, $sectorCount, $timestamp));
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->checkLocationTableValidity();
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->garbageTable = RegionGarbageMap::buildFromLocationTable($this->locationTable);
src/pocketmine/level/format/io/region/RegionLoader.php:		fseek($this->filePointer, 0);
src/pocketmine/level/format/io/region/RegionLoader.php:		$fileSize = filesize($this->filePath);
src/pocketmine/level/format/io/region/RegionLoader.php:			$entry = $this->locationTable[$i];
src/pocketmine/level/format/io/region/RegionLoader.php:			$offset = $entry->getFirstSector();
src/pocketmine/level/format/io/region/RegionLoader.php:			if($this->locationTable[$locationTableIndex] === null){
src/pocketmine/level/format/io/region/RegionLoader.php:				assert($this->locationTable[$prevLocationIndex] !== null);
src/pocketmine/level/format/io/region/RegionLoader.php:				if($this->locationTable[$locationTableIndex]->overlaps($this->locationTable[$prevLocationIndex])){
src/pocketmine/level/format/io/region/RegionLoader.php:			$entry = $this->locationTable[$i];
src/pocketmine/level/format/io/region/RegionLoader.php:			$write[] = $entry !== null ? (($entry->getFirstSector() << 8) | $entry->getSectorCount()) : 0;
src/pocketmine/level/format/io/region/RegionLoader.php:			$entry = $this->locationTable[$i];
src/pocketmine/level/format/io/region/RegionLoader.php:			$write[] = $entry !== null ? $entry->getTimestamp() : 0;
src/pocketmine/level/format/io/region/RegionLoader.php:		fseek($this->filePointer, 0);
src/pocketmine/level/format/io/region/RegionLoader.php:		fwrite($this->filePointer, pack("N*", ...$write), 4096 * 2);
src/pocketmine/level/format/io/region/RegionLoader.php:		$entry = $this->locationTable[$index];
src/pocketmine/level/format/io/region/RegionLoader.php:		fseek($this->filePointer, $index << 2);
src/pocketmine/level/format/io/region/RegionLoader.php:		fwrite($this->filePointer, Binary::writeInt($entry !== null ? ($entry->getFirstSector() << 8) | $entry->getSectorCount() : 0), 4);
src/pocketmine/level/format/io/region/RegionLoader.php:		fseek($this->filePointer, 4096 + ($index << 2));
src/pocketmine/level/format/io/region/RegionLoader.php:		fwrite($this->filePointer, Binary::writeInt($entry !== null ? $entry->getTimestamp() : 0), 4);
src/pocketmine/level/format/io/region/RegionLoader.php:		clearstatcache(false, $this->filePath);
src/pocketmine/level/format/io/region/RegionLoader.php:		fseek($this->filePointer, 0);
src/pocketmine/level/format/io/region/RegionLoader.php:		ftruncate($this->filePointer, 8192); // this fills the file with the null byte
src/pocketmine/level/format/io/region/RegionLoader.php:			$this->locationTable[$i] = null;
src/pocketmine/level/format/io/region/RegionLoader.php:		$this->nextSector = max($this->nextSector, $entry->getLastSector() + 1);
src/pocketmine/level/format/io/region/RegionLoader.php:		$result = str_repeat($freeChar, $this->nextSector);
src/pocketmine/level/format/io/region/RegionLoader.php:		foreach($this->locationTable as $locationTableEntry){
src/pocketmine/level/format/io/region/RegionLoader.php:			foreach($locationTableEntry->getUsedSectors() as $sectorIndex){
src/pocketmine/level/format/io/region/RegionLoader.php:		$size = $this->nextSector;
src/pocketmine/level/format/io/region/RegionLoader.php:		foreach($this->locationTable as $entry){
src/pocketmine/level/format/io/region/RegionLoader.php:				$used += $entry->getSectorCount();
src/pocketmine/level/format/io/region/RegionLoader.php:		return 1 - ($used / $size);
src/pocketmine/level/format/io/region/RegionLoader.php:		return $this->x;
src/pocketmine/level/format/io/region/RegionLoader.php:		return $this->z;
src/pocketmine/level/format/io/region/RegionLoader.php:		return $this->filePath;
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			$this->entries[$entry->getFirstSector()] = $entry;
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			if(isset($usedMap[$entry->getFirstSector()])){
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			$usedMap[$entry->getFirstSector()] = $entry;
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			$prevEndPlusOne = ($prevEntry !== null ? $prevEntry->getLastSector() + 1 : RegionLoader::FIRST_SECTOR);
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			$currentStart = $entry->getFirstSector();
src/pocketmine/level/format/io/region/RegionGarbageMap.php:				$garbageMap[$prevEndPlusOne] = new RegionLocationTableEntry($prevEndPlusOne, $currentStart - $prevEndPlusOne, 0);
src/pocketmine/level/format/io/region/RegionGarbageMap.php:	 * @phpstan-return array<int, RegionLocationTableEntry>
src/pocketmine/level/format/io/region/RegionGarbageMap.php:		if(!$this->clean){
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			ksort($this->entries, SORT_NUMERIC);
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			foreach($this->entries as $k => $entry){
src/pocketmine/level/format/io/region/RegionGarbageMap.php:				if($prevIndex !== null and $this->entries[$prevIndex]->getLastSector() + 1 === $entry->getFirstSector()){
src/pocketmine/level/format/io/region/RegionGarbageMap.php:					$this->entries[$prevIndex] = new RegionLocationTableEntry(
src/pocketmine/level/format/io/region/RegionGarbageMap.php:						$this->entries[$prevIndex]->getFirstSector(),
src/pocketmine/level/format/io/region/RegionGarbageMap.php:						$this->entries[$prevIndex]->getSectorCount() + $entry->getSectorCount(),
src/pocketmine/level/format/io/region/RegionGarbageMap.php:					unset($this->entries[$k]);
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			$this->clean = true;
src/pocketmine/level/format/io/region/RegionGarbageMap.php:		return $this->entries;
src/pocketmine/level/format/io/region/RegionGarbageMap.php:		if(isset($this->entries[$k = $entry->getFirstSector()])){
src/pocketmine/level/format/io/region/RegionGarbageMap.php:		$this->entries[$k] = $entry;
src/pocketmine/level/format/io/region/RegionGarbageMap.php:		$this->clean = false;
src/pocketmine/level/format/io/region/RegionGarbageMap.php:		if(isset($this->entries[$k = $entry->getFirstSector()])){
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			unset($this->entries[$k]);
src/pocketmine/level/format/io/region/RegionGarbageMap.php:		$array = $this->getArray();
src/pocketmine/level/format/io/region/RegionGarbageMap.php:		foreach($this->getArray() as $start => $candidate){
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			$candidateSize = $candidate->getSectorCount();
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			$newLocation = new RegionLocationTableEntry($candidate->getFirstSector(), $newSize, time());
src/pocketmine/level/format/io/region/RegionGarbageMap.php:			$this->remove($candidate);
src/pocketmine/level/format/io/region/RegionGarbageMap.php:				$newGarbageStart = $candidate->getFirstSector() + $newSize;
src/pocketmine/level/format/io/region/RegionGarbageMap.php:				$newGarbageSize = $candidateSize - $newSize;
src/pocketmine/level/format/io/region/RegionGarbageMap.php:				$this->add(new RegionLocationTableEntry($newGarbageStart, $newGarbageSize, 0));
src/pocketmine/level/format/io/ChunkRequestTask.php:		$this->levelId = $level->getId();
src/pocketmine/level/format/io/ChunkRequestTask.php:		$this->compressionLevel = $level->getServer()->networkCompressionLevel;
src/pocketmine/level/format/io/ChunkRequestTask.php:		$this->chunk = $chunk->networkSerialize();
src/pocketmine/level/format/io/ChunkRequestTask.php:		$this->chunkX = $chunkX;
src/pocketmine/level/format/io/ChunkRequestTask.php:		$this->chunkZ = $chunkZ;
src/pocketmine/level/format/io/ChunkRequestTask.php:		$this->subChunkCount = $chunk->getSubChunkSendCount();
src/pocketmine/level/format/io/ChunkRequestTask.php:		$pk = LevelChunkPacket::withoutCache($this->chunkX, $this->chunkZ, $this->subChunkCount, $this->chunk);
src/pocketmine/level/format/io/ChunkRequestTask.php:		$batch->addPacket($pk);
src/pocketmine/level/format/io/ChunkRequestTask.php:		$batch->setCompressionLevel($this->compressionLevel);
src/pocketmine/level/format/io/ChunkRequestTask.php:		$batch->encode();
src/pocketmine/level/format/io/ChunkRequestTask.php:		$this->setResult($batch->buffer);
src/pocketmine/level/format/io/ChunkRequestTask.php:		$level = $server->getLevel($this->levelId);
src/pocketmine/level/format/io/ChunkRequestTask.php:			if($this->hasResult()){
src/pocketmine/level/format/io/ChunkRequestTask.php:				$batch = new BatchPacket($this->getResult());
src/pocketmine/level/format/io/ChunkRequestTask.php:				assert(strlen($batch->buffer) > 0);
src/pocketmine/level/format/io/ChunkRequestTask.php:				$batch->isEncoded = true;
src/pocketmine/level/format/io/ChunkRequestTask.php:				$level->chunkRequestCallback($this->chunkX, $this->chunkZ, $batch);
src/pocketmine/level/format/io/ChunkRequestTask.php:				$server->getLogger()->error("Chunk request for world #" . $this->levelId . ", x=" . $this->chunkX . ", z=" . $this->chunkZ . " doesn't have any result data");
src/pocketmine/level/format/io/ChunkRequestTask.php:			$server->getLogger()->debug("Dropped chunk task due to world not loaded");
src/pocketmine/level/format/io/LevelProvider.php:	 * @phpstan-param class-string<Generator> $generator
src/pocketmine/level/format/io/LevelProvider.php:	 * @phpstan-param array<string, mixed>    $options
src/pocketmine/level/format/io/LevelProvider.php:	 * @phpstan-return array<string, mixed>
src/pocketmine/level/format/io/LevelProvider.php:	 * Performs garbage collection in the level provider, such as cleaning up regions in Region-based worlds.
src/pocketmine/level/format/io/ChunkUtils.php:		 * Re-orders a byte array (YZX -> XZY and vice versa)
src/pocketmine/level/format/io/ChunkUtils.php:		 * Re-orders a nibble array (YZX -> XZY and vice versa)
src/pocketmine/level/format/io/ChunkUtils.php:		 * Converts pre-MCPE-1.0 biome color array to biome ID array.
src/pocketmine/level/format/io/ChunkUtils.php:		 * @phpstan-param list<int> $array
src/pocketmine/level/format/io/leveldb/LevelDB.php:			throw new LevelException("Given version of php-leveldb doesn't support zlib raw compression");
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$this->db = self::createDB($path);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$rawLevelData = file_get_contents($this->getPath() . "level.dat");
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$levelData = $nbt->read(substr($rawLevelData, 8));
src/pocketmine/level/format/io/leveldb/LevelDB.php:			throw new LevelException("Invalid level.dat (" . $e->getMessage() . ")", 0, $e);
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$this->levelData = $levelData;
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$version = $this->levelData->getInt("StorageVersion", INT32_MAX, true);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$db = self::createDB($this->path);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		if(!$this->levelData->hasTag("generatorName", StringTag::class)){
src/pocketmine/level/format/io/leveldb/LevelDB.php:			if($this->levelData->hasTag("Generator", IntTag::class)){
src/pocketmine/level/format/io/leveldb/LevelDB.php:				switch($this->levelData->getInt("Generator")){ //Detect correct generator from MCPE data
src/pocketmine/level/format/io/leveldb/LevelDB.php:						$this->levelData->setString("generatorName", "flat");
src/pocketmine/level/format/io/leveldb/LevelDB.php:						if(($layers = $db->get(self::ENTRY_FLAT_WORLD_LAYERS)) !== false){ //Detect existing custom flat layers
src/pocketmine/level/format/io/leveldb/LevelDB.php:						$this->levelData->setString("generatorOptions", "2;" . $layers . ";1");
src/pocketmine/level/format/io/leveldb/LevelDB.php:						$this->levelData->setString("generatorName", "default");
src/pocketmine/level/format/io/leveldb/LevelDB.php:						$this->levelData->setString("generatorOptions", "");
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$this->levelData->setString("generatorName", "default");
src/pocketmine/level/format/io/leveldb/LevelDB.php:		}elseif(($generatorName = self::hackyFixForGeneratorClasspathInLevelDat($this->levelData->getString("generatorName"))) !== null){
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$this->levelData->setString("generatorName", $generatorName);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		if(!$this->levelData->hasTag("generatorOptions", StringTag::class)){
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$this->levelData->setString("generatorOptions", "");
src/pocketmine/level/format/io/leveldb/LevelDB.php:			new IntTag("DayCycleStopTime", -1),
src/pocketmine/level/format/io/leveldb/LevelDB.php:			//Additional PocketMine-MP fields
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$buffer = $nbt->write($levelData);
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$db->put(self::ENTRY_FLAT_WORLD_LAYERS, $out); //Add vanilla flatworld layers to allow terrain generation by MCPE to continue seamlessly
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$this->levelData->setInt("NetworkVersion", ProtocolInfo::CURRENT_PROTOCOL);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$this->levelData->setInt("StorageVersion", self::CURRENT_STORAGE_VERSION);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$buffer = $nbt->write($this->levelData);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		file_put_contents($this->getPath() . "level.dat", Binary::writeLInt(self::CURRENT_STORAGE_VERSION) . Binary::writeLInt(strlen($buffer)) . $buffer);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		return $this->levelData->getString("generatorName", "");
src/pocketmine/level/format/io/leveldb/LevelDB.php:		return ["preset" => $this->levelData->getString("generatorOptions", "")];
src/pocketmine/level/format/io/leveldb/LevelDB.php:		return $this->levelData->getInt("Difficulty", Level::DIFFICULTY_NORMAL);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$this->levelData->setInt("Difficulty", $difficulty); //yes, this is intended! (in PE: int, PC: byte)
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$chunkVersionRaw = $this->db->get($index . self::TAG_VERSION);
src/pocketmine/level/format/io/leveldb/LevelDB.php:					if(($data = $this->db->get($index . self::TAG_SUBCHUNK_PREFIX . chr($y))) === false){
src/pocketmine/level/format/io/leveldb/LevelDB.php:					$binaryStream->setBuffer($data, 0);
src/pocketmine/level/format/io/leveldb/LevelDB.php:					$subChunkVersion = $binaryStream->getByte();
src/pocketmine/level/format/io/leveldb/LevelDB.php:							$blocks = $binaryStream->get(4096);
src/pocketmine/level/format/io/leveldb/LevelDB.php:							$blockData = $binaryStream->get(2048);
src/pocketmine/level/format/io/leveldb/LevelDB.php:								$blockSkyLight = $binaryStream->get(2048);
src/pocketmine/level/format/io/leveldb/LevelDB.php:								$blockLight = $binaryStream->get(2048);
src/pocketmine/level/format/io/leveldb/LevelDB.php:								//Mojang didn't bother changing the subchunk version when they stopped saving sky light -_-
src/pocketmine/level/format/io/leveldb/LevelDB.php:							//TODO: set chunks read-only so the version on disk doesn't get overwritten
src/pocketmine/level/format/io/leveldb/LevelDB.php:				if(($maps2d = $this->db->get($index . self::TAG_DATA_2D)) !== false){
src/pocketmine/level/format/io/leveldb/LevelDB.php:					$binaryStream->setBuffer($maps2d, 0);
src/pocketmine/level/format/io/leveldb/LevelDB.php:					$unpackedHeightMap = unpack("v*", $binaryStream->get(512)); //unpack() will never fail here
src/pocketmine/level/format/io/leveldb/LevelDB.php:					$biomeIds = $binaryStream->get(256);
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$legacyTerrain = $this->db->get($index . self::TAG_LEGACY_TERRAIN);
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$binaryStream->setBuffer($legacyTerrain);
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$fullIds = $binaryStream->get(32768);
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$fullData = $binaryStream->get(16384);
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$fullSkyLight = $binaryStream->get(16384);
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$fullBlockLight = $binaryStream->get(16384);
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$unpackedHeightMap = unpack("C*", $binaryStream->get(256)); //unpack() will never fail here, but static analysers don't know that
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$unpackedBiomeIds = unpack("N*", $binaryStream->get(1024)); //nor here
src/pocketmine/level/format/io/leveldb/LevelDB.php:				//TODO: set chunks read-only so the version on disk doesn't get overwritten
src/pocketmine/level/format/io/leveldb/LevelDB.php:		if(($entityData = $this->db->get($index . self::TAG_ENTITY)) !== false and $entityData !== ""){
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$entityTags = $nbt->read($entityData, true);
src/pocketmine/level/format/io/leveldb/LevelDB.php:				if($entityTag->hasTag("id", IntTag::class)){
src/pocketmine/level/format/io/leveldb/LevelDB.php:					$entityTag->setInt("id", $entityTag->getInt("id") & 0xff); //remove type flags - TODO: use these instead of removing them)
src/pocketmine/level/format/io/leveldb/LevelDB.php:		if(($tileData = $this->db->get($index . self::TAG_BLOCK_ENTITY)) !== false and $tileData !== ""){
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$tileTags = $nbt->read($tileData, true);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		if(($extraRawData = $this->db->get($index . self::TAG_BLOCK_EXTRA_DATA)) !== false and $extraRawData !== ""){
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$binaryStream->setBuffer($extraRawData, 0);
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$count = $binaryStream->getLInt();
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$key = $binaryStream->getLInt();
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$value = $binaryStream->getLShort();
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$chunk->setGenerated(true);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$chunk->setPopulated(true);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$chunk->setLightPopulated($lightPopulated);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$chunk->setChanged($hasBeenUpgraded); //trigger rewriting chunk to disk if it was converted from an older format
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$index = LevelDB::chunkIndex($chunk->getX(), $chunk->getZ());
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$this->db->put($index . self::TAG_VERSION, chr(self::CURRENT_LEVEL_CHUNK_VERSION));
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$subChunks = $chunk->getSubChunks();
src/pocketmine/level/format/io/leveldb/LevelDB.php:			if($subChunk->isEmpty(false)){ //MCPE doesn't save light anymore as of 1.1
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$this->db->delete($key);
src/pocketmine/level/format/io/leveldb/LevelDB.php:				$this->db->put($key,
src/pocketmine/level/format/io/leveldb/LevelDB.php:					$subChunk->getBlockIdArray() .
src/pocketmine/level/format/io/leveldb/LevelDB.php:					$subChunk->getBlockDataArray()
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$this->db->put($index . self::TAG_DATA_2D, pack("v*", ...$chunk->getHeightMapArray()) . $chunk->getBiomeIdArray());
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$this->db->put($index . self::TAG_STATE_FINALISATION, chr(self::FINALISATION_DONE));
src/pocketmine/level/format/io/leveldb/LevelDB.php:		foreach($chunk->getTiles() as $tile){
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$tiles[] = $tile->saveNBT();
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$this->writeTags($tiles, $index . self::TAG_BLOCK_ENTITY);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		foreach($chunk->getSavableEntities() as $entity){
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$entity->saveNBT();
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$entities[] = $entity->namedtag;
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$this->writeTags($entities, $index . self::TAG_ENTITY);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$this->db->delete($index . self::TAG_DATA_2D_LEGACY);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		$this->db->delete($index . self::TAG_LEGACY_TERRAIN);
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$this->db->put($index, $nbt->write($targets));
src/pocketmine/level/format/io/leveldb/LevelDB.php:			$this->db->delete($index);
src/pocketmine/level/format/io/leveldb/LevelDB.php:		return $this->db;
src/pocketmine/level/format/io/leveldb/LevelDB.php:		return $this->db->get(LevelDB::chunkIndex($chunkX, $chunkZ) . self::TAG_VERSION) !== false;
src/pocketmine/level/format/io/leveldb/LevelDB.php:		unset($this->db);
src/pocketmine/level/format/io/LevelProviderManager.php:	 * @phpstan-var array<string, class-string<LevelProvider>>
src/pocketmine/level/format/io/LevelProviderManager.php:	 * @phpstan-param class-string<LevelProvider> $class
src/pocketmine/level/format/io/LevelProviderManager.php:		if(!$reflection->implementsInterface(LevelProvider::class)){
src/pocketmine/level/format/io/LevelProviderManager.php:		if(!$reflection->isInstantiable()){
src/pocketmine/level/format/io/LevelProviderManager.php:	 * @phpstan-return class-string<LevelProvider>|null
src/pocketmine/level/format/io/LevelProviderManager.php:			/** @phpstan-var class-string<LevelProvider> $provider */
src/pocketmine/level/format/io/LevelProviderManager.php:	 * @phpstan-return class-string<LevelProvider>|null
src/pocketmine/level/format/EmptySubChunk.php:		return -1;
src/pocketmine/level/format/SubChunk.php:			assert($data === "", "Invalid non-zero length given, expected $length, got " . strlen($data));
src/pocketmine/level/format/SubChunk.php:		$this->ids = self::assignData($ids, 4096);
src/pocketmine/level/format/SubChunk.php:		$this->data = self::assignData($data, 2048);
src/pocketmine/level/format/SubChunk.php:		$this->skyLight = self::assignData($skyLight, 2048, "\xff");
src/pocketmine/level/format/SubChunk.php:		$this->blockLight = self::assignData($blockLight, 2048);
src/pocketmine/level/format/SubChunk.php:		$this->collectGarbage();
src/pocketmine/level/format/SubChunk.php:			substr_count($this->ids, "\x00") === 4096 and
src/pocketmine/level/format/SubChunk.php:				substr_count($this->skyLight, "\xff") === 2048 and
src/pocketmine/level/format/SubChunk.php:				$this->blockLight === self::ZERO_NIBBLE_ARRAY
src/pocketmine/level/format/SubChunk.php:		return ord($this->ids[($x << 8) | ($z << 4) | $y]);
src/pocketmine/level/format/SubChunk.php:		$this->ids[($x << 8) | ($z << 4) | $y] = chr($id);
src/pocketmine/level/format/SubChunk.php:		return (ord($this->data[($x << 7) | ($z << 3) | ($y >> 1)]) >> (($y & 1) << 2)) & 0xf;
src/pocketmine/level/format/SubChunk.php:		$byte = ord($this->data[$i]);
src/pocketmine/level/format/SubChunk.php:		$this->data[$i] = chr(($byte & ~(0xf << $shift)) | (($data & 0xf) << $shift));
src/pocketmine/level/format/SubChunk.php:		return (ord($this->ids[$i]) << 4) | ((ord($this->data[$i >> 1]) >> (($y & 1) << 2)) & 0xf);
src/pocketmine/level/format/SubChunk.php:			if($this->ids[$i] !== $block){
src/pocketmine/level/format/SubChunk.php:				$this->ids[$i] = $block;
src/pocketmine/level/format/SubChunk.php:			$oldPair = ord($this->data[$i]);
src/pocketmine/level/format/SubChunk.php:				$this->data[$i] = chr($newPair);
src/pocketmine/level/format/SubChunk.php:		return (ord($this->blockLight[($x << 7) | ($z << 3) | ($y >> 1)]) >> (($y & 1) << 2)) & 0xf;
src/pocketmine/level/format/SubChunk.php:		$byte = ord($this->blockLight[$i]);
src/pocketmine/level/format/SubChunk.php:		$this->blockLight[$i] = chr(($byte & ~(0xf << $shift)) | (($level & 0xf) << $shift));
src/pocketmine/level/format/SubChunk.php:		return (ord($this->skyLight[($x << 7) | ($z << 3) | ($y >> 1)]) >> (($y & 1) << 2)) & 0xf;
src/pocketmine/level/format/SubChunk.php:		$byte = ord($this->skyLight[$i]);
src/pocketmine/level/format/SubChunk.php:		$this->skyLight[$i] = chr(($byte & ~(0xf << $shift)) | (($level & 0xf) << $shift));
src/pocketmine/level/format/SubChunk.php:		for(; $i >= $low; --$i){
src/pocketmine/level/format/SubChunk.php:			if($this->ids[$i] !== "\x00"){
src/pocketmine/level/format/SubChunk.php:		return -1; //highest block not in this subchunk
src/pocketmine/level/format/SubChunk.php:		return substr($this->ids, ($x << 8) | ($z << 4), 16);
src/pocketmine/level/format/SubChunk.php:		return substr($this->data, ($x << 7) | ($z << 3), 8);
src/pocketmine/level/format/SubChunk.php:		return substr($this->blockLight, ($x << 7) | ($z << 3), 8);
src/pocketmine/level/format/SubChunk.php:		return substr($this->skyLight, ($x << 7) | ($z << 3), 8);
src/pocketmine/level/format/SubChunk.php:		assert(strlen($this->ids) === 4096, "Wrong length of ID array, expecting 4096 bytes, got " . strlen($this->ids));
src/pocketmine/level/format/SubChunk.php:		return $this->ids;
src/pocketmine/level/format/SubChunk.php:		assert(strlen($this->data) === 2048, "Wrong length of data array, expecting 2048 bytes, got " . strlen($this->data));
src/pocketmine/level/format/SubChunk.php:		return $this->data;
src/pocketmine/level/format/SubChunk.php:		assert(strlen($this->skyLight) === 2048, "Wrong length of skylight array, expecting 2048 bytes, got " . strlen($this->skyLight));
src/pocketmine/level/format/SubChunk.php:		return $this->skyLight;
src/pocketmine/level/format/SubChunk.php:		$this->skyLight = $data;
src/pocketmine/level/format/SubChunk.php:		assert(strlen($this->blockLight) === 2048, "Wrong length of light array, expecting 2048 bytes, got " . strlen($this->blockLight));
src/pocketmine/level/format/SubChunk.php:		return $this->blockLight;
src/pocketmine/level/format/SubChunk.php:		$this->blockLight = $data;
src/pocketmine/level/format/SubChunk.php:		return "\x00" . $this->ids . $this->data;
src/pocketmine/level/format/SubChunk.php:		 * This strange looking code is designed to exploit PHP's copy-on-write behaviour. Assigning will copy a
src/pocketmine/level/format/SubChunk.php:		if($this->data === self::ZERO_NIBBLE_ARRAY){
src/pocketmine/level/format/SubChunk.php:			$this->data = self::ZERO_NIBBLE_ARRAY;
src/pocketmine/level/format/SubChunk.php:		if($this->skyLight === self::ZERO_NIBBLE_ARRAY){
src/pocketmine/level/format/SubChunk.php:			$this->skyLight = self::ZERO_NIBBLE_ARRAY;
src/pocketmine/level/format/SubChunk.php:		if($this->blockLight === self::ZERO_NIBBLE_ARRAY){
src/pocketmine/level/format/SubChunk.php:			$this->blockLight = self::ZERO_NIBBLE_ARRAY;
src/pocketmine/level/format/Chunk.php: * Implementation of MCPE-style chunks with subchunks with XZY ordering.
src/pocketmine/level/format/Chunk.php:	 * @phpstan-var \SplFixedArray<SubChunkInterface>
src/pocketmine/level/format/Chunk.php:	 * @phpstan-var \SplFixedArray<int>
src/pocketmine/level/format/Chunk.php:	 * @phpstan-param list<int> $heightMap
src/pocketmine/level/format/Chunk.php:		$this->x = $chunkX;
src/pocketmine/level/format/Chunk.php:		$this->z = $chunkZ;
src/pocketmine/level/format/Chunk.php:		$this->height = Chunk::MAX_SUBCHUNKS; //TODO: add a way of changing this
src/pocketmine/level/format/Chunk.php:		$this->subChunks = new \SplFixedArray($this->height);
src/pocketmine/level/format/Chunk.php:		$this->emptySubChunk = EmptySubChunk::getInstance();
src/pocketmine/level/format/Chunk.php:		foreach($this->subChunks as $y => $null){
src/pocketmine/level/format/Chunk.php:			$this->subChunks[$y] = $subChunks[$y] ?? $this->emptySubChunk;
src/pocketmine/level/format/Chunk.php:			$this->heightMap = \SplFixedArray::fromArray($heightMap);
src/pocketmine/level/format/Chunk.php:			$val = ($this->height * 16);
src/pocketmine/level/format/Chunk.php:			$this->heightMap = \SplFixedArray::fromArray(array_fill(0, 256, $val));
src/pocketmine/level/format/Chunk.php:			$this->biomeIds = $biomeIds;
src/pocketmine/level/format/Chunk.php:			$this->biomeIds = str_repeat("\x00", 256);
src/pocketmine/level/format/Chunk.php:		$this->NBTtiles = $tiles;
src/pocketmine/level/format/Chunk.php:		$this->NBTentities = $entities;
src/pocketmine/level/format/Chunk.php:		return $this->x;
src/pocketmine/level/format/Chunk.php:		return $this->z;
src/pocketmine/level/format/Chunk.php:		$this->x = $x;
src/pocketmine/level/format/Chunk.php:		$this->z = $z;
src/pocketmine/level/format/Chunk.php:		return $this->height;
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $y 0-255
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:		return $this->getSubChunk($y >> 4)->getFullBlock($x, $y & 0x0f, $z);
src/pocketmine/level/format/Chunk.php:	 * @param int      $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int      $y 0-255
src/pocketmine/level/format/Chunk.php:	 * @param int      $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int|null $blockId 0-255 if null, does not change
src/pocketmine/level/format/Chunk.php:	 * @param int|null $meta 0-15 if null, does not change
src/pocketmine/level/format/Chunk.php:		if($this->getSubChunk($y >> 4, true)->setBlock($x, $y & 0x0f, $z, $blockId !== null ? ($blockId & 0xff) : null, $meta !== null ? ($meta & 0x0f) : null)){
src/pocketmine/level/format/Chunk.php:			$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $y 0-255
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @return int 0-255
src/pocketmine/level/format/Chunk.php:		return $this->getSubChunk($y >> 4)->getBlockId($x, $y & 0x0f, $z);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $y 0-255
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $id 0-255
src/pocketmine/level/format/Chunk.php:		if($this->getSubChunk($y >> 4, true)->setBlockId($x, $y & 0x0f, $z, $id)){
src/pocketmine/level/format/Chunk.php:			$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $y 0-255
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @return int 0-15
src/pocketmine/level/format/Chunk.php:		return $this->getSubChunk($y >> 4)->getBlockData($x, $y & 0x0f, $z);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $y 0-255
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $data 0-15
src/pocketmine/level/format/Chunk.php:		if($this->getSubChunk($y >> 4, true)->setBlockData($x, $y & 0x0f, $z, $data)){
src/pocketmine/level/format/Chunk.php:			$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $y 0-255
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @return int 0-15
src/pocketmine/level/format/Chunk.php:		return $this->getSubChunk($y >> 4)->getBlockSkyLight($x, $y & 0x0f, $z);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $y 0-255
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $level 0-15
src/pocketmine/level/format/Chunk.php:		if($this->getSubChunk($y >> 4, true)->setBlockSkyLight($x, $y & 0x0f, $z, $level)){
src/pocketmine/level/format/Chunk.php:			$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:		for($y = $this->getHighestSubChunkIndex(); $y >= 0; --$y){
src/pocketmine/level/format/Chunk.php:			$this->getSubChunk($y, true)->setBlockSkyLightArray($data);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $y 0-255
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @return int 0-15
src/pocketmine/level/format/Chunk.php:		return $this->getSubChunk($y >> 4)->getBlockLight($x, $y & 0x0f, $z);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $y 0-255
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $level 0-15
src/pocketmine/level/format/Chunk.php:		if($this->getSubChunk($y >> 4, true)->setBlockLight($x, $y & 0x0f, $z, $level)){
src/pocketmine/level/format/Chunk.php:			$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:		for($y = $this->getHighestSubChunkIndex(); $y >= 0; --$y){
src/pocketmine/level/format/Chunk.php:			$this->getSubChunk($y, true)->setBlockLightArray($data);
src/pocketmine/level/format/Chunk.php:	 * Returns the Y coordinate of the highest non-air block at the specified X/Z chunk block coordinates
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @return int 0-255, or -1 if there are no blocks in the column
src/pocketmine/level/format/Chunk.php:		$index = $this->getHighestSubChunkIndex();
src/pocketmine/level/format/Chunk.php:		if($index === -1){
src/pocketmine/level/format/Chunk.php:			return -1;
src/pocketmine/level/format/Chunk.php:		for($y = $index; $y >= 0; --$y){
src/pocketmine/level/format/Chunk.php:			$height = $this->getSubChunk($y)->getHighestBlockAt($x, $z) | ($y << 4);
src/pocketmine/level/format/Chunk.php:			if($height !== -1){
src/pocketmine/level/format/Chunk.php:		return -1;
src/pocketmine/level/format/Chunk.php:		return ($this->getHighestSubChunkIndex() << 4) | 0x0f;
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:		return $this->heightMap[($z << 4) | $x];
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:		$this->heightMap[($z << 4) | $x] = $value;
src/pocketmine/level/format/Chunk.php:				$this->recalculateHeightMapColumn($x, $z);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @return int New calculated heightmap value (0-256 inclusive)
src/pocketmine/level/format/Chunk.php:		$y = $this->getHighestBlockAt($x, $z);
src/pocketmine/level/format/Chunk.php:		for(; $y >= 0; --$y){
src/pocketmine/level/format/Chunk.php:			if(BlockFactory::$lightFilter[$id = $this->getBlockId($x, $y, $z)] > 1 or BlockFactory::$diffusesSkyLight[$id]){
src/pocketmine/level/format/Chunk.php:		$this->setHeightMap($x, $z, $y + 1);
src/pocketmine/level/format/Chunk.php:	 * if the chunk is light-populated after being terrain-populated.
src/pocketmine/level/format/Chunk.php:		$maxY = $this->getMaxY();
src/pocketmine/level/format/Chunk.php:		$this->setAllBlockSkyLight(0);
src/pocketmine/level/format/Chunk.php:				$heightMap = $this->getHeightMap($x, $z);
src/pocketmine/level/format/Chunk.php:				for(; $y >= $heightMap; --$y){
src/pocketmine/level/format/Chunk.php:					$this->setBlockSkyLight($x, $y, $z, 15);
src/pocketmine/level/format/Chunk.php:				for(; $y >= 0; --$y){
src/pocketmine/level/format/Chunk.php:					$light -= BlockFactory::$lightFilter[$this->getBlockId($x, $y, $z)];
src/pocketmine/level/format/Chunk.php:					$this->setBlockSkyLight($x, $y, $z, $light);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @return int 0-255
src/pocketmine/level/format/Chunk.php:		return ord($this->biomeIds[($z << 4) | $x]);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $biomeId 0-255
src/pocketmine/level/format/Chunk.php:		$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:		$this->biomeIds[($z << 4) | $x] = chr($biomeId & 0xff);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:		foreach($this->subChunks as $subChunk){
src/pocketmine/level/format/Chunk.php:			$result .= $subChunk->getBlockIdColumn($x, $z);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:		foreach($this->subChunks as $subChunk){
src/pocketmine/level/format/Chunk.php:			$result .= $subChunk->getBlockDataColumn($x, $z);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:		foreach($this->subChunks as $subChunk){
src/pocketmine/level/format/Chunk.php:			$result .= $subChunk->getBlockSkyLightColumn($x, $z);
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:		foreach($this->subChunks as $subChunk){
src/pocketmine/level/format/Chunk.php:			$result .= $subChunk->getBlockLightColumn($x, $z);
src/pocketmine/level/format/Chunk.php:		return $this->lightPopulated;
src/pocketmine/level/format/Chunk.php:		$this->lightPopulated = $value;
src/pocketmine/level/format/Chunk.php:		$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:		return $this->terrainPopulated;
src/pocketmine/level/format/Chunk.php:		$this->terrainPopulated = $value;
src/pocketmine/level/format/Chunk.php:		$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:		return $this->terrainGenerated;
src/pocketmine/level/format/Chunk.php:		$this->terrainGenerated = $value;
src/pocketmine/level/format/Chunk.php:		$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:		if($entity->isClosed()){
src/pocketmine/level/format/Chunk.php:		$this->entities[$entity->getId()] = $entity;
src/pocketmine/level/format/Chunk.php:		if(!($entity instanceof Player) and $this->isInit){
src/pocketmine/level/format/Chunk.php:			$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:		unset($this->entities[$entity->getId()]);
src/pocketmine/level/format/Chunk.php:		if(!($entity instanceof Player) and $this->isInit){
src/pocketmine/level/format/Chunk.php:			$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:		if($tile->isClosed()){
src/pocketmine/level/format/Chunk.php:		$this->tiles[$tile->getId()] = $tile;
src/pocketmine/level/format/Chunk.php:		if(isset($this->tileList[$index = (($tile->x & 0x0f) << 12) | (($tile->z & 0x0f) << 8) | ($tile->y & 0xff)]) and $this->tileList[$index] !== $tile){
src/pocketmine/level/format/Chunk.php:			$this->tileList[$index]->close();
src/pocketmine/level/format/Chunk.php:		$this->tileList[$index] = $tile;
src/pocketmine/level/format/Chunk.php:		if($this->isInit){
src/pocketmine/level/format/Chunk.php:			$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:		unset($this->tiles[$tile->getId()]);
src/pocketmine/level/format/Chunk.php:		unset($this->tileList[(($tile->x & 0x0f) << 12) | (($tile->z & 0x0f) << 8) | ($tile->y & 0xff)]);
src/pocketmine/level/format/Chunk.php:		if($this->isInit){
src/pocketmine/level/format/Chunk.php:			$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:		return $this->entities;
src/pocketmine/level/format/Chunk.php:		return array_filter($this->entities, function(Entity $entity) : bool{ return $entity->canSaveWithChunk() and !$entity->isClosed(); });
src/pocketmine/level/format/Chunk.php:		return $this->tiles;
src/pocketmine/level/format/Chunk.php:	 * @param int $x 0-15
src/pocketmine/level/format/Chunk.php:	 * @param int $y 0-255
src/pocketmine/level/format/Chunk.php:	 * @param int $z 0-15
src/pocketmine/level/format/Chunk.php:		return $this->tileList[$index] ?? null;
src/pocketmine/level/format/Chunk.php:		foreach($this->getEntities() as $entity){
src/pocketmine/level/format/Chunk.php:			$entity->close();
src/pocketmine/level/format/Chunk.php:		foreach($this->getTiles() as $tile){
src/pocketmine/level/format/Chunk.php:			$tile->close();
src/pocketmine/level/format/Chunk.php:		if(!$this->isInit){
src/pocketmine/level/format/Chunk.php:			$level->timings->syncChunkLoadEntitiesTimer->startTiming();
src/pocketmine/level/format/Chunk.php:			foreach($this->NBTentities as $nbt){
src/pocketmine/level/format/Chunk.php:				$idTag = $nbt->getTag("id");
src/pocketmine/level/format/Chunk.php:					$entity = Entity::createEntity($idTag->getValue(), $level, $nbt);
src/pocketmine/level/format/Chunk.php:					$level->getServer()->getLogger()->logException($t);
src/pocketmine/level/format/Chunk.php:			$this->NBTentities = [];
src/pocketmine/level/format/Chunk.php:			$level->timings->syncChunkLoadEntitiesTimer->stopTiming();
src/pocketmine/level/format/Chunk.php:			$level->timings->syncChunkLoadTileEntitiesTimer->startTiming();
src/pocketmine/level/format/Chunk.php:			foreach($this->NBTtiles as $nbt){
src/pocketmine/level/format/Chunk.php:				if(!$nbt->hasTag(Tile::TAG_ID, StringTag::class)){
src/pocketmine/level/format/Chunk.php:				if(Tile::createTile($nbt->getString(Tile::TAG_ID), $level, $nbt) === null){
src/pocketmine/level/format/Chunk.php:			$this->NBTtiles = [];
src/pocketmine/level/format/Chunk.php:			$level->timings->syncChunkLoadTileEntitiesTimer->stopTiming();
src/pocketmine/level/format/Chunk.php:			$this->hasChanged = $changed;
src/pocketmine/level/format/Chunk.php:			$this->isInit = true;
src/pocketmine/level/format/Chunk.php:		return $this->biomeIds;
src/pocketmine/level/format/Chunk.php:		return $this->heightMap->toArray();
src/pocketmine/level/format/Chunk.php:		return $this->hasChanged;
src/pocketmine/level/format/Chunk.php:		$this->hasChanged = $value;
src/pocketmine/level/format/Chunk.php:		if($y < 0 or $y >= $this->height){
src/pocketmine/level/format/Chunk.php:			return $this->emptySubChunk;
src/pocketmine/level/format/Chunk.php:		}elseif($generateNew and $this->subChunks[$y] instanceof EmptySubChunk){
src/pocketmine/level/format/Chunk.php:			$this->subChunks[$y] = new SubChunk();
src/pocketmine/level/format/Chunk.php:		return $this->subChunks[$y];
src/pocketmine/level/format/Chunk.php:		if($y < 0 or $y >= $this->height){
src/pocketmine/level/format/Chunk.php:		if($subChunk === null or ($subChunk->isEmpty() and !$allowEmpty)){
src/pocketmine/level/format/Chunk.php:			$this->subChunks[$y] = $this->emptySubChunk;
src/pocketmine/level/format/Chunk.php:			$this->subChunks[$y] = $subChunk;
src/pocketmine/level/format/Chunk.php:		$this->hasChanged = true;
src/pocketmine/level/format/Chunk.php:	 * @phpstan-return \SplFixedArray<SubChunkInterface>
src/pocketmine/level/format/Chunk.php:		return $this->subChunks;
src/pocketmine/level/format/Chunk.php:	 * Returns the Y coordinate of the highest non-empty subchunk in this chunk.
src/pocketmine/level/format/Chunk.php:		for($y = $this->subChunks->count() - 1; $y >= 0; --$y){
src/pocketmine/level/format/Chunk.php:			if($this->subChunks[$y] instanceof EmptySubChunk){
src/pocketmine/level/format/Chunk.php:		return -1;
src/pocketmine/level/format/Chunk.php:		return $this->getHighestSubChunkIndex() + 1;
src/pocketmine/level/format/Chunk.php:		foreach($this->subChunks as $y => $subChunk){
src/pocketmine/level/format/Chunk.php:				if($subChunk->isEmpty()){
src/pocketmine/level/format/Chunk.php:					$this->subChunks[$y] = $this->emptySubChunk;
src/pocketmine/level/format/Chunk.php:					$subChunk->collectGarbage();
src/pocketmine/level/format/Chunk.php:		$subChunkCount = $this->getSubChunkSendCount();
src/pocketmine/level/format/Chunk.php:			$result .= $this->subChunks[$y]->networkSerialize();
src/pocketmine/level/format/Chunk.php:		$result .= $this->biomeIds . chr(0); //border block array count
src/pocketmine/level/format/Chunk.php:		foreach($this->tiles as $tile){
src/pocketmine/level/format/Chunk.php:				$result .= $tile->getSerializedSpawnCompound();
src/pocketmine/level/format/Chunk.php:	 * Fast-serializes the chunk for passing between threads
src/pocketmine/level/format/Chunk.php:		$stream->putInt($this->x);
src/pocketmine/level/format/Chunk.php:		$stream->putInt($this->z);
src/pocketmine/level/format/Chunk.php:		$stream->putByte(($this->lightPopulated ? 4 : 0) | ($this->terrainPopulated ? 2 : 0) | ($this->terrainGenerated ? 1 : 0));
src/pocketmine/level/format/Chunk.php:		if($this->terrainGenerated){
src/pocketmine/level/format/Chunk.php:			foreach($this->subChunks as $y => $subChunk){
src/pocketmine/level/format/Chunk.php:				$subChunks .= chr($y) . $subChunk->getBlockIdArray() . $subChunk->getBlockDataArray();
src/pocketmine/level/format/Chunk.php:				if($this->lightPopulated){
src/pocketmine/level/format/Chunk.php:					$subChunks .= $subChunk->getBlockSkyLightArray() . $subChunk->getBlockLightArray();
src/pocketmine/level/format/Chunk.php:			$stream->putByte($count);
src/pocketmine/level/format/Chunk.php:			$stream->put($subChunks);
src/pocketmine/level/format/Chunk.php:			$stream->put($this->biomeIds);
src/pocketmine/level/format/Chunk.php:			if($this->lightPopulated){
src/pocketmine/level/format/Chunk.php:				$stream->put(pack("v*", ...$this->heightMap));
src/pocketmine/level/format/Chunk.php:		return $stream->getBuffer();
src/pocketmine/level/format/Chunk.php:	 * Deserializes a fast-serialized chunk
src/pocketmine/level/format/Chunk.php:		$x = $stream->getInt();
src/pocketmine/level/format/Chunk.php:		$z = $stream->getInt();
src/pocketmine/level/format/Chunk.php:		$flags = $stream->getByte();
src/pocketmine/level/format/Chunk.php:			$count = $stream->getByte();
src/pocketmine/level/format/Chunk.php:				$subChunks[$stream->getByte()] = new SubChunk(
src/pocketmine/level/format/Chunk.php:					$stream->get(4096), //blockids
src/pocketmine/level/format/Chunk.php:					$stream->get(2048), //blockdata
src/pocketmine/level/format/Chunk.php:					$lightPopulated ? $stream->get(2048) : "", //skylight
src/pocketmine/level/format/Chunk.php:					$lightPopulated ? $stream->get(2048) : "" //blocklight
src/pocketmine/level/format/Chunk.php:			$biomeIds = $stream->get(256);
src/pocketmine/level/format/Chunk.php:				$unpackedHeightMap = unpack("v*", $stream->get(512)); //unpack() will never fail here
src/pocketmine/level/format/Chunk.php:		$chunk->setGenerated($terrainGenerated);
src/pocketmine/level/format/Chunk.php:		$chunk->setPopulated($terrainPopulated);
src/pocketmine/level/format/Chunk.php:		$chunk->setLightPopulated($lightPopulated);
src/pocketmine/level/format/Chunk.php:		$chunk->setChanged(false);
src/pocketmine/Thread.php:		return $this->classLoader;
src/pocketmine/Thread.php:		$this->composerAutoloaderPath = \pocketmine\COMPOSER_AUTOLOADER_PATH;
src/pocketmine/Thread.php:			$loader = Server::getInstance()->getLoader();
src/pocketmine/Thread.php:		$this->classLoader = $loader;
src/pocketmine/Thread.php:		if($this->composerAutoloaderPath !== null){
src/pocketmine/Thread.php:			require $this->composerAutoloaderPath;
src/pocketmine/Thread.php:		if($this->classLoader !== null){
src/pocketmine/Thread.php:			$this->classLoader->register(false);
src/pocketmine/Thread.php:		ThreadManager::getInstance()->add($this);
src/pocketmine/Thread.php:		if($this->getClassLoader() === null){
src/pocketmine/Thread.php:			$this->setClassLoader();
src/pocketmine/Thread.php:		$this->isKilled = true;
src/pocketmine/Thread.php:		if(!$this->isJoined()){
src/pocketmine/Thread.php:			$this->notify();
src/pocketmine/Thread.php:			$this->join();
src/pocketmine/Thread.php:		ThreadManager::getInstance()->remove($this);
src/pocketmine/Thread.php:		return (new \ReflectionClass($this))->getShortName();
src/pocketmine/OfflinePlayer.php:		$this->server = $server;
src/pocketmine/OfflinePlayer.php:		$this->name = $name;
src/pocketmine/OfflinePlayer.php:		if($this->server->hasOfflinePlayerData($this->name)){
src/pocketmine/OfflinePlayer.php:			$this->namedtag = $this->server->getOfflinePlayerData($this->name);
src/pocketmine/OfflinePlayer.php:		return $this->getPlayer() !== null;
src/pocketmine/OfflinePlayer.php:		return $this->name;
src/pocketmine/OfflinePlayer.php:		return $this->server;
src/pocketmine/OfflinePlayer.php:		return $this->server->isOp($this->name);
src/pocketmine/OfflinePlayer.php:		if($value === $this->isOp()){
src/pocketmine/OfflinePlayer.php:			$this->server->addOp($this->name);
src/pocketmine/OfflinePlayer.php:			$this->server->removeOp($this->name);
src/pocketmine/OfflinePlayer.php:		return $this->server->getNameBans()->isBanned($this->name);
src/pocketmine/OfflinePlayer.php:			$this->server->getNameBans()->addBan($this->name, null, null, null);
src/pocketmine/OfflinePlayer.php:			$this->server->getNameBans()->remove($this->name);
src/pocketmine/OfflinePlayer.php:		return $this->server->isWhitelisted($this->name);
src/pocketmine/OfflinePlayer.php:			$this->server->addWhitelist($this->name);
src/pocketmine/OfflinePlayer.php:			$this->server->removeWhitelist($this->name);
src/pocketmine/OfflinePlayer.php:		return $this->server->getPlayerExact($this->name);
src/pocketmine/OfflinePlayer.php:		return $this->namedtag instanceof CompoundTag ? $this->namedtag->getLong("firstPlayed", 0, true) : null;
src/pocketmine/OfflinePlayer.php:		return $this->namedtag instanceof CompoundTag ? $this->namedtag->getLong("lastPlayed", 0, true) : null;
src/pocketmine/OfflinePlayer.php:		return $this->namedtag instanceof CompoundTag;
src/pocketmine/OfflinePlayer.php:		$this->server->getPlayerMetadata()->setMetadata($this, $metadataKey, $newMetadataValue);
src/pocketmine/OfflinePlayer.php:		return $this->server->getPlayerMetadata()->getMetadata($this, $metadataKey);
src/pocketmine/OfflinePlayer.php:		return $this->server->getPlayerMetadata()->hasMetadata($this, $metadataKey);
src/pocketmine/OfflinePlayer.php:		$this->server->getPlayerMetadata()->removeMetadata($this, $metadataKey, $owningPlugin);
src/pocketmine/utils/Timezone.php:						$messages[] = "Timezone \"$timezone\" could not be parsed as a valid timezone from php.ini, falling back to auto-detection";
src/pocketmine/utils/Timezone.php:			if(($response = Internet::getURL("http://ip-api.com/json")) !== false //If system timezone detection fails or timezone is an invalid value.
src/pocketmine/utils/Timezone.php:				$regex = '/(UTC)(\+*\-*\d*\d*\:*\d*\d*)/';
src/pocketmine/utils/Timezone.php:	 * @param string $offset In the format of +09:00, +02:00, -04:00 etc.
src/pocketmine/utils/Timezone.php:		if(strpos($offset, '-') !== false){
src/pocketmine/utils/Timezone.php:			$offset = str_replace('-', '', $offset);
src/pocketmine/utils/Timezone.php:			$offset = -abs($offset);
src/pocketmine/utils/TextFormatJsonObject.php:	 * @phpstan-var array<int, TextFormatJsonObject>|null
src/pocketmine/utils/MainLogger.php:		$this->logFile = $logFile;
src/pocketmine/utils/MainLogger.php:		$this->logDebug = $logDebug;
src/pocketmine/utils/MainLogger.php:		$this->logStream = new \Threaded;
src/pocketmine/utils/MainLogger.php:		$this->mainThreadHasFormattingCodes = Terminal::hasFormattingCodes();
src/pocketmine/utils/MainLogger.php:		$this->timezone = Timezone::get();
src/pocketmine/utils/MainLogger.php:		$this->start(PTHREADS_INHERIT_NONE);
src/pocketmine/utils/MainLogger.php:	 * WARNING: Because static properties are thread-local, this MUST be called from the body of every Thread if you
src/pocketmine/utils/MainLogger.php:		return $this->format;
src/pocketmine/utils/MainLogger.php:	 * - time
src/pocketmine/utils/MainLogger.php:	 * - color
src/pocketmine/utils/MainLogger.php:	 * - thread name
src/pocketmine/utils/MainLogger.php:	 * - prefix (debug, info etc)
src/pocketmine/utils/MainLogger.php:	 * - message
src/pocketmine/utils/MainLogger.php:		$this->format = $format;
src/pocketmine/utils/MainLogger.php:		$this->send($message, \LogLevel::EMERGENCY, "EMERGENCY", TextFormat::RED);
src/pocketmine/utils/MainLogger.php:		$this->send($message, \LogLevel::ALERT, "ALERT", TextFormat::RED);
src/pocketmine/utils/MainLogger.php:		$this->send($message, \LogLevel::CRITICAL, "CRITICAL", TextFormat::RED);
src/pocketmine/utils/MainLogger.php:		$this->send($message, \LogLevel::ERROR, "ERROR", TextFormat::DARK_RED);
src/pocketmine/utils/MainLogger.php:		$this->send($message, \LogLevel::WARNING, "WARNING", TextFormat::YELLOW);
src/pocketmine/utils/MainLogger.php:		$this->send($message, \LogLevel::NOTICE, "NOTICE", TextFormat::AQUA);
src/pocketmine/utils/MainLogger.php:		$this->send($message, \LogLevel::INFO, "INFO", TextFormat::WHITE);
src/pocketmine/utils/MainLogger.php:		if(!$this->logDebug and !$force){
src/pocketmine/utils/MainLogger.php:		$this->send($message, \LogLevel::DEBUG, "DEBUG", TextFormat::GRAY);
src/pocketmine/utils/MainLogger.php:		$this->logDebug = $logDebug;
src/pocketmine/utils/MainLogger.php:	 * @phpstan-param list<array<string, mixed>>|null $trace
src/pocketmine/utils/MainLogger.php:			$trace = $e->getTrace();
src/pocketmine/utils/MainLogger.php:		$this->synchronized(function() use ($e, $trace) : void{
src/pocketmine/utils/MainLogger.php:			$this->critical(self::printExceptionMessage($e));
src/pocketmine/utils/MainLogger.php:				$this->critical($line);
src/pocketmine/utils/MainLogger.php:			for($prev = $e->getPrevious(); $prev !== null; $prev = $prev->getPrevious()){
src/pocketmine/utils/MainLogger.php:				$this->critical("Previous: " . self::printExceptionMessage($prev));
src/pocketmine/utils/MainLogger.php:				foreach(Utils::printableTrace($prev->getTrace()) as $line){
src/pocketmine/utils/MainLogger.php:					$this->critical("  " . $line);
src/pocketmine/utils/MainLogger.php:		$this->syncFlushBuffer();
src/pocketmine/utils/MainLogger.php:		$errstr = preg_replace('/\s+/', ' ', trim($e->getMessage()));
src/pocketmine/utils/MainLogger.php:		$errno = $e->getCode();
src/pocketmine/utils/MainLogger.php:		$errfile = Utils::cleanPath($e->getFile());
src/pocketmine/utils/MainLogger.php:		$errline = $e->getLine();
src/pocketmine/utils/MainLogger.php:				$this->emergency($message);
src/pocketmine/utils/MainLogger.php:				$this->alert($message);
src/pocketmine/utils/MainLogger.php:				$this->critical($message);
src/pocketmine/utils/MainLogger.php:				$this->error($message);
src/pocketmine/utils/MainLogger.php:				$this->warning($message);
src/pocketmine/utils/MainLogger.php:				$this->notice($message);
src/pocketmine/utils/MainLogger.php:				$this->info($message);
src/pocketmine/utils/MainLogger.php:				$this->debug($message);
src/pocketmine/utils/MainLogger.php:		$this->synchronized(function() : void{
src/pocketmine/utils/MainLogger.php:			$this->shutdown = true;
src/pocketmine/utils/MainLogger.php:			$this->notify();
src/pocketmine/utils/MainLogger.php:		if($time === null){ //thread-local
src/pocketmine/utils/MainLogger.php:			$time = new \DateTime('now', new \DateTimeZone($this->timezone));
src/pocketmine/utils/MainLogger.php:		$time->setTimestamp(time());
src/pocketmine/utils/MainLogger.php:			$threadName = $thread->getThreadName() . " thread";
src/pocketmine/utils/MainLogger.php:			$threadName = (new \ReflectionClass($thread))->getShortName() . " thread";
src/pocketmine/utils/MainLogger.php:		$message = sprintf($this->format, $time->format("H:i:s"), $color, $threadName, $prefix, TextFormat::clean($message, false));
src/pocketmine/utils/MainLogger.php:			Terminal::init($this->mainThreadHasFormattingCodes); //lazy-init colour codes because we don't know if they've been registered on this thread
src/pocketmine/utils/MainLogger.php:		$this->synchronized(function() use ($message, $level, $time) : void{
src/pocketmine/utils/MainLogger.php:			foreach($this->attachments as $attachment){
src/pocketmine/utils/MainLogger.php:				$attachment->call($level, $message);
src/pocketmine/utils/MainLogger.php:			$this->logStream[] = $time->format("Y-m-d") . " " . TextFormat::clean($message) . PHP_EOL;
src/pocketmine/utils/MainLogger.php:			$this->notify();
src/pocketmine/utils/MainLogger.php:		$this->syncFlush = true;
src/pocketmine/utils/MainLogger.php:		$this->synchronized(function() : void{
src/pocketmine/utils/MainLogger.php:			$this->notify(); //write immediately
src/pocketmine/utils/MainLogger.php:			while($this->syncFlush){
src/pocketmine/utils/MainLogger.php:				$this->wait(); //block until it's all been written to disk
src/pocketmine/utils/MainLogger.php:		while($this->logStream->count() > 0){
src/pocketmine/utils/MainLogger.php:			$chunk = $this->logStream->shift();
src/pocketmine/utils/MainLogger.php:		$this->synchronized(function() : void{
src/pocketmine/utils/MainLogger.php:			if($this->syncFlush){
src/pocketmine/utils/MainLogger.php:				$this->syncFlush = false;
src/pocketmine/utils/MainLogger.php:				$this->notify(); //if this was due to a sync flush, tell the caller to stop waiting
src/pocketmine/utils/MainLogger.php:		$logResource = fopen($this->logFile, "ab");
src/pocketmine/utils/MainLogger.php:		while(!$this->shutdown){
src/pocketmine/utils/MainLogger.php:			$this->writeLogStream($logResource);
src/pocketmine/utils/MainLogger.php:			$this->synchronized(function() : void{
src/pocketmine/utils/MainLogger.php:				if(!$this->shutdown){
src/pocketmine/utils/MainLogger.php:					$this->wait();
src/pocketmine/utils/MainLogger.php:		$this->writeLogStream($logResource);
src/pocketmine/utils/VersionString.php: * Manages PocketMine-MP version strings, and compares them
src/pocketmine/utils/VersionString.php:		$this->baseVersion = $baseVersion;
src/pocketmine/utils/VersionString.php:		$this->development = $isDevBuild;
src/pocketmine/utils/VersionString.php:		$this->build = $buildNumber;
src/pocketmine/utils/VersionString.php:		preg_match('/^(\d+)\.(\d+)\.(\d+)(?:-(.*))?$/', $this->baseVersion, $matches);
src/pocketmine/utils/VersionString.php:		$this->major = (int) $matches[1];
src/pocketmine/utils/VersionString.php:		$this->minor = (int) $matches[2];
src/pocketmine/utils/VersionString.php:		$this->patch = (int) $matches[3];
src/pocketmine/utils/VersionString.php:		$this->suffix = $matches[4] ?? "";
src/pocketmine/utils/VersionString.php:		return (($this->major << 9) | ($this->minor << 5) | $this->patch);
src/pocketmine/utils/VersionString.php:		return $this->baseVersion;
src/pocketmine/utils/VersionString.php:		$retval = $this->baseVersion;
src/pocketmine/utils/VersionString.php:		if($this->development){
src/pocketmine/utils/VersionString.php:			if($build and $this->build > 0){
src/pocketmine/utils/VersionString.php:				$retval .= "." . $this->build;
src/pocketmine/utils/VersionString.php:		return $this->major;
src/pocketmine/utils/VersionString.php:		return $this->minor;
src/pocketmine/utils/VersionString.php:		return $this->patch;
src/pocketmine/utils/VersionString.php:		return $this->suffix;
src/pocketmine/utils/VersionString.php:		return $this->build;
src/pocketmine/utils/VersionString.php:		return $this->development;
src/pocketmine/utils/VersionString.php:		return $this->getFullVersion();
src/pocketmine/utils/VersionString.php:		$number = $this->getNumber();
src/pocketmine/utils/VersionString.php:		$tNumber = $target->getNumber();
src/pocketmine/utils/VersionString.php:			return $tNumber - $number;
src/pocketmine/utils/VersionString.php:			return -1; //Target is older
src/pocketmine/utils/VersionString.php:		}elseif($target->isDev() and !$this->isDev()){
src/pocketmine/utils/VersionString.php:			return -1; //Dev builds of the same version are always considered older than a release
src/pocketmine/utils/VersionString.php:		}elseif($target->getBuild() > $this->getBuild()){
src/pocketmine/utils/VersionString.php:		}elseif($target->getBuild() < $this->getBuild()){
src/pocketmine/utils/VersionString.php:			return -1;
src/pocketmine/utils/Internet.php:		if($ip !== false and preg_match('#Current IP Address\: ([0-9a-fA-F\:\.]*)#', trim(strip_tags($ip)), $matches) > 0){
src/pocketmine/utils/Internet.php:		if($ip !== false and preg_match('#">([0-9a-fA-F\:\.]*)</span>#', $ip, $matches) > 0){
src/pocketmine/utils/Internet.php:		if($ip !== false and preg_match('#Your IP address is ([0-9a-fA-F\:\.]*)#', $ip, $matches) > 0){
src/pocketmine/utils/Internet.php:	 * @phpstan-param list<string>          $extraHeaders
src/pocketmine/utils/Internet.php:	 * @phpstan-param array<string, string> $headers
src/pocketmine/utils/Internet.php:			$err = $ex->getMessage();
src/pocketmine/utils/Internet.php:	 * @phpstan-param string|array<string, string> $args
src/pocketmine/utils/Internet.php:	 * @phpstan-param list<string>                 $extraHeaders
src/pocketmine/utils/Internet.php:	 * @phpstan-param array<string, string>        $headers
src/pocketmine/utils/Internet.php:			$err = $ex->getMessage();
src/pocketmine/utils/Internet.php:	 * @phpstan-param array<int, mixed>                $extraOpts
src/pocketmine/utils/Internet.php:	 * @phpstan-param list<string>                     $extraHeaders
src/pocketmine/utils/Internet.php:	 * @phpstan-param (callable(resource) : void)|null $onSuccess
src/pocketmine/utils/Internet.php:	 * @phpstan-return array{string, list<array<string, string>>, int}
src/pocketmine/utils/Internet.php:			CURLOPT_HTTPHEADER => array_merge(["User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20100101 Firefox/12.0 " . \pocketmine\NAME . "/" . \pocketmine\VERSION], $extraHeaders),
src/pocketmine/utils/Utils.php:	 * @phpstan-param anyCallable $variable
src/pocketmine/utils/Utils.php:	 * @phpstan-param anyClosure $closure
src/pocketmine/utils/Utils.php:		if(substr($func->getName(), -strlen('{closure}')) !== '{closure}'){
src/pocketmine/utils/Utils.php:			$scope = $func->getClosureScopeClass();
src/pocketmine/utils/Utils.php:					$scope->getName() .
src/pocketmine/utils/Utils.php:					($func->getClosureThis() !== null ? "->" : "::") .
src/pocketmine/utils/Utils.php:					$func->getName(); //name doesn't include class in this case
src/pocketmine/utils/Utils.php:			//non-class function
src/pocketmine/utils/Utils.php:			return $func->getName();
src/pocketmine/utils/Utils.php:		$filename = $func->getFileName();
src/pocketmine/utils/Utils.php:				self::cleanPath($filename) . "#L" . $func->getStartLine() :
src/pocketmine/utils/Utils.php:		if($reflect->isAnonymous()){
src/pocketmine/utils/Utils.php:			$filename = $reflect->getFileName();
src/pocketmine/utils/Utils.php:					self::cleanPath($filename) . "#L" . $reflect->getStartLine() :
src/pocketmine/utils/Utils.php:		return $reflect->getName();
src/pocketmine/utils/Utils.php:			if(preg_match_all("#Physical Address[. ]{1,}: ([0-9A-F\\-]{17})#", $mac, $matches) > 0){
src/pocketmine/utils/Utils.php:					if($v == "00-00-00-00-00-00"){
src/pocketmine/utils/Utils.php:			if(file_exists("/etc/machine-id")){
src/pocketmine/utils/Utils.php:				$machine .= file_get_contents("/etc/machine-id");
src/pocketmine/utils/Utils.php:				if(preg_match_all("#HWaddr[ \t]{1,}([0-9a-f:]{17})#", $mac, $matches) > 0){
src/pocketmine/utils/Utils.php:						if(preg_match('/^processor[ \t]*:[ \t]*[0-9]+$/m', $l) > 0){
src/pocketmine/utils/Utils.php:					if(preg_match("/^([0-9]+)\\-([0-9]+)$/", trim($cpuPresent), $matches) > 0){
src/pocketmine/utils/Utils.php:						$processors = (int) ($matches[2] - $matches[1]);
src/pocketmine/utils/Utils.php:				$processors = (int) `sysctl -n hw.ncpu`;
src/pocketmine/utils/Utils.php:			$ascii = preg_replace('#([^\x20-\x7E])#', ".", $line);
src/pocketmine/utils/Utils.php:	 * Returns a string that can be printed, replaces non-printable characters
src/pocketmine/utils/Utils.php:		return preg_replace('#([^\x20-\x7E])#', '.', $str);
src/pocketmine/utils/Utils.php:		$X = $pos1["x"] - $pos2["x"];
src/pocketmine/utils/Utils.php:		$Z = $pos1["z"] - $pos2["z"];
src/pocketmine/utils/Utils.php:		$Y = $pos1["y"] - $pos2["y"];
src/pocketmine/utils/Utils.php:		$hAngle = rad2deg(atan2($Z, $X) - M_PI_2);
src/pocketmine/utils/Utils.php:		$vAngle = rad2deg(-atan2($Y, $dXZ));
src/pocketmine/utils/Utils.php:	 * @phpstan-param list<string>          $extraHeaders
src/pocketmine/utils/Utils.php:	 * @phpstan-param array<string, string> $headers
src/pocketmine/utils/Utils.php:	 * @phpstan-param string|array<string, string> $args
src/pocketmine/utils/Utils.php:	 * @phpstan-param list<string>                 $extraHeaders
src/pocketmine/utils/Utils.php:	 * @phpstan-param array<string, string>        $headers
src/pocketmine/utils/Utils.php:	 * @phpstan-param array<int, mixed>                $extraOpts
src/pocketmine/utils/Utils.php:	 * @phpstan-param list<string>                     $extraHeaders
src/pocketmine/utils/Utils.php:	 * @phpstan-param (callable(resource) : void)|null $onSuccess
src/pocketmine/utils/Utils.php:	 * @phpstan-return array{string, list<array<string, string>>, int}
src/pocketmine/utils/Utils.php:				$ord -= 0x100;
src/pocketmine/utils/Utils.php:				$hash -= 0x100000000;
src/pocketmine/utils/Utils.php:			while($hash < -0x80000000){
src/pocketmine/utils/Utils.php:	 * @phpstan-return array<string, mixed>
src/pocketmine/utils/Utils.php:		$rawPayloadJSON = base64_decode(strtr($payloadB64, '-_', '+/'), true);
src/pocketmine/utils/Utils.php:		if(preg_match('/^.* refcount\\(([0-9]+)\\)\\{$/', trim($ret[0]), $m) > 0){
src/pocketmine/utils/Utils.php:			return ((int) $m[1]) - ($includeCurrent ? 3 : 4); //$value + zval call + extra call
src/pocketmine/utils/Utils.php:		return -1;
src/pocketmine/utils/Utils.php:	 * @phpstan-param list<array<string, mixed>> $trace
src/pocketmine/utils/Utils.php:			$messages[] = "#$i " . (isset($trace[$i]["file"]) ? self::cleanPath($trace[$i]["file"]) : "") . "(" . (isset($trace[$i]["line"]) ? $trace[$i]["line"] : "") . "): " . (isset($trace[$i]["class"]) ? $trace[$i]["class"] . (($trace[$i]["type"] === "dynamic" or $trace[$i]["type"] === "->") ? "->" : "::") : "") . $trace[$i]["function"] . "(" . Utils::printable($params) . ")";
src/pocketmine/utils/Utils.php:	 * @phpstan-return list<array<string, mixed>>
src/pocketmine/utils/Utils.php:			$trace = $e->getTrace();
src/pocketmine/utils/Utils.php:		//TODO: make these paths dynamic so they can be unit-tested against
src/pocketmine/utils/Utils.php:	 * Extracts one-line tags from the doc-comment
src/pocketmine/utils/Utils.php:		$rawDocComment = substr($docComment, 3, -2); //remove the opening and closing markers
src/pocketmine/utils/Utils.php:		preg_match_all('/(*ANYCRLF)^[\t ]*(?:\* )?@([a-zA-Z]+)(?:[\t ]+(.+?))?[\t ]*$/m', $rawDocComment, $matches);
src/pocketmine/utils/Utils.php:		if($result === false) throw new AssumptionFailedError("array_combine() doesn't return false with two equal-sized arrays");
src/pocketmine/utils/Utils.php:	 * @phpstan-param class-string $className
src/pocketmine/utils/Utils.php:	 * @phpstan-param class-string $baseName
src/pocketmine/utils/Utils.php:		if(!$class->isSubclassOf($baseName)){
src/pocketmine/utils/Utils.php:			throw new \InvalidArgumentException("Class $className does not " . ($base->isInterface() ? "implement" : "extend") . " " . $baseName);
src/pocketmine/utils/Utils.php:		if(!$class->isInstantiable()){
src/pocketmine/utils/Utils.php:	 * @phpstan-param anyCallable $signature
src/pocketmine/utils/Utils.php:	 * @phpstan-param anyCallable $subject
src/pocketmine/utils/Utils.php:		if(!($sigType = CallbackType::createFromCallable($signature))->isSatisfiedBy($subject)){
src/pocketmine/utils/Utils.php:	 * @phpstan-template TMemberType
src/pocketmine/utils/Utils.php:	 * @phpstan-param array<mixed, TMemberType> $array
src/pocketmine/utils/Utils.php:	 * @phpstan-param \Closure(TMemberType) : void $validator
src/pocketmine/utils/Utils.php:				throw new \TypeError("Incorrect type of element at \"$k\": " . $e->getMessage(), 0, $e);
src/pocketmine/utils/Git.php:		if(Utils::execute("git -C \"$dir\" rev-parse HEAD", $out) === 0 and $out !== false and strlen($out = trim($out)) === 40){
src/pocketmine/utils/Git.php:			if(Utils::execute("git -C \"$dir\" diff --quiet") === 1 or Utils::execute("git -C \"$dir\" diff --cached --quiet") === 1){ //Locally-modified
src/pocketmine/utils/Git.php:	 * If the repo is dirty, a "-dirty" suffix is added.
src/pocketmine/utils/Git.php:			return $detectedHash . ($dirty ? "-dirty" : "");
src/pocketmine/utils/Random.php: * Most of the code in this class was adapted from the XorShift128Engine in the php-random library.
src/pocketmine/utils/Random.php:	public function __construct(int $seed = -1){
src/pocketmine/utils/Random.php:		if($seed === -1){
src/pocketmine/utils/Random.php:		$this->setSeed($seed);
src/pocketmine/utils/Random.php:		$this->seed = $seed;
src/pocketmine/utils/Random.php:		$this->x = self::X ^ $seed;
src/pocketmine/utils/Random.php:		$this->y = self::Y ^ ($seed << 17) | (($seed >> 15) & 0x7fffffff) & 0xffffffff;
src/pocketmine/utils/Random.php:		$this->z = self::Z ^ ($seed << 31) | (($seed >> 1) & 0x7fffffff) & 0xffffffff;
src/pocketmine/utils/Random.php:		$this->w = self::W ^ ($seed << 18) | (($seed >> 14) & 0x7fffffff) & 0xffffffff;
src/pocketmine/utils/Random.php:		return $this->seed;
src/pocketmine/utils/Random.php:	 * Returns an 31-bit integer (not signed)
src/pocketmine/utils/Random.php:		return $this->nextSignedInt() & 0x7fffffff;
src/pocketmine/utils/Random.php:	 * Returns a 32-bit integer (signed)
src/pocketmine/utils/Random.php:		$t = ($this->x ^ ($this->x << 11)) & 0xffffffff;
src/pocketmine/utils/Random.php:		$this->x = $this->y;
src/pocketmine/utils/Random.php:		$this->y = $this->z;
src/pocketmine/utils/Random.php:		$this->z = $this->w;
src/pocketmine/utils/Random.php:		$this->w = ($this->w ^ (($this->w >> 19) & 0x7fffffff) ^ ($t ^ (($t >> 8) & 0x7fffffff))) & 0xffffffff;
src/pocketmine/utils/Random.php:		return $this->w;
src/pocketmine/utils/Random.php:		return $this->nextInt() / 0x7fffffff;
src/pocketmine/utils/Random.php:	 * Returns a float between -1.0 and 1.0 (inclusive)
src/pocketmine/utils/Random.php:		return $this->nextSignedInt() / 0x7fffffff;
src/pocketmine/utils/Random.php:		return ($this->nextSignedInt() & 0x01) === 0;
src/pocketmine/utils/Random.php:		return $start + ($this->nextInt() % ($end + 1 - $start));
src/pocketmine/utils/Random.php:		return $this->nextInt() % $bound;
src/pocketmine/utils/TextFormat.php:			PREG_BAD_UTF8_ERROR => "Malformed UTF-8",
src/pocketmine/utils/TextFormat.php:			PREG_BAD_UTF8_OFFSET_ERROR => "Bad UTF-8 offset",
src/pocketmine/utils/TextFormat.php:		$result = preg_split("/(" . TextFormat::ESCAPE . "[0-9a-fk-or])/u", $string, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
src/pocketmine/utils/TextFormat.php:	 * Cleans the string from Minecraft codes, ANSI Escape Codes and invalid UTF-8 characters
src/pocketmine/utils/TextFormat.php:	 * @return string valid clean UTF-8
src/pocketmine/utils/TextFormat.php:		$string = mb_scrub($string, 'UTF-8');
src/pocketmine/utils/TextFormat.php:		$string = self::preg_replace("/[\x{E000}-\x{F8FF}]/u", "", $string); //remove unicode private-use-area characters (they might break the console)
src/pocketmine/utils/TextFormat.php:			$string = str_replace(TextFormat::ESCAPE, "", self::preg_replace("/" . TextFormat::ESCAPE . "[0-9a-fk-or]/u", "", $string));
src/pocketmine/utils/TextFormat.php:		return str_replace("\x1b", "", self::preg_replace("/\x1b[\\(\\][[0-9;\\[\\(]+[Bm]/u", "", $string));
src/pocketmine/utils/TextFormat.php:		return self::preg_replace('/' . preg_quote($placeholder, "/") . '([0-9a-fk-or])/u', TextFormat::ESCAPE . '$1', $string);
src/pocketmine/utils/TextFormat.php:	 * Returns an JSON-formatted string with colors/markup
src/pocketmine/utils/TextFormat.php:			if($pointer->text !== null){
src/pocketmine/utils/TextFormat.php:				if($newString->extra === null){
src/pocketmine/utils/TextFormat.php:					$newString->extra = [];
src/pocketmine/utils/TextFormat.php:				$newString->extra[$index] = $pointer = new TextFormatJsonObject();
src/pocketmine/utils/TextFormat.php:					$pointer->color = $color;
src/pocketmine/utils/TextFormat.php:					$pointer->bold = true;
src/pocketmine/utils/TextFormat.php:					$pointer->italic = true;
src/pocketmine/utils/TextFormat.php:					$pointer->underlined = true;
src/pocketmine/utils/TextFormat.php:					$pointer->strikethrough = true;
src/pocketmine/utils/TextFormat.php:					$pointer->obfuscated = true;
src/pocketmine/utils/TextFormat.php:						$pointer->bold = true;
src/pocketmine/utils/TextFormat.php:						$pointer->obfuscated = true;
src/pocketmine/utils/TextFormat.php:						$pointer->italic = true;
src/pocketmine/utils/TextFormat.php:						$pointer->underlined = true;
src/pocketmine/utils/TextFormat.php:						$pointer->strikethrough = true;
src/pocketmine/utils/TextFormat.php:						$pointer->color = "white";
src/pocketmine/utils/TextFormat.php:						$pointer->bold = false;
src/pocketmine/utils/TextFormat.php:						$pointer->italic = false;
src/pocketmine/utils/TextFormat.php:						$pointer->underlined = false;
src/pocketmine/utils/TextFormat.php:						$pointer->strikethrough = false;
src/pocketmine/utils/TextFormat.php:						$pointer->obfuscated = false;
src/pocketmine/utils/TextFormat.php:					$pointer->color = "black";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "dark_blue";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "dark_green";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "dark_aqua";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "dark_red";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "dark_purple";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "gold";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "gray";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "dark_gray";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "blue";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "green";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "aqua";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "red";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "light_purple";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "yellow";
src/pocketmine/utils/TextFormat.php:					$pointer->color = "white";
src/pocketmine/utils/TextFormat.php:					$pointer->text = $token;
src/pocketmine/utils/TextFormat.php:		if($newString->extra !== null){
src/pocketmine/utils/TextFormat.php:			foreach($newString->extra as $k => $d){
src/pocketmine/utils/TextFormat.php:				if($d->text === null){
src/pocketmine/utils/TextFormat.php:					unset($newString->extra[$k]);
src/pocketmine/utils/TextFormat.php:	 * Returns an HTML-formatted string with colors/markup
src/pocketmine/utils/TextFormat.php:					$newString .= "<span style=font-weight:bold>";
src/pocketmine/utils/TextFormat.php:					//$newString .= "<span style=text-decoration:line-through>";
src/pocketmine/utils/TextFormat.php:					$newString .= "<span style=font-style:italic>";
src/pocketmine/utils/TextFormat.php:					$newString .= "<span style=text-decoration:underline>";
src/pocketmine/utils/TextFormat.php:					$newString .= "<span style=text-decoration:line-through>";
src/pocketmine/utils/Color.php:		$this->r = $r & 0xff;
src/pocketmine/utils/Color.php:		$this->g = $g & 0xff;
src/pocketmine/utils/Color.php:		$this->b = $b & 0xff;
src/pocketmine/utils/Color.php:		$this->a = $a & 0xff;
src/pocketmine/utils/Color.php:		return $this->a;
src/pocketmine/utils/Color.php:		$this->a = $a & 0xff;
src/pocketmine/utils/Color.php:		return $this->r;
src/pocketmine/utils/Color.php:		$this->r = $r & 0xff;
src/pocketmine/utils/Color.php:		return $this->g;
src/pocketmine/utils/Color.php:		$this->g = $g & 0xff;
src/pocketmine/utils/Color.php:		return $this->b;
src/pocketmine/utils/Color.php:		$this->b = $b & 0xff;
src/pocketmine/utils/Color.php:			$a += $color->a;
src/pocketmine/utils/Color.php:			$r += $color->r;
src/pocketmine/utils/Color.php:			$g += $color->g;
src/pocketmine/utils/Color.php:			$b += $color->b;
src/pocketmine/utils/Color.php:	 * Returns a Color from the supplied RGB colour code (24-bit)
src/pocketmine/utils/Color.php:	 * Returns a Color from the supplied ARGB colour code (32-bit)
src/pocketmine/utils/Color.php:	 * Returns an ARGB 32-bit colour value.
src/pocketmine/utils/Color.php:		return ($this->a << 24) | ($this->r << 16) | ($this->g << 8) | $this->b;
src/pocketmine/utils/Color.php:	 * Returns a little-endian ARGB 32-bit colour value.
src/pocketmine/utils/Color.php:		return ($this->b << 24) | ($this->g << 16) | ($this->r << 8) | $this->a;
src/pocketmine/utils/Color.php:	 * Returns an RGBA 32-bit colour value.
src/pocketmine/utils/Color.php:		return ($this->r << 24) | ($this->g << 16) | ($this->b << 8) | $this->a;
src/pocketmine/utils/Color.php:	 * Returns a little-endian RGBA colour value.
src/pocketmine/utils/Color.php:		return ($this->a << 24) | ($this->b << 16) | ($this->g << 8) | $this->r;
src/pocketmine/utils/Process.php:	 * @phpstan-return array{int,int,int}
src/pocketmine/utils/Process.php:			if(preg_match("/VmRSS:[ \t]+([0-9]+) kB/", $status, $matches) > 0){
src/pocketmine/utils/Process.php:			if(preg_match("/VmSize:[ \t]+([0-9]+) kB/", $status, $matches) > 0){
src/pocketmine/utils/Process.php:				if(preg_match("#([a-z0-9]+)\\-([a-z0-9]+) [rwxp\\-]{4} [a-z0-9]+ [^\\[]*\\[([a-zA-z0-9]+)\\]#", trim($line), $matches) > 0){
src/pocketmine/utils/Process.php:						$heap += (int) hexdec($matches[2]) - (int) hexdec($matches[1]);
src/pocketmine/utils/Process.php:						$stack += (int) hexdec($matches[2]) - (int) hexdec($matches[1]);
src/pocketmine/utils/Process.php:			if(preg_match("/Threads:[ \t]+([0-9]+)/", $status, $matches) > 0){
src/pocketmine/utils/Process.php:		return count(ThreadManager::getInstance()->getAll()) + 3; //RakLib + MainLogger + Main Thread
src/pocketmine/utils/Process.php:			MainLogger::getLogger()->syncFlushBuffer();
src/pocketmine/utils/Process.php:					exec("kill -9 $pid > /dev/null 2>&1");
src/pocketmine/utils/Process.php:			return -1;
src/pocketmine/utils/Terminal.php:	 * Note that this is platform-dependent and might produce different results depending on the terminal type and/or OS.
src/pocketmine/utils/ReversePriorityQueue.php: * @phpstan-template TPriority
src/pocketmine/utils/ReversePriorityQueue.php: * @phpstan-template TValue
src/pocketmine/utils/ReversePriorityQueue.php: * @phpstan-extends \SplPriorityQueue<TPriority, TValue>
src/pocketmine/utils/ReversePriorityQueue.php:	 * @phpstan-param TPriority $priority1
src/pocketmine/utils/ReversePriorityQueue.php:	 * @phpstan-param TPriority $priority2
src/pocketmine/utils/ReversePriorityQueue.php:		//TODO: this will crash if non-numeric priorities are used
src/pocketmine/utils/ReversePriorityQueue.php:		return (int) -($priority1 - $priority2);
src/pocketmine/utils/UUID.php:		$this->parts = [$part1, $part2, $part3, $part4];
src/pocketmine/utils/UUID.php:		$this->version = $version ?? ($this->parts[1] & 0xf000) >> 12;
src/pocketmine/utils/UUID.php:		return $this->version;
src/pocketmine/utils/UUID.php:		return $uuid->parts === $this->parts;
src/pocketmine/utils/UUID.php:		//TODO: should we be stricter about the notation (8-4-4-4-12)?
src/pocketmine/utils/UUID.php:		$binary = @hex2bin(str_replace("-", "", trim($uuid)));
src/pocketmine/utils/UUID.php:		return self::fromData(Binary::writeInt(time()), Binary::writeShort(($pid = getmypid()) !== false ? $pid : 0), Binary::writeShort(($uid = getmyuid()) !== false ? $uid : 0), Binary::writeInt(mt_rand(-0x7fffffff, 0x7fffffff)), Binary::writeInt(mt_rand(-0x7fffffff, 0x7fffffff)));
src/pocketmine/utils/UUID.php:		return Binary::writeInt($this->parts[0]) . Binary::writeInt($this->parts[1]) . Binary::writeInt($this->parts[2]) . Binary::writeInt($this->parts[3]);
src/pocketmine/utils/UUID.php:		$hex = bin2hex($this->toBinary());
src/pocketmine/utils/UUID.php:		//xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx 8-4-4-4-12
src/pocketmine/utils/UUID.php:		return substr($hex, 0, 8) . "-" . substr($hex, 8, 4) . "-" . substr($hex, 12, 4) . "-" . substr($hex, 16, 4) . "-" . substr($hex, 20, 12);
src/pocketmine/utils/UUID.php:		return $this->toString();
src/pocketmine/utils/UUID.php:		return $this->parts[$partNumber];
src/pocketmine/utils/UUID.php:		return $this->parts;
src/pocketmine/utils/Config.php:	public const DETECT = -1; //Detect by file extension
src/pocketmine/utils/Config.php:	 * @phpstan-var array<string, mixed>
src/pocketmine/utils/Config.php:	 * @phpstan-var array<string, mixed>
src/pocketmine/utils/Config.php:	 * @param int     $type    Config type to load, -1 by default (detect)
src/pocketmine/utils/Config.php:	 * @phpstan-param array<string, mixed> $default
src/pocketmine/utils/Config.php:		$this->load($file, $type, $default);
src/pocketmine/utils/Config.php:		$correct = $this->correct;
src/pocketmine/utils/Config.php:		$this->config = [];
src/pocketmine/utils/Config.php:		$this->nestedCache = [];
src/pocketmine/utils/Config.php:		$this->correct = false;
src/pocketmine/utils/Config.php:		$this->load($this->file, $this->type);
src/pocketmine/utils/Config.php:		return $this->changed;
src/pocketmine/utils/Config.php:		$this->changed = $changed;
src/pocketmine/utils/Config.php:	 * @phpstan-param array<string, mixed> $default
src/pocketmine/utils/Config.php:		$this->correct = true;
src/pocketmine/utils/Config.php:		$this->file = $file;
src/pocketmine/utils/Config.php:		$this->type = $type;
src/pocketmine/utils/Config.php:		if($this->type === Config::DETECT){
src/pocketmine/utils/Config.php:			$extension = explode(".", basename($this->file));
src/pocketmine/utils/Config.php:				$this->type = Config::$formats[$extension];
src/pocketmine/utils/Config.php:				$this->correct = false;
src/pocketmine/utils/Config.php:			$this->config = $default;
src/pocketmine/utils/Config.php:			$this->save();
src/pocketmine/utils/Config.php:			if($this->correct){
src/pocketmine/utils/Config.php:				$content = file_get_contents($this->file);
src/pocketmine/utils/Config.php:					$this->correct = false;
src/pocketmine/utils/Config.php:				switch($this->type){
src/pocketmine/utils/Config.php:						$config = $this->parseProperties($content);
src/pocketmine/utils/Config.php:						$this->correct = false;
src/pocketmine/utils/Config.php:				$this->config = is_array($config) ? $config : $default;
src/pocketmine/utils/Config.php:				if($this->fillDefaults($default, $this->config) > 0){
src/pocketmine/utils/Config.php:					$this->save();
src/pocketmine/utils/Config.php:		return $this->correct;
src/pocketmine/utils/Config.php:		if($this->correct){
src/pocketmine/utils/Config.php:			switch($this->type){
src/pocketmine/utils/Config.php:					$content = $this->writeProperties();
src/pocketmine/utils/Config.php:					$content = json_encode($this->config, $this->jsonOptions);
src/pocketmine/utils/Config.php:					$content = yaml_emit($this->config, YAML_UTF8_ENCODING);
src/pocketmine/utils/Config.php:					$content = serialize($this->config);
src/pocketmine/utils/Config.php:					$content = implode("\r\n", array_keys($this->config));
src/pocketmine/utils/Config.php:			file_put_contents($this->file, $content);
src/pocketmine/utils/Config.php:			$this->changed = false;
src/pocketmine/utils/Config.php:		return $this->file;
src/pocketmine/utils/Config.php:		if($this->type !== Config::JSON){
src/pocketmine/utils/Config.php:			throw new \RuntimeException("Attempt to set JSON options for non-JSON config");
src/pocketmine/utils/Config.php:		$this->jsonOptions = $options;
src/pocketmine/utils/Config.php:		$this->changed = true;
src/pocketmine/utils/Config.php:		if($this->type !== Config::JSON){
src/pocketmine/utils/Config.php:			throw new \RuntimeException("Attempt to enable JSON option for non-JSON config");
src/pocketmine/utils/Config.php:		$this->jsonOptions |= $option;
src/pocketmine/utils/Config.php:		$this->changed = true;
src/pocketmine/utils/Config.php:		if($this->type !== Config::JSON){
src/pocketmine/utils/Config.php:			throw new \RuntimeException("Attempt to disable JSON option for non-JSON config");
src/pocketmine/utils/Config.php:		$this->jsonOptions &= ~$option;
src/pocketmine/utils/Config.php:		$this->changed = true;
src/pocketmine/utils/Config.php:		if($this->type !== Config::JSON){
src/pocketmine/utils/Config.php:			throw new \RuntimeException("Attempt to get JSON options for non-JSON config");
src/pocketmine/utils/Config.php:		return $this->jsonOptions;
src/pocketmine/utils/Config.php:		return $this->get($k);
src/pocketmine/utils/Config.php:		$this->set($k, $v);
src/pocketmine/utils/Config.php:		return $this->exists($k);
src/pocketmine/utils/Config.php:		$this->remove($k);
src/pocketmine/utils/Config.php:		if(!isset($this->config[$base])){
src/pocketmine/utils/Config.php:			$this->config[$base] = [];
src/pocketmine/utils/Config.php:		$base =& $this->config[$base];
src/pocketmine/utils/Config.php:		$this->nestedCache = [];
src/pocketmine/utils/Config.php:		$this->changed = true;
src/pocketmine/utils/Config.php:		if(isset($this->nestedCache[$key])){
src/pocketmine/utils/Config.php:			return $this->nestedCache[$key];
src/pocketmine/utils/Config.php:		if(isset($this->config[$base])){
src/pocketmine/utils/Config.php:			$base = $this->config[$base];
src/pocketmine/utils/Config.php:		return $this->nestedCache[$key] = $base;
src/pocketmine/utils/Config.php:		$this->nestedCache = [];
src/pocketmine/utils/Config.php:		$this->changed = true;
src/pocketmine/utils/Config.php:		$currentNode =& $this->config;
src/pocketmine/utils/Config.php:		return ($this->correct and isset($this->config[$k])) ? $this->config[$k] : $default;
src/pocketmine/utils/Config.php:		$this->config[$k] = $v;
src/pocketmine/utils/Config.php:		$this->changed = true;
src/pocketmine/utils/Config.php:		foreach($this->nestedCache as $nestedKey => $nvalue){
src/pocketmine/utils/Config.php:				unset($this->nestedCache[$nestedKey]);
src/pocketmine/utils/Config.php:	 * @phpstan-param array<string, mixed> $v
src/pocketmine/utils/Config.php:		$this->config = $v;
src/pocketmine/utils/Config.php:		$this->changed = true;
src/pocketmine/utils/Config.php:	 * @param bool   $lowercase If set, searches Config in single-case / lowercase.
src/pocketmine/utils/Config.php:			$array = array_change_key_case($this->config, CASE_LOWER); //Change all keys in array to lower
src/pocketmine/utils/Config.php:			return isset($this->config[$k]);
src/pocketmine/utils/Config.php:		unset($this->config[$k]);
src/pocketmine/utils/Config.php:		$this->changed = true;
src/pocketmine/utils/Config.php:	 * @phpstan-return list<string>|array<string, mixed>
src/pocketmine/utils/Config.php:		return ($keys ? array_keys($this->config) : $this->config);
src/pocketmine/utils/Config.php:	 * @phpstan-param array<string, mixed> $defaults
src/pocketmine/utils/Config.php:		$this->fillDefaults($defaults, $this->config);
src/pocketmine/utils/Config.php:	 * @phpstan-param array<string, mixed> $default
src/pocketmine/utils/Config.php:	 * @phpstan-param array<string, mixed> $data
src/pocketmine/utils/Config.php:				$changed += $this->fillDefaults($v, $data[$k]);
src/pocketmine/utils/Config.php:			$this->changed = true;
src/pocketmine/utils/Config.php:	 * @phpstan-return array<string, true>
src/pocketmine/utils/Config.php:		foreach($this->config as $k => $v){
src/pocketmine/utils/Config.php:		if(preg_match_all('/^\s*([a-zA-Z0-9\-_\.]+)[ \t]*=([^\r\n]*)/um', $content, $matches) > 0){ //false or 0 matches
src/pocketmine/utils/Config.php:					MainLogger::getLogger()->debug("[Config] Repeated property " . $k . " on file " . $this->file);
src/pocketmine/utils/ServerKiller.php:		$this->time = $time;
src/pocketmine/utils/ServerKiller.php:		$this->registerClassLoader();
src/pocketmine/utils/ServerKiller.php:		$this->synchronized(function() : void{
src/pocketmine/utils/ServerKiller.php:			if(!$this->stopped){
src/pocketmine/utils/ServerKiller.php:				$this->wait($this->time * 1000000);
src/pocketmine/utils/ServerKiller.php:		if(time() - $start >= $this->time){
src/pocketmine/utils/ServerKiller.php:		$this->synchronized(function() : void{
src/pocketmine/utils/ServerKiller.php:			$this->stopped = true;
src/pocketmine/utils/ServerKiller.php:			$this->notify();
src/pocketmine/Worker.php:		return $this->classLoader;
src/pocketmine/Worker.php:		$this->composerAutoloaderPath = \pocketmine\COMPOSER_AUTOLOADER_PATH;
src/pocketmine/Worker.php:			$loader = Server::getInstance()->getLoader();
src/pocketmine/Worker.php:		$this->classLoader = $loader;
src/pocketmine/Worker.php:		if($this->composerAutoloaderPath !== null){
src/pocketmine/Worker.php:			require $this->composerAutoloaderPath;
src/pocketmine/Worker.php:		if($this->classLoader !== null){
src/pocketmine/Worker.php:			$this->classLoader->register(false);
src/pocketmine/Worker.php:		ThreadManager::getInstance()->add($this);
src/pocketmine/Worker.php:		if($this->getClassLoader() === null){
src/pocketmine/Worker.php:			$this->setClassLoader();
src/pocketmine/Worker.php:		$this->isKilled = true;
src/pocketmine/Worker.php:		if($this->isRunning()){
src/pocketmine/Worker.php:			while($this->unstack() !== null);
src/pocketmine/Worker.php:			$this->notify();
src/pocketmine/Worker.php:			$this->shutdown();
src/pocketmine/Worker.php:		ThreadManager::getInstance()->remove($this);
src/pocketmine/Worker.php:		return (new \ReflectionClass($this))->getShortName();
src/pocketmine/VersionInfo.php:const NAME = "PocketMine-MP";
src/pocketmine/Player.php:    private const RESERVED_WINDOW_ID_RANGE_START = ContainerIds::LAST - 10;
src/pocketmine/Player.php:        return 'rcon' !== $lname and 'console' !== $lname and $len >= 1 and $len <= 16 and 0 === preg_match('/[^A-Za-z0-9_ ]/', $name);
src/pocketmine/Player.php:     * @phpstan-var array<int, true>
src/pocketmine/Player.php:    protected $viewDistance = -1;
src/pocketmine/Player.php:    protected $startAction = -1;
src/pocketmine/Player.php:        if ($this->spawned) {
src/pocketmine/Player.php:                $this->getDisplayName(),
src/pocketmine/Player.php:        return $this->randomClientId;
src/pocketmine/Player.php:        return $this->server->getNameBans()->isBanned($this->username);
src/pocketmine/Player.php:            $this->server->getNameBans()->addBan($this->getName(), null, null, null);
src/pocketmine/Player.php:            $this->kick('You have been banned');
src/pocketmine/Player.php:            $this->server->getNameBans()->remove($this->getName());
src/pocketmine/Player.php:        return $this->server->isWhitelisted($this->username);
src/pocketmine/Player.php:            $this->server->addWhitelist($this->username);
src/pocketmine/Player.php:            $this->server->removeWhitelist($this->username);
src/pocketmine/Player.php:        return '' !== $this->xuid;
src/pocketmine/Player.php:        return $this->xuid;
src/pocketmine/Player.php:     * - when logged into XBL: a hash of their XUID (and as such will not change for the lifetime of the XBL account)
src/pocketmine/Player.php:     * - when NOT logged into XBL: a hash of their name + clientID + secret device ID.
src/pocketmine/Player.php:     * a server-computed UUID.)
src/pocketmine/Player.php:        return $this->namedtag->getLong('firstPlayed', 0, true);
src/pocketmine/Player.php:        return $this->namedtag->getLong('lastPlayed', 0, true);
src/pocketmine/Player.php:        return $this->playedBefore;
src/pocketmine/Player.php:        $this->allowFlight = $value;
src/pocketmine/Player.php:        $this->sendSettings();
src/pocketmine/Player.php:        return $this->allowFlight;
src/pocketmine/Player.php:        if ($this->flying !== $value) {
src/pocketmine/Player.php:            $this->flying = $value;
src/pocketmine/Player.php:            $this->resetFallDistance();
src/pocketmine/Player.php:            $this->sendSettings();
src/pocketmine/Player.php:        return $this->flying;
src/pocketmine/Player.php:        $this->autoJump = $value;
src/pocketmine/Player.php:        $this->sendSettings();
src/pocketmine/Player.php:        return $this->autoJump;
src/pocketmine/Player.php:        return $this->allowMovementCheats;
src/pocketmine/Player.php:        $this->allowMovementCheats = $value;
src/pocketmine/Player.php:        if ($this->spawned and $player->spawned and $this->isAlive() and $player->isAlive() and $player->getLevelNonNull() === $this->level and $player->canSee($this) and !$this->isSpectator()) {
src/pocketmine/Player.php:        return $this->server;
src/pocketmine/Player.php:        return $this->removeFormat;
src/pocketmine/Player.php:        $this->removeFormat = $remove;
src/pocketmine/Player.php:        return $this->lineHeight ?? 7;
src/pocketmine/Player.php:        $this->lineHeight = $height;
src/pocketmine/Player.php:        return !isset($this->hiddenPlayers[$player->getRawUniqueId()]);
src/pocketmine/Player.php:        $this->hiddenPlayers[$player->getRawUniqueId()] = true;
src/pocketmine/Player.php:        $player->despawnFrom($this);
src/pocketmine/Player.php:        unset($this->hiddenPlayers[$player->getRawUniqueId()]);
src/pocketmine/Player.php:        if ($player->isOnline()) {
src/pocketmine/Player.php:            $player->spawnTo($this);
src/pocketmine/Player.php:        return !$this->isSpectator() and parent::canBeCollidedWith();
src/pocketmine/Player.php:        $this->inAirTicks = 0;
src/pocketmine/Player.php:        return $this->viewDistance;
src/pocketmine/Player.php:        $this->viewDistance = $this->server->getAllowedViewDistance($distance);
src/pocketmine/Player.php:        $this->spawnThreshold = (int) (min($this->viewDistance, $this->server->getProperty('chunk-sending.spawn-radius', 4)) ** 2 * M_PI);
src/pocketmine/Player.php:        $this->nextChunkOrderRun = 0;
src/pocketmine/Player.php:        $pk->radius = $this->viewDistance;
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        $this->server->getLogger()->debug('Setting view distance for '.$this->getName().' to '.$this->viewDistance.' (requested '.$distance.')');
src/pocketmine/Player.php:        return $this->isConnected() and $this->loggedIn;
src/pocketmine/Player.php:        return $this->server->isOp($this->getName());
src/pocketmine/Player.php:        if ($value === $this->isOp()) {
src/pocketmine/Player.php:            $this->server->addOp($this->getName());
src/pocketmine/Player.php:            $this->server->removeOp($this->getName());
src/pocketmine/Player.php:        $this->sendSettings();
src/pocketmine/Player.php:        return $this->perm->isPermissionSet($name);
src/pocketmine/Player.php:        if ($this->closed) {
src/pocketmine/Player.php:        return $this->perm->hasPermission($name);
src/pocketmine/Player.php:        return $this->perm->addAttachment($plugin, $name, $value);
src/pocketmine/Player.php:        $this->perm->removeAttachment($attachment);
src/pocketmine/Player.php:        $permManager->unsubscribeFromPermission(Server::BROADCAST_CHANNEL_USERS, $this);
src/pocketmine/Player.php:        $permManager->unsubscribeFromPermission(Server::BROADCAST_CHANNEL_ADMINISTRATIVE, $this);
src/pocketmine/Player.php:        if (null === $this->perm) {
src/pocketmine/Player.php:        $this->perm->recalculatePermissions();
src/pocketmine/Player.php:        if ($this->spawned) {
src/pocketmine/Player.php:            if ($this->hasPermission(Server::BROADCAST_CHANNEL_USERS)) {
src/pocketmine/Player.php:                $permManager->subscribeToPermission(Server::BROADCAST_CHANNEL_USERS, $this);
src/pocketmine/Player.php:            if ($this->hasPermission(Server::BROADCAST_CHANNEL_ADMINISTRATIVE)) {
src/pocketmine/Player.php:                $permManager->subscribeToPermission(Server::BROADCAST_CHANNEL_ADMINISTRATIVE, $this);
src/pocketmine/Player.php:            $this->sendCommandData();
src/pocketmine/Player.php:        return $this->perm->getEffectivePermissions();
src/pocketmine/Player.php:        foreach ($this->server->getCommandMap()->getCommands() as $name => $command) {
src/pocketmine/Player.php:            if (isset($pk->commandData[$command->getName()]) or 'help' === $command->getName() or !$command->testPermissionSilent($this)) {
src/pocketmine/Player.php:            $data->commandName = strtolower($command->getName());
src/pocketmine/Player.php:            $data->commandDescription = $this->server->getLanguage()->translateString($command->getDescription());
src/pocketmine/Player.php:            $data->flags = 0;
src/pocketmine/Player.php:            $data->permission = 0;
src/pocketmine/Player.php:            $parameter->paramName = 'args';
src/pocketmine/Player.php:            $parameter->paramType = AvailableCommandsPacket::ARG_FLAG_VALID | AvailableCommandsPacket::ARG_TYPE_RAWTEXT;
src/pocketmine/Player.php:            $parameter->isOptional = true;
src/pocketmine/Player.php:            $data->overloads[0][0] = $parameter;
src/pocketmine/Player.php:            $aliases = $command->getAliases();
src/pocketmine/Player.php:                if (!in_array($data->commandName, $aliases, true)) {
src/pocketmine/Player.php:                    $aliases[] = $data->commandName;
src/pocketmine/Player.php:                $data->aliases = new CommandEnum();
src/pocketmine/Player.php:                $data->aliases->enumName = ucfirst($command->getName()).'Aliases';
src/pocketmine/Player.php:                $data->aliases->enumValues = array_values($aliases);
src/pocketmine/Player.php:            $pk->commandData[$command->getName()] = $data;
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        $this->interface = $interface;
src/pocketmine/Player.php:        $this->perm = new PermissibleBase($this);
src/pocketmine/Player.php:        $this->namedtag = new CompoundTag();
src/pocketmine/Player.php:        $this->server = Server::getInstance();
src/pocketmine/Player.php:        $this->ip = $ip;
src/pocketmine/Player.php:        $this->port = $port;
src/pocketmine/Player.php:        $this->loaderId = Level::generateChunkLoaderId($this);
src/pocketmine/Player.php:        $this->chunksPerTick = (int) $this->server->getProperty('chunk-sending.per-tick', 4);
src/pocketmine/Player.php:        $this->spawnThreshold = (int) (($this->server->getProperty('chunk-sending.spawn-radius', 4) ** 2) * M_PI);
src/pocketmine/Player.php:        $this->gamemode = $this->server->getGamemode();
src/pocketmine/Player.php:        $this->setLevel($this->server->getDefaultLevel());
src/pocketmine/Player.php:        $this->boundingBox = new AxisAlignedBB(0, 0, 0, 0, 0, 0);
src/pocketmine/Player.php:        $this->creationTime = microtime(true);
src/pocketmine/Player.php:        $this->allowMovementCheats = (bool) $this->server->getProperty('player.anti-cheat.allow-movement-cheats', false);
src/pocketmine/Player.php:        $this->sessionAdapter = new PlayerNetworkSessionAdapter($this->server, $this);
src/pocketmine/Player.php:        return null !== $this->sessionAdapter;
src/pocketmine/Player.php:        return $this->username;
src/pocketmine/Player.php:        return $this->iusername;
src/pocketmine/Player.php:        return $this->displayName;
src/pocketmine/Player.php:        $this->displayName = $name;
src/pocketmine/Player.php:        if ($this->spawned) {
src/pocketmine/Player.php:            $this->server->updatePlayerListData($this->getUniqueId(), $this->getId(), $this->getDisplayName(), $this->getSkin(), $this->getXuid());
src/pocketmine/Player.php:        return $this->locale;
src/pocketmine/Player.php:        if (!$skin->isValid()) {
src/pocketmine/Player.php:        $ev = new PlayerChangeSkinEvent($this, $this->getSkin(), $skin);
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if ($ev->isCancelled()) {
src/pocketmine/Player.php:            $this->sendSkin([$this]);
src/pocketmine/Player.php:        $this->setSkin($ev->getNewSkin());
src/pocketmine/Player.php:        $this->sendSkin($this->server->getOnlinePlayers());
src/pocketmine/Player.php:        parent::sendSkin($targets ?? $this->server->getOnlinePlayers());
src/pocketmine/Player.php:        return $this->ip;
src/pocketmine/Player.php:        return $this->port;
src/pocketmine/Player.php:        return $this->lastPingMeasure;
src/pocketmine/Player.php:        $this->lastPingMeasure = $pingMS;
src/pocketmine/Player.php:        return $this->getPosition();
src/pocketmine/Player.php:        return $this->inAirTicks;
src/pocketmine/Player.php:     * Returns whether the player is currently using an item (right-click and hold).
src/pocketmine/Player.php:        return $this->getGenericFlag(self::DATA_FLAG_ACTION) and $this->startAction > -1;
src/pocketmine/Player.php:        $this->startAction = $value ? $this->server->getTick() : -1;
src/pocketmine/Player.php:        $this->setGenericFlag(self::DATA_FLAG_ACTION, $value);
src/pocketmine/Player.php:     * Returns how long the player has been using their currently-held item for. Used for determining arrow shoot force
src/pocketmine/Player.php:        return -1 === $this->startAction ? -1 : ($this->server->getTick() - $this->startAction);
src/pocketmine/Player.php:        $this->checkItemCooldowns();
src/pocketmine/Player.php:        return isset($this->usedItemsCooldown[$item->getId()]);
src/pocketmine/Player.php:        $ticks = $ticks ?? $item->getCooldownTicks();
src/pocketmine/Player.php:            $this->usedItemsCooldown[$item->getId()] = $this->server->getTick() + $ticks;
src/pocketmine/Player.php:        $serverTick = $this->server->getTick();
src/pocketmine/Player.php:        foreach ($this->usedItemsCooldown as $itemId => $cooldownUntil) {
src/pocketmine/Player.php:                unset($this->usedItemsCooldown[$itemId]);
src/pocketmine/Player.php:        $oldLevel = $this->level;
src/pocketmine/Player.php:                foreach ($this->usedChunks as $index => $d) {
src/pocketmine/Player.php:                    $this->unloadChunk($X, $Z, $oldLevel);
src/pocketmine/Player.php:            $this->usedChunks = [];
src/pocketmine/Player.php:            $this->loadQueue = [];
src/pocketmine/Player.php:            $this->level->sendTime($this);
src/pocketmine/Player.php:            $this->level->sendDifficulty($this);
src/pocketmine/Player.php:        $level = $level ?? $this->level;
src/pocketmine/Player.php:        if (isset($this->usedChunks[$index])) {
src/pocketmine/Player.php:            foreach ($level->getChunkEntities($x, $z) as $entity) {
src/pocketmine/Player.php:                    $entity->despawnFrom($this);
src/pocketmine/Player.php:            unset($this->usedChunks[$index]);
src/pocketmine/Player.php:        $level->unregisterChunkLoader($this, $x, $z);
src/pocketmine/Player.php:        unset($this->loadQueue[$index]);
src/pocketmine/Player.php:        if (!$this->isConnected()) {
src/pocketmine/Player.php:        $this->usedChunks[Level::chunkHash($x, $z)] = true;
src/pocketmine/Player.php:        $this->dataPacket($payload);
src/pocketmine/Player.php:        if ($this->spawned) {
src/pocketmine/Player.php:            foreach ($this->level->getChunkEntities($x, $z) as $entity) {
src/pocketmine/Player.php:                if ($entity !== $this and !$entity->isClosed() and $entity->isAlive()) {
src/pocketmine/Player.php:                    $entity->spawnTo($this);
src/pocketmine/Player.php:        if (-1 !== $this->spawnChunkLoadCount and ++$this->spawnChunkLoadCount >= $this->spawnThreshold) {
src/pocketmine/Player.php:            $this->sendPlayStatus(PlayStatusPacket::PLAYER_SPAWN);
src/pocketmine/Player.php:            $this->spawnChunkLoadCount = -1;
src/pocketmine/Player.php:        if (!$this->isConnected()) {
src/pocketmine/Player.php:        Timings::$playerChunkSendTimer->startTiming();
src/pocketmine/Player.php:        foreach ($this->loadQueue as $index => $distance) {
src/pocketmine/Player.php:            if ($count >= $this->chunksPerTick) {
src/pocketmine/Player.php:            $this->usedChunks[$index] = false;
src/pocketmine/Player.php:            $this->level->registerChunkLoader($this, $X, $Z, false);
src/pocketmine/Player.php:            if (!$this->level->populateChunk($X, $Z)) {
src/pocketmine/Player.php:            unset($this->loadQueue[$index]);
src/pocketmine/Player.php:            $this->level->requestChunk($X, $Z, $this);
src/pocketmine/Player.php:        Timings::$playerChunkSendTimer->stopTiming();
src/pocketmine/Player.php:        if ($this->spawned) {
src/pocketmine/Player.php:        $this->spawned = true;
src/pocketmine/Player.php:        $this->setImmobile(false);
src/pocketmine/Player.php:        if ($this->hasPermission(Server::BROADCAST_CHANNEL_USERS)) {
src/pocketmine/Player.php:            PermissionManager::getInstance()->subscribeToPermission(Server::BROADCAST_CHANNEL_USERS, $this);
src/pocketmine/Player.php:        if ($this->hasPermission(Server::BROADCAST_CHANNEL_ADMINISTRATIVE)) {
src/pocketmine/Player.php:            PermissionManager::getInstance()->subscribeToPermission(Server::BROADCAST_CHANNEL_ADMINISTRATIVE, $this);
src/pocketmine/Player.php:                $this->getDisplayName(),
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if (strlen(trim((string) $ev->getJoinMessage())) > 0) {
src/pocketmine/Player.php:            $this->server->broadcastMessage($ev->getJoinMessage());
src/pocketmine/Player.php:        $this->noDamageTicks = 60;
src/pocketmine/Player.php:        foreach ($this->usedChunks as $index => $hasSent) {
src/pocketmine/Player.php:            foreach ($this->level->getChunkEntities($chunkX, $chunkZ) as $entity) {
src/pocketmine/Player.php:                if ($entity !== $this and !$entity->isClosed() and $entity->isAlive() and !$entity->isFlaggedForDespawn()) {
src/pocketmine/Player.php:                    $entity->spawnTo($this);
src/pocketmine/Player.php:        $this->spawnToAll();
src/pocketmine/Player.php:        if ($this->server->getUpdater()->hasUpdate() and $this->hasPermission(Server::BROADCAST_CHANNEL_ADMINISTRATIVE) and $this->server->getProperty('auto-updater.on-update.warn-ops', true)) {
src/pocketmine/Player.php:            $this->server->getUpdater()->showPlayerUpdate($this);
src/pocketmine/Player.php:        if ($this->getHealth() <= 0) {
src/pocketmine/Player.php:            $this->respawn();
src/pocketmine/Player.php:        $pk->position = $pos->add(0, $this->baseOffset, 0);
src/pocketmine/Player.php:        $pk->respawnState = $respawnState;
src/pocketmine/Player.php:        $pk->entityRuntimeId = $this->getId();
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        if (!$this->isConnected() or -1 === $this->viewDistance) {
src/pocketmine/Player.php:        Timings::$playerChunkOrderTimer->startTiming();
src/pocketmine/Player.php:        $radius = $this->server->getAllowedViewDistance($this->viewDistance);
src/pocketmine/Player.php:        $unloadChunks = $this->usedChunks;
src/pocketmine/Player.php:        $centerX = $this->getFloorX() >> 4;
src/pocketmine/Player.php:        $centerZ = $this->getFloorZ() >> 4;
src/pocketmine/Player.php:                if (!isset($this->usedChunks[$index = Level::chunkHash($centerX + $x, $centerZ + $z)]) or false === $this->usedChunks[$index]) {
src/pocketmine/Player.php:                if (!isset($this->usedChunks[$index = Level::chunkHash($centerX - $x - 1, $centerZ + $z)]) or false === $this->usedChunks[$index]) {
src/pocketmine/Player.php:                if (!isset($this->usedChunks[$index = Level::chunkHash($centerX + $x, $centerZ - $z - 1)]) or false === $this->usedChunks[$index]) {
src/pocketmine/Player.php:                if (!isset($this->usedChunks[$index = Level::chunkHash($centerX - $x - 1, $centerZ - $z - 1)]) or false === $this->usedChunks[$index]) {
src/pocketmine/Player.php:                    if (!isset($this->usedChunks[$index = Level::chunkHash($centerX + $z, $centerZ + $x)]) or false === $this->usedChunks[$index]) {
src/pocketmine/Player.php:                    if (!isset($this->usedChunks[$index = Level::chunkHash($centerX - $z - 1, $centerZ + $x)]) or false === $this->usedChunks[$index]) {
src/pocketmine/Player.php:                    if (!isset($this->usedChunks[$index = Level::chunkHash($centerX + $z, $centerZ - $x - 1)]) or false === $this->usedChunks[$index]) {
src/pocketmine/Player.php:                    if (!isset($this->usedChunks[$index = Level::chunkHash($centerX - $z - 1, $centerZ - $x - 1)]) or false === $this->usedChunks[$index]) {
src/pocketmine/Player.php:            $this->unloadChunk($X, $Z);
src/pocketmine/Player.php:        $this->loadQueue = $newOrder;
src/pocketmine/Player.php:        if (count($this->loadQueue) > 0 or count($unloadChunks) > 0) {
src/pocketmine/Player.php:            $pk->x = $this->getFloorX();
src/pocketmine/Player.php:            $pk->y = $this->getFloorY();
src/pocketmine/Player.php:            $pk->z = $this->getFloorZ();
src/pocketmine/Player.php:            $pk->radius = $this->viewDistance * 16; //blocks, not chunks >.>
src/pocketmine/Player.php:            $this->dataPacket($pk);
src/pocketmine/Player.php:        Timings::$playerChunkOrderTimer->stopTiming();
src/pocketmine/Player.php:        if ($this->hasValidSpawnPosition()) {
src/pocketmine/Player.php:            return $this->spawnPosition;
src/pocketmine/Player.php:            $level = $this->server->getDefaultLevel();
src/pocketmine/Player.php:            return $level->getSafeSpawn();
src/pocketmine/Player.php:        return null !== $this->spawnPosition and $this->spawnPosition->isValid();
src/pocketmine/Player.php:            $level = $this->level;
src/pocketmine/Player.php:            $level = $pos->getLevelNonNull();
src/pocketmine/Player.php:        $this->spawnPosition = new Position($pos->x, $pos->y, $pos->z, $level);
src/pocketmine/Player.php:        $pk->x = $pk->x2 = $this->spawnPosition->getFloorX();
src/pocketmine/Player.php:        $pk->y = $pk->y2 = $this->spawnPosition->getFloorY();
src/pocketmine/Player.php:        $pk->z = $pk->z2 = $this->spawnPosition->getFloorZ();
src/pocketmine/Player.php:        $pk->dimension = DimensionIds::OVERWORLD;
src/pocketmine/Player.php:        $pk->spawnType = SetSpawnPositionPacket::TYPE_PLAYER_SPAWN;
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        return null !== $this->sleeping;
src/pocketmine/Player.php:        if (!$this->isOnline()) {
src/pocketmine/Player.php:        $pos = $pos->floor();
src/pocketmine/Player.php:        $b = $this->level->getBlock($pos);
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if ($ev->isCancelled()) {
src/pocketmine/Player.php:            $b->setOccupied();
src/pocketmine/Player.php:        $this->sleeping = clone $pos;
src/pocketmine/Player.php:        $this->propertyManager->setBlockPos(self::DATA_PLAYER_BED_POSITION, $pos);
src/pocketmine/Player.php:        $this->setPlayerFlag(self::DATA_PLAYER_FLAG_SLEEP, true);
src/pocketmine/Player.php:        $this->setSpawn($pos);
src/pocketmine/Player.php:        $this->level->setSleepTicks(60);
src/pocketmine/Player.php:        if ($this->sleeping instanceof Vector3) {
src/pocketmine/Player.php:            $b = $this->level->getBlock($this->sleeping);
src/pocketmine/Player.php:                $b->setOccupied(false);
src/pocketmine/Player.php:            (new PlayerBedLeaveEvent($this, $b))->call();
src/pocketmine/Player.php:            $this->sleeping = null;
src/pocketmine/Player.php:            $this->propertyManager->setBlockPos(self::DATA_PLAYER_BED_POSITION, null);
src/pocketmine/Player.php:            $this->setPlayerFlag(self::DATA_PLAYER_FLAG_SLEEP, false);
src/pocketmine/Player.php:            $this->level->setSleepTicks(0);
src/pocketmine/Player.php:            $pk->entityRuntimeId = $this->id;
src/pocketmine/Player.php:            $pk->action = AnimatePacket::ACTION_STOP_SLEEP;
src/pocketmine/Player.php:            $this->dataPacket($pk);
src/pocketmine/Player.php:        return $this->achievements[$achievementId] ?? false;
src/pocketmine/Player.php:        if (isset(Achievement::$list[$achievementId]) and !$this->hasAchievement($achievementId)) {
src/pocketmine/Player.php:                if (!$this->hasAchievement($requirementId)) {
src/pocketmine/Player.php:            $ev->call();
src/pocketmine/Player.php:            if (!$ev->isCancelled()) {
src/pocketmine/Player.php:                $this->achievements[$achievementId] = true;
src/pocketmine/Player.php:        if ($this->hasAchievement($achievementId)) {
src/pocketmine/Player.php:            $this->achievements[$achievementId] = false;
src/pocketmine/Player.php:        return $this->gamemode;
src/pocketmine/Player.php:     * Returns a client-friendly gamemode of the specified real gamemode
src/pocketmine/Player.php:        if ($gm < 0 or $gm > 3 or $this->gamemode === $gm) {
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if ($ev->isCancelled()) {
src/pocketmine/Player.php:                $this->sendGamemode();
src/pocketmine/Player.php:        $this->gamemode = $gm;
src/pocketmine/Player.php:        $this->allowFlight = $this->isCreative();
src/pocketmine/Player.php:        if ($this->isSpectator()) {
src/pocketmine/Player.php:            $this->setFlying(true);
src/pocketmine/Player.php:            $this->keepMovement = true;
src/pocketmine/Player.php:            $this->onGround = false;
src/pocketmine/Player.php:            $this->sendPosition($this, null, null, MovePlayerPacket::MODE_TELEPORT);
src/pocketmine/Player.php:            $this->despawnFromAll();
src/pocketmine/Player.php:            $this->keepMovement = $this->allowMovementCheats;
src/pocketmine/Player.php:            $this->checkGroundState(0, 0, 0, 0, 0, 0);
src/pocketmine/Player.php:            if ($this->isSurvival()) {
src/pocketmine/Player.php:                $this->setFlying(false);
src/pocketmine/Player.php:            $this->spawnToAll();
src/pocketmine/Player.php:        $this->namedtag->setInt('playerGameType', $this->gamemode);
src/pocketmine/Player.php:            $this->sendGamemode();
src/pocketmine/Player.php:        $this->sendSettings();
src/pocketmine/Player.php:        $this->inventory->sendCreativeContents();
src/pocketmine/Player.php:        $pk->gamemode = Player::getClientFriendlyGamemode($this->gamemode);
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        $pk->setFlag(AdventureSettingsPacket::WORLD_IMMUTABLE, $this->isSpectator());
src/pocketmine/Player.php:        $pk->setFlag(AdventureSettingsPacket::NO_PVP, $this->isSpectator());
src/pocketmine/Player.php:        $pk->setFlag(AdventureSettingsPacket::AUTO_JUMP, $this->autoJump);
src/pocketmine/Player.php:        $pk->setFlag(AdventureSettingsPacket::ALLOW_FLIGHT, $this->allowFlight);
src/pocketmine/Player.php:        $pk->setFlag(AdventureSettingsPacket::NO_CLIP, $this->isSpectator());
src/pocketmine/Player.php:        $pk->setFlag(AdventureSettingsPacket::FLYING, $this->flying);
src/pocketmine/Player.php:        $pk->commandPermission = ($this->isOp() ? AdventureSettingsPacket::PERMISSION_OPERATOR : AdventureSettingsPacket::PERMISSION_NORMAL);
src/pocketmine/Player.php:        $pk->playerPermission = ($this->isOp() ? PlayerPermissions::OPERATOR : PlayerPermissions::MEMBER);
src/pocketmine/Player.php:        $pk->entityUniqueId = $this->getId();
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:            return Player::SURVIVAL === $this->gamemode;
src/pocketmine/Player.php:            return 0 === ($this->gamemode & 0x01);
src/pocketmine/Player.php:            return Player::CREATIVE === $this->gamemode;
src/pocketmine/Player.php:            return 1 === ($this->gamemode & 0x01);
src/pocketmine/Player.php:            return Player::ADVENTURE === $this->gamemode;
src/pocketmine/Player.php:            return ($this->gamemode & 0x02) > 0;
src/pocketmine/Player.php:        return Player::SPECTATOR === $this->gamemode;
src/pocketmine/Player.php:        return $this->isCreative();
src/pocketmine/Player.php:        if (!$this->isCreative()) {
src/pocketmine/Player.php:        if (!$this->isCreative()) {
src/pocketmine/Player.php:        if ($this->isSpectator()) {
src/pocketmine/Player.php:            $this->onGround = false;
src/pocketmine/Player.php:            $bb = clone $this->boundingBox;
src/pocketmine/Player.php:            $bb->minY = $this->y - 0.2;
src/pocketmine/Player.php:            $bb->maxY = $this->y + 0.2;
src/pocketmine/Player.php:            $this->onGround = $this->isCollided = count($this->level->getCollisionBlocks($bb, true)) > 0;
src/pocketmine/Player.php:        return false; //currently has no server-side movement
src/pocketmine/Player.php:        foreach ($this->level->getNearbyEntities($this->boundingBox->expandedCopy(1, 0.5, 1), $this) as $entity) {
src/pocketmine/Player.php:            $entity->scheduleUpdate();
src/pocketmine/Player.php:            if (!$entity->isAlive() or $entity->isFlaggedForDespawn()) {
src/pocketmine/Player.php:            $entity->onCollideWithPlayer($this);
src/pocketmine/Player.php:        --$this->moveRateLimit;
src/pocketmine/Player.php:        if ($this->moveRateLimit < 0) {
src/pocketmine/Player.php:        $oldPos = $this->asLocation();
src/pocketmine/Player.php:        $distanceSquared = $newPos->distanceSquared($oldPos);
src/pocketmine/Player.php:             * This is NOT an anti-cheat check. It is a safety check.
src/pocketmine/Player.php:             * Not only that, but high-latency players can trigger such behaviour innocently.
src/pocketmine/Player.php:            $this->server->getLogger()->debug($this->getName().' moved too fast, reverting movement');
src/pocketmine/Player.php:            $this->server->getLogger()->debug('Old position: '.$this->asVector3().', new position: '.$newPos);
src/pocketmine/Player.php:        } elseif (!$this->level->isInLoadedTerrain($newPos) or !$this->level->isChunkGenerated($newPos->getFloorX() >> 4, $newPos->getFloorZ() >> 4)) {
src/pocketmine/Player.php:            $this->nextChunkOrderRun = 0;
src/pocketmine/Player.php:            $dx = $newPos->x - $this->x;
src/pocketmine/Player.php:            $dy = $newPos->y - $this->y;
src/pocketmine/Player.php:            $dz = $newPos->z - $this->z;
src/pocketmine/Player.php:            //the client likes to clip into blocks like stairs, but we do full server-side prediction of that without
src/pocketmine/Player.php:            $expectedClipDistance = $this->ySize * (1 - self::STEP_CLIP_MULTIPLIER);
src/pocketmine/Player.php:            $dy -= $expectedClipDistance;
src/pocketmine/Player.php:            $this->move($dx, $dy, $dz);
src/pocketmine/Player.php:            $diff = $this->distanceSquared($newPos);
src/pocketmine/Player.php:            if ($this->isSurvival() and $diff > 0.0625) {
src/pocketmine/Player.php:                $ev = new PlayerIllegalMoveEvent($this, $newPos, new Vector3($this->lastX, $this->lastY, $this->lastZ));
src/pocketmine/Player.php:                $ev->setCancelled($this->allowMovementCheats);
src/pocketmine/Player.php:                $ev->call();
src/pocketmine/Player.php:                if (!$ev->isCancelled()) {
src/pocketmine/Player.php:                    $this->server->getLogger()->debug($this->getServer()->getLanguage()->translateString('pocketmine.player.invalidMove', [$this->getName()]));
src/pocketmine/Player.php:                    $this->server->getLogger()->debug('Old position: '.$this->asVector3().', new position: '.$newPos.", expected clip distance: $expectedClipDistance");
src/pocketmine/Player.php:                $this->setPosition($newPos);
src/pocketmine/Player.php:            $this->revertMovement($oldPos);
src/pocketmine/Player.php:        $multiplier = null !== $this->lastMovementProcess ? ($now - $this->lastMovementProcess) * 20 : 1;
src/pocketmine/Player.php:        $exceededRateLimit = $this->moveRateLimit < 0;
src/pocketmine/Player.php:        $this->moveRateLimit = min(self::MOVE_BACKLOG_SIZE, max(0, $this->moveRateLimit) + self::MOVES_PER_TICK * $multiplier);
src/pocketmine/Player.php:        $this->lastMovementProcess = $now;
src/pocketmine/Player.php:        $from = new Location($this->lastX, $this->lastY, $this->lastZ, $this->lastYaw, $this->lastPitch, $this->level);
src/pocketmine/Player.php:        $to = $this->getLocation();
src/pocketmine/Player.php:        $delta = (($this->lastX - $to->x) ** 2) + (($this->lastY - $to->y) ** 2) + (($this->lastZ - $to->z) ** 2);
src/pocketmine/Player.php:        $deltaAngle = abs($this->lastYaw - $to->yaw) + abs($this->lastPitch - $to->pitch);
src/pocketmine/Player.php:            $this->lastX = $to->x;
src/pocketmine/Player.php:            $this->lastY = $to->y;
src/pocketmine/Player.php:            $this->lastZ = $to->z;
src/pocketmine/Player.php:            $this->lastYaw = $to->yaw;
src/pocketmine/Player.php:            $this->lastPitch = $to->pitch;
src/pocketmine/Player.php:            $ev->call();
src/pocketmine/Player.php:            if ($ev->isCancelled()) {
src/pocketmine/Player.php:                $this->revertMovement($from);
src/pocketmine/Player.php:            if ($to->distanceSquared($ev->getTo()) > 0.01) { //If plugins modify the destination
src/pocketmine/Player.php:                $this->teleport($ev->getTo());
src/pocketmine/Player.php:            $this->broadcastMovement();
src/pocketmine/Player.php:            $distance = sqrt((($from->x - $to->x) ** 2) + (($from->z - $to->z) ** 2));
src/pocketmine/Player.php:            if ($this->isSprinting()) {
src/pocketmine/Player.php:                $this->exhaust(0.1 * $distance, PlayerExhaustEvent::CAUSE_SPRINTING);
src/pocketmine/Player.php:                $this->exhaust(0.01 * $distance, PlayerExhaustEvent::CAUSE_WALKING);
src/pocketmine/Player.php:            if ($this->nextChunkOrderRun > 20) {
src/pocketmine/Player.php:                $this->nextChunkOrderRun = 20;
src/pocketmine/Player.php:            $this->server->getLogger()->debug('Player '.$this->getName().' exceeded movement rate limit, forcing to last accepted position');
src/pocketmine/Player.php:            $this->sendPosition($this, $this->yaw, $this->pitch, MovePlayerPacket::MODE_RESET);
src/pocketmine/Player.php:        $this->lastX = $from->x;
src/pocketmine/Player.php:        $this->lastY = $from->y;
src/pocketmine/Player.php:        $this->lastZ = $from->z;
src/pocketmine/Player.php:        $this->lastYaw = $from->yaw;
src/pocketmine/Player.php:        $this->lastPitch = $from->pitch;
src/pocketmine/Player.php:        $this->setPosition($from);
src/pocketmine/Player.php:        $this->sendPosition($from, $from->yaw, $from->pitch, MovePlayerPacket::MODE_RESET);
src/pocketmine/Player.php:        if (!$this->flying) {
src/pocketmine/Player.php:        (new PlayerJumpEvent($this))->call();
src/pocketmine/Player.php:            $this->broadcastMotion();
src/pocketmine/Player.php:        $entries = $sendAll ? $this->attributeMap->getAll() : $this->attributeMap->needSend();
src/pocketmine/Player.php:            $pk->entityRuntimeId = $this->id;
src/pocketmine/Player.php:            $pk->entries = $entries;
src/pocketmine/Player.php:            $this->dataPacket($pk);
src/pocketmine/Player.php:                $entry->markSynchronized();
src/pocketmine/Player.php:        if (!$this->loggedIn) {
src/pocketmine/Player.php:        $tickDiff = $currentTick - $this->lastUpdate;
src/pocketmine/Player.php:        $this->messageCounter = 2;
src/pocketmine/Player.php:        $this->lastUpdate = $currentTick;
src/pocketmine/Player.php:        $this->sendAttributes();
src/pocketmine/Player.php:        if (!$this->isAlive() and $this->spawned) {
src/pocketmine/Player.php:            $this->onDeathUpdate($tickDiff);
src/pocketmine/Player.php:        $this->timings->startTiming();
src/pocketmine/Player.php:        if ($this->spawned) {
src/pocketmine/Player.php:            $this->processMostRecentMovements();
src/pocketmine/Player.php:            $this->motion->x = $this->motion->y = $this->motion->z = 0; //TODO: HACK! (Fixes player knockback being messed up)
src/pocketmine/Player.php:            if ($this->onGround) {
src/pocketmine/Player.php:                $this->inAirTicks = 0;
src/pocketmine/Player.php:                $this->inAirTicks += $tickDiff;
src/pocketmine/Player.php:            Timings::$timerEntityBaseTick->startTiming();
src/pocketmine/Player.php:            $this->entityBaseTick($tickDiff);
src/pocketmine/Player.php:            Timings::$timerEntityBaseTick->stopTiming();
src/pocketmine/Player.php:            if (!$this->isSpectator() and $this->isAlive()) {
src/pocketmine/Player.php:                Timings::$playerCheckNearEntitiesTimer->startTiming();
src/pocketmine/Player.php:                $this->checkNearEntities();
src/pocketmine/Player.php:                Timings::$playerCheckNearEntitiesTimer->stopTiming();
src/pocketmine/Player.php:        $this->timings->stopTiming();
src/pocketmine/Player.php:        if ($this->isSurvival()) {
src/pocketmine/Player.php:        if ($this->isSurvival()) {
src/pocketmine/Player.php:        return $this->isSurvival() and parent::isHungry();
src/pocketmine/Player.php:        return $this->isCreative() or parent::canBreathe();
src/pocketmine/Player.php:        $pk->entityRuntimeId = $this->getId();
src/pocketmine/Player.php:        $pk->eventId = $replacesOldEffect ? MobEffectPacket::EVENT_MODIFY : MobEffectPacket::EVENT_ADD;
src/pocketmine/Player.php:        $pk->effectId = $effect->getId();
src/pocketmine/Player.php:        $pk->amplifier = $effect->getAmplifier();
src/pocketmine/Player.php:        $pk->particles = $effect->isVisible();
src/pocketmine/Player.php:        $pk->duration = $effect->getDuration();
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        $pk->entityRuntimeId = $this->getId();
src/pocketmine/Player.php:        $pk->eventId = MobEffectPacket::EVENT_REMOVE;
src/pocketmine/Player.php:        $pk->effectId = $effect->getId();
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        if (!$this->isOnline()) {
src/pocketmine/Player.php:        if (PHP_INT_MAX !== $this->nextChunkOrderRun and $this->nextChunkOrderRun-- <= 0) {
src/pocketmine/Player.php:            $this->nextChunkOrderRun = PHP_INT_MAX;
src/pocketmine/Player.php:            $this->orderChunks();
src/pocketmine/Player.php:        if (count($this->loadQueue) > 0) {
src/pocketmine/Player.php:            $this->sendNextChunk();
src/pocketmine/Player.php:        if (count($this->batchedPackets) > 0) {
src/pocketmine/Player.php:            $this->server->batchPackets([$this], $this->batchedPackets, false);
src/pocketmine/Player.php:            $this->batchedPackets = [];
src/pocketmine/Player.php:        $eyePos = $this->getPosition()->add(0, $this->getEyeHeight(), 0);
src/pocketmine/Player.php:        if ($eyePos->distanceSquared($pos) > $maxDistance ** 2) {
src/pocketmine/Player.php:        $dV = $this->getDirectionVector();
src/pocketmine/Player.php:        $eyeDot = $dV->dot($eyePos);
src/pocketmine/Player.php:        $targetDot = $dV->dot($pos);
src/pocketmine/Player.php:        return ($targetDot - $eyeDot) >= -$maxDiff;
src/pocketmine/Player.php:        $this->setNameTag($this->username);
src/pocketmine/Player.php:        $this->addDefaultWindows();
src/pocketmine/Player.php:        if ($this->seenLoginPacket) {
src/pocketmine/Player.php:        $this->seenLoginPacket = true;
src/pocketmine/Player.php:        if (!in_array($packet->protocol, ProtocolInfo::SUPPORTED_PROTOCOLS)) {
src/pocketmine/Player.php:            if ($packet->protocol < ProtocolInfo::CURRENT_PROTOCOL) {
src/pocketmine/Player.php:                $this->sendPlayStatus(PlayStatusPacket::LOGIN_FAILED_CLIENT, true);
src/pocketmine/Player.php:                $this->sendPlayStatus(PlayStatusPacket::LOGIN_FAILED_SERVER, true);
src/pocketmine/Player.php:            $this->close('', $this->server->getLanguage()->translateString('pocketmine.disconnect.incompatibleProtocol', [$packet->protocol]), false);
src/pocketmine/Player.php:        if (!self::isValidUserName($packet->username)) {
src/pocketmine/Player.php:            $this->close('', 'disconnectionScreen.invalidName');
src/pocketmine/Player.php:        $this->username = TextFormat::clean($packet->username);
src/pocketmine/Player.php:        $this->displayName = $this->username;
src/pocketmine/Player.php:        $this->iusername = strtolower($this->username);
src/pocketmine/Player.php:        if (null !== $packet->locale) {
src/pocketmine/Player.php:            $this->locale = $packet->locale;
src/pocketmine/Player.php:        if (count($this->server->getOnlinePlayers()) >= $this->server->getMaxPlayers() and $this->kick('disconnectionScreen.serverFull', false)) {
src/pocketmine/Player.php:        $this->randomClientId = $packet->clientId;
src/pocketmine/Player.php:        $this->uuid = UUID::fromString($packet->clientUUID);
src/pocketmine/Player.php:        $this->rawUUID = $this->uuid->toBinary();
src/pocketmine/Player.php:        foreach ($packet->clientData['AnimatedImageData'] as $animation) {
src/pocketmine/Player.php:        foreach ($packet->clientData['PersonaPieces'] as $piece) {
src/pocketmine/Player.php:        foreach ($packet->clientData['PieceTintColors'] as $tintColor) {
src/pocketmine/Player.php:            $packet->clientData['SkinId'],
src/pocketmine/Player.php:            base64_decode($packet->clientData['SkinResourcePatch'] ?? '', true),
src/pocketmine/Player.php:                $packet->clientData['SkinImageHeight'],
src/pocketmine/Player.php:                $packet->clientData['SkinImageWidth'],
src/pocketmine/Player.php:                base64_decode($packet->clientData['SkinData'], true)
src/pocketmine/Player.php:                $packet->clientData['CapeImageHeight'],
src/pocketmine/Player.php:                $packet->clientData['CapeImageWidth'],
src/pocketmine/Player.php:                base64_decode($packet->clientData['CapeData'] ?? '', true)
src/pocketmine/Player.php:            base64_decode($packet->clientData['SkinGeometryData'] ?? '', true),
src/pocketmine/Player.php:            base64_decode($packet->clientData['SkinAnimationData'] ?? '', true),
src/pocketmine/Player.php:            $packet->clientData['PremiumSkin'] ?? false,
src/pocketmine/Player.php:            $packet->clientData['PersonaSkin'] ?? false,
src/pocketmine/Player.php:            $packet->clientData['CapeOnClassicSkin'] ?? false,
src/pocketmine/Player.php:            $packet->clientData['CapeId'] ?? '',
src/pocketmine/Player.php:            $packet->clientData['ArmSize'] ?? SkinData::ARM_SIZE_WIDE,
src/pocketmine/Player.php:            $packet->clientData['SkinColor'] ?? '',
src/pocketmine/Player.php:            $skin = SkinAdapterSingleton::get()->fromSkinData($skinData);
src/pocketmine/Player.php:            $skin->validate();
src/pocketmine/Player.php:            $this->server->getLogger()->debug("$this->username: Invalid skin: ".$e->getMessage());
src/pocketmine/Player.php:            $this->close('', 'disconnectionScreen.invalidSkin');
src/pocketmine/Player.php:        $this->setSkin($skin);
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if ($ev->isCancelled()) {
src/pocketmine/Player.php:            $this->close('', $ev->getKickMessage());
src/pocketmine/Player.php:        if (!$this->server->isWhitelisted($this->username) and $this->kick('Server is white-listed', false)) {
src/pocketmine/Player.php:        if (($this->isBanned() or $this->server->getIPBans()->isBanned($this->getAddress())) and
src/pocketmine/Player.php:            $this->kick('You are banned', false)
src/pocketmine/Player.php:        if (!$packet->skipVerification) {
src/pocketmine/Player.php:            $this->server->getAsyncPool()->submitTask(new VerifyLoginTask($this, $packet));
src/pocketmine/Player.php:            $this->onVerifyCompleted($packet, null, true);
src/pocketmine/Player.php:        $pk->status = $status;
src/pocketmine/Player.php:        $this->sendDataPacket($pk, false, $immediate);
src/pocketmine/Player.php:        if ($this->closed) {
src/pocketmine/Player.php:            $this->close('', $this->server->getLanguage()->translateString('pocketmine.disconnect.invalidSession', [$error]));
src/pocketmine/Player.php:        $xuid = $packet->xuid;
src/pocketmine/Player.php:            $this->server->getLogger()->warning($this->getName().' has an XUID, but their login keychain is not signed by Mojang');
src/pocketmine/Player.php:                $this->server->getLogger()->error($this->getName().' should have an XUID, but none found');
src/pocketmine/Player.php:            if ($this->server->requiresAuthentication() and $this->kick('disconnectionScreen.notAuthenticated', false)) { //use kick to allow plugins to cancel this
src/pocketmine/Player.php:            $this->server->getLogger()->debug($this->getName().' is NOT logged into Xbox Live');
src/pocketmine/Player.php:            $this->server->getLogger()->debug($this->getName().' is logged into Xbox Live');
src/pocketmine/Player.php:            $this->xuid = $xuid;
src/pocketmine/Player.php:        $this->processLogin();
src/pocketmine/Player.php:        $this->namedtag = $this->server->getOfflinePlayerData($this->username);
src/pocketmine/Player.php:        if ((bool) $this->server->getProperty('player.verify-xuid', true)) {
src/pocketmine/Player.php:            $recordedXUID = $this->namedtag->getTag('LastKnownXUID');
src/pocketmine/Player.php:                $this->server->getLogger()->debug('No previous XUID recorded for '.$this->getName().', no choice but to trust this player');
src/pocketmine/Player.php:            } elseif ($this->xuid !== $recordedXUID->getValue()) {
src/pocketmine/Player.php:                if ($this->kick('XUID does not match (possible impersonation attempt)', false)) {
src/pocketmine/Player.php:                $this->server->getLogger()->debug('XUID mismatch for '.$this->getName().', but plugin cancelled event allowing them to join anyway');
src/pocketmine/Player.php:                $this->server->getLogger()->debug('XUID match for '.$this->getName());
src/pocketmine/Player.php:        foreach ($this->server->getLoggedInPlayers() as $p) {
src/pocketmine/Player.php:            if ($p !== $this and ($p->iusername === $this->iusername or $this->getUniqueId()->equals($p->getUniqueId()))) {
src/pocketmine/Player.php:                if (!$p->kick('logged in from another location')) {
src/pocketmine/Player.php:                    $this->close($this->getLeaveMessage(), 'Logged in from another location');
src/pocketmine/Player.php:        $this->playedBefore = ($this->getLastPlayed() - $this->getFirstPlayed()) > 1; // microtime(true) - microtime(true) may have less than one millisecond difference
src/pocketmine/Player.php:        $this->namedtag->setString('NameTag', $this->username);
src/pocketmine/Player.php:        $this->gamemode = $this->namedtag->getInt('playerGameType', self::SURVIVAL) & 0x03;
src/pocketmine/Player.php:        if ($this->server->getForceGamemode()) {
src/pocketmine/Player.php:            $this->gamemode = $this->server->getGamemode();
src/pocketmine/Player.php:            $this->namedtag->setInt('playerGameType', $this->gamemode);
src/pocketmine/Player.php:        $this->allowFlight = $this->isCreative();
src/pocketmine/Player.php:        $this->keepMovement = $this->isSpectator() || $this->allowMovementCheats();
src/pocketmine/Player.php:        if (null === ($level = $this->server->getLevelByName($this->namedtag->getString('Level', '', true)))) {
src/pocketmine/Player.php:            $this->setLevel($this->server->getDefaultLevel());
src/pocketmine/Player.php:            $this->namedtag->setString('Level', $this->level->getFolderName());
src/pocketmine/Player.php:            $spawnLocation = $this->level->getSafeSpawn();
src/pocketmine/Player.php:            $this->namedtag->setTag(new ListTag('Pos', [
src/pocketmine/Player.php:                new DoubleTag('', $spawnLocation->x),
src/pocketmine/Player.php:                new DoubleTag('', $spawnLocation->y),
src/pocketmine/Player.php:                new DoubleTag('', $spawnLocation->z),
src/pocketmine/Player.php:            $this->setLevel($level);
src/pocketmine/Player.php:        $this->achievements = [];
src/pocketmine/Player.php:        $achievements = $this->namedtag->getCompoundTag('Achievements') ?? [];
src/pocketmine/Player.php:            $this->achievements[$achievement->getName()] = 0 !== $achievement->getValue();
src/pocketmine/Player.php:        $this->sendPlayStatus(PlayStatusPacket::LOGIN_SUCCESS);
src/pocketmine/Player.php:        $this->loggedIn = true;
src/pocketmine/Player.php:        $this->server->onPlayerLogin($this);
src/pocketmine/Player.php:        $manager = $this->server->getResourcePackManager();
src/pocketmine/Player.php:        $pk->resourcePackEntries = $manager->getResourceStack();
src/pocketmine/Player.php:        $pk->mustAccept = $manager->resourcePacksRequired();
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        if ($this->resourcePacksDone) {
src/pocketmine/Player.php:        switch ($packet->status) {
src/pocketmine/Player.php:                $this->close('', 'You must accept resource packs to join this server.', true);
src/pocketmine/Player.php:                $manager = $this->server->getResourcePackManager();
src/pocketmine/Player.php:                foreach ($packet->packIds as $uuid) {
src/pocketmine/Player.php:                    $pack = $manager->getPackById($uuid);
src/pocketmine/Player.php:                        $this->close('', 'disconnectionScreen.resourcePack', true);
src/pocketmine/Player.php:                        $this->server->getLogger()->debug('Got a resource pack request for unknown pack with UUID '.$uuid.', available packs: '.implode(', ', $manager->getPackIdList()));
src/pocketmine/Player.php:                    $pk->packId = $pack->getPackId();
src/pocketmine/Player.php:                    $pk->maxChunkSize = self::RESOURCE_PACK_CHUNK_SIZE;
src/pocketmine/Player.php:                    $pk->chunkCount = (int) ceil($pack->getPackSize() / $pk->maxChunkSize);
src/pocketmine/Player.php:                    $pk->compressedPackSize = $pack->getPackSize();
src/pocketmine/Player.php:                    $pk->sha256 = $pack->getSha256();
src/pocketmine/Player.php:                    $this->dataPacket($pk);
src/pocketmine/Player.php:                $manager = $this->server->getResourcePackManager();
src/pocketmine/Player.php:                $pk->resourcePackStack = $manager->getResourceStack();
src/pocketmine/Player.php:                //we don't force here, because it doesn't have user-facing effects
src/pocketmine/Player.php:                //but it does have an annoying side-effect when true: it makes
src/pocketmine/Player.php:                //the client remove its own non-server-supplied resource packs.
src/pocketmine/Player.php:                $pk->mustAccept = false;
src/pocketmine/Player.php:                $pk->experiments = new Experiments([], false);
src/pocketmine/Player.php:                $this->dataPacket($pk);
src/pocketmine/Player.php:                $this->resourcePacksDone = true;
src/pocketmine/Player.php:                $this->completeLoginSequence();
src/pocketmine/Player.php:        $pos = $this->namedtag->getListTag('Pos')->getAllValues();
src/pocketmine/Player.php:        $this->level->registerChunkLoader($this, ((int) floor($pos[0])) >> 4, ((int) floor($pos[2])) >> 4, true);
src/pocketmine/Player.php:        $this->usedChunks[Level::chunkHash(((int) floor($pos[0])) >> 4, ((int) floor($pos[2])) >> 4)] = false;
src/pocketmine/Player.php:        parent::__construct($this->level, $this->namedtag);
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if ($ev->isCancelled()) {
src/pocketmine/Player.php:            $this->close($this->getLeaveMessage(), $ev->getKickMessage());
src/pocketmine/Player.php:        if (!$this->hasValidSpawnPosition()) {
src/pocketmine/Player.php:            if (($level = $this->server->getLevelByName($this->namedtag->getString('SpawnLevel', ''))) instanceof Level) {
src/pocketmine/Player.php:                $this->spawnPosition = new Position($this->namedtag->getInt('SpawnX'), $this->namedtag->getInt('SpawnY'), $this->namedtag->getInt('SpawnZ'), $level);
src/pocketmine/Player.php:                $this->spawnPosition = $this->level->getSafeSpawn();
src/pocketmine/Player.php:        $spawnPosition = $this->getSpawn();
src/pocketmine/Player.php:        $pk->entityUniqueId = $this->id;
src/pocketmine/Player.php:        $pk->entityRuntimeId = $this->id;
src/pocketmine/Player.php:        $pk->playerGamemode = Player::getClientFriendlyGamemode($this->gamemode);
src/pocketmine/Player.php:        $pk->playerPosition = $this->getOffsetPosition($this);
src/pocketmine/Player.php:        $pk->pitch = $this->pitch;
src/pocketmine/Player.php:        $pk->yaw = $this->yaw;
src/pocketmine/Player.php:        $pk->seed = -1;
src/pocketmine/Player.php:        $pk->spawnSettings = new SpawnSettings(SpawnSettings::BIOME_TYPE_DEFAULT, '', DimensionIds::OVERWORLD); //TODO: implement this properly
src/pocketmine/Player.php:        $pk->worldGamemode = Player::getClientFriendlyGamemode($this->server->getGamemode());
src/pocketmine/Player.php:        $pk->difficulty = $this->level->getDifficulty();
src/pocketmine/Player.php:        $pk->spawnX = $spawnPosition->getFloorX();
src/pocketmine/Player.php:        $pk->spawnY = $spawnPosition->getFloorY();
src/pocketmine/Player.php:        $pk->spawnZ = $spawnPosition->getFloorZ();
src/pocketmine/Player.php:        $pk->hasAchievementsDisabled = true;
src/pocketmine/Player.php:        $pk->time = $this->level->getTime();
src/pocketmine/Player.php:        $pk->eduEditionOffer = 0;
src/pocketmine/Player.php:        $pk->rainLevel = 0; //TODO: implement these properly
src/pocketmine/Player.php:        $pk->lightningLevel = 0;
src/pocketmine/Player.php:        $pk->commandsEnabled = true;
src/pocketmine/Player.php:        $pk->levelId = '';
src/pocketmine/Player.php:        $pk->worldName = $this->server->getMotd();
src/pocketmine/Player.php:        $pk->experiments = new Experiments([], false);
src/pocketmine/Player.php:        $pk->itemTable = ItemTypeDictionary::getInstance()->getEntries();
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        $this->sendDataPacket(new AvailableActorIdentifiersPacket());
src/pocketmine/Player.php:        $this->sendDataPacket(new BiomeDefinitionListPacket());
src/pocketmine/Player.php:        $this->level->sendTime($this);
src/pocketmine/Player.php:        $this->sendAttributes(true);
src/pocketmine/Player.php:        $this->setNameTagVisible();
src/pocketmine/Player.php:        $this->setNameTagAlwaysVisible();
src/pocketmine/Player.php:        $this->setCanClimb();
src/pocketmine/Player.php:        $this->setImmobile(); //disable pre-spawn movement
src/pocketmine/Player.php:        $this->server->getLogger()->info($this->getServer()->getLanguage()->translateString('pocketmine.player.logIn', [
src/pocketmine/Player.php:            TextFormat::AQUA.$this->username.TextFormat::WHITE,
src/pocketmine/Player.php:            $this->ip,
src/pocketmine/Player.php:            $this->port,
src/pocketmine/Player.php:            $this->id,
src/pocketmine/Player.php:            $this->level->getName(),
src/pocketmine/Player.php:            round($this->x, 4),
src/pocketmine/Player.php:            round($this->y, 4),
src/pocketmine/Player.php:            round($this->z, 4),
src/pocketmine/Player.php:        if ($this->isOp()) {
src/pocketmine/Player.php:            $this->setRemoveFormat(false);
src/pocketmine/Player.php:        $this->sendCommandData();
src/pocketmine/Player.php:        $this->sendSettings();
src/pocketmine/Player.php:        $this->sendPotionEffects($this);
src/pocketmine/Player.php:        $this->sendData($this);
src/pocketmine/Player.php:        $this->sendAllInventories();
src/pocketmine/Player.php:        $this->inventory->sendCreativeContents();
src/pocketmine/Player.php:        $this->inventory->sendHeldItem($this);
src/pocketmine/Player.php:        $this->dataPacket($this->server->getCraftingManager()->getCraftingDataPacket());
src/pocketmine/Player.php:        $this->server->addOnlinePlayer($this);
src/pocketmine/Player.php:        $this->server->sendFullPlayerListData($this);
src/pocketmine/Player.php:     * Sends a chat message as this player. If the message begins with a / (forward-slash) it will be treated
src/pocketmine/Player.php:        if (!$this->spawned or !$this->isAlive()) {
src/pocketmine/Player.php:        $this->doCloseInventory();
src/pocketmine/Player.php:        $message = TextFormat::clean($message, $this->removeFormat);
src/pocketmine/Player.php:            if ('' !== trim($messagePart) and strlen($messagePart) <= 255 and $this->messageCounter-- > 0) {
src/pocketmine/Player.php:                $ev->call();
src/pocketmine/Player.php:                if ($ev->isCancelled()) {
src/pocketmine/Player.php:                if (0 === strpos($ev->getMessage(), '/')) {
src/pocketmine/Player.php:                    Timings::$playerCommandTimer->startTiming();
src/pocketmine/Player.php:                    $this->server->dispatchCommand($ev->getPlayer(), substr($ev->getMessage(), 1));
src/pocketmine/Player.php:                    Timings::$playerCommandTimer->stopTiming();
src/pocketmine/Player.php:                    $ev = new PlayerChatEvent($this, $ev->getMessage());
src/pocketmine/Player.php:                    $ev->call();
src/pocketmine/Player.php:                    if (!$ev->isCancelled()) {
src/pocketmine/Player.php:                        $this->server->broadcastMessage($this->getServer()->getLanguage()->translateString($ev->getFormat(), [$ev->getPlayer()->getDisplayName(), $ev->getMessage()]), $ev->getRecipients());
src/pocketmine/Player.php:        $newPos = $packet->position->round(4)->subtract(0, $this->baseOffset, 0);
src/pocketmine/Player.php:        if (null !== $this->forceMoveSync and $newPos->distanceSquared($this->forceMoveSync) > 1) {  //Tolerate up to 1 block to avoid problems with client-sided physics when spawning in blocks
src/pocketmine/Player.php:            $this->server->getLogger()->debug('Got outdated pre-teleport movement from '.$this->getName().', received '.$newPos.', expected '.$this->asVector3());
src/pocketmine/Player.php:        } elseif ((!$this->isAlive() or !$this->spawned) and $newPos->distanceSquared($this) > 0.01) {
src/pocketmine/Player.php:            $this->sendPosition($this, null, null, MovePlayerPacket::MODE_RESET);
src/pocketmine/Player.php:            $this->server->getLogger()->debug('Reverted movement of '.$this->getName().' due to not alive or not spawned, received '.$newPos.', locked at '.$this->asVector3());
src/pocketmine/Player.php:            $this->forceMoveSync = null;
src/pocketmine/Player.php:            $packet->yaw = fmod($packet->yaw, 360);
src/pocketmine/Player.php:            $packet->pitch = fmod($packet->pitch, 360);
src/pocketmine/Player.php:            if ($packet->yaw < 0) {
src/pocketmine/Player.php:                $packet->yaw += 360;
src/pocketmine/Player.php:            $this->setRotation($packet->yaw, $packet->pitch);
src/pocketmine/Player.php:            $this->handleMovement($newPos);
src/pocketmine/Player.php:        $this->getLevelNonNull()->broadcastPacketToViewers($this, $packet);
src/pocketmine/Player.php:        if ($packet->entityRuntimeId !== $this->id) {
src/pocketmine/Player.php:            return ActorEventPacket::EATING_ITEM === $packet->event;
src/pocketmine/Player.php:        if (!$this->spawned or !$this->isAlive()) {
src/pocketmine/Player.php:        $this->doCloseInventory();
src/pocketmine/Player.php:        switch ($packet->event) {
src/pocketmine/Player.php:                if (0 === $packet->data) {
src/pocketmine/Player.php:                $this->dataPacket($packet);
src/pocketmine/Player.php:                $this->server->broadcastPacket($this->getViewers(), $packet);
src/pocketmine/Player.php:     * Don't expect much from this handler. Most of it is roughly hacked and duct-taped together.
src/pocketmine/Player.php:        if (!$this->spawned or !$this->isAlive()) {
src/pocketmine/Player.php:        foreach ($packet->actions as $networkInventoryAction) {
src/pocketmine/Player.php:            if (NetworkInventoryAction::SOURCE_TODO === $networkInventoryAction->sourceType and (
src/pocketmine/Player.php:                    NetworkInventoryAction::SOURCE_TYPE_CRAFTING_RESULT === $networkInventoryAction->windowId or
src/pocketmine/Player.php:                    NetworkInventoryAction::SOURCE_TYPE_CRAFTING_USE_INGREDIENT === $networkInventoryAction->windowId
src/pocketmine/Player.php:                    null !== $this->craftingTransaction &&
src/pocketmine/Player.php:                    !$networkInventoryAction->oldItem->equalsExact($networkInventoryAction->newItem) &&
src/pocketmine/Player.php:                    NetworkInventoryAction::SOURCE_CONTAINER === $networkInventoryAction->sourceType &&
src/pocketmine/Player.php:                    ContainerIds::UI === $networkInventoryAction->windowId &&
src/pocketmine/Player.php:                    UIInventorySlotOffset::CREATED_ITEM_OUTPUT === $networkInventoryAction->inventorySlot
src/pocketmine/Player.php:                $action = $networkInventoryAction->createInventoryAction($this);
src/pocketmine/Player.php:                $this->server->getLogger()->debug('Unhandled inventory action from '.$this->getName().': '.$e->getMessage());
src/pocketmine/Player.php:                $this->sendAllInventories();
src/pocketmine/Player.php:            if (null === $this->craftingTransaction) {
src/pocketmine/Player.php:                $this->craftingTransaction = new CraftingTransaction($this, $actions);
src/pocketmine/Player.php:                    $this->craftingTransaction->addAction($action);
src/pocketmine/Player.php:                $this->craftingTransaction->validate();
src/pocketmine/Player.php:                //transaction is incomplete - crafting transaction comes in lots of little bits, so we have to collect
src/pocketmine/Player.php:                $this->craftingTransaction->execute();
src/pocketmine/Player.php:                $this->server->getLogger()->debug('Failed to execute crafting transaction for '.$this->getName().': '.$e->getMessage());
src/pocketmine/Player.php:                $this->craftingTransaction = null;
src/pocketmine/Player.php:        } elseif (null !== $this->craftingTransaction) {
src/pocketmine/Player.php:            $this->server->getLogger()->debug('Got unexpected normal inventory action with incomplete crafting transaction from '.$this->getName().', refusing to execute crafting');
src/pocketmine/Player.php:            $this->craftingTransaction = null;
src/pocketmine/Player.php:        switch ($packet->transactionType) {
src/pocketmine/Player.php:                $this->setUsingItem(false);
src/pocketmine/Player.php:                    $transaction->execute();
src/pocketmine/Player.php:                    $this->server->getLogger()->debug('Failed to execute inventory transaction from '.$this->getName().': '.$e->getMessage());
src/pocketmine/Player.php:                    $this->server->getLogger()->debug('Actions: '.json_encode($packet->actions));
src/pocketmine/Player.php:                if (count($packet->actions) > 0) {
src/pocketmine/Player.php:                    $this->server->getLogger()->debug('Expected 0 actions for mismatch, got '.count($packet->actions).', '.json_encode($packet->actions));
src/pocketmine/Player.php:                $this->setUsingItem(false);
src/pocketmine/Player.php:                $this->sendAllInventories();
src/pocketmine/Player.php:                $blockVector = new Vector3($packet->trData->x, $packet->trData->y, $packet->trData->z);
src/pocketmine/Player.php:                $face = $packet->trData->face;
src/pocketmine/Player.php:                $type = $packet->trData->actionType;
src/pocketmine/Player.php:                        $spamBug = (null !== $this->lastRightClickData and
src/pocketmine/Player.php:                            microtime(true) - $this->lastRightClickTime < 0.1 and //100ms
src/pocketmine/Player.php:                            $this->lastRightClickData->playerPos->distanceSquared($packet->trData->playerPos) < 0.00001 and
src/pocketmine/Player.php:                            $this->lastRightClickData->x === $packet->trData->x and
src/pocketmine/Player.php:                            $this->lastRightClickData->y === $packet->trData->y and
src/pocketmine/Player.php:                            $this->lastRightClickData->z === $packet->trData->z and
src/pocketmine/Player.php:                            $this->lastRightClickData->clickPos->distanceSquared($packet->trData->clickPos) < 0.00001 //signature spam bug has 0 distance, but allow some error
src/pocketmine/Player.php:                        //get rid of continued spam if the player clicks and holds right-click
src/pocketmine/Player.php:                        $this->lastRightClickData = $packet->trData;
src/pocketmine/Player.php:                        $this->lastRightClickTime = microtime(true);
src/pocketmine/Player.php:                        $this->setUsingItem(false);
src/pocketmine/Player.php:                        if (!$this->canInteract($blockVector->add(0.5, 0.5, 0.5), 13)) {
src/pocketmine/Player.php:                        } elseif ($this->isCreative()) {
src/pocketmine/Player.php:                            $item = $this->inventory->getItemInHand();
src/pocketmine/Player.php:                            if ($this->level->useItemOn($blockVector, $item, $face, $packet->trData->clickPos, $this, true)) {
src/pocketmine/Player.php:                        } elseif (!$this->inventory->getItemInHand()->equals($packet->trData->itemInHand)) {
src/pocketmine/Player.php:                            $this->inventory->sendHeldItem($this);
src/pocketmine/Player.php:                            $item = $this->inventory->getItemInHand();
src/pocketmine/Player.php:                            if ($this->level->useItemOn($blockVector, $item, $face, $packet->trData->clickPos, $this, true)) {
src/pocketmine/Player.php:                                if (!$item->equalsExact($oldItem) and $oldItem->equalsExact($this->inventory->getItemInHand())) {
src/pocketmine/Player.php:                                    $this->inventory->setItemInHand($item);
src/pocketmine/Player.php:                                    $this->inventory->sendHeldItem($this->hasSpawned);
src/pocketmine/Player.php:                        $this->inventory->sendHeldItem($this);
src/pocketmine/Player.php:                        if ($blockVector->distanceSquared($this) > 10000) {
src/pocketmine/Player.php:                        $target = $this->level->getBlock($blockVector);
src/pocketmine/Player.php:                        $block = $target->getSide($face);
src/pocketmine/Player.php:                        $blocks = array_merge($target->getAllSides(), $block->getAllSides()); //getAllSides() on each of these will include $target and $block because they are next to each other
src/pocketmine/Player.php:                        $this->level->sendBlocks([$this], $blocks, UpdateBlockPacket::FLAG_ALL_PRIORITY);
src/pocketmine/Player.php:                        $this->doCloseInventory();
src/pocketmine/Player.php:                        $item = $this->inventory->getItemInHand();
src/pocketmine/Player.php:                        if ($this->canInteract($blockVector->add(0.5, 0.5, 0.5), $this->isCreative() ? 13 : 7) and $this->level->useBreakOn($blockVector, $item, $this, true)) {
src/pocketmine/Player.php:                            if ($this->isSurvival()) {
src/pocketmine/Player.php:                                if (!$item->equalsExact($oldItem) and $oldItem->equalsExact($this->inventory->getItemInHand())) {
src/pocketmine/Player.php:                                    $this->inventory->setItemInHand($item);
src/pocketmine/Player.php:                                    $this->inventory->sendHeldItem($this->hasSpawned);
src/pocketmine/Player.php:                                $this->exhaust(0.025, PlayerExhaustEvent::CAUSE_MINING);
src/pocketmine/Player.php:                        $this->inventory->sendContents($this);
src/pocketmine/Player.php:                        $this->inventory->sendHeldItem($this);
src/pocketmine/Player.php:                        $target = $this->level->getBlock($blockVector);
src/pocketmine/Player.php:                        $blocks = $target->getAllSides();
src/pocketmine/Player.php:                        $this->level->sendBlocks([$this], $blocks, UpdateBlockPacket::FLAG_ALL_PRIORITY);
src/pocketmine/Player.php:                            $tile = $this->level->getTile($b);
src/pocketmine/Player.php:                                $tile->spawnTo($this);
src/pocketmine/Player.php:                        if ($this->isUsingItem()) {
src/pocketmine/Player.php:                            $slot = $this->inventory->getItemInHand();
src/pocketmine/Player.php:                            if ($slot instanceof Consumable and !($slot instanceof MaybeConsumable and !$slot->canBeConsumed())) {
src/pocketmine/Player.php:                                if ($this->hasItemCooldown($slot)) {
src/pocketmine/Player.php:                                    $ev->setCancelled();
src/pocketmine/Player.php:                                $ev->call();
src/pocketmine/Player.php:                                if ($ev->isCancelled() or !$this->consumeObject($slot)) {
src/pocketmine/Player.php:                                    $this->inventory->sendContents($this);
src/pocketmine/Player.php:                                $this->resetItemCooldown($slot);
src/pocketmine/Player.php:                                if ($this->isSurvival()) {
src/pocketmine/Player.php:                                    $slot->pop();
src/pocketmine/Player.php:                                    $this->inventory->setItemInHand($slot);
src/pocketmine/Player.php:                                    $this->inventory->addItem($slot->getResidue());
src/pocketmine/Player.php:                                $this->setUsingItem(false);
src/pocketmine/Player.php:                        $directionVector = $this->getDirectionVector();
src/pocketmine/Player.php:                        if ($this->isCreative()) {
src/pocketmine/Player.php:                            $item = $this->inventory->getItemInHand();
src/pocketmine/Player.php:                        } elseif (!$this->inventory->getItemInHand()->equals($packet->trData->itemInHand)) {
src/pocketmine/Player.php:                            $this->inventory->sendHeldItem($this);
src/pocketmine/Player.php:                            $item = $this->inventory->getItemInHand();
src/pocketmine/Player.php:                        if ($this->hasItemCooldown($item) or $this->isSpectator()) {
src/pocketmine/Player.php:                            $ev->setCancelled();
src/pocketmine/Player.php:                        $ev->call();
src/pocketmine/Player.php:                        if ($ev->isCancelled()) {
src/pocketmine/Player.php:                            $this->inventory->sendHeldItem($this);
src/pocketmine/Player.php:                        if ($item->onClickAir($this, $directionVector)) {
src/pocketmine/Player.php:                            $this->resetItemCooldown($item);
src/pocketmine/Player.php:                            if ($this->isSurvival()) {
src/pocketmine/Player.php:                                $this->inventory->setItemInHand($item);
src/pocketmine/Player.php:                        $this->setUsingItem(true);
src/pocketmine/Player.php:                $target = $this->level->getEntity($packet->trData->entityRuntimeId);
src/pocketmine/Player.php:                $type = $packet->trData->actionType;
src/pocketmine/Player.php:                        if (!$target->isAlive()) {
src/pocketmine/Player.php:                            $this->kick('Attempting to attack an invalid entity');
src/pocketmine/Player.php:                            $this->server->getLogger()->warning($this->getServer()->getLanguage()->translateString('pocketmine.player.invalidEntity', [$this->getName()]));
src/pocketmine/Player.php:                        $heldItem = $this->inventory->getItemInHand();
src/pocketmine/Player.php:                        if (!$this->canInteract($target, 8) or $this->isSpectator()) {
src/pocketmine/Player.php:                            if (!$this->server->getConfigBool('pvp')) {
src/pocketmine/Player.php:                        $ev = new EntityDamageByEntityEvent($this, $target, EntityDamageEvent::CAUSE_ENTITY_ATTACK, $heldItem->getAttackPoints());
src/pocketmine/Player.php:                        foreach ($heldItem->getEnchantments() as $enchantment) {
src/pocketmine/Player.php:                            $type = $enchantment->getType();
src/pocketmine/Player.php:                            if ($type instanceof MeleeWeaponEnchantment and $type->isApplicableTo($target)) {
src/pocketmine/Player.php:                                $meleeEnchantmentDamage += $type->getDamageBonus($enchantment->getLevel());
src/pocketmine/Player.php:                        $ev->setModifier($meleeEnchantmentDamage, EntityDamageEvent::MODIFIER_WEAPON_ENCHANTMENTS);
src/pocketmine/Player.php:                            $ev->setCancelled();
src/pocketmine/Player.php:                        if (!$this->isSprinting() and !$this->isFlying() and $this->fallDistance > 0 and !$this->hasEffect(Effect::BLINDNESS) and !$this->isUnderwater()) {
src/pocketmine/Player.php:                            $ev->setModifier($ev->getFinalDamage() / 2, EntityDamageEvent::MODIFIER_CRITICAL);
src/pocketmine/Player.php:                        $target->attack($ev);
src/pocketmine/Player.php:                        if ($ev->isCancelled()) {
src/pocketmine/Player.php:                            if ($heldItem instanceof Durable and $this->isSurvival()) {
src/pocketmine/Player.php:                                $this->inventory->sendContents($this);
src/pocketmine/Player.php:                        if ($ev->getModifier(EntityDamageEvent::MODIFIER_CRITICAL) > 0) {
src/pocketmine/Player.php:                            $pk->action = AnimatePacket::ACTION_CRITICAL_HIT;
src/pocketmine/Player.php:                            $pk->entityRuntimeId = $target->getId();
src/pocketmine/Player.php:                            $this->server->broadcastPacket($target->getViewers(), $pk);
src/pocketmine/Player.php:                                $target->dataPacket($pk);
src/pocketmine/Player.php:                            $type = $enchantment->getType();
src/pocketmine/Player.php:                            $type->onPostAttack($this, $target, $enchantment->getLevel());
src/pocketmine/Player.php:                        if ($this->isAlive()) {
src/pocketmine/Player.php:                            if ($heldItem->onAttackEntity($target) and $this->isSurvival() and $oldItem->equalsExact($this->inventory->getItemInHand())) { //always fire the hook, even if we are survival
src/pocketmine/Player.php:                                $this->inventory->setItemInHand($heldItem);
src/pocketmine/Player.php:                            $this->exhaust(0.3, PlayerExhaustEvent::CAUSE_ATTACK);
src/pocketmine/Player.php:                    $type = $packet->trData->actionType;
src/pocketmine/Player.php:                            if ($this->isUsingItem()) {
src/pocketmine/Player.php:                                $item = $this->inventory->getItemInHand();
src/pocketmine/Player.php:                                if ($this->hasItemCooldown($item)) {
src/pocketmine/Player.php:                                    $this->inventory->sendContents($this);
src/pocketmine/Player.php:                                if ($item->onReleaseUsing($this)) {
src/pocketmine/Player.php:                                    $this->resetItemCooldown($item);
src/pocketmine/Player.php:                                    $this->inventory->setItemInHand($item);
src/pocketmine/Player.php:                    $this->setUsingItem(false);
src/pocketmine/Player.php:                $this->inventory->sendContents($this);
src/pocketmine/Player.php:                $this->inventory->sendContents($this);
src/pocketmine/Player.php:        if (!$this->spawned or !$this->isAlive()) {
src/pocketmine/Player.php:        $item = $this->inventory->getItem($packet->hotbarSlot);
src/pocketmine/Player.php:        if (!$item->equals($packet->item)) {
src/pocketmine/Player.php:            $this->server->getLogger()->debug('Tried to equip '.$packet->item.' but have '.$item.' in target slot');
src/pocketmine/Player.php:            $this->inventory->sendContents($this);
src/pocketmine/Player.php:        $this->inventory->equipItem($packet->hotbarSlot);
src/pocketmine/Player.php:        $this->setUsingItem(false);
src/pocketmine/Player.php:        if (!$this->spawned or !$this->isAlive()) {
src/pocketmine/Player.php:        if (InteractPacket::ACTION_MOUSEOVER === $packet->action and 0 === $packet->target) {
src/pocketmine/Player.php:        $this->doCloseInventory();
src/pocketmine/Player.php:        $target = $this->level->getEntity($packet->target);
src/pocketmine/Player.php:        switch ($packet->action) {
src/pocketmine/Player.php:                if ($target === $this && !array_key_exists($windowId = self::HARDCODED_INVENTORY_WINDOW_ID, $this->openHardcodedWindows)) {
src/pocketmine/Player.php:                    $this->openHardcodedWindows[$windowId] = true;
src/pocketmine/Player.php:                    $pk->windowId = $windowId;
src/pocketmine/Player.php:                    $pk->type = WindowTypes::INVENTORY;
src/pocketmine/Player.php:                    $pk->x = $pk->y = $pk->z = 0;
src/pocketmine/Player.php:                    $pk->entityUniqueId = $this->getId();
src/pocketmine/Player.php:                    $this->sendDataPacket($pk);
src/pocketmine/Player.php:                $this->server->getLogger()->debug('Unhandled/unknown interaction type '.$packet->action.' received from '.$this->getName());
src/pocketmine/Player.php:        $block = $this->level->getBlockAt($packet->blockX, $packet->blockY, $packet->blockZ);
src/pocketmine/Player.php:        $item = $block->getPickedItem();
src/pocketmine/Player.php:        if ($packet->addUserData) {
src/pocketmine/Player.php:            $tile = $this->getLevelNonNull()->getTile($block);
src/pocketmine/Player.php:                $nbt = $tile->getCleanedNBT();
src/pocketmine/Player.php:                    $item->setCustomBlockData($nbt);
src/pocketmine/Player.php:                    $item->setLore(['+(DATA)']);
src/pocketmine/Player.php:        if (!$this->isCreative(true)) {
src/pocketmine/Player.php:            $this->server->getLogger()->debug('Got block-pick request from '.$this->getName().' when not in creative mode (gamemode '.$this->getGamemode().')');
src/pocketmine/Player.php:            $ev->setCancelled();
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if (!$ev->isCancelled()) {
src/pocketmine/Player.php:            $this->inventory->setItemInHand($ev->getResultItem());
src/pocketmine/Player.php:        if (!$this->spawned or (!$this->isAlive() and PlayerActionPacket::ACTION_RESPAWN !== $packet->action)) {
src/pocketmine/Player.php:        $packet->entityRuntimeId = $this->id;
src/pocketmine/Player.php:        $pos = new Vector3($packet->x, $packet->y, $packet->z);
src/pocketmine/Player.php:        switch ($packet->action) {
src/pocketmine/Player.php:                if ($pos->distanceSquared($this) > 10000) {
src/pocketmine/Player.php:                $target = $this->level->getBlock($pos);
src/pocketmine/Player.php:                $ev = new PlayerInteractEvent($this, $this->inventory->getItemInHand(), $target, null, $packet->face, PlayerInteractEvent::LEFT_CLICK_BLOCK);
src/pocketmine/Player.php:                if ($this->isSpectator() || $this->level->checkSpawnProtection($this, $target)) {
src/pocketmine/Player.php:                    $ev->setCancelled();
src/pocketmine/Player.php:                $ev->call();
src/pocketmine/Player.php:                if ($ev->isCancelled()) {
src/pocketmine/Player.php:                    $this->inventory->sendHeldItem($this);
src/pocketmine/Player.php:                $block = $target->getSide($packet->face);
src/pocketmine/Player.php:                if (Block::FIRE === $block->getId()) {
src/pocketmine/Player.php:                    $this->level->setBlock($block, BlockFactory::get(Block::AIR));
src/pocketmine/Player.php:                if (!$this->isCreative()) {
src/pocketmine/Player.php:                    //TODO: improve this to take stuff like swimming, ladders, enchanted tools into account, fix wrong tool break time calculations for bad tools (pmmp/PocketMine-MP#211)
src/pocketmine/Player.php:                    $breakTime = ceil($target->getBreakTime($this->inventory->getItemInHand()) * 20);
src/pocketmine/Player.php:                        $this->level->broadcastLevelEvent($pos, LevelEventPacket::EVENT_BLOCK_START_BREAK, (int) (65535 / $breakTime));
src/pocketmine/Player.php:                $this->level->broadcastLevelEvent($pos, LevelEventPacket::EVENT_BLOCK_STOP_BREAK);
src/pocketmine/Player.php:                $this->stopSleep();
src/pocketmine/Player.php:                if ($this->isAlive()) {
src/pocketmine/Player.php:                $this->respawn();
src/pocketmine/Player.php:                $this->jump();
src/pocketmine/Player.php:                $this->toggleSprint(true);
src/pocketmine/Player.php:                $this->toggleSprint(false);
src/pocketmine/Player.php:                $this->toggleSneak(true);
src/pocketmine/Player.php:                $this->toggleSneak(false);
src/pocketmine/Player.php:                $block = $this->level->getBlock($pos);
src/pocketmine/Player.php:                $this->level->broadcastLevelEvent($pos, LevelEventPacket::EVENT_PARTICLE_PUNCH_BLOCK, $block->getRuntimeId() | ($packet->face << 24));
src/pocketmine/Player.php:                //TODO: destroy-progress level event
src/pocketmine/Player.php:                $this->server->getLogger()->debug('Unhandled/unknown player action type '.$packet->action.' from '.$this->getName());
src/pocketmine/Player.php:        $this->setUsingItem(false);
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if ($ev->isCancelled()) {
src/pocketmine/Player.php:            $this->sendData($this);
src/pocketmine/Player.php:            $this->setSprinting($sprint);
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if ($ev->isCancelled()) {
src/pocketmine/Player.php:            $this->sendData($this);
src/pocketmine/Player.php:            $this->setSneaking($sneak);
src/pocketmine/Player.php:        if (!$this->spawned or !$this->isAlive()) {
src/pocketmine/Player.php:        $ev = new PlayerAnimationEvent($this, $packet->action);
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if ($ev->isCancelled()) {
src/pocketmine/Player.php:        $pk->entityRuntimeId = $this->getId();
src/pocketmine/Player.php:        $pk->action = $ev->getAnimationType();
src/pocketmine/Player.php:        $this->server->broadcastPacket($this->getViewers(), $pk);
src/pocketmine/Player.php:        if (!$this->isAlive() && RespawnPacket::CLIENT_READY_TO_SPAWN === $packet->respawnState) {
src/pocketmine/Player.php:            $this->sendRespawnPacket($this, RespawnPacket::READY_TO_SPAWN);
src/pocketmine/Player.php:        if (!$this->spawned or !$this->isAlive()) {
src/pocketmine/Player.php:        if ($item->isNull()) {
src/pocketmine/Player.php:            $this->server->getLogger()->debug($this->getName().' attempted to drop a null item ('.$item.')');
src/pocketmine/Player.php:        $motion = $this->getDirectionVector()->multiply(0.4);
src/pocketmine/Player.php:        $this->level->dropItem($this->add(0, 1.3, 0), $item, $motion, 40);
src/pocketmine/Player.php:        return $this->closingWindowId;
src/pocketmine/Player.php:        if (!$this->spawned) {
src/pocketmine/Player.php:        $this->doCloseInventory();
src/pocketmine/Player.php:        if (array_key_exists($packet->windowId, $this->openHardcodedWindows)) {
src/pocketmine/Player.php:            unset($this->openHardcodedWindows[$packet->windowId]);
src/pocketmine/Player.php:            $pk->windowId = $packet->windowId;
src/pocketmine/Player.php:            $pk->server = false;
src/pocketmine/Player.php:            $this->sendDataPacket($pk);
src/pocketmine/Player.php:        if (isset($this->windowIndex[$packet->windowId])) {
src/pocketmine/Player.php:            $this->closingWindowId = $packet->windowId;
src/pocketmine/Player.php:            (new InventoryCloseEvent($this->windowIndex[$packet->windowId], $this))->call();
src/pocketmine/Player.php:            $this->removeWindow($this->windowIndex[$packet->windowId]);
src/pocketmine/Player.php:            $this->closingWindowId = null;
src/pocketmine/Player.php:        if ($packet->entityUniqueId !== $this->getId()) {
src/pocketmine/Player.php:        $isFlying = $packet->getFlag(AdventureSettingsPacket::FLYING);
src/pocketmine/Player.php:        if ($isFlying and !$this->allowFlight) {
src/pocketmine/Player.php:            $this->kick($this->server->getLanguage()->translateString('kick.reason.cheat', ['%ability.flight']));
src/pocketmine/Player.php:        } elseif ($isFlying !== $this->isFlying()) {
src/pocketmine/Player.php:            $ev->call();
src/pocketmine/Player.php:            if ($ev->isCancelled()) {
src/pocketmine/Player.php:                $this->sendSettings();
src/pocketmine/Player.php:                $this->flying = $ev->isFlying();
src/pocketmine/Player.php:                $this->resetFallDistance();
src/pocketmine/Player.php:        if ($packet->getFlag(AdventureSettingsPacket::NO_CLIP) and !$this->allowMovementCheats and !$this->isSpectator()) {
src/pocketmine/Player.php:            $this->kick($this->server->getLanguage()->translateString('kick.reason.cheat', ['%ability.noclip']));
src/pocketmine/Player.php:        if (!$this->spawned or !$this->isAlive()) {
src/pocketmine/Player.php:        $this->doCloseInventory();
src/pocketmine/Player.php:        $pos = new Vector3($packet->x, $packet->y, $packet->z);
src/pocketmine/Player.php:        if ($pos->distanceSquared($this) > 10000 or $this->level->checkSpawnProtection($this, $pos)) {
src/pocketmine/Player.php:        $t = $this->level->getTile($pos);
src/pocketmine/Player.php:            $compound = $nbt->read($packet->namedtag, false, $_, 512);
src/pocketmine/Player.php:            if (!$t->updateCompoundTag($compound, $this)) {
src/pocketmine/Player.php:                $t->spawnTo($this);
src/pocketmine/Player.php:        if ($packet->gamemode !== $this->gamemode) {
src/pocketmine/Player.php:            $this->sendGamemode();
src/pocketmine/Player.php:            $this->sendSettings();
src/pocketmine/Player.php:        if (!$this->spawned or !$this->isAlive()) {
src/pocketmine/Player.php:        $tile = $this->level->getTileAt($packet->x, $packet->y, $packet->z);
src/pocketmine/Player.php:            $ev = new PlayerInteractEvent($this, $this->inventory->getItemInHand(), $tile->getBlock(), null, 5 - $tile->getBlock()->getDamage(), PlayerInteractEvent::LEFT_CLICK_BLOCK);
src/pocketmine/Player.php:            if ($this->isSpectator() or $this->level->checkSpawnProtection($this, $tile)) {
src/pocketmine/Player.php:                $ev->setCancelled();
src/pocketmine/Player.php:            $ev->call();
src/pocketmine/Player.php:            if ($ev->isCancelled()) {
src/pocketmine/Player.php:                $tile->spawnTo($this);
src/pocketmine/Player.php:            if (lcg_value() <= $tile->getItemDropChance()) {
src/pocketmine/Player.php:                $this->level->dropItem($tile->getBlock(), $tile->getItem());
src/pocketmine/Player.php:            $tile->setItem(null);
src/pocketmine/Player.php:            $tile->setItemRotation(0);
src/pocketmine/Player.php:        if ($this->resourcePacksDone) {
src/pocketmine/Player.php:        $manager = $this->server->getResourcePackManager();
src/pocketmine/Player.php:        $pack = $manager->getPackById($packet->packId);
src/pocketmine/Player.php:            $this->close('', 'disconnectionScreen.resourcePack', true);
src/pocketmine/Player.php:            $this->server->getLogger()->debug('Got a resource pack chunk request for unknown pack with UUID '.$packet->packId.', available packs: '.implode(', ', $manager->getPackIdList()));
src/pocketmine/Player.php:        $pk->packId = $pack->getPackId();
src/pocketmine/Player.php:        $pk->chunkIndex = $packet->chunkIndex;
src/pocketmine/Player.php:        $pk->data = $pack->getPackChunk(self::RESOURCE_PACK_CHUNK_SIZE * $packet->chunkIndex, self::RESOURCE_PACK_CHUNK_SIZE);
src/pocketmine/Player.php:        $pk->progress = (self::RESOURCE_PACK_CHUNK_SIZE * $packet->chunkIndex);
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        $oldBook = $this->inventory->getItem($packet->inventorySlot);
src/pocketmine/Player.php:        if (Item::WRITABLE_BOOK !== $oldBook->getId()) {
src/pocketmine/Player.php:        switch ($packet->type) {
src/pocketmine/Player.php:                $newBook->setPageText($packet->pageNumber, $packet->text);
src/pocketmine/Player.php:                $modifiedPages[] = $packet->pageNumber;
src/pocketmine/Player.php:                if (!$newBook->pageExists($packet->pageNumber)) {
src/pocketmine/Player.php:                    //TODO: the client can send insert-before actions on trailing client-side pages which cause odd behaviour on the server
src/pocketmine/Player.php:                $newBook->insertPage($packet->pageNumber, $packet->text);
src/pocketmine/Player.php:                $modifiedPages[] = $packet->pageNumber;
src/pocketmine/Player.php:                if (!$newBook->pageExists($packet->pageNumber)) {
src/pocketmine/Player.php:                $newBook->deletePage($packet->pageNumber);
src/pocketmine/Player.php:                $modifiedPages[] = $packet->pageNumber;
src/pocketmine/Player.php:                if (!$newBook->pageExists($packet->pageNumber) or !$newBook->pageExists($packet->secondaryPageNumber)) {
src/pocketmine/Player.php:                    $newBook->addPage(max($packet->pageNumber, $packet->secondaryPageNumber));
src/pocketmine/Player.php:                $newBook->swapPages($packet->pageNumber, $packet->secondaryPageNumber);
src/pocketmine/Player.php:                $modifiedPages = [$packet->pageNumber, $packet->secondaryPageNumber];
src/pocketmine/Player.php:                $newBook = Item::get(Item::WRITTEN_BOOK, 0, 1, $newBook->getNamedTag());
src/pocketmine/Player.php:                $newBook->setAuthor($packet->author);
src/pocketmine/Player.php:                $newBook->setTitle($packet->title);
src/pocketmine/Player.php:                $newBook->setGeneration(WrittenBook::GENERATION_ORIGINAL);
src/pocketmine/Player.php:        $event = new PlayerEditBookEvent($this, $oldBook, $newBook, $packet->type, $modifiedPages);
src/pocketmine/Player.php:        $event->call();
src/pocketmine/Player.php:        if ($event->isCancelled()) {
src/pocketmine/Player.php:        $this->getInventory()->setItem($packet->inventorySlot, $event->getNewBook());
src/pocketmine/Player.php:        if (null !== $this->sessionAdapter) {
src/pocketmine/Player.php:            $this->sessionAdapter->handleDataPacket($packet);
src/pocketmine/Player.php:        if (!$this->isConnected()) {
src/pocketmine/Player.php:        $timings->startTiming();
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if ($ev->isCancelled()) {
src/pocketmine/Player.php:            $timings->stopTiming();
src/pocketmine/Player.php:        $this->batchedPackets[] = clone $packet;
src/pocketmine/Player.php:        $timings->stopTiming();
src/pocketmine/Player.php:        if (!$this->isConnected()) {
src/pocketmine/Player.php:        if (!$this->loggedIn and !$packet->canBeSentBeforeLogin()) {
src/pocketmine/Player.php:            throw new \InvalidArgumentException('Attempted to send '.get_class($packet).' to '.$this->getName().' too early');
src/pocketmine/Player.php:        $timings->startTiming();
src/pocketmine/Player.php:            $ev->call();
src/pocketmine/Player.php:            if ($ev->isCancelled()) {
src/pocketmine/Player.php:            $identifier = $this->interface->putPacket($this, $packet, $needACK, $immediate);
src/pocketmine/Player.php:                $this->needACK[$identifier] = false;
src/pocketmine/Player.php:            $timings->stopTiming();
src/pocketmine/Player.php:        return $this->sendDataPacket($packet, $needACK, false);
src/pocketmine/Player.php:        return $this->sendDataPacket($packet, $needACK, true);
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if (!$ev->isCancelled()) {
src/pocketmine/Player.php:            $pk->address = $ev->getAddress();
src/pocketmine/Player.php:            $pk->port = $ev->getPort();
src/pocketmine/Player.php:            $this->directDataPacket($pk);
src/pocketmine/Player.php:            $this->close('', $ev->getMessage(), false);
src/pocketmine/Player.php:        $ev = new PlayerKickEvent($this, $reason, $quitMessage ?? $this->getLeaveMessage());
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if (!$ev->isCancelled()) {
src/pocketmine/Player.php:            $reason = $ev->getReason();
src/pocketmine/Player.php:                if (!$this->isBanned()) {
src/pocketmine/Player.php:            $this->close($ev->getQuitMessage(), $message);
src/pocketmine/Player.php:     * @param int $fadeIn  Duration in ticks for fade-in. If -1 is given, client-sided defaults will be used.
src/pocketmine/Player.php:     * @param int $fadeOut duration in ticks for fade-out
src/pocketmine/Player.php:    public function addTitle(string $title, string $subtitle = '', int $fadeIn = -1, int $stay = -1, int $fadeOut = -1)
src/pocketmine/Player.php:        $this->sendTitle($title, $subtitle, $fadeIn, $stay, $fadeOut);
src/pocketmine/Player.php:     * @param int $fadeIn  Duration in ticks for fade-in. If -1 is given, client-sided defaults will be used.
src/pocketmine/Player.php:     * @param int $fadeOut duration in ticks for fade-out
src/pocketmine/Player.php:    public function sendTitle(string $title, string $subtitle = '', int $fadeIn = -1, int $stay = -1, int $fadeOut = -1): void
src/pocketmine/Player.php:        $this->setTitleDuration($fadeIn, $stay, $fadeOut);
src/pocketmine/Player.php:            $this->sendSubTitle($subtitle);
src/pocketmine/Player.php:        $this->sendTitleText($title, SetTitlePacket::TYPE_SET_TITLE);
src/pocketmine/Player.php:        $this->sendSubTitle($subtitle);
src/pocketmine/Player.php:        $this->sendTitleText($subtitle, SetTitlePacket::TYPE_SET_SUBTITLE);
src/pocketmine/Player.php:        $this->sendActionBarMessage($message);
src/pocketmine/Player.php:        $this->sendTitleText($message, SetTitlePacket::TYPE_SET_ACTIONBAR_MESSAGE);
src/pocketmine/Player.php:        $pk->type = SetTitlePacket::TYPE_CLEAR_TITLE;
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        $pk->type = SetTitlePacket::TYPE_RESET_TITLE;
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:     * @param int $fadeIn  title fade-in time in ticks
src/pocketmine/Player.php:     * @param int $fadeOut title fade-out time in ticks
src/pocketmine/Player.php:            $pk->type = SetTitlePacket::TYPE_SET_ANIMATION_TIMES;
src/pocketmine/Player.php:            $pk->fadeInTime = $fadeIn;
src/pocketmine/Player.php:            $pk->stayTime = $stay;
src/pocketmine/Player.php:            $pk->fadeOutTime = $fadeOut;
src/pocketmine/Player.php:            $this->dataPacket($pk);
src/pocketmine/Player.php:        $pk->type = $type;
src/pocketmine/Player.php:        $pk->text = $title;
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:                $this->sendTranslation($message->getText(), $message->getParameters());
src/pocketmine/Player.php:            $message = $message->getText();
src/pocketmine/Player.php:        $pk->type = TextPacket::TYPE_RAW;
src/pocketmine/Player.php:        $pk->message = $this->server->getLanguage()->translateString($message);
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        if (!$this->server->isLanguageForced()) {
src/pocketmine/Player.php:            $pk->type = TextPacket::TYPE_TRANSLATION;
src/pocketmine/Player.php:            $pk->needsTranslation = true;
src/pocketmine/Player.php:            $pk->message = $this->server->getLanguage()->translateString($message, $parameters, 'pocketmine.');
src/pocketmine/Player.php:                $parameters[$i] = $this->server->getLanguage()->translateString($p, [], 'pocketmine.');
src/pocketmine/Player.php:            $pk->parameters = $parameters;
src/pocketmine/Player.php:            $pk->type = TextPacket::TYPE_RAW;
src/pocketmine/Player.php:            $pk->message = $this->server->getLanguage()->translateString($message, $parameters);
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        $pk->type = TextPacket::TYPE_POPUP;
src/pocketmine/Player.php:        $pk->message = $message;
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        $pk->type = TextPacket::TYPE_TIP;
src/pocketmine/Player.php:        $pk->message = $message;
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        $pk->type = TextPacket::TYPE_WHISPER;
src/pocketmine/Player.php:        $pk->sourceName = $sender;
src/pocketmine/Player.php:        $pk->message = $message;
src/pocketmine/Player.php:        $this->dataPacket($pk);
src/pocketmine/Player.php:        $id = $this->formIdCounter++;
src/pocketmine/Player.php:        $pk->formId = $id;
src/pocketmine/Player.php:        $pk->formData = $formData;
src/pocketmine/Player.php:        if (false !== $this->dataPacket($pk)) {
src/pocketmine/Player.php:            $this->forms[$id] = $form;
src/pocketmine/Player.php:        if (!isset($this->forms[$formId])) {
src/pocketmine/Player.php:            $this->server->getLogger()->debug("Got unexpected response for form $formId");
src/pocketmine/Player.php:            $this->forms[$formId]->handleResponse($this, $responseData);
src/pocketmine/Player.php:            $this->server->getLogger()->critical('Failed to validate form '.get_class($this->forms[$formId]).': '.$e->getMessage());
src/pocketmine/Player.php:            $this->server->getLogger()->logException($e);
src/pocketmine/Player.php:            unset($this->forms[$formId]);
src/pocketmine/Player.php:        if ($this->isConnected() and !$this->closed) {
src/pocketmine/Player.php:                $pk->message = $reason;
src/pocketmine/Player.php:                $this->directDataPacket($pk);
src/pocketmine/Player.php:            $this->interface->close($this, $notify ? $reason : '');
src/pocketmine/Player.php:            $this->sessionAdapter = null;
src/pocketmine/Player.php:            PermissionManager::getInstance()->unsubscribeFromPermission(Server::BROADCAST_CHANNEL_USERS, $this);
src/pocketmine/Player.php:            PermissionManager::getInstance()->unsubscribeFromPermission(Server::BROADCAST_CHANNEL_ADMINISTRATIVE, $this);
src/pocketmine/Player.php:            $this->stopSleep();
src/pocketmine/Player.php:            if ($this->spawned) {
src/pocketmine/Player.php:                $ev->call();
src/pocketmine/Player.php:                if ('' != $ev->getQuitMessage()) {
src/pocketmine/Player.php:                    $this->server->broadcastMessage($ev->getQuitMessage());
src/pocketmine/Player.php:                $this->save();
src/pocketmine/Player.php:            if ($this->isValid()) {
src/pocketmine/Player.php:                foreach ($this->usedChunks as $index => $d) {
src/pocketmine/Player.php:                    $this->level->unregisterChunkLoader($this, $chunkX, $chunkZ);
src/pocketmine/Player.php:                    foreach ($this->level->getChunkEntities($chunkX, $chunkZ) as $entity) {
src/pocketmine/Player.php:                        $entity->despawnFrom($this);
src/pocketmine/Player.php:                    unset($this->usedChunks[$index]);
src/pocketmine/Player.php:            $this->usedChunks = [];
src/pocketmine/Player.php:            $this->loadQueue = [];
src/pocketmine/Player.php:            if ($this->loggedIn) {
src/pocketmine/Player.php:                $this->server->onPlayerLogout($this);
src/pocketmine/Player.php:                foreach ($this->server->getOnlinePlayers() as $player) {
src/pocketmine/Player.php:                    if (!$player->canSee($this)) {
src/pocketmine/Player.php:                        $player->showPlayer($this);
src/pocketmine/Player.php:                $this->hiddenPlayers = [];
src/pocketmine/Player.php:            $this->removeAllWindows(true);
src/pocketmine/Player.php:            $this->windows = [];
src/pocketmine/Player.php:            $this->windowIndex = [];
src/pocketmine/Player.php:            $this->cursorInventory = null;
src/pocketmine/Player.php:            $this->craftingGrid = null;
src/pocketmine/Player.php:            if ($this->constructed) {
src/pocketmine/Player.php:            $this->spawned = false;
src/pocketmine/Player.php:            if ($this->loggedIn) {
src/pocketmine/Player.php:                $this->loggedIn = false;
src/pocketmine/Player.php:                $this->server->removeOnlinePlayer($this);
src/pocketmine/Player.php:            $this->server->removePlayer($this);
src/pocketmine/Player.php:            $this->server->getLogger()->info($this->getServer()->getLanguage()->translateString('pocketmine.player.logOut', [
src/pocketmine/Player.php:                TextFormat::AQUA.$this->getName().TextFormat::WHITE,
src/pocketmine/Player.php:                $this->ip,
src/pocketmine/Player.php:                $this->port,
src/pocketmine/Player.php:                $this->getServer()->getLanguage()->translateString($reason),
src/pocketmine/Player.php:            $this->spawnPosition = null;
src/pocketmine/Player.php:            if (null !== $this->perm) {
src/pocketmine/Player.php:                $this->perm->clearPermissions();
src/pocketmine/Player.php:                $this->perm = null;
src/pocketmine/Player.php:        if ($this->closed) {
src/pocketmine/Player.php:        $this->namedtag->setString('LastKnownXUID', $this->xuid);
src/pocketmine/Player.php:        if ($this->isValid()) {
src/pocketmine/Player.php:            $this->namedtag->setString('Level', $this->level->getFolderName());
src/pocketmine/Player.php:        if ($this->hasValidSpawnPosition()) {
src/pocketmine/Player.php:            $this->namedtag->setString('SpawnLevel', $this->spawnPosition->getLevelNonNull()->getFolderName());
src/pocketmine/Player.php:            $this->namedtag->setInt('SpawnX', $this->spawnPosition->getFloorX());
src/pocketmine/Player.php:            $this->namedtag->setInt('SpawnY', $this->spawnPosition->getFloorY());
src/pocketmine/Player.php:            $this->namedtag->setInt('SpawnZ', $this->spawnPosition->getFloorZ());
src/pocketmine/Player.php:            if (!$this->isAlive()) {
src/pocketmine/Player.php:                $this->namedtag->setTag(new ListTag('Pos', [
src/pocketmine/Player.php:                    new DoubleTag('', $this->spawnPosition->x),
src/pocketmine/Player.php:                    new DoubleTag('', $this->spawnPosition->y),
src/pocketmine/Player.php:                    new DoubleTag('', $this->spawnPosition->z),
src/pocketmine/Player.php:        foreach ($this->achievements as $achievement => $status) {
src/pocketmine/Player.php:            $achievements->setByte($achievement, $status ? 1 : 0);
src/pocketmine/Player.php:        $this->namedtag->setTag($achievements);
src/pocketmine/Player.php:        $this->namedtag->setInt('playerGameType', $this->gamemode);
src/pocketmine/Player.php:        $this->namedtag->setLong('lastPlayed', (int) floor(microtime(true) * 1000));
src/pocketmine/Player.php:        if ('' != $this->username) {
src/pocketmine/Player.php:            $this->server->saveOfflinePlayerData($this->username, $this->namedtag);
src/pocketmine/Player.php:        if (!$this->spawned) {
src/pocketmine/Player.php:        $this->sendRespawnPacket($this->getSpawn());
src/pocketmine/Player.php:        //Crafting grid must always be evacuated even if keep-inventory is true. This dumps the contents into the
src/pocketmine/Player.php:        $this->doCloseInventory();
src/pocketmine/Player.php:        $ev = new PlayerDeathEvent($this, $this->getDrops(), null, $this->getXpDropAmount());
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        if (!$ev->getKeepInventory()) {
src/pocketmine/Player.php:            foreach ($ev->getDrops() as $item) {
src/pocketmine/Player.php:                $this->level->dropItem($this, $item);
src/pocketmine/Player.php:            if (null !== $this->inventory) {
src/pocketmine/Player.php:                $this->inventory->setHeldItemIndex(0);
src/pocketmine/Player.php:                $this->inventory->clearAll();
src/pocketmine/Player.php:            if (null !== $this->armorInventory) {
src/pocketmine/Player.php:                $this->armorInventory->clearAll();
src/pocketmine/Player.php:        $this->level->dropExperience($this, $ev->getXpDropAmount());
src/pocketmine/Player.php:        $this->setXpAndProgress(0, 0);
src/pocketmine/Player.php:        if ('' != $ev->getDeathMessage()) {
src/pocketmine/Player.php:            $this->server->broadcastMessage($ev->getDeathMessage());
src/pocketmine/Player.php:        if ($this->server->isHardcore()) {
src/pocketmine/Player.php:            $this->setBanned(true);
src/pocketmine/Player.php:        $ev = new PlayerRespawnEvent($this, $this->getSpawn());
src/pocketmine/Player.php:        $ev->call();
src/pocketmine/Player.php:        $realSpawn = Position::fromObject($ev->getRespawnPosition()->add(0.5, 0, 0.5), $ev->getRespawnPosition()->getLevelNonNull());
src/pocketmine/Player.php:        $this->teleport($realSpawn);
src/pocketmine/Player.php:        $this->setSprinting(false);
src/pocketmine/Player.php:        $this->setSneaking(false);
src/pocketmine/Player.php:        $this->extinguish();
src/pocketmine/Player.php:        $this->setAirSupplyTicks($this->getMaxAirSupplyTicks());
src/pocketmine/Player.php:        $this->deadTicks = 0;
src/pocketmine/Player.php:        $this->noDamageTicks = 60;
src/pocketmine/Player.php:        $this->removeAllEffects();
src/pocketmine/Player.php:        $this->setHealth($this->getMaxHealth());
src/pocketmine/Player.php:        foreach ($this->attributeMap->getAll() as $attr) {
src/pocketmine/Player.php:            $attr->resetToDefault();
src/pocketmine/Player.php:        $this->sendData($this);
src/pocketmine/Player.php:        $this->sendData($this->getViewers());
src/pocketmine/Player.php:        $this->sendSettings();
src/pocketmine/Player.php:        $this->sendAllInventories();
src/pocketmine/Player.php:        $this->spawnToAll();
src/pocketmine/Player.php:        $this->scheduleUpdate();
src/pocketmine/Player.php:        $this->exhaust(0.3, PlayerExhaustEvent::CAUSE_DAMAGE);
src/pocketmine/Player.php:        if (!$this->isAlive()) {
src/pocketmine/Player.php:        if ($this->isCreative()
src/pocketmine/Player.php:            and EntityDamageEvent::CAUSE_SUICIDE !== $source->getCause()
src/pocketmine/Player.php:            and EntityDamageEvent::CAUSE_VOID !== $source->getCause()
src/pocketmine/Player.php:            $source->setCancelled();
src/pocketmine/Player.php:        } elseif ($this->allowFlight and EntityDamageEvent::CAUSE_FALL === $source->getCause()) {
src/pocketmine/Player.php:            $source->setCancelled();
src/pocketmine/Player.php:        if ($this->spawned and null === $players) {
src/pocketmine/Player.php:            $players = $this->getViewers();
src/pocketmine/Player.php:        $result->y += 0.001; //Hack for MCPE falling underground for no good reason (TODO: find out why it's doing this)
src/pocketmine/Player.php:        $yaw = $yaw ?? $this->yaw;
src/pocketmine/Player.php:        $pitch = $pitch ?? $this->pitch;
src/pocketmine/Player.php:        $pk->entityRuntimeId = $this->getId();
src/pocketmine/Player.php:        $pk->position = $this->getOffsetPosition($pos);
src/pocketmine/Player.php:        $pk->pitch = $pitch;
src/pocketmine/Player.php:        $pk->headYaw = $yaw;
src/pocketmine/Player.php:        $pk->yaw = $yaw;
src/pocketmine/Player.php:        $pk->mode = $mode;
src/pocketmine/Player.php:        $pk->onGround = $this->onGround;
src/pocketmine/Player.php:                $this->forceMoveSync = $pos->asVector3();
src/pocketmine/Player.php:                $this->ySize = 0;
src/pocketmine/Player.php:            $this->server->broadcastPacket($targets, $pk);
src/pocketmine/Player.php:            $this->forceMoveSync = $pos->asVector3();
src/pocketmine/Player.php:            $this->ySize = 0;
src/pocketmine/Player.php:            $this->dataPacket($pk);
src/pocketmine/Player.php:            $this->removeAllWindows();
src/pocketmine/Player.php:            $this->sendPosition($this, $this->yaw, $this->pitch, MovePlayerPacket::MODE_TELEPORT);
src/pocketmine/Player.php:            $this->sendPosition($this, $this->yaw, $this->pitch, MovePlayerPacket::MODE_TELEPORT, $this->getViewers());
src/pocketmine/Player.php:            $this->spawnToAll();
src/pocketmine/Player.php:            $this->resetFallDistance();
src/pocketmine/Player.php:            $this->nextChunkOrderRun = 0;
src/pocketmine/Player.php:            if (-1 !== $this->spawnChunkLoadCount) {
src/pocketmine/Player.php:                $this->spawnChunkLoadCount = 0;
src/pocketmine/Player.php:            $this->stopSleep();
src/pocketmine/Player.php:            $this->resetLastMovements();
src/pocketmine/Player.php:        $this->addWindow($this->getInventory(), ContainerIds::INVENTORY, true);
src/pocketmine/Player.php:        $this->addWindow($this->getArmorInventory(), ContainerIds::ARMOR, true);
src/pocketmine/Player.php:        $this->cursorInventory = new PlayerCursorInventory($this);
src/pocketmine/Player.php:        $this->addWindow($this->cursorInventory, ContainerIds::UI, true);
src/pocketmine/Player.php:        $this->craftingGrid = new CraftingGrid($this, CraftingGrid::SIZE_SMALL);
src/pocketmine/Player.php:        return $this->cursorInventory;
src/pocketmine/Player.php:        return $this->craftingGrid;
src/pocketmine/Player.php:        $this->craftingGrid = $grid;
src/pocketmine/Player.php:        $inventories = [$this->craftingGrid, $this->cursorInventory];
src/pocketmine/Player.php:            $contents = $inventory->getContents();
src/pocketmine/Player.php:                $drops = $this->inventory->addItem(...$contents);
src/pocketmine/Player.php:                    $this->dropItem($drop);
src/pocketmine/Player.php:                $inventory->clearAll();
src/pocketmine/Player.php:        if ($this->craftingGrid->getGridWidth() > CraftingGrid::SIZE_SMALL) {
src/pocketmine/Player.php:            $this->craftingGrid = new CraftingGrid($this, CraftingGrid::SIZE_SMALL);
src/pocketmine/Player.php:     * Returns the window ID which the inventory has for this player, or -1 if the window is not open to the player.
src/pocketmine/Player.php:        return $this->windows[spl_object_hash($inventory)] ?? ContainerIds::NONE;
src/pocketmine/Player.php:        return $this->windowIndex[$windowId] ?? null;
src/pocketmine/Player.php:        if (ContainerIds::NONE !== ($id = $this->getWindowId($inventory))) {
src/pocketmine/Player.php:            $cnt = $this->windowCnt;
src/pocketmine/Player.php:                if ($cnt === $this->windowCnt) { //wraparound, no free slots
src/pocketmine/Player.php:            } while (isset($this->windowIndex[$cnt]));
src/pocketmine/Player.php:            $this->windowCnt = $cnt;
src/pocketmine/Player.php:            if (isset($this->windowIndex[$cnt]) or ($cnt >= self::RESERVED_WINDOW_ID_RANGE_START && $cnt <= self::RESERVED_WINDOW_ID_RANGE_END)) {
src/pocketmine/Player.php:        $this->windowIndex[$cnt] = $inventory;
src/pocketmine/Player.php:        $this->windows[spl_object_hash($inventory)] = $cnt;
src/pocketmine/Player.php:        if ($inventory->open($this)) {
src/pocketmine/Player.php:                $this->permanentWindows[$cnt] = true;
src/pocketmine/Player.php:            $this->removeWindow($inventory);
src/pocketmine/Player.php:            return -1;
src/pocketmine/Player.php:        $id = $this->windows[$hash = spl_object_hash($inventory)] ?? null;
src/pocketmine/Player.php:        if (null !== $id and !$force and isset($this->permanentWindows[$id])) {
src/pocketmine/Player.php:            throw new \InvalidArgumentException("Cannot remove fixed window $id (".get_class($inventory).') from '.$this->getName());
src/pocketmine/Player.php:            $inventory->close($this);
src/pocketmine/Player.php:            unset($this->windows[$hash], $this->windowIndex[$id], $this->permanentWindows[$id]);
src/pocketmine/Player.php:        foreach ($this->windowIndex as $id => $window) {
src/pocketmine/Player.php:            if (!$removePermanentWindows and isset($this->permanentWindows[$id])) {
src/pocketmine/Player.php:            $this->removeWindow($window, $removePermanentWindows);
src/pocketmine/Player.php:        foreach ($this->windowIndex as $id => $inventory) {
src/pocketmine/Player.php:            $inventory->sendContents($this);
src/pocketmine/Player.php:        $this->server->getPlayerMetadata()->setMetadata($this, $metadataKey, $newMetadataValue);
src/pocketmine/Player.php:        return $this->server->getPlayerMetadata()->getMetadata($this, $metadataKey);
src/pocketmine/Player.php:        return $this->server->getPlayerMetadata()->hasMetadata($this, $metadataKey);
src/pocketmine/Player.php:        $this->server->getPlayerMetadata()->removeMetadata($this, $metadataKey, $owningPlugin);
src/pocketmine/Player.php:        $hasSent = $this->usedChunks[$hash = Level::chunkHash($chunk->getX(), $chunk->getZ())] ?? false;
src/pocketmine/Player.php:            $this->usedChunks[$hash] = false;
src/pocketmine/Player.php:            $this->nextChunkOrderRun = 0;
src/pocketmine/Player.php:        return $this->loaderId;
src/pocketmine/Player.php:        return $this->isConnected();
src/pocketmine/timings/Timings.php:		self::$schedulerSyncTimer = new TimingsHandler("** Scheduler - Sync Tasks");
src/pocketmine/timings/Timings.php:		self::$schedulerAsyncTimer = new TimingsHandler("** Scheduler - Async Tasks");
src/pocketmine/timings/Timings.php:		$name = "Task: " . $task->getOwnerName() . " Runnable: " . $task->getTaskName();
src/pocketmine/timings/Timings.php:		$entityType = (new \ReflectionClass($entity))->getShortName();
src/pocketmine/timings/Timings.php:				self::$entityTypeTimingMap[$entityType] = new TimingsHandler("** tickEntity - EntityPlayer", self::$tickEntityTimer);
src/pocketmine/timings/Timings.php:				self::$entityTypeTimingMap[$entityType] = new TimingsHandler("** tickEntity - " . $entityType, self::$tickEntityTimer);
src/pocketmine/timings/Timings.php:		$tileType = (new \ReflectionClass($tile))->getShortName();
src/pocketmine/timings/Timings.php:			self::$tileEntityTypeTimingMap[$tileType] = new TimingsHandler("** tickTileEntity - " . $tileType, self::$tickTileEntityTimer);
src/pocketmine/timings/Timings.php:			$pkName = (new \ReflectionClass($pk))->getShortName();
src/pocketmine/timings/Timings.php:			self::$packetReceiveTimingMap[$pk::NETWORK_ID] = new TimingsHandler("** receivePacket - " . $pkName . " [0x" . dechex($pk::NETWORK_ID) . "]", self::$playerNetworkReceiveTimer);
src/pocketmine/timings/Timings.php:			$pkName = (new \ReflectionClass($pk))->getShortName();
src/pocketmine/timings/Timings.php:			self::$packetSendTimingMap[$pk::NETWORK_ID] = new TimingsHandler("** sendPacket - " . $pkName . " [0x" . dechex($pk::NETWORK_ID) . "]", self::$playerNetworkTimer);
src/pocketmine/timings/TimingsHandler.php:			$time = $timings->totalTime;
src/pocketmine/timings/TimingsHandler.php:			$count = $timings->count;
src/pocketmine/timings/TimingsHandler.php:			fwrite($fp, "    " . $timings->name . " Time: " . round($time * 1000000000) . " Count: " . $count . " Avg: " . round($avg * 1000000000) . " Violations: " . $timings->violations . PHP_EOL);
src/pocketmine/timings/TimingsHandler.php:		fwrite($fp, "# Version " . Server::getInstance()->getVersion() . PHP_EOL);
src/pocketmine/timings/TimingsHandler.php:		fwrite($fp, "# " . Server::getInstance()->getName() . " " . Server::getInstance()->getPocketMineVersion() . PHP_EOL);
src/pocketmine/timings/TimingsHandler.php:		foreach(Server::getInstance()->getLevels() as $level){
src/pocketmine/timings/TimingsHandler.php:			$entities += count($level->getEntities());
src/pocketmine/timings/TimingsHandler.php:			foreach($level->getEntities() as $e){
src/pocketmine/timings/TimingsHandler.php:		$sampleTime = microtime(true) - self::$timingStart;
src/pocketmine/timings/TimingsHandler.php:				$timings->reset();
src/pocketmine/timings/TimingsHandler.php:					if($timings->curTickTotal > 0.05){
src/pocketmine/timings/TimingsHandler.php:						$timings->violations += (int) round($timings->curTickTotal / 0.05);
src/pocketmine/timings/TimingsHandler.php:					$timings->curTickTotal = 0;
src/pocketmine/timings/TimingsHandler.php:					$timings->curCount = 0;
src/pocketmine/timings/TimingsHandler.php:					$timings->timingDepth = 0;
src/pocketmine/timings/TimingsHandler.php:					$timings->totalTime -= $timings->curTickTotal;
src/pocketmine/timings/TimingsHandler.php:					$timings->count -= $timings->curCount;
src/pocketmine/timings/TimingsHandler.php:					$timings->curTickTotal = 0;
src/pocketmine/timings/TimingsHandler.php:					$timings->curCount = 0;
src/pocketmine/timings/TimingsHandler.php:					$timings->timingDepth = 0;
src/pocketmine/timings/TimingsHandler.php:		$this->name = $name;
src/pocketmine/timings/TimingsHandler.php:		$this->parent = $parent;
src/pocketmine/timings/TimingsHandler.php:			$this->internalStartTiming(microtime(true));
src/pocketmine/timings/TimingsHandler.php:		if(++$this->timingDepth === 1){
src/pocketmine/timings/TimingsHandler.php:			$this->start = $now;
src/pocketmine/timings/TimingsHandler.php:			if($this->parent !== null){
src/pocketmine/timings/TimingsHandler.php:				$this->parent->internalStartTiming($now);
src/pocketmine/timings/TimingsHandler.php:			$this->internalStopTiming(microtime(true));
src/pocketmine/timings/TimingsHandler.php:		if($this->timingDepth === 0){
src/pocketmine/timings/TimingsHandler.php:		if(--$this->timingDepth !== 0 or $this->start == 0){
src/pocketmine/timings/TimingsHandler.php:		$diff = $now - $this->start;
src/pocketmine/timings/TimingsHandler.php:		$this->totalTime += $diff;
src/pocketmine/timings/TimingsHandler.php:		$this->curTickTotal += $diff;
src/pocketmine/timings/TimingsHandler.php:		++$this->curCount;
src/pocketmine/timings/TimingsHandler.php:		++$this->count;
src/pocketmine/timings/TimingsHandler.php:		$this->start = 0;
src/pocketmine/timings/TimingsHandler.php:		if($this->parent !== null){
src/pocketmine/timings/TimingsHandler.php:			$this->parent->internalStopTiming($now);
src/pocketmine/timings/TimingsHandler.php:		$this->count = 0;
src/pocketmine/timings/TimingsHandler.php:		$this->curCount = 0;
src/pocketmine/timings/TimingsHandler.php:		$this->violations = 0;
src/pocketmine/timings/TimingsHandler.php:		$this->curTickTotal = 0;
src/pocketmine/timings/TimingsHandler.php:		$this->totalTime = 0;
src/pocketmine/timings/TimingsHandler.php:		$this->start = 0;
src/pocketmine/timings/TimingsHandler.php:		$this->timingDepth = 0;
start.cmd:TITLE PocketMine-MP server software for Minecraft: Pocket Edition
start.cmd:if exist PocketMine-MP.phar (
start.cmd:	set POCKETMINE_FILE=PocketMine-MP.phar
start.cmd:	echo PocketMine-MP.phar not found
start.cmd:	echo Downloads can be found at https://github.com/pmmp/PocketMine-MP/releases
start.cmd:	start "" bin\mintty.exe -o Columns=88 -o Rows=32 -o AllowBlinking=0 -o FontQuality=3 -o Font="Consolas" -o FontHeight=10 -o CursorType=0 -o CursorBlinks=1 -h error -t "PocketMine-MP" -i bin/pocketmine.ico -w max %PHP_BINARY% %POCKETMINE_FILE% --enable-ansi %*
start.cmd:	%PHP_BINARY% -c bin\php %POCKETMINE_FILE% %* || pause
start.ps1:if($php -ne ""){
start.ps1:}elseif(Test-Path "bin\php\php.exe"){
start.ps1:if($file -eq ""){
start.ps1:	if(Test-Path "PocketMine-MP.phar"){
start.ps1:	    $file = "PocketMine-MP.phar"
start.ps1:	    echo "PocketMine-MP.phar not found"
start.ps1:	    echo "Downloads can be found at https://github.com/pmmp/PocketMine-MP/releases"
start.ps1:	$command = "powershell -NoProfile " + $binary + " " + $file + " " + $extraPocketMineArgs
start.ps1:	if($loops -ne 0){
start.ps1:	Start-Sleep 5
start.sh:DIR="$(cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
start.sh:	if [ -f ./bin/php7/bin/php ]; then
start.sh:	elif [[ ! -z $(type php) ]]; then
start.sh:		PHP_BINARY=$(type -p php)
start.sh:	if [ -f ./PocketMine-MP.phar ]; then
start.sh:		POCKETMINE_FILE="./PocketMine-MP.phar"
start.sh:		echo "PocketMine-MP.phar not found"
start.sh:		echo "Downloads can be found at https://github.com/pmmp/PocketMine-MP/releases"
start.sh:		if [ ${LOOPS} -gt 0 ]; then
tests/phpstan/configs/php-bugs.neon:		-
tests/phpstan/configs/php-bugs.neon:		-
tests/phpstan/configs/com-dotnet-magic.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/actual-problems.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:			message: "#^Call to function is_subclass_of\\(\\) with class\\-string\\<pocketmine\\\\level\\\\generator\\\\Generator\\> and 'pocketmine\\\\\\\\level\\\\\\\\generator\\\\\\\\Generator' will always evaluate to true\\.$#"
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:			message: "#^Call to function is_subclass_of\\(\\) with class\\-string\\<pocketmine\\\\level\\\\generator\\\\Generator\\> and 'pocketmine\\\\\\\\level\\\\\\\\generator\\\\\\\\Generator' will always evaluate to true\\.$#"
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:		-
tests/phpstan/configs/runtime-type-checks.neon:			message: "#^Call to function is_subclass_of\\(\\) with class\\-string\\<pocketmine\\\\event\\\\Event\\> and 'pocketmine\\\\\\\\event\\\\\\\\Event' will always evaluate to true\\.$#"
tests/phpstan/configs/phpstan-bugs.neon:		-
tests/phpstan/configs/phpstan-bugs.neon:		-
tests/phpstan/configs/phpstan-bugs.neon:		-
tests/phpstan/configs/phpstan-bugs.neon:		-
tests/phpstan/configs/phpstan-bugs.neon:		-
tests/phpstan/configs/phpstan-bugs.neon:		-
tests/phpstan/configs/phpstan-bugs.neon:		-
tests/phpstan/configs/phpstan-bugs.neon:		-
tests/phpstan/configs/phpstan-bugs.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/gc-hacks.neon:		-
tests/phpstan/configs/pthreads-bugs.neon:		-
tests/phpstan/configs/phpunit-wiring-tests.neon:		-
tests/phpstan/configs/phpunit-wiring-tests.neon:			message: "#^Parameter \\#1 \\$class of static method pocketmine\\\\level\\\\format\\\\io\\\\LevelProviderManager\\:\\:addProvider\\(\\) expects class\\-string\\<pocketmine\\\\level\\\\format\\\\io\\\\LevelProvider\\>, string given\\.$#"
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:			path: ../../../build/make-release.php
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:			message: "#^Only numeric types are allowed in \\-, int\\|null given on the left side\\.$#"
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:			message: "#^Only numeric types are allowed in \\-, int\\|null given on the right side\\.$#"
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:			message: "#^Only numeric types are allowed in \\-, int\\|null given on the left side\\.$#"
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:			message: "#^Only numeric types are allowed in \\-, int\\|null given on the left side\\.$#"
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:			message: "#^Only numeric types are allowed in \\-, int\\|null given on the left side\\.$#"
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:			message: "#^Only numeric types are allowed in \\-, int\\|null given on the right side\\.$#"
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:			message: "#^Only numeric types are allowed in \\-, int\\|null given on the right side\\.$#"
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/l8-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/check-explicit-mixed-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:			path: ../../../build/make-release.php
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:			path: ../../../build/server-phar.php
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:			path: ../../../build/server-phar.php
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:			message: "#^Array \\(array\\<class\\-string\\<pocketmine\\\\entity\\\\Entity\\>, string\\>\\) does not accept string\\|false\\.$#"
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:			message: "#^Parameter \\#1 \\$argument of class ReflectionClass constructor expects class\\-string\\<T of object\\>\\|T of object, string given\\.$#"
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:			message: "#^Parameter \\#1 \\$event of method pocketmine\\\\plugin\\\\PluginManager\\:\\:registerEvent\\(\\) expects class\\-string\\<pocketmine\\\\event\\\\Event\\>, class\\-string\\<object\\> given\\.$#"
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/configs/l7-baseline.neon:			message: "#^Array \\(array\\<class\\-string\\<pocketmine\\\\tile\\\\Tile\\>, string\\>\\) does not accept string\\|false\\.$#"
tests/phpstan/configs/l7-baseline.neon:		-
tests/phpstan/stubs/pthreads.stub: * @implements \Traversable<array-key, mixed>
tests/phpunit/item/ItemTest.php:		$item = ItemFactory::get(Item::STONE)->setCustomName("HI");
tests/phpunit/item/ItemTest.php:		$item2 = Item::nbtDeserialize($item->nbtSerialize());
tests/phpunit/item/ItemTest.php:		self::assertTrue($item2->equals($item));
tests/phpunit/item/ItemTest.php:		self::assertTrue($item->equals($item2));
tests/phpunit/item/ItemTest.php:		self::assertTrue($item1->equals($item2));
tests/phpunit/item/ItemTest.php:	 * @phpstan-return list<array{string,int,int}>
tests/phpunit/item/ItemTest.php:		self::assertEquals($id, $item->getId());
tests/phpunit/item/ItemTest.php:		self::assertEquals($meta, $item->getDamage());
tests/phpunit/block/BlockTest.php:		$this->expectException(\RuntimeException::class);
tests/phpunit/block/BlockTest.php:		self::assertInstanceOf(MyCustomBlock::class, BlockFactory::get($block->getId()));
tests/phpunit/block/BlockTest.php:				self::assertInstanceOf(StrangeNewBlock::class, BlockFactory::get($b->getId()));
tests/phpunit/block/BlockTest.php:		BlockFactory::registerBlock(new OutOfBoundsBlock(-1));
tests/phpunit/block/BlockTest.php:	 * Test that the block factory doesn't return the same object twice - it has to clone it first
tests/phpunit/block/BlockTest.php:	 * This is necessary because the block factory currently holds lots of partially-initialized copies of block
tests/phpunit/block/BlockTest.php:	 * @phpstan-return list<array{int,int}>
tests/phpunit/block/BlockTest.php:		self::assertEquals($id, $block->getId());
tests/phpunit/block/BlockTest.php:		self::assertEquals($meta, $block->getDamage());
tests/phpunit/block/BlockTest.php:			self::assertTrue($b instanceof UnknownBlock or $b->getName() !== "Unknown", "Block with ID $id does not have a valid name");
tests/phpunit/inventory/BaseInventoryTest.php:		$item2 = ItemFactory::get(Item::ARROW, 0, 1)->setCustomName("TEST");
tests/phpunit/inventory/BaseInventoryTest.php:		$inv->addItem(clone $item1);
tests/phpunit/inventory/BaseInventoryTest.php:		self::assertFalse($inv->canAddItem($item2), "Item WITHOUT userdata should not stack with item WITH userdata");
tests/phpunit/inventory/BaseInventoryTest.php:		self::assertNotEmpty($inv->addItem($item2));
tests/phpunit/inventory/BaseInventoryTest.php:		$inv->clearAll();
tests/phpunit/inventory/BaseInventoryTest.php:		self::assertEmpty($inv->getContents());
tests/phpunit/inventory/BaseInventoryTest.php:		$inv->addItem(clone $item2);
tests/phpunit/inventory/BaseInventoryTest.php:		self::assertFalse($inv->canAddItem($item1), "Item WITH userdata should not stack with item WITHOUT userdata");
tests/phpunit/inventory/BaseInventoryTest.php:		self::assertNotEmpty($inv->addItem($item1));
tests/phpunit/network/mcpe/StupidJsonDecodeTest.php:	 * @phpstan-var \Closure(string $json, bool $assoc=) : mixed
tests/phpunit/network/mcpe/StupidJsonDecodeTest.php:		$this->stupidJsonDecodeFunc = (new \ReflectionMethod(PlayerNetworkSessionAdapter::class, 'stupid_json_decode'))->getClosure();
tests/phpunit/network/mcpe/StupidJsonDecodeTest.php:	 * @phpstan-return list<array{string,mixed}>
tests/phpunit/network/mcpe/StupidJsonDecodeTest.php:		$decoded = ($this->stupidJsonDecodeFunc)($brokenJson, true);
tests/phpunit/network/mcpe/protocol/DataPacketTest.php:		$pk->senderSubId = 3;
tests/phpunit/network/mcpe/protocol/DataPacketTest.php:		$pk->recipientSubId = 2;
tests/phpunit/network/mcpe/protocol/DataPacketTest.php:		$pk->encode();
tests/phpunit/network/mcpe/protocol/DataPacketTest.php:		$pk2->setBuffer($pk->getBuffer());
tests/phpunit/network/mcpe/protocol/DataPacketTest.php:		$pk2->decode();
tests/phpunit/network/mcpe/protocol/DataPacketTest.php:		self::assertSame($pk2->senderSubId, 3);
tests/phpunit/network/mcpe/protocol/DataPacketTest.php:		self::assertSame($pk2->recipientSubId, 2);
tests/phpunit/network/mcpe/protocol/ProtocolInfoTest.php:			"Network version should only contain 0-9 and \".\", and no more than 4 groups of digits"
tests/phpunit/level/format/io/LevelProviderManagerTest.php:		$this->expectException(\InvalidArgumentException::class);
tests/phpunit/level/format/io/LevelProviderManagerTest.php:		$this->expectException(\InvalidArgumentException::class);
tests/phpunit/level/format/io/LevelProviderManagerTest.php:		$this->expectException(\InvalidArgumentException::class);
tests/phpunit/level/format/io/LevelProviderManagerTest.php:		$this->expectException(\InvalidArgumentException::class);
tests/phpunit/level/format/io/region/RegionLocationTableEntryTest.php:	 * @phpstan-return \Generator<int, array{RegionLocationTableEntry, RegionLocationTableEntry, bool}, void, void>
tests/phpunit/level/format/io/region/RegionLocationTableEntryTest.php:			return sprintf("entry first=%d last=%d size=%d", $entry->getFirstSector(), $entry->getLastSector(), $entry->getSectorCount());
tests/phpunit/level/format/io/region/RegionLocationTableEntryTest.php:		self::assertSame($overlaps, $entry1->overlaps($entry2), $stringify($entry1) . " expected to " . ($overlaps ? "overlap" : "not overlap") . " with " . $stringify($entry2));
tests/phpunit/level/format/io/region/RegionLocationTableEntryTest.php:		self::assertSame($overlaps, $entry2->overlaps($entry1), $stringify($entry2) . " expected to " . ($overlaps ? "overlap" : "not overlap") . " with " . $stringify($entry1));
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->regionPath = sys_get_temp_dir() . '/test.testregion';
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		if(file_exists($this->regionPath)){
tests/phpunit/level/format/io/region/RegionLoaderTest.php:			unlink($this->regionPath);
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->region = new RegionLoader($this->regionPath, 0, 0);
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->region->open();
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->region->close();
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		if(file_exists($this->regionPath)){
tests/phpunit/level/format/io/region/RegionLoaderTest.php:			unlink($this->regionPath);
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->expectException(ChunkException::class);
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->region->writeChunk(0, 0, str_repeat("a", 1044476));
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->region->writeChunk(0, 0, $data);
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->region->close();
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$r = new RegionLoader($this->regionPath, 0, 0);
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$r->open();
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		self::assertSame($data, $r->readChunk(0, 0));
tests/phpunit/level/format/io/region/RegionLoaderTest.php:	 * @phpstan-return \Generator<int, array{int,int}, void, void>
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		yield [-1, -1];
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		yield [-1, 32];
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		yield [32, -1];
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->expectException(\InvalidArgumentException::class);
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->region->writeChunk($x, $z, str_repeat("\x00", 1000));
tests/phpunit/level/format/io/region/RegionLoaderTest.php:				$this->region->writeChunk($x, $z, $dat);
tests/phpunit/level/format/io/region/RegionLoaderTest.php:				self::assertSame($dat, $this->region->readChunk($x, $z));
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->expectException(\InvalidArgumentException::class);
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->region->readChunk($x, $z);
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$this->region->close();
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$region = new RegionLoader($this->regionPath, 0, 0); //now we have a region, so the header will be verified, triggering two filesize() calls
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$region->open();
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$region->writeChunk(0, 0, $data); //add some data to the end of the file, to make the cached filesize invalid
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$region->close();
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$region = new RegionLoader($this->regionPath, 0, 0);
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		$region->open();
tests/phpunit/level/format/io/region/RegionLoaderTest.php:		self::assertSame($data, $region->readChunk(0, 0));
tests/phpunit/utils/ConfigTest.php:	 * @phpstan-return \Generator<int, array{string, mixed[]}, void, void>
tests/phpunit/utils/UtilsTest.php:	 * @phpstan-return list<array{string}>
tests/phpunit/utils/UtilsTest.php:	 * @phpstan-return list<array{string}>
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:	const RESULT_WAITING = -1;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:		$this->plugin = $plugin;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:		return $this->plugin;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:		$this->startTime = time();
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:			$this->run();
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:			$this->getPlugin()->getLogger()->error($e->getMessage());
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:			$this->setResult(Test::RESULT_FAILED);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:			$this->getPlugin()->getLogger()->logException($e);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:			$this->setResult(Test::RESULT_ERROR);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:		return $this->result !== Test::RESULT_WAITING;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:		return !$this->isFinished() and time() - $this->timeout > $this->startTime;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:		$this->timeout = $timeout;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:		return $this->result;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Test.php:		$this->result = $result;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskMemoryLeakTest.php:		$this->getPlugin()->getServer()->getAsyncPool()->submitTask(new TestAsyncTask());
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskMemoryLeakTest.php:			$this->setResult(Test::RESULT_OK);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskMainLoggerTest.php:		$this->getPlugin()->getServer()->getAsyncPool()->submitTask(new class($this) extends AsyncTask{
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskMainLoggerTest.php:				$this->storeLocal($testObject);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskMainLoggerTest.php:				MainLogger::getLogger()->info("Testing");
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskMainLoggerTest.php:					$this->success = true;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskMainLoggerTest.php:				$test = $this->fetchLocal();
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskMainLoggerTest.php:				$test->setResult($this->success ? Test::RESULT_OK : Test::RESULT_FAILED);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskPublishProgressRaceTest.php:		$this->getPlugin()->getServer()->getAsyncPool()->submitTask(new class($this) extends AsyncTask{
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskPublishProgressRaceTest.php:				$this->storeLocal($t);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskPublishProgressRaceTest.php:				$this->publishProgress("hello");
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskPublishProgressRaceTest.php:				$t = $this->fetchLocal();
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/tests/AsyncTaskPublishProgressRaceTest.php:				$t->setResult(self::$success ? Test::RESULT_OK : Test::RESULT_FAILED);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/CheckTestCompletionTask.php:		$this->plugin = $plugin;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/CheckTestCompletionTask.php:		$test = $this->plugin->getCurrentTest();
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/CheckTestCompletionTask.php:			if(!$this->plugin->startNextTest()){
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/CheckTestCompletionTask.php:				$this->getHandler()->cancel();
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/CheckTestCompletionTask.php:				$this->plugin->onAllTestsCompleted();
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/CheckTestCompletionTask.php:		}elseif($test->isFinished() or $test->isTimedOut()){
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/CheckTestCompletionTask.php:			$this->plugin->onTestCompleted($test);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/CheckTestCompletionTask.php:			$test->tick();
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		$this->getServer()->getPluginManager()->registerEvents($this, $this);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		$this->getScheduler()->scheduleRepeatingTask(new CheckTestCompletionTask($this), 10);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		$this->waitingTests = [
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		if($event->getCommand() === "stop"){
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:			$event->setCancelled();
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		return $this->currentTest;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		$this->currentTest = array_shift($this->waitingTests);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		if($this->currentTest !== null){
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:			$this->getLogger()->notice("Running test #" . (++$this->currentTestNumber) . " (" . $this->currentTest->getName() . ")");
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:			$this->currentTest->start();
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		$message = "Finished test #" . $this->currentTestNumber . " (" . $test->getName() . "): ";
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		switch($test->getResult()){
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		$this->getLogger()->notice($message);
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		$this->completedTests[$this->currentTestNumber] = $test;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		$this->currentTest = null;
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		$this->getLogger()->notice("All tests finished, stopping the server");
tests/plugins/TesterPlugin/src/pmmp/TesterPlugin/Main.php:		$this->getServer()->shutdown();
tests/plugins/TesterPlugin/plugin.yml:description: Plugin used to run tests on PocketMine-MP
tests/plugins/DevTools/README.md:# Development Tools <em>for PocketMine-MP</em>
tests/plugins/DevTools/README.md:DevTools is a collection of utilities used for developing PocketMine-MP plugins.
tests/plugins/DevTools/README.md:- Generate skeleton files to bootstrap a new plugin
tests/plugins/DevTools/README.md:- Build plugin phars from source code
tests/plugins/DevTools/README.md:- Load plugins directly from source code (folder plugins), useful for rapid development
tests/plugins/DevTools/README.md:- Check player permissions using commands
tests/plugins/DevTools/README.md:php -dphar.readonly=0 path/to/ConsoleScript.php --make path/to/DevTools --relative path/to/DevTools --out path/to/put/devtools/phar/in/DevTools.phar
tests/plugins/DevTools/README.md:You can then load the phar onto a PocketMine-MP server. A correctly-built DevTools phar can also be executed directly from the command line as if it was the ConsoleScript.
tests/plugins/DevTools/README.md:You can also use the ConsoleScript or a DevTools phar from the command-line to build PocketMine-MP phars or plugin phars.
tests/plugins/DevTools/README.md:|:--------:|:--------:|:------------|
tests/plugins/DevTools/README.md:| `--make` | yes | The path to the files you want to bundle into a phar |
tests/plugins/DevTools/README.md:| `--relative` | no | Relative path to use when building the phar. This usually isn't necessary for plugins. Used to build PocketMine-MP phars with the `src` directory without including the files in the repository root. |
tests/plugins/DevTools/README.md:| `--entry` | no | PHP file within the phar to execute when running the phar from the command-line. Usually not needed for plugins, but required for a PocketMine-MP phar. Used to generate phar stubs. |
tests/plugins/DevTools/README.md:| `--stub` | no | (Optional) PHP file to use as a custom phar stub. The stub will be executed when the phar is run from the command line. |
tests/plugins/DevTools/README.md:| `--out` | yes | Path and filename of the output phar file. |
tests/plugins/DevTools/README.md:php -dphar.readonly=0 path/to/ConsoleScript.php --make path/to/your/plugin/sourcecode --out path/to/put/your/plugin.phar
tests/plugins/DevTools/.poggit.yml:--- # Poggit-CI Manifest. Open the CI at https://poggit.pmmp.io/ci/pmmp/PocketMine-DevTools
tests/plugins/DevTools/.poggit.yml:  PocketMine-DevTools:
tests/plugins/DevTools/phpstan-composer.json:   "name": "pocketmine/phpstan-plugin-config",
tests/plugins/DevTools/phpstan-composer.json:      "pocketmine/pocketmine-mp": "^3.11.3",
tests/plugins/DevTools/phpstan-composer.json:      "phpstan/phpstan-strict-rules": "^0.12.2",
tests/plugins/DevTools/phpstan-composer.json:      "phpstan/extension-installer": "^1.0"
tests/plugins/DevTools/phpstan-composer.json:      "psr-4": {
tests/plugins/DevTools/src/DevTools/DevTools.php: * DevTools plugin for PocketMine-MP
tests/plugins/DevTools/src/DevTools/DevTools.php:		$map = $this->getServer()->getCommandMap();
tests/plugins/DevTools/src/DevTools/DevTools.php:		$map->register("devtools", new ExtractPluginCommand($this));
tests/plugins/DevTools/src/DevTools/DevTools.php:		$map->register("devtools", new GeneratePluginCommand($this));
tests/plugins/DevTools/src/DevTools/DevTools.php:		@mkdir($this->getDataFolder());
tests/plugins/DevTools/src/DevTools/DevTools.php:		$this->getServer()->getPluginManager()->registerInterface(new FolderPluginLoader($this->getServer()->getLoader()));
tests/plugins/DevTools/src/DevTools/DevTools.php:		$this->getServer()->getPluginManager()->loadPlugins($this->getServer()->getPluginPath(), [FolderPluginLoader::class]);
tests/plugins/DevTools/src/DevTools/DevTools.php:		$this->getLogger()->info("Registered folder plugin loader");
tests/plugins/DevTools/src/DevTools/DevTools.php:		$this->getServer()->enablePlugins(PluginLoadOrder::STARTUP);
tests/plugins/DevTools/src/DevTools/DevTools.php:		switch($command->getName()){
tests/plugins/DevTools/src/DevTools/DevTools.php:					return $this->makePluginLoader($sender);
tests/plugins/DevTools/src/DevTools/DevTools.php:					$plugins = $this->getServer()->getPluginManager()->getPlugins();
tests/plugins/DevTools/src/DevTools/DevTools.php:						if(!$plugin->getPluginLoader() instanceof FolderPluginLoader){
tests/plugins/DevTools/src/DevTools/DevTools.php:						if($this->makePluginCommand($sender, [$plugin->getName()])){
tests/plugins/DevTools/src/DevTools/DevTools.php:							$succeeded[] = $plugin->getName();
tests/plugins/DevTools/src/DevTools/DevTools.php:							$failed[] = $plugin->getName();
tests/plugins/DevTools/src/DevTools/DevTools.php:						$sender->sendMessage(TextFormat::RED . count($failed) . " plugin"
tests/plugins/DevTools/src/DevTools/DevTools.php:						$sender->sendMessage(TextFormat::GREEN . count($succeeded) . "/" . (count($plugins) - $skipped) . " plugin"
tests/plugins/DevTools/src/DevTools/DevTools.php:							. ((count($plugins) - $skipped) === 1 ? "" : "s") . " successfully built: " . implode(", ", $succeeded));
tests/plugins/DevTools/src/DevTools/DevTools.php:					$this->makePluginCommand($sender, $args);
tests/plugins/DevTools/src/DevTools/DevTools.php:				return $this->permissionCheckCommand($sender, $args);
tests/plugins/DevTools/src/DevTools/DevTools.php:			if(($player = $this->getServer()->getPlayer($args[1])) instanceof Player){
tests/plugins/DevTools/src/DevTools/DevTools.php:		if($target !== $sender and !$sender->hasPermission("devtools.command.checkperm.other")){
tests/plugins/DevTools/src/DevTools/DevTools.php:			$sender->sendMessage(TextFormat::RED . "You do not have permissions to check other players.");
tests/plugins/DevTools/src/DevTools/DevTools.php:			$sender->sendMessage(TextFormat::GREEN . "---- " . TextFormat::WHITE . "Permission node " . $node . TextFormat::GREEN . " ----");
tests/plugins/DevTools/src/DevTools/DevTools.php:			$perm = PermissionManager::getInstance()->getPermission($node);
tests/plugins/DevTools/src/DevTools/DevTools.php:				$desc = TextFormat::GOLD . "Description: " . TextFormat::WHITE . $perm->getDescription() . "\n";
tests/plugins/DevTools/src/DevTools/DevTools.php:				$desc .= TextFormat::GOLD . "Default: " . TextFormat::WHITE . $perm->getDefault() . "\n";
tests/plugins/DevTools/src/DevTools/DevTools.php:				foreach($perm->getChildren() as $name => $true){
tests/plugins/DevTools/src/DevTools/DevTools.php:				$desc .= TextFormat::GOLD . "Children: " . TextFormat::WHITE . substr($children, 0, -2) . "\n";
tests/plugins/DevTools/src/DevTools/DevTools.php:			$sender->sendMessage($desc);
tests/plugins/DevTools/src/DevTools/DevTools.php:			$sender->sendMessage(TextFormat::YELLOW . $target->getName() . TextFormat::WHITE . " has it set to " . ($target->hasPermission($node) === true ? TextFormat::GREEN . "true" : TextFormat::RED . "false"));
tests/plugins/DevTools/src/DevTools/DevTools.php:			$sender->sendMessage(TextFormat::RED . "This command requires \"phar.readonly\" to be set to 0. Set it in " . php_ini_loaded_file() . " and restart the server.");
tests/plugins/DevTools/src/DevTools/DevTools.php:		$pharPath = $this->getDataFolder() . "FolderPluginLoader.phar";
tests/plugins/DevTools/src/DevTools/DevTools.php:			$sender->sendMessage("Phar plugin already exists, overwriting...");
tests/plugins/DevTools/src/DevTools/DevTools.php:		$phar->setMetadata([
tests/plugins/DevTools/src/DevTools/DevTools.php:		$phar->setStub('<?php __HALT_COMPILER();');
tests/plugins/DevTools/src/DevTools/DevTools.php:		$phar->setSignatureAlgorithm(\Phar::SHA1);
tests/plugins/DevTools/src/DevTools/DevTools.php:		$phar->startBuffering();
tests/plugins/DevTools/src/DevTools/DevTools.php:		$phar->addFromString("plugin.yml", "name: FolderPluginLoader\nversion: 1.0.1\nmain: FolderPluginLoader\\Main\napi: [1.0.0, 2.0.0]\nload: STARTUP\n");
tests/plugins/DevTools/src/DevTools/DevTools.php:		$phar->addFile($this->getFile() . "src/FolderPluginLoader/FolderPluginLoader.php", "src/FolderPluginLoader/FolderPluginLoader.php");
tests/plugins/DevTools/src/DevTools/DevTools.php:		$phar->addFile($this->getFile() . "src/FolderPluginLoader/Main.php", "src/FolderPluginLoader/Main.php");
tests/plugins/DevTools/src/DevTools/DevTools.php:			if($finfo->getSize() > (1024 * 512)){
tests/plugins/DevTools/src/DevTools/DevTools.php:				$finfo->compress(\Phar::GZ);
tests/plugins/DevTools/src/DevTools/DevTools.php:		$phar->stopBuffering();
tests/plugins/DevTools/src/DevTools/DevTools.php:		$sender->sendMessage("Folder plugin loader has been created on " . $pharPath);
tests/plugins/DevTools/src/DevTools/DevTools.php:			$sender->sendMessage(TextFormat::RED . "This command requires \"phar.readonly\" to be set to 0. Set it in " . php_ini_loaded_file() . " and restart the server.");
tests/plugins/DevTools/src/DevTools/DevTools.php:		if($pluginName === "" or !(($plugin = Server::getInstance()->getPluginManager()->getPlugin($pluginName)) instanceof Plugin)){
tests/plugins/DevTools/src/DevTools/DevTools.php:			$sender->sendMessage(TextFormat::RED . "Invalid plugin name, check the name case.");
tests/plugins/DevTools/src/DevTools/DevTools.php:		$description = $plugin->getDescription();
tests/plugins/DevTools/src/DevTools/DevTools.php:		if(!($plugin->getPluginLoader() instanceof FolderPluginLoader)){
tests/plugins/DevTools/src/DevTools/DevTools.php:			$sender->sendMessage(TextFormat::RED . "Plugin " . $description->getName() . " is not in folder structure.");
tests/plugins/DevTools/src/DevTools/DevTools.php:		$pharPath = $this->getDataFolder() . $description->getName() . "_v" . $description->getVersion() . ".phar";
tests/plugins/DevTools/src/DevTools/DevTools.php:		$file = $reflection->getProperty("file");
tests/plugins/DevTools/src/DevTools/DevTools.php:		$file->setAccessible(true);
tests/plugins/DevTools/src/DevTools/DevTools.php:		$pfile = rtrim($file->getValue($plugin), '/');
tests/plugins/DevTools/src/DevTools/DevTools.php:			$sender->sendMessage(TextFormat::RED . "Plugin " . $description->getName() . " not found at $pfile (maybe deleted?)");
tests/plugins/DevTools/src/DevTools/DevTools.php:		if($description->getName() === "DevTools"){
tests/plugins/DevTools/src/DevTools/DevTools.php:			$stub = sprintf(DEVTOOLS_PLUGIN_STUB, $description->getName(), $description->getVersion(), $this->getDescription()->getVersion(), date("r"), implode("\n", $stubMetadata));
tests/plugins/DevTools/src/DevTools/DevTools.php:		$this->buildPhar($sender, $pharPath, $filePath, [], $metadata, $stub, \Phar::SHA1);
tests/plugins/DevTools/src/DevTools/DevTools.php:		$sender->sendMessage("Phar plugin " . $description->getName() . " v" . $description->getVersion() . " has been created on " . $pharPath);
tests/plugins/DevTools/src/DevTools/DevTools.php:	 * @phpstan-param array<string, mixed> $metadata
tests/plugins/DevTools/src/DevTools/DevTools.php:			$sender->sendMessage("[DevTools] $line");
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php: * DevTools plugin for PocketMine-MP
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php: * Copyright (C) 2017 PocketMine Team <https://github.com/pmmp/PocketMine-DevTools>
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:		$this->setUsage("/genplugin <pluginName> <authorName>");
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:		$this->setDescription("Generates skeleton files for a plugin");
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:		$this->setPermission("devtools.command.genplugin");
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:		if(!$this->getPlugin()->isEnabled()){
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:		if(!$this->testPermission($sender)){
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:			$sender->sendMessage(TextFormat::RED . "Usage: " . $this->usageMessage);
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:		if(preg_match("/[^A-Za-z0-9_-]/", $pluginName) !== 0 or preg_match("/[^A-Za-z0-9_-]/", $author) !== 0){
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:			$sender->sendMessage(TextFormat::RED . "Plugin name and author name must contain only letters, numbers, underscores and dashes.");
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:		$rootDirectory = $this->getPlugin()->getServer()->getPluginPath() . $pluginName . DIRECTORY_SEPARATOR;
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:		if($this->getPlugin()->getServer()->getPluginManager()->getPlugin($pluginName) !== null or file_exists($rootDirectory)){
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:			$sender->sendMessage(TextFormat::RED . "A plugin with this name already exists on the server. Please choose a different name or remove the other plugin.");
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:		$mainPhpTemplate = $this->getPlugin()->getResource("plugin_skeleton/Main.php");
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:				$sender->sendMessage(TextFormat::RED . "Error: missing template files");
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:				"api" => $this->getPlugin()->getServer()->getApiVersion()
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:			$sender->sendMessage("Created skeleton plugin $pluginName in " . $rootDirectory);
tests/plugins/DevTools/src/DevTools/commands/GeneratePluginCommand.php:		return str_replace("-", "_", $part);
tests/plugins/DevTools/src/DevTools/commands/DevToolsCommand.php: * DevTools plugin for PocketMine-MP
tests/plugins/DevTools/src/DevTools/commands/DevToolsCommand.php:		$this->owningPlugin = $plugin;
tests/plugins/DevTools/src/DevTools/commands/DevToolsCommand.php:		$this->usageMessage = "";
tests/plugins/DevTools/src/DevTools/commands/DevToolsCommand.php:		return $this->owningPlugin;
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php: * DevTools plugin for PocketMine-MP
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		$this->setUsage("/extractplugin <pluginName>");
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		$this->setDescription("Extracts the source code from a Phar plugin");
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		$this->setPermission("devtools.command.extractplugin");
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		if(!$this->getPlugin()->isEnabled()){
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		if(!$this->testPermission($sender)){
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:			$sender->sendMessage(TextFormat::RED . "Usage: " . $this->usageMessage);
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		if($pluginName === "" or !(($plugin = Server::getInstance()->getPluginManager()->getPlugin($pluginName)) instanceof Plugin)){
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:			$sender->sendMessage(TextFormat::RED . "Invalid plugin name, check the name case.");
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		$description = $plugin->getDescription();
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		if(!($plugin->getPluginLoader() instanceof PharPluginLoader)){
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:			$sender->sendMessage(TextFormat::RED . "Plugin " . $description->getName() . " is not in Phar structure.");
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		$folderPath = $this->getPlugin()->getDataFolder() . DIRECTORY_SEPARATOR . $description->getName() . "_v" . $description->getVersion() . "/";
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:			$sender->sendMessage("Plugin already exists, overwriting...");
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		$file = $reflection->getProperty("file");
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		$file->setAccessible(true);
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		$pharPath = str_replace("\\", "/", rtrim($file->getValue($plugin), "\\/"));
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:			$path = $fInfo->getPathname();
tests/plugins/DevTools/src/DevTools/commands/ExtractPluginCommand.php:		$sender->sendMessage("Source plugin " . $description->getName() . " v" . $description->getVersion() . " has been created on " . $folderPath);
tests/plugins/DevTools/src/DevTools/ConsoleScript.php: * DevTools plugin for PocketMine-MP
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:echo "PocketMine-MP plugin %s v%s
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:----------------
tests/plugins/DevTools/src/DevTools/ConsoleScript.php: * @phpstan-param array<string, mixed> $metadata
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:	$phar->setMetadata($metadata);
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:	$phar->setStub($stub);
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:	$phar->setSignatureAlgorithm($signatureAlgo);
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:	$phar->startBuffering();
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:	$count = count($phar->buildFromIterator($regexIterator, $basePath));
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:			if($finfo->getSize() > (1024 * 512)){
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:				yield "Compressing " . $finfo->getFilename();
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:				$finfo->compress($compression);
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:	$phar->stopBuffering();
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:	yield "Done in " . round(microtime(true) - $start, 3) . "s";
tests/plugins/DevTools/src/DevTools/ConsoleScript.php: * @phpstan-return array<string, mixed>|null
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:		echo "== PocketMine-MP DevTools CLI interface ==" . PHP_EOL . PHP_EOL;
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:		echo "Usage: " . PHP_BINARY . " -dphar.readonly=0 " . $argv[0] . " --make <sourceFolder1[,sourceFolder2[,sourceFolder3...]]> --relative <relativePath> --entry \"relativeSourcePath.php\" --out <pharName.phar>" . PHP_EOL;
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:		echo "Set phar.readonly to 0 with -dphar.readonly=0" . PHP_EOL;
tests/plugins/DevTools/src/DevTools/ConsoleScript.php:			echo "You must specify a relative path with --relative <path> to be able to include multiple directories" . PHP_EOL;
tests/plugins/DevTools/src/FolderPluginLoader/Main.php: * DevTools plugin for PocketMine-MP
tests/plugins/DevTools/src/FolderPluginLoader/Main.php:		$this->getServer()->getPluginManager()->registerInterface(new FolderPluginLoader($this->getServer()->getLoader()));
tests/plugins/DevTools/src/FolderPluginLoader/Main.php:		$this->getServer()->getPluginManager()->loadPlugins($this->getServer()->getPluginPath(), [FolderPluginLoader::class]);
tests/plugins/DevTools/src/FolderPluginLoader/Main.php:		$this->getServer()->enablePlugins(PluginLoadOrder::STARTUP);
tests/plugins/DevTools/src/FolderPluginLoader/FolderPluginLoader.php: * DevTools plugin for PocketMine-MP
tests/plugins/DevTools/src/FolderPluginLoader/FolderPluginLoader.php:		$this->loader = $loader;
tests/plugins/DevTools/src/FolderPluginLoader/FolderPluginLoader.php:		$this->loader->addPath("$file/src");
tests/plugins/DevTools/phpstan.neon.dist:		- src
tests/plugins/DevTools/phpstan.neon.dist:		- src/DevTools/ConsoleScript.php
tests/plugins/DevTools/plugin.yml:description: Helps develop and distribute PocketMine-MP plugins
Binary file tests/plugins/DevTools/devtools.png matches
tests/plugins/DevTools/.gitignore:/phpstan-composer.lock
tests/plugins/DevTools/LICENSE:       of the Library that is interface-compatible with the Linked
tests/plugins/DevTools/.travis.yml:  - pmmp/PocketMine-MP:tests/travis/setup-php.yml@stable
tests/plugins/DevTools/.travis.yml: - COMPOSER=phpstan-composer.json composer install --prefer-dist
tests/plugins/DevTools/.travis.yml: - ./vendor/bin/phpstan analyze --no-progress --memory-limit=2G
tests/plugins/DevTools/.travis.yml:  - $HOME/.composer/cache/files
tests/plugins/DevTools/.travis.yml:  - $HOME/.composer/cache/vcs
tests/gh-actions/build.sh:sudo apt update && sudo apt install -y \
tests/gh-actions/build.sh:	libtool-bin \
tests/gh-actions/build.sh:	zlib1g-dev \
tests/gh-actions/build.sh:	libcurl4-openssl-dev \
tests/gh-actions/build.sh:	libxml2-dev \
tests/gh-actions/build.sh:	libyaml-dev \
tests/gh-actions/build.sh:	libgmp-dev \
tests/gh-actions/build.sh:	libzip-dev \
tests/gh-actions/build.sh:	libssl-dev
tests/gh-actions/build.sh:export CFLAGS="$CFLAGS -march=x86-64"
tests/gh-actions/build.sh:export CXXFLAGS="$CXXFLAGS -march=x86-64"
tests/gh-actions/build.sh:git clone https://github.com/php-build/php-build.git
tests/gh-actions/build.sh:cd php-build
tests/gh-actions/build.sh:./install-dependencies.sh
tests/gh-actions/build.sh:echo '"pthreads",,"https://github.com/pmmp/pthreads.git",,,"extension",' >> share/php-build/extension/definition
tests/gh-actions/build.sh:PHP_BUILD_INSTALL_EXTENSION='pthreads=@acc6e52b2144c61c434b62a3cb680d537e06828e yaml=2.2.1' PHP_BUILD_ZTS_ENABLE=on ./bin/php-build "$VERSION" "$INSTALL_DIR" || exit 1
tests/gh-actions/build.sh:cp install-dependencies.sh "$INSTALL_DIR"
tests/travis.sh:#Run-the-server tests
tests/travis.sh:rm -rf "$DATA_DIR"
tests/travis.sh:rm PocketMine-MP.phar 2> /dev/null
tests/travis.sh:php -dphar.readonly=0 ./src/DevTools/ConsoleScript.php --make ./ --relative ./ --out "$PLUGINS_DIR/DevTools.phar"
tests/travis.sh:composer make-server
tests/travis.sh:if [ -f PocketMine-MP.phar ]; then
tests/travis.sh:cp -r tests/plugins/TesterPlugin "$PLUGINS_DIR"
tests/travis.sh:echo -e "stop\n" | php PocketMine-MP.phar --no-wizard --disable-ansi --disable-readline --debug.level=2 --data="$DATA_DIR" --plugins="$PLUGINS_DIR" --anonymous-statistics.enabled=0 --settings.async-workers="$PM_WORKERS" --settings.enable-dev-builds=1
tests/travis.sh:result=$(echo "$output" | grep 'Finished' | grep -v 'PASS')
tests/travis.sh:elif [ $(grep -c "ERROR\|CRITICAL\|EMERGENCY" "$DATA_DIR/server.log") -ne 0 ]; then
vendor/composer/autoload_static.php:            0 => __DIR__ . '/..' . '/pocketmine/callback-validator/src',
vendor/composer/autoload_static.php:            0 => __DIR__ . '/..' . '/adhocore/json-comment/src',
vendor/composer/autoload_static.php:        'Ahc\\Json\\Comment' => __DIR__ . '/..' . '/adhocore/json-comment/src/Comment.php',
vendor/composer/autoload_static.php:        'AttachableThreadedLogger' => __DIR__ . '/..' . '/pocketmine/log-pthreads/src/AttachableThreadedLogger.php',
vendor/composer/autoload_static.php:        'DaveRandom\\CallbackValidator\\BuiltInTypes' => __DIR__ . '/..' . '/pocketmine/callback-validator/src/BuiltInTypes.php',
vendor/composer/autoload_static.php:        'DaveRandom\\CallbackValidator\\CallbackType' => __DIR__ . '/..' . '/pocketmine/callback-validator/src/CallbackType.php',
vendor/composer/autoload_static.php:        'DaveRandom\\CallbackValidator\\InvalidCallbackException' => __DIR__ . '/..' . '/pocketmine/callback-validator/src/InvalidCallbackException.php',
vendor/composer/autoload_static.php:        'DaveRandom\\CallbackValidator\\MatchTester' => __DIR__ . '/..' . '/pocketmine/callback-validator/src/MatchTester.php',
vendor/composer/autoload_static.php:        'DaveRandom\\CallbackValidator\\ParameterType' => __DIR__ . '/..' . '/pocketmine/callback-validator/src/ParameterType.php',
vendor/composer/autoload_static.php:        'DaveRandom\\CallbackValidator\\ReturnType' => __DIR__ . '/..' . '/pocketmine/callback-validator/src/ReturnType.php',
vendor/composer/autoload_static.php:        'DaveRandom\\CallbackValidator\\Type' => __DIR__ . '/..' . '/pocketmine/callback-validator/src/Type.php',
vendor/composer/autoload_static.php:        'ThreadedLogger' => __DIR__ . '/..' . '/pocketmine/log-pthreads/src/ThreadedLogger.php',
vendor/composer/autoload_static.php:        'ThreadedLoggerAttachment' => __DIR__ . '/..' . '/pocketmine/log-pthreads/src/ThreadedLoggerAttachment.php',
vendor/composer/autoload_static.php:            $loader->prefixLengthsPsr4 = ComposerStaticInit0b4bcc2d6bee90adda2014bc6b1c3e26::$prefixLengthsPsr4;
vendor/composer/autoload_static.php:            $loader->prefixDirsPsr4 = ComposerStaticInit0b4bcc2d6bee90adda2014bc6b1c3e26::$prefixDirsPsr4;
vendor/composer/autoload_static.php:            $loader->fallbackDirsPsr4 = ComposerStaticInit0b4bcc2d6bee90adda2014bc6b1c3e26::$fallbackDirsPsr4;
vendor/composer/autoload_static.php:            $loader->classMap = ComposerStaticInit0b4bcc2d6bee90adda2014bc6b1c3e26::$classMap;
vendor/composer/autoload_psr4.php:    'DaveRandom\\CallbackValidator\\' => array($vendorDir . '/pocketmine/callback-validator/src'),
vendor/composer/autoload_psr4.php:    'Ahc\\Json\\' => array($vendorDir . '/adhocore/json-comment/src'),
vendor/composer/autoload_classmap.php:    'Ahc\\Json\\Comment' => $vendorDir . '/adhocore/json-comment/src/Comment.php',
vendor/composer/autoload_classmap.php:    'AttachableThreadedLogger' => $vendorDir . '/pocketmine/log-pthreads/src/AttachableThreadedLogger.php',
vendor/composer/autoload_classmap.php:    'DaveRandom\\CallbackValidator\\BuiltInTypes' => $vendorDir . '/pocketmine/callback-validator/src/BuiltInTypes.php',
vendor/composer/autoload_classmap.php:    'DaveRandom\\CallbackValidator\\CallbackType' => $vendorDir . '/pocketmine/callback-validator/src/CallbackType.php',
vendor/composer/autoload_classmap.php:    'DaveRandom\\CallbackValidator\\InvalidCallbackException' => $vendorDir . '/pocketmine/callback-validator/src/InvalidCallbackException.php',
vendor/composer/autoload_classmap.php:    'DaveRandom\\CallbackValidator\\MatchTester' => $vendorDir . '/pocketmine/callback-validator/src/MatchTester.php',
vendor/composer/autoload_classmap.php:    'DaveRandom\\CallbackValidator\\ParameterType' => $vendorDir . '/pocketmine/callback-validator/src/ParameterType.php',
vendor/composer/autoload_classmap.php:    'DaveRandom\\CallbackValidator\\ReturnType' => $vendorDir . '/pocketmine/callback-validator/src/ReturnType.php',
vendor/composer/autoload_classmap.php:    'DaveRandom\\CallbackValidator\\Type' => $vendorDir . '/pocketmine/callback-validator/src/Type.php',
vendor/composer/autoload_classmap.php:    'ThreadedLogger' => $vendorDir . '/pocketmine/log-pthreads/src/ThreadedLogger.php',
vendor/composer/autoload_classmap.php:    'ThreadedLoggerAttachment' => $vendorDir . '/pocketmine/log-pthreads/src/ThreadedLoggerAttachment.php',
vendor/composer/autoload_real.php:                $loader->addClassMap($classMap);
vendor/composer/autoload_real.php:        $loader->setClassMapAuthoritative(true);
vendor/composer/autoload_real.php:        $loader->register(true);
vendor/composer/ClassLoader.php: * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
vendor/composer/ClassLoader.php: *     $loader->add('Symfony\Component', __DIR__.'/component');
vendor/composer/ClassLoader.php: *     $loader->add('Symfony',           __DIR__.'/framework');
vendor/composer/ClassLoader.php: *     $loader->register();
vendor/composer/ClassLoader.php: *     $loader->setUseIncludePath(true);
vendor/composer/ClassLoader.php: * @see    http://www.php-fig.org/psr/psr-0/
vendor/composer/ClassLoader.php: * @see    http://www.php-fig.org/psr/psr-4/
vendor/composer/ClassLoader.php:    // PSR-4
vendor/composer/ClassLoader.php:    // PSR-0
vendor/composer/ClassLoader.php:        if (!empty($this->prefixesPsr0)) {
vendor/composer/ClassLoader.php:            return call_user_func_array('array_merge', $this->prefixesPsr0);
vendor/composer/ClassLoader.php:        return $this->prefixDirsPsr4;
vendor/composer/ClassLoader.php:        return $this->fallbackDirsPsr0;
vendor/composer/ClassLoader.php:        return $this->fallbackDirsPsr4;
vendor/composer/ClassLoader.php:        return $this->classMap;
vendor/composer/ClassLoader.php:        if ($this->classMap) {
vendor/composer/ClassLoader.php:            $this->classMap = array_merge($this->classMap, $classMap);
vendor/composer/ClassLoader.php:            $this->classMap = $classMap;
vendor/composer/ClassLoader.php:     * Registers a set of PSR-0 directories for a given prefix, either
vendor/composer/ClassLoader.php:     * @param array|string $paths   The PSR-0 root directories
vendor/composer/ClassLoader.php:                $this->fallbackDirsPsr0 = array_merge(
vendor/composer/ClassLoader.php:                    $this->fallbackDirsPsr0
vendor/composer/ClassLoader.php:                $this->fallbackDirsPsr0 = array_merge(
vendor/composer/ClassLoader.php:                    $this->fallbackDirsPsr0,
vendor/composer/ClassLoader.php:        if (!isset($this->prefixesPsr0[$first][$prefix])) {
vendor/composer/ClassLoader.php:            $this->prefixesPsr0[$first][$prefix] = (array) $paths;
vendor/composer/ClassLoader.php:            $this->prefixesPsr0[$first][$prefix] = array_merge(
vendor/composer/ClassLoader.php:                $this->prefixesPsr0[$first][$prefix]
vendor/composer/ClassLoader.php:            $this->prefixesPsr0[$first][$prefix] = array_merge(
vendor/composer/ClassLoader.php:                $this->prefixesPsr0[$first][$prefix],
vendor/composer/ClassLoader.php:     * Registers a set of PSR-4 directories for a given namespace, either
vendor/composer/ClassLoader.php:     * @param array|string $paths   The PSR-4 base directories
vendor/composer/ClassLoader.php:                $this->fallbackDirsPsr4 = array_merge(
vendor/composer/ClassLoader.php:                    $this->fallbackDirsPsr4
vendor/composer/ClassLoader.php:                $this->fallbackDirsPsr4 = array_merge(
vendor/composer/ClassLoader.php:                    $this->fallbackDirsPsr4,
vendor/composer/ClassLoader.php:        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {
vendor/composer/ClassLoader.php:            if ('\\' !== $prefix[$length - 1]) {
vendor/composer/ClassLoader.php:                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
vendor/composer/ClassLoader.php:            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
vendor/composer/ClassLoader.php:            $this->prefixDirsPsr4[$prefix] = (array) $paths;
vendor/composer/ClassLoader.php:            $this->prefixDirsPsr4[$prefix] = array_merge(
vendor/composer/ClassLoader.php:                $this->prefixDirsPsr4[$prefix]
vendor/composer/ClassLoader.php:            $this->prefixDirsPsr4[$prefix] = array_merge(
vendor/composer/ClassLoader.php:                $this->prefixDirsPsr4[$prefix],
vendor/composer/ClassLoader.php:     * Registers a set of PSR-0 directories for a given prefix,
vendor/composer/ClassLoader.php:     * @param array|string $paths  The PSR-0 base directories
vendor/composer/ClassLoader.php:            $this->fallbackDirsPsr0 = (array) $paths;
vendor/composer/ClassLoader.php:            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;
vendor/composer/ClassLoader.php:     * Registers a set of PSR-4 directories for a given namespace,
vendor/composer/ClassLoader.php:     * @param array|string $paths  The PSR-4 base directories
vendor/composer/ClassLoader.php:            $this->fallbackDirsPsr4 = (array) $paths;
vendor/composer/ClassLoader.php:            if ('\\' !== $prefix[$length - 1]) {
vendor/composer/ClassLoader.php:                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
vendor/composer/ClassLoader.php:            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
vendor/composer/ClassLoader.php:            $this->prefixDirsPsr4[$prefix] = (array) $paths;
vendor/composer/ClassLoader.php:        $this->useIncludePath = $useIncludePath;
vendor/composer/ClassLoader.php:        return $this->useIncludePath;
vendor/composer/ClassLoader.php:        $this->classMapAuthoritative = $classMapAuthoritative;
vendor/composer/ClassLoader.php:        return $this->classMapAuthoritative;
vendor/composer/ClassLoader.php:     * APCu prefix to use to cache found/not-found classes, if the extension is enabled.
vendor/composer/ClassLoader.php:        $this->apcuPrefix = function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN) ? $apcuPrefix : null;
vendor/composer/ClassLoader.php:        return $this->apcuPrefix;
vendor/composer/ClassLoader.php:        if ($file = $this->findFile($class)) {
vendor/composer/ClassLoader.php:        if (isset($this->classMap[$class])) {
vendor/composer/ClassLoader.php:            return $this->classMap[$class];
vendor/composer/ClassLoader.php:        if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {
vendor/composer/ClassLoader.php:        if (null !== $this->apcuPrefix) {
vendor/composer/ClassLoader.php:            $file = apcu_fetch($this->apcuPrefix.$class, $hit);
vendor/composer/ClassLoader.php:        $file = $this->findFileWithExtension($class, '.php');
vendor/composer/ClassLoader.php:            $file = $this->findFileWithExtension($class, '.hh');
vendor/composer/ClassLoader.php:        if (null !== $this->apcuPrefix) {
vendor/composer/ClassLoader.php:            apcu_add($this->apcuPrefix.$class, $file);
vendor/composer/ClassLoader.php:            $this->missingClasses[$class] = true;
vendor/composer/ClassLoader.php:        // PSR-4 lookup
vendor/composer/ClassLoader.php:        if (isset($this->prefixLengthsPsr4[$first])) {
vendor/composer/ClassLoader.php:                if (isset($this->prefixDirsPsr4[$search])) {
vendor/composer/ClassLoader.php:                    foreach ($this->prefixDirsPsr4[$search] as $dir) {
vendor/composer/ClassLoader.php:        // PSR-4 fallback dirs
vendor/composer/ClassLoader.php:        foreach ($this->fallbackDirsPsr4 as $dir) {
vendor/composer/ClassLoader.php:        // PSR-0 lookup
vendor/composer/ClassLoader.php:            // PEAR-like class name
vendor/composer/ClassLoader.php:        if (isset($this->prefixesPsr0[$first])) {
vendor/composer/ClassLoader.php:            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {
vendor/composer/ClassLoader.php:        // PSR-0 fallback dirs
vendor/composer/ClassLoader.php:        foreach ($this->fallbackDirsPsr0 as $dir) {
vendor/composer/ClassLoader.php:        // PSR-0 include paths.
vendor/composer/ClassLoader.php:        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {
vendor/composer/installed.json:        "name": "adhocore/json-comment",
vendor/composer/installed.json:            "url": "https://github.com/adhocore/php-json-comment.git",
vendor/composer/installed.json:            "url": "https://api.github.com/repos/adhocore/php-json-comment/zipball/8448076039389f558f39ad0553aab87db3f81614",
vendor/composer/installed.json:        "require-dev": {
vendor/composer/installed.json:        "time": "2020-01-03T13:51:23+00:00",
vendor/composer/installed.json:        "installation-source": "dist",
vendor/composer/installed.json:            "psr-4": {
vendor/composer/installed.json:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:            "strip-comment"
vendor/composer/installed.json:            "issues": "https://github.com/adhocore/php-json-comment/issues",
vendor/composer/installed.json:            "source": "https://github.com/adhocore/php-json-comment/tree/0.1.0"
vendor/composer/installed.json:            "php-64bit": "*"
vendor/composer/installed.json:        "require-dev": {
vendor/composer/installed.json:            "phpstan/extension-installer": "^1.0",
vendor/composer/installed.json:            "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/composer/installed.json:        "time": "2021-01-15T14:19:13+00:00",
vendor/composer/installed.json:        "installation-source": "dist",
vendor/composer/installed.json:            "psr-4": {
vendor/composer/installed.json:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:            "LGPL-3.0"
vendor/composer/installed.json:        "name": "pocketmine/callback-validator",
vendor/composer/installed.json:            "ext-reflection": "*",
vendor/composer/installed.json:            "daverandom/callback-validator": "*"
vendor/composer/installed.json:        "require-dev": {
vendor/composer/installed.json:            "phpstan/extension-installer": "^1.0",
vendor/composer/installed.json:            "phpstan/phpstan-strict-rules": "^0.12.4",
vendor/composer/installed.json:        "time": "2020-12-11T01:45:37+00:00",
vendor/composer/installed.json:        "installation-source": "dist",
vendor/composer/installed.json:            "psr-4": {
vendor/composer/installed.json:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:        "description": "Fork of daverandom/callback-validator - Tools for validating callback signatures",
vendor/composer/installed.json:            "ext-pthreads": "~3.2.0",
vendor/composer/installed.json:            "ext-reflection": "*",
vendor/composer/installed.json:        "require-dev": {
vendor/composer/installed.json:            "phpstan/extension-installer": "^1.0",
vendor/composer/installed.json:            "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/composer/installed.json:        "time": "2021-01-15T00:40:47+00:00",
vendor/composer/installed.json:        "installation-source": "dist",
vendor/composer/installed.json:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:            "LGPL-3.0"
vendor/composer/installed.json:        "description": "Ad-hoc autoloading components used by PocketMine-MP",
vendor/composer/installed.json:        "require-dev": {
vendor/composer/installed.json:            "phpstan/phpstan-strict-rules": "^0.12.2"
vendor/composer/installed.json:        "time": "2021-01-15T14:32:41+00:00",
vendor/composer/installed.json:        "installation-source": "dist",
vendor/composer/installed.json:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:            "LGPL-3.0"
vendor/composer/installed.json:        "description": "Logging components used by PocketMine-MP and related projects",
vendor/composer/installed.json:        "name": "pocketmine/log-pthreads",
vendor/composer/installed.json:            "ext-pthreads": "~3.2.0",
vendor/composer/installed.json:        "require-dev": {
vendor/composer/installed.json:            "phpstan/extension-installer": "^1.0",
vendor/composer/installed.json:            "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/composer/installed.json:        "time": "2021-01-15T00:35:49+00:00",
vendor/composer/installed.json:        "installation-source": "dist",
vendor/composer/installed.json:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:            "LGPL-3.0"
vendor/composer/installed.json:        "description": "Logging components specialized for pthreads used by PocketMine-MP and related projects",
vendor/composer/installed.json:            "php-64bit": "*"
vendor/composer/installed.json:        "require-dev": {
vendor/composer/installed.json:            "phpstan/extension-installer": "^1.0",
vendor/composer/installed.json:            "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/composer/installed.json:        "time": "2021-01-15T14:25:11+00:00",
vendor/composer/installed.json:        "installation-source": "dist",
vendor/composer/installed.json:            "psr-4": {
vendor/composer/installed.json:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:            "LGPL-3.0"
vendor/composer/installed.json:        "description": "PHP library containing math related code used in PocketMine-MP",
vendor/composer/installed.json:            "ext-zlib": "*",
vendor/composer/installed.json:            "php-64bit": "*",
vendor/composer/installed.json:        "require-dev": {
vendor/composer/installed.json:            "irstea/phpunit-shim": "^7.5 || ^8.0",
vendor/composer/installed.json:            "phpstan/extension-installer": "^1.0",
vendor/composer/installed.json:            "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/composer/installed.json:        "time": "2021-01-15T15:27:28+00:00",
vendor/composer/installed.json:        "installation-source": "dist",
vendor/composer/installed.json:            "psr-4": {
vendor/composer/installed.json:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:            "LGPL-3.0"
vendor/composer/installed.json:            "ext-pthreads": "~3.2.0",
vendor/composer/installed.json:            "ext-sockets": "*",
vendor/composer/installed.json:            "php-64bit": "*",
vendor/composer/installed.json:            "php-ipv6": "*",
vendor/composer/installed.json:            "pocketmine/log-pthreads": "^0.1.0",
vendor/composer/installed.json:        "require-dev": {
vendor/composer/installed.json:            "phpstan/phpstan-strict-rules": "^0.12.2"
vendor/composer/installed.json:        "time": "2021-01-15T16:19:15+00:00",
vendor/composer/installed.json:        "installation-source": "dist",
vendor/composer/installed.json:            "psr-4": {
vendor/composer/installed.json:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:            "GPL-3.0"
vendor/composer/installed.json:            "ext-pthreads": ">=3.1.7dev",
vendor/composer/installed.json:            "php-64bit": "^7.2 || ^8.0"
vendor/composer/installed.json:        "require-dev": {
vendor/composer/installed.json:            "phpstan/extension-installer": "^1.0",
vendor/composer/installed.json:            "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/composer/installed.json:        "time": "2021-01-15T14:44:16+00:00",
vendor/composer/installed.json:        "installation-source": "dist",
vendor/composer/installed.json:            "psr-4": {
vendor/composer/installed.json:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:            "LGPL-3.0"
vendor/composer/installed.json:        "require-dev": {
vendor/composer/installed.json:        "time": "2021-01-15T15:15:23+00:00",
vendor/composer/installed.json:        "installation-source": "dist",
vendor/composer/installed.json:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:            "LGPL-3.0"
vendor/composer/installed.json:        "description": "Standard library files required by PocketMine-MP and related projects",
vendor/pocketmine/log/README.md:Logging components used by PocketMine-MP and related projects.
vendor/pocketmine/log/README.md:This library is PSR-3-esque, but not entirely compliant.
vendor/pocketmine/log/composer.json:    "description": "Logging components used by PocketMine-MP and related projects",
vendor/pocketmine/log/composer.json:    "license": "LGPL-3.0",
vendor/pocketmine/log/composer.json:    "require-dev": {
vendor/pocketmine/log/composer.json:        "phpstan/phpstan-strict-rules": "^0.12.2"
vendor/pocketmine/log/src/AttachableLogger.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/log/src/LogLevel.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/log/src/LoggerAttachment.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/log/src/Logger.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/log/src/Logger.php:	 * @phpstan-param list<array<string, mixed>>|null $trace
vendor/pocketmine/log/phpstan.neon.dist:	- vendor/phpstan/phpstan-strict-rules/rules.neon
vendor/pocketmine/log/phpstan.neon.dist:		- src
vendor/pocketmine/log/LICENSE:       of the Library that is interface-compatible with the Linked
vendor/pocketmine/log/.github/workflows/ci.yml:    runs-on: ubuntu-latest
vendor/pocketmine/log/.github/workflows/ci.yml:    - uses: actions/checkout@v2
vendor/pocketmine/log/.github/workflows/ci.yml:    - name: Setup PHP
vendor/pocketmine/log/.github/workflows/ci.yml:      uses: shivammathur/setup-php@2.9.0
vendor/pocketmine/log/.github/workflows/ci.yml:        php-version: ${{ matrix.php }}
vendor/pocketmine/log/.github/workflows/ci.yml:    - name: Cache Composer packages
vendor/pocketmine/log/.github/workflows/ci.yml:      id: composer-cache
vendor/pocketmine/log/.github/workflows/ci.yml:        key: "php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}"
vendor/pocketmine/log/.github/workflows/ci.yml:        restore-keys: "php-${{ matrix.php }}-composer-"
vendor/pocketmine/log/.github/workflows/ci.yml:    - name: Install dependencies
vendor/pocketmine/log/.github/workflows/ci.yml:      run: composer install --prefer-dist --no-interaction
vendor/pocketmine/log/.github/workflows/ci.yml:    - name: Run PHPStan
vendor/pocketmine/log/.github/workflows/ci.yml:      run: ./vendor/bin/phpstan analyze --no-progress
vendor/pocketmine/raklib/README.md:[![Build Status](https://travis-ci.com/pmmp/RakLib.svg?branch=master)](https://travis-ci.com/pmmp/RakLib)
vendor/pocketmine/raklib/README.md:This library is very lightweight on actual implementation - it provides the bare minimum to get a Minecraft Pocket Edition server functional. It only currently provides server functionality, and does not support most RakNet features.
vendor/pocketmine/raklib/README.md:The usage of this library with PocketMine-MP will allow the creation
vendor/pocketmine/raklib/README.md:of derivated non open-source works, without direct usage of RakLib.
vendor/pocketmine/raklib/README.md:Only PocketMine-MP and their plugins will be able to use the library
vendor/pocketmine/raklib/composer.json:	"license": "GPL-3.0",
vendor/pocketmine/raklib/composer.json:		"php-ipv6": "*",
vendor/pocketmine/raklib/composer.json:		"php-64bit": "*",
vendor/pocketmine/raklib/composer.json:		"ext-pthreads": "~3.2.0",
vendor/pocketmine/raklib/composer.json:		"ext-sockets": "*",
vendor/pocketmine/raklib/composer.json:		"pocketmine/log-pthreads": "^0.1.0",
vendor/pocketmine/raklib/composer.json:	"require-dev": {
vendor/pocketmine/raklib/composer.json:		"phpstan/phpstan-strict-rules": "^0.12.2"
vendor/pocketmine/raklib/composer.json:		"psr-4": {
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server = $server;
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->instance = $instance;
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$buffer = chr(RakLib::PACKET_ENCAPSULATED) . chr(strlen($identifier)) . $identifier . chr($flags) . $packet->toInternalBinary();
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server->pushMainToThreadPacket($buffer);
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server->pushMainToThreadPacket($buffer);
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server->pushMainToThreadPacket($buffer);
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server->pushMainToThreadPacket($buffer);
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server->pushMainToThreadPacket($buffer);
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server->pushMainToThreadPacket($buffer);
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server->pushMainToThreadPacket($buffer);
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server->shutdown();
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server->join();
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server->shutdown();
vendor/pocketmine/raklib/src/server/ServerHandler.php:		$this->server->pushMainToThreadPacket(chr(RakLib::PACKET_EMERGENCY_SHUTDOWN));
vendor/pocketmine/raklib/src/server/ServerHandler.php:		if(($packet = $this->server->readThreadToMainPacket()) !== null){
vendor/pocketmine/raklib/src/server/ServerHandler.php:				$this->instance->handleEncapsulated($identifier, EncapsulatedPacket::fromInternalBinary($buffer), $flags);
vendor/pocketmine/raklib/src/server/ServerHandler.php:				$this->instance->handleRaw($address, $port, $payload);
vendor/pocketmine/raklib/src/server/ServerHandler.php:				$this->instance->handleOption($name, $value);
vendor/pocketmine/raklib/src/server/ServerHandler.php:				$this->instance->openSession($identifier, $address, $port, $clientID);
vendor/pocketmine/raklib/src/server/ServerHandler.php:				$this->instance->closeSession($identifier, $reason);
vendor/pocketmine/raklib/src/server/ServerHandler.php:				$this->instance->closeSession($identifier, "Invalid session");
vendor/pocketmine/raklib/src/server/ServerHandler.php:				$this->instance->notifyACK($identifier, $identifierACK);
vendor/pocketmine/raklib/src/server/ServerHandler.php:				$this->instance->updatePing($identifier, $pingMS);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->server = $server;
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->socket = $socket;
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->startTimeMS = (int) (microtime(true) * 1000);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->maxMtuSize = $maxMtuSize;
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->offlineMessageHandler = new OfflineMessageHandler($this);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->reusableAddress = clone $this->socket->getBindAddress();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->registerPackets();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->run();
vendor/pocketmine/raklib/src/server/SessionManager.php:		return ((int) (microtime(true) * 1000)) - $this->startTimeMS;
vendor/pocketmine/raklib/src/server/SessionManager.php:		return $this->socket->getBindAddress()->port;
vendor/pocketmine/raklib/src/server/SessionManager.php:		return $this->maxMtuSize;
vendor/pocketmine/raklib/src/server/SessionManager.php:		return $this->server->getProtocolVersion();
vendor/pocketmine/raklib/src/server/SessionManager.php:		return $this->server->getLogger();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->tickProcessor();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->lastMeasure = microtime(true);
vendor/pocketmine/raklib/src/server/SessionManager.php:		while(!$this->shutdown){
vendor/pocketmine/raklib/src/server/SessionManager.php:			 * The below code is designed to allow co-op between sending and receiving to avoid slowing down either one
vendor/pocketmine/raklib/src/server/SessionManager.php:				for($i = 0; $i < 100 && $stream && !$this->shutdown; ++$i){
vendor/pocketmine/raklib/src/server/SessionManager.php:					$stream = $this->receiveStream();
vendor/pocketmine/raklib/src/server/SessionManager.php:				for($i = 0; $i < 100 && $socket && !$this->shutdown; ++$i){
vendor/pocketmine/raklib/src/server/SessionManager.php:					$socket = $this->receivePacket();
vendor/pocketmine/raklib/src/server/SessionManager.php:			}while(!$this->shutdown && ($stream || $socket));
vendor/pocketmine/raklib/src/server/SessionManager.php:			$this->tick();
vendor/pocketmine/raklib/src/server/SessionManager.php:			$time = microtime(true) - $start;
vendor/pocketmine/raklib/src/server/SessionManager.php:				@time_sleep_until(microtime(true) + self::RAKLIB_TIME_PER_TICK - $time);
vendor/pocketmine/raklib/src/server/SessionManager.php:		foreach($this->sessions as $session){
vendor/pocketmine/raklib/src/server/SessionManager.php:			$session->update($time);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->ipSec = [];
vendor/pocketmine/raklib/src/server/SessionManager.php:		if(($this->ticks % self::RAKLIB_TPS) === 0){
vendor/pocketmine/raklib/src/server/SessionManager.php:			if($this->sendBytes > 0 or $this->receiveBytes > 0){
vendor/pocketmine/raklib/src/server/SessionManager.php:				$diff = max(0.005, $time - $this->lastMeasure);
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->streamOption("bandwidth", serialize([
vendor/pocketmine/raklib/src/server/SessionManager.php:					"up" => $this->sendBytes / $diff,
vendor/pocketmine/raklib/src/server/SessionManager.php:					"down" => $this->receiveBytes / $diff
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->sendBytes = 0;
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->receiveBytes = 0;
vendor/pocketmine/raklib/src/server/SessionManager.php:			$this->lastMeasure = $time;
vendor/pocketmine/raklib/src/server/SessionManager.php:			if(count($this->block) > 0){
vendor/pocketmine/raklib/src/server/SessionManager.php:				asort($this->block);
vendor/pocketmine/raklib/src/server/SessionManager.php:				foreach($this->block as $address => $timeout){
vendor/pocketmine/raklib/src/server/SessionManager.php:						unset($this->block[$address]);
vendor/pocketmine/raklib/src/server/SessionManager.php:		++$this->ticks;
vendor/pocketmine/raklib/src/server/SessionManager.php:		$address = $this->reusableAddress;
vendor/pocketmine/raklib/src/server/SessionManager.php:		$len = $this->socket->readPacket($buffer, $address->ip, $address->port);
vendor/pocketmine/raklib/src/server/SessionManager.php:			$error = $this->socket->getLastError();
vendor/pocketmine/raklib/src/server/SessionManager.php:			$this->getLogger()->debug("Socket error occurred while trying to recv ($error): " . trim(socket_strerror($error)));
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->receiveBytes += $len;
vendor/pocketmine/raklib/src/server/SessionManager.php:		if(isset($this->block[$address->ip])){
vendor/pocketmine/raklib/src/server/SessionManager.php:		if(isset($this->ipSec[$address->ip])){
vendor/pocketmine/raklib/src/server/SessionManager.php:			if(++$this->ipSec[$address->ip] >= $this->packetLimit){
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->blockAddress($address->ip);
vendor/pocketmine/raklib/src/server/SessionManager.php:			$this->ipSec[$address->ip] = 1;
vendor/pocketmine/raklib/src/server/SessionManager.php:			$session = $this->getSession($address);
vendor/pocketmine/raklib/src/server/SessionManager.php:						$session->handlePacket(new ACK($buffer));
vendor/pocketmine/raklib/src/server/SessionManager.php:						$session->handlePacket(new NACK($buffer));
vendor/pocketmine/raklib/src/server/SessionManager.php:						$session->handlePacket(new Datagram($buffer));
vendor/pocketmine/raklib/src/server/SessionManager.php:					$this->server->getLogger()->debug("Ignored unconnected packet from $address due to session already opened (0x" . dechex($pid) . ")");
vendor/pocketmine/raklib/src/server/SessionManager.php:			}elseif(($pk = $this->getPacketFromPool($pid, $buffer)) instanceof OfflineMessage){
vendor/pocketmine/raklib/src/server/SessionManager.php:						$pk->decode();
vendor/pocketmine/raklib/src/server/SessionManager.php:						if(!$pk->isValid()){
vendor/pocketmine/raklib/src/server/SessionManager.php:						$logger = $this->server->getLogger();
vendor/pocketmine/raklib/src/server/SessionManager.php:						$logger->debug("Received garbage message from $address (" . $e->getMessage() . "): " . bin2hex($pk->getBuffer()));
vendor/pocketmine/raklib/src/server/SessionManager.php:						foreach($this->server->getTrace(0, $e->getTrace()) as $line){
vendor/pocketmine/raklib/src/server/SessionManager.php:							$logger->debug($line);
vendor/pocketmine/raklib/src/server/SessionManager.php:						$this->blockAddress($address->ip, 5);
vendor/pocketmine/raklib/src/server/SessionManager.php:					if(!$this->offlineMessageHandler->handle($pk, $address)){
vendor/pocketmine/raklib/src/server/SessionManager.php:						$this->server->getLogger()->debug("Unhandled unconnected packet " . get_class($pk) . " received from $address");
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->server->getLogger()->debug("Ignored connected packet from $address due to no session opened (0x" . dechex($pid) . ")");
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->streamRaw($address, $buffer);
vendor/pocketmine/raklib/src/server/SessionManager.php:			$logger = $this->getLogger();
vendor/pocketmine/raklib/src/server/SessionManager.php:			$logger->debug("Packet from $address (" . strlen($buffer) . " bytes): 0x" . bin2hex($buffer));
vendor/pocketmine/raklib/src/server/SessionManager.php:			$logger->logException($e);
vendor/pocketmine/raklib/src/server/SessionManager.php:			$this->blockAddress($address->ip, 5);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$packet->encode();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->sendBytes += $this->socket->writePacket($packet->getBuffer(), $address->ip, $address->port);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$id = $session->getAddress()->toString();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$buffer = chr(RakLib::PACKET_ENCAPSULATED) . chr(strlen($id)) . $id . chr($flags) . $packet->toInternalBinary();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->server->pushThreadToMainPacket($buffer);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$buffer = chr(RakLib::PACKET_RAW) . chr(strlen($source->ip)) . $source->ip . Binary::writeShort($source->port) . $payload;
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->server->pushThreadToMainPacket($buffer);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->server->pushThreadToMainPacket($buffer);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->server->pushThreadToMainPacket($buffer);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$address = $session->getAddress();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$identifier = $address->toString();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$buffer = chr(RakLib::PACKET_OPEN_SESSION) . chr(strlen($identifier)) . $identifier . chr(strlen($address->ip)) . $address->ip . Binary::writeShort($address->port) . Binary::writeLong($session->getID());
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->server->pushThreadToMainPacket($buffer);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->server->pushThreadToMainPacket($buffer);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->server->pushThreadToMainPacket($buffer);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$identifier = $session->getAddress()->toString();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->server->pushThreadToMainPacket($buffer);
vendor/pocketmine/raklib/src/server/SessionManager.php:		if(($packet = $this->server->readMainToThreadPacket()) !== null){
vendor/pocketmine/raklib/src/server/SessionManager.php:				$session = $this->sessions[$identifier] ?? null;
vendor/pocketmine/raklib/src/server/SessionManager.php:				if($session !== null and $session->isConnected()){
vendor/pocketmine/raklib/src/server/SessionManager.php:					$session->addEncapsulatedToQueue(EncapsulatedPacket::fromInternalBinary($buffer), $flags);
vendor/pocketmine/raklib/src/server/SessionManager.php:					$this->streamInvalid($identifier);
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->socket->writePacket($payload, $address, $port);
vendor/pocketmine/raklib/src/server/SessionManager.php:				if(isset($this->sessions[$identifier])){
vendor/pocketmine/raklib/src/server/SessionManager.php:					$this->sessions[$identifier]->flagForDisconnection();
vendor/pocketmine/raklib/src/server/SessionManager.php:					$this->streamInvalid($identifier);
vendor/pocketmine/raklib/src/server/SessionManager.php:				if(isset($this->sessions[$identifier])){
vendor/pocketmine/raklib/src/server/SessionManager.php:					$this->removeSession($this->sessions[$identifier]);
vendor/pocketmine/raklib/src/server/SessionManager.php:						$this->name = $value;
vendor/pocketmine/raklib/src/server/SessionManager.php:						$this->portChecking = (bool) $value;
vendor/pocketmine/raklib/src/server/SessionManager.php:						$this->packetLimit = (int) $value;
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->blockAddress($address, $timeout);
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->unblockAddress($address);
vendor/pocketmine/raklib/src/server/SessionManager.php:				foreach($this->sessions as $session){
vendor/pocketmine/raklib/src/server/SessionManager.php:					$this->removeSession($session);
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->socket->close();
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->shutdown = true;
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->shutdown = true;
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->getLogger()->debug("Unknown RakLib internal packet (ID 0x" . dechex($id) . ") received from main thread");
vendor/pocketmine/raklib/src/server/SessionManager.php:		if(!isset($this->block[$address]) or $timeout === -1){
vendor/pocketmine/raklib/src/server/SessionManager.php:			if($timeout === -1){
vendor/pocketmine/raklib/src/server/SessionManager.php:				$this->getLogger()->notice("Blocked $address for $timeout seconds");
vendor/pocketmine/raklib/src/server/SessionManager.php:			$this->block[$address] = $final;
vendor/pocketmine/raklib/src/server/SessionManager.php:		}elseif($this->block[$address] < $final){
vendor/pocketmine/raklib/src/server/SessionManager.php:			$this->block[$address] = $final;
vendor/pocketmine/raklib/src/server/SessionManager.php:		unset($this->block[$address]);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->getLogger()->debug("Unblocked $address");
vendor/pocketmine/raklib/src/server/SessionManager.php:		return $this->sessions[$address->toString()] ?? null;
vendor/pocketmine/raklib/src/server/SessionManager.php:		return isset($this->sessions[$address->toString()]);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->checkSessions();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->sessions[$address->toString()] = $session = new Session($this, clone $address, $clientId, $mtuSize);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->getLogger()->debug("Created session for $address with MTU size $mtuSize");
vendor/pocketmine/raklib/src/server/SessionManager.php:		$id = $session->getAddress()->toString();
vendor/pocketmine/raklib/src/server/SessionManager.php:		if(isset($this->sessions[$id])){
vendor/pocketmine/raklib/src/server/SessionManager.php:			$this->sessions[$id]->close();
vendor/pocketmine/raklib/src/server/SessionManager.php:			$this->removeSessionInternal($session);
vendor/pocketmine/raklib/src/server/SessionManager.php:			$this->streamClose($id, $reason);
vendor/pocketmine/raklib/src/server/SessionManager.php:		unset($this->sessions[$session->getAddress()->toString()]);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->streamOpen($session);
vendor/pocketmine/raklib/src/server/SessionManager.php:		if(count($this->sessions) > 4096){
vendor/pocketmine/raklib/src/server/SessionManager.php:			foreach($this->sessions as $i => $s){
vendor/pocketmine/raklib/src/server/SessionManager.php:				if($s->isTemporal()){
vendor/pocketmine/raklib/src/server/SessionManager.php:					unset($this->sessions[$i]);
vendor/pocketmine/raklib/src/server/SessionManager.php:					if(count($this->sessions) <= 4096){
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->streamACK($session->getAddress()->toString(), $identifierACK);
vendor/pocketmine/raklib/src/server/SessionManager.php:		return $this->name;
vendor/pocketmine/raklib/src/server/SessionManager.php:		return $this->server->getServerId();
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->packetPool[$id] = new $class;
vendor/pocketmine/raklib/src/server/SessionManager.php:		$pk = $this->packetPool[$id];
vendor/pocketmine/raklib/src/server/SessionManager.php:			$pk->buffer = $buffer;
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->packetPool = new \SplFixedArray(256);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->registerPacket(UnconnectedPing::$ID, UnconnectedPing::class);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->registerPacket(UnconnectedPingOpenConnections::$ID, UnconnectedPingOpenConnections::class);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->registerPacket(OpenConnectionRequest1::$ID, OpenConnectionRequest1::class);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->registerPacket(OpenConnectionReply1::$ID, OpenConnectionReply1::class);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->registerPacket(OpenConnectionRequest2::$ID, OpenConnectionRequest2::class);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->registerPacket(OpenConnectionReply2::$ID, OpenConnectionReply2::class);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->registerPacket(UnconnectedPong::$ID, UnconnectedPong::class);
vendor/pocketmine/raklib/src/server/SessionManager.php:		$this->registerPacket(AdvertiseSystem::$ID, AdvertiseSystem::class);
vendor/pocketmine/raklib/src/server/Session.php:	private $highestSeqNumberThisTick = -1;
vendor/pocketmine/raklib/src/server/Session.php:	private $lastPingTime = -1;
vendor/pocketmine/raklib/src/server/Session.php:		$this->sessionManager = $sessionManager;
vendor/pocketmine/raklib/src/server/Session.php:		$this->address = $address;
vendor/pocketmine/raklib/src/server/Session.php:		$this->id = $clientId;
vendor/pocketmine/raklib/src/server/Session.php:		$this->sendQueue = new Datagram();
vendor/pocketmine/raklib/src/server/Session.php:		$this->lastUpdate = microtime(true);
vendor/pocketmine/raklib/src/server/Session.php:		$this->windowStart = 0;
vendor/pocketmine/raklib/src/server/Session.php:		$this->windowEnd = self::$WINDOW_SIZE;
vendor/pocketmine/raklib/src/server/Session.php:		$this->reliableWindowStart = 0;
vendor/pocketmine/raklib/src/server/Session.php:		$this->reliableWindowEnd = self::$WINDOW_SIZE;
vendor/pocketmine/raklib/src/server/Session.php:		$this->sendOrderedIndex = array_fill(0, self::CHANNEL_COUNT, 0);
vendor/pocketmine/raklib/src/server/Session.php:		$this->sendSequencedIndex = array_fill(0, self::CHANNEL_COUNT, 0);
vendor/pocketmine/raklib/src/server/Session.php:		$this->receiveOrderedIndex = array_fill(0, self::CHANNEL_COUNT, 0);
vendor/pocketmine/raklib/src/server/Session.php:		$this->receiveSequencedHighestIndex = array_fill(0, self::CHANNEL_COUNT, 0);
vendor/pocketmine/raklib/src/server/Session.php:		$this->receiveOrderedPackets = array_fill(0, self::CHANNEL_COUNT, []);
vendor/pocketmine/raklib/src/server/Session.php:		$this->mtuSize = $mtuSize;
vendor/pocketmine/raklib/src/server/Session.php:		return $this->address;
vendor/pocketmine/raklib/src/server/Session.php:		return $this->id;
vendor/pocketmine/raklib/src/server/Session.php:		return $this->state;
vendor/pocketmine/raklib/src/server/Session.php:		return $this->isTemporal;
vendor/pocketmine/raklib/src/server/Session.php:		return $this->state !== self::STATE_DISCONNECTING and $this->state !== self::STATE_DISCONNECTED;
vendor/pocketmine/raklib/src/server/Session.php:		if(!$this->isActive and ($this->lastUpdate + 10) < $time){
vendor/pocketmine/raklib/src/server/Session.php:			$this->disconnect("timeout");
vendor/pocketmine/raklib/src/server/Session.php:		if($this->state === self::STATE_DISCONNECTING and (
vendor/pocketmine/raklib/src/server/Session.php:			(count($this->sendQueue->packets) === 0 and count($this->ACKQueue) === 0 and count($this->NACKQueue) === 0 and count($this->packetToSend) === 0 and count($this->recoveryQueue) === 0) or
vendor/pocketmine/raklib/src/server/Session.php:			$this->disconnectionTime + 10 < $time)
vendor/pocketmine/raklib/src/server/Session.php:			$this->close();
vendor/pocketmine/raklib/src/server/Session.php:		$this->isActive = false;
vendor/pocketmine/raklib/src/server/Session.php:		$diff = $this->highestSeqNumberThisTick - $this->windowStart + 1;
vendor/pocketmine/raklib/src/server/Session.php:			$this->windowStart += $diff;
vendor/pocketmine/raklib/src/server/Session.php:			$this->windowEnd += $diff;
vendor/pocketmine/raklib/src/server/Session.php:		if(count($this->ACKQueue) > 0){
vendor/pocketmine/raklib/src/server/Session.php:			$pk->packets = $this->ACKQueue;
vendor/pocketmine/raklib/src/server/Session.php:			$this->sendPacket($pk);
vendor/pocketmine/raklib/src/server/Session.php:			$this->ACKQueue = [];
vendor/pocketmine/raklib/src/server/Session.php:		if(count($this->NACKQueue) > 0){
vendor/pocketmine/raklib/src/server/Session.php:			$pk->packets = $this->NACKQueue;
vendor/pocketmine/raklib/src/server/Session.php:			$this->sendPacket($pk);
vendor/pocketmine/raklib/src/server/Session.php:			$this->NACKQueue = [];
vendor/pocketmine/raklib/src/server/Session.php:		if(count($this->packetToSend) > 0){
vendor/pocketmine/raklib/src/server/Session.php:			foreach($this->packetToSend as $k => $pk){
vendor/pocketmine/raklib/src/server/Session.php:				$this->sendDatagram($pk);
vendor/pocketmine/raklib/src/server/Session.php:				unset($this->packetToSend[$k]);
vendor/pocketmine/raklib/src/server/Session.php:				if(--$limit <= 0){
vendor/pocketmine/raklib/src/server/Session.php:			if(count($this->packetToSend) > self::$WINDOW_SIZE){
vendor/pocketmine/raklib/src/server/Session.php:				$this->packetToSend = [];
vendor/pocketmine/raklib/src/server/Session.php:		if(count($this->needACK) > 0){
vendor/pocketmine/raklib/src/server/Session.php:			foreach($this->needACK as $identifierACK => $indexes){
vendor/pocketmine/raklib/src/server/Session.php:					unset($this->needACK[$identifierACK]);
vendor/pocketmine/raklib/src/server/Session.php:					$this->sessionManager->notifyACK($this, $identifierACK);
vendor/pocketmine/raklib/src/server/Session.php:		foreach($this->recoveryQueue as $seq => $pk){
vendor/pocketmine/raklib/src/server/Session.php:			if($pk->sendTime < (time() - 8)){
vendor/pocketmine/raklib/src/server/Session.php:				$this->packetToSend[] = $pk;
vendor/pocketmine/raklib/src/server/Session.php:				unset($this->recoveryQueue[$seq]);
vendor/pocketmine/raklib/src/server/Session.php:		if($this->lastPingTime + 5 < $time){
vendor/pocketmine/raklib/src/server/Session.php:			$this->sendPing();
vendor/pocketmine/raklib/src/server/Session.php:			$this->lastPingTime = $time;
vendor/pocketmine/raklib/src/server/Session.php:		$this->sendQueue();
vendor/pocketmine/raklib/src/server/Session.php:		$this->sessionManager->removeSession($this, $reason);
vendor/pocketmine/raklib/src/server/Session.php:		if($datagram->seqNumber !== null){
vendor/pocketmine/raklib/src/server/Session.php:			unset($this->recoveryQueue[$datagram->seqNumber]);
vendor/pocketmine/raklib/src/server/Session.php:		$datagram->seqNumber = $this->sendSeqNumber++;
vendor/pocketmine/raklib/src/server/Session.php:		$datagram->sendTime = microtime(true);
vendor/pocketmine/raklib/src/server/Session.php:		$this->recoveryQueue[$datagram->seqNumber] = $datagram;
vendor/pocketmine/raklib/src/server/Session.php:		$this->sendPacket($datagram);
vendor/pocketmine/raklib/src/server/Session.php:		$packet->encode();
vendor/pocketmine/raklib/src/server/Session.php:		$encapsulated->reliability = $reliability;
vendor/pocketmine/raklib/src/server/Session.php:		$encapsulated->orderChannel = $orderChannel;
vendor/pocketmine/raklib/src/server/Session.php:		$encapsulated->buffer = $packet->getBuffer();
vendor/pocketmine/raklib/src/server/Session.php:		$this->addEncapsulatedToQueue($encapsulated, $flags);
vendor/pocketmine/raklib/src/server/Session.php:		$this->sessionManager->sendPacket($packet, $this->address);
vendor/pocketmine/raklib/src/server/Session.php:		if(count($this->sendQueue->packets) > 0){
vendor/pocketmine/raklib/src/server/Session.php:			$this->sendDatagram($this->sendQueue);
vendor/pocketmine/raklib/src/server/Session.php:			$this->sendQueue = new Datagram();
vendor/pocketmine/raklib/src/server/Session.php:		$pk->sendPingTime = $this->sessionManager->getRakNetTimeMS();
vendor/pocketmine/raklib/src/server/Session.php:		$this->queueConnectedPacket($pk, $reliability, 0, RakLib::PRIORITY_IMMEDIATE);
vendor/pocketmine/raklib/src/server/Session.php:		if($pk->needACK and $pk->messageIndex !== null){
vendor/pocketmine/raklib/src/server/Session.php:			$this->needACK[$pk->identifierACK][$pk->messageIndex] = $pk->messageIndex;
vendor/pocketmine/raklib/src/server/Session.php:		$length = $this->sendQueue->length();
vendor/pocketmine/raklib/src/server/Session.php:		if($length + $pk->getTotalLength() > $this->mtuSize - 36){ //IP header (20 bytes) + UDP header (8 bytes) + RakNet weird (8 bytes) = 36 bytes
vendor/pocketmine/raklib/src/server/Session.php:			$this->sendQueue();
vendor/pocketmine/raklib/src/server/Session.php:		if($pk->needACK){
vendor/pocketmine/raklib/src/server/Session.php:			$this->sendQueue->packets[] = clone $pk;
vendor/pocketmine/raklib/src/server/Session.php:			$pk->needACK = false;
vendor/pocketmine/raklib/src/server/Session.php:			$this->sendQueue->packets[] = $pk->toBinary();
vendor/pocketmine/raklib/src/server/Session.php:			$this->sendQueue();
vendor/pocketmine/raklib/src/server/Session.php:		if(($packet->needACK = ($flags & RakLib::FLAG_NEED_ACK) > 0) === true){
vendor/pocketmine/raklib/src/server/Session.php:			$this->needACK[$packet->identifierACK] = [];
vendor/pocketmine/raklib/src/server/Session.php:		if(PacketReliability::isOrdered($packet->reliability)){
vendor/pocketmine/raklib/src/server/Session.php:			$packet->orderIndex = $this->sendOrderedIndex[$packet->orderChannel]++;
vendor/pocketmine/raklib/src/server/Session.php:		}elseif(PacketReliability::isSequenced($packet->reliability)){
vendor/pocketmine/raklib/src/server/Session.php:			$packet->orderIndex = $this->sendOrderedIndex[$packet->orderChannel]; //sequenced packets don't increment the ordered channel index
vendor/pocketmine/raklib/src/server/Session.php:			$packet->sequenceIndex = $this->sendSequencedIndex[$packet->orderChannel]++;
vendor/pocketmine/raklib/src/server/Session.php:		$maxSize = $this->mtuSize - 60;
vendor/pocketmine/raklib/src/server/Session.php:		if(strlen($packet->buffer) > $maxSize){
vendor/pocketmine/raklib/src/server/Session.php:			$buffers = str_split($packet->buffer, $maxSize);
vendor/pocketmine/raklib/src/server/Session.php:			$splitID = ++$this->splitID % 65536;
vendor/pocketmine/raklib/src/server/Session.php:				$pk->splitID = $splitID;
vendor/pocketmine/raklib/src/server/Session.php:				$pk->hasSplit = true;
vendor/pocketmine/raklib/src/server/Session.php:				$pk->splitCount = $bufferCount;
vendor/pocketmine/raklib/src/server/Session.php:				$pk->reliability = $packet->reliability;
vendor/pocketmine/raklib/src/server/Session.php:				$pk->splitIndex = $count;
vendor/pocketmine/raklib/src/server/Session.php:				$pk->buffer = $buffer;
vendor/pocketmine/raklib/src/server/Session.php:				if(PacketReliability::isReliable($pk->reliability)){
vendor/pocketmine/raklib/src/server/Session.php:					$pk->messageIndex = $this->messageIndex++;
vendor/pocketmine/raklib/src/server/Session.php:				$pk->sequenceIndex = $packet->sequenceIndex;
vendor/pocketmine/raklib/src/server/Session.php:				$pk->orderChannel = $packet->orderChannel;
vendor/pocketmine/raklib/src/server/Session.php:				$pk->orderIndex = $packet->orderIndex;
vendor/pocketmine/raklib/src/server/Session.php:				$this->addToQueue($pk, $flags | RakLib::PRIORITY_IMMEDIATE);
vendor/pocketmine/raklib/src/server/Session.php:			if(PacketReliability::isReliable($packet->reliability)){
vendor/pocketmine/raklib/src/server/Session.php:				$packet->messageIndex = $this->messageIndex++;
vendor/pocketmine/raklib/src/server/Session.php:			$this->addToQueue($packet, $flags);
vendor/pocketmine/raklib/src/server/Session.php:			$packet->splitCount >= self::MAX_SPLIT_SIZE or $packet->splitCount < 0 or
vendor/pocketmine/raklib/src/server/Session.php:			$packet->splitIndex >= $packet->splitCount or $packet->splitIndex < 0
vendor/pocketmine/raklib/src/server/Session.php:			$this->sessionManager->getLogger()->debug("Invalid split packet part from " . $this->address . ", too many parts or invalid split index (part index $packet->splitIndex, part count $packet->splitCount)");
vendor/pocketmine/raklib/src/server/Session.php:		if(!isset($this->splitPackets[$packet->splitID])){
vendor/pocketmine/raklib/src/server/Session.php:			if(count($this->splitPackets) >= self::MAX_SPLIT_COUNT){
vendor/pocketmine/raklib/src/server/Session.php:				$this->sessionManager->getLogger()->debug("Ignored split packet part from " . $this->address . " because reached concurrent split packet limit of " . self::MAX_SPLIT_COUNT);
vendor/pocketmine/raklib/src/server/Session.php:			$this->splitPackets[$packet->splitID] = array_fill(0, $packet->splitCount, null);
vendor/pocketmine/raklib/src/server/Session.php:		}elseif(count($this->splitPackets[$packet->splitID]) !== $packet->splitCount){
vendor/pocketmine/raklib/src/server/Session.php:			$this->sessionManager->getLogger()->debug("Wrong split count $packet->splitCount for split packet $packet->splitID from $this->address, expected " . count($this->splitPackets[$packet->splitID]));
vendor/pocketmine/raklib/src/server/Session.php:		$this->splitPackets[$packet->splitID][$packet->splitIndex] = $packet;
vendor/pocketmine/raklib/src/server/Session.php:		foreach($this->splitPackets[$packet->splitID] as $splitIndex => $part){
vendor/pocketmine/raklib/src/server/Session.php:		$pk->buffer = "";
vendor/pocketmine/raklib/src/server/Session.php:		$pk->reliability = $packet->reliability;
vendor/pocketmine/raklib/src/server/Session.php:		$pk->messageIndex = $packet->messageIndex;
vendor/pocketmine/raklib/src/server/Session.php:		$pk->sequenceIndex = $packet->sequenceIndex;
vendor/pocketmine/raklib/src/server/Session.php:		$pk->orderIndex = $packet->orderIndex;
vendor/pocketmine/raklib/src/server/Session.php:		$pk->orderChannel = $packet->orderChannel;
vendor/pocketmine/raklib/src/server/Session.php:		for($i = 0; $i < $packet->splitCount; ++$i){
vendor/pocketmine/raklib/src/server/Session.php:			$pk->buffer .= $this->splitPackets[$packet->splitID][$i]->buffer;
vendor/pocketmine/raklib/src/server/Session.php:		$pk->length = strlen($pk->buffer);
vendor/pocketmine/raklib/src/server/Session.php:		unset($this->splitPackets[$packet->splitID]);
vendor/pocketmine/raklib/src/server/Session.php:		if($packet->messageIndex !== null){
vendor/pocketmine/raklib/src/server/Session.php:			if($packet->messageIndex < $this->reliableWindowStart or $packet->messageIndex > $this->reliableWindowEnd or isset($this->reliableWindow[$packet->messageIndex])){
vendor/pocketmine/raklib/src/server/Session.php:			$this->reliableWindow[$packet->messageIndex] = true;
vendor/pocketmine/raklib/src/server/Session.php:			if($packet->messageIndex === $this->reliableWindowStart){
vendor/pocketmine/raklib/src/server/Session.php:				for(; isset($this->reliableWindow[$this->reliableWindowStart]); ++$this->reliableWindowStart){
vendor/pocketmine/raklib/src/server/Session.php:					unset($this->reliableWindow[$this->reliableWindowStart]);
vendor/pocketmine/raklib/src/server/Session.php:					++$this->reliableWindowEnd;
vendor/pocketmine/raklib/src/server/Session.php:		if($packet->hasSplit){
vendor/pocketmine/raklib/src/server/Session.php:			if(($packet = $this->handleSplit($packet)) === null){
vendor/pocketmine/raklib/src/server/Session.php:		if(PacketReliability::isSequencedOrOrdered($packet->reliability) and ($packet->orderChannel < 0 or $packet->orderChannel >= self::CHANNEL_COUNT)){
vendor/pocketmine/raklib/src/server/Session.php:			$this->sessionManager->getLogger()->debug("Invalid packet from " . $this->address . ", bad order channel ($packet->orderChannel)");
vendor/pocketmine/raklib/src/server/Session.php:		if(PacketReliability::isSequenced($packet->reliability)){
vendor/pocketmine/raklib/src/server/Session.php:			if($packet->sequenceIndex < $this->receiveSequencedHighestIndex[$packet->orderChannel] or $packet->orderIndex < $this->receiveOrderedIndex[$packet->orderChannel]){
vendor/pocketmine/raklib/src/server/Session.php:			$this->receiveSequencedHighestIndex[$packet->orderChannel] = $packet->sequenceIndex + 1;
vendor/pocketmine/raklib/src/server/Session.php:			$this->handleEncapsulatedPacketRoute($packet);
vendor/pocketmine/raklib/src/server/Session.php:		}elseif(PacketReliability::isOrdered($packet->reliability)){
vendor/pocketmine/raklib/src/server/Session.php:			if($packet->orderIndex === $this->receiveOrderedIndex[$packet->orderChannel]){
vendor/pocketmine/raklib/src/server/Session.php:				$this->receiveSequencedHighestIndex[$packet->orderIndex] = 0;
vendor/pocketmine/raklib/src/server/Session.php:				$this->receiveOrderedIndex[$packet->orderChannel] = $packet->orderIndex + 1;
vendor/pocketmine/raklib/src/server/Session.php:				$this->handleEncapsulatedPacketRoute($packet);
vendor/pocketmine/raklib/src/server/Session.php:				$i = $this->receiveOrderedIndex[$packet->orderChannel];
vendor/pocketmine/raklib/src/server/Session.php:				for(; isset($this->receiveOrderedPackets[$packet->orderChannel][$i]); ++$i){
vendor/pocketmine/raklib/src/server/Session.php:					$this->handleEncapsulatedPacketRoute($this->receiveOrderedPackets[$packet->orderChannel][$i]);
vendor/pocketmine/raklib/src/server/Session.php:					unset($this->receiveOrderedPackets[$packet->orderChannel][$i]);
vendor/pocketmine/raklib/src/server/Session.php:				$this->receiveOrderedIndex[$packet->orderChannel] = $i;
vendor/pocketmine/raklib/src/server/Session.php:			}elseif($packet->orderIndex > $this->receiveOrderedIndex[$packet->orderChannel]){
vendor/pocketmine/raklib/src/server/Session.php:				$this->receiveOrderedPackets[$packet->orderChannel][$packet->orderIndex] = $packet;
vendor/pocketmine/raklib/src/server/Session.php:			$this->handleEncapsulatedPacketRoute($packet);
vendor/pocketmine/raklib/src/server/Session.php:		if($this->sessionManager === null){
vendor/pocketmine/raklib/src/server/Session.php:		$id = ord($packet->buffer[0]);
vendor/pocketmine/raklib/src/server/Session.php:			if($this->state === self::STATE_CONNECTING){
vendor/pocketmine/raklib/src/server/Session.php:					$dataPacket = new ConnectionRequest($packet->buffer);
vendor/pocketmine/raklib/src/server/Session.php:					$dataPacket->decode();
vendor/pocketmine/raklib/src/server/Session.php:					$pk->address = $this->address;
vendor/pocketmine/raklib/src/server/Session.php:					$pk->sendPingTime = $dataPacket->sendPingTime;
vendor/pocketmine/raklib/src/server/Session.php:					$pk->sendPongTime = $this->sessionManager->getRakNetTimeMS();
vendor/pocketmine/raklib/src/server/Session.php:					$this->queueConnectedPacket($pk, PacketReliability::UNRELIABLE, 0, RakLib::PRIORITY_IMMEDIATE);
vendor/pocketmine/raklib/src/server/Session.php:					$dataPacket = new NewIncomingConnection($packet->buffer);
vendor/pocketmine/raklib/src/server/Session.php:					$dataPacket->decode();
vendor/pocketmine/raklib/src/server/Session.php:					if($dataPacket->address->port === $this->sessionManager->getPort() or !$this->sessionManager->portChecking){
vendor/pocketmine/raklib/src/server/Session.php:						$this->state = self::STATE_CONNECTED; //FINALLY!
vendor/pocketmine/raklib/src/server/Session.php:						$this->isTemporal = false;
vendor/pocketmine/raklib/src/server/Session.php:						$this->sessionManager->openSession($this);
vendor/pocketmine/raklib/src/server/Session.php:						//$this->handlePong($dataPacket->sendPingTime, $dataPacket->sendPongTime); //can't use this due to system-address count issues in MCPE >.<
vendor/pocketmine/raklib/src/server/Session.php:						$this->sendPing();
vendor/pocketmine/raklib/src/server/Session.php:				$this->disconnect("client disconnect");
vendor/pocketmine/raklib/src/server/Session.php:				$dataPacket = new ConnectedPing($packet->buffer);
vendor/pocketmine/raklib/src/server/Session.php:				$dataPacket->decode();
vendor/pocketmine/raklib/src/server/Session.php:				$pk->sendPingTime = $dataPacket->sendPingTime;
vendor/pocketmine/raklib/src/server/Session.php:				$pk->sendPongTime = $this->sessionManager->getRakNetTimeMS();
vendor/pocketmine/raklib/src/server/Session.php:				$this->queueConnectedPacket($pk, PacketReliability::UNRELIABLE, 0);
vendor/pocketmine/raklib/src/server/Session.php:				$dataPacket = new ConnectedPong($packet->buffer);
vendor/pocketmine/raklib/src/server/Session.php:				$dataPacket->decode();
vendor/pocketmine/raklib/src/server/Session.php:				$this->handlePong($dataPacket->sendPingTime, $dataPacket->sendPongTime);
vendor/pocketmine/raklib/src/server/Session.php:		}elseif($this->state === self::STATE_CONNECTED){
vendor/pocketmine/raklib/src/server/Session.php:			$this->sessionManager->streamEncapsulated($this, $packet);
vendor/pocketmine/raklib/src/server/Session.php:			//$this->sessionManager->getLogger()->notice("Received packet before connection: " . bin2hex($packet->buffer));
vendor/pocketmine/raklib/src/server/Session.php:		$this->lastPingMeasure = $this->sessionManager->getRakNetTimeMS() - $sendPingTime;
vendor/pocketmine/raklib/src/server/Session.php:		$this->sessionManager->streamPingMeasure($this, $this->lastPingMeasure);
vendor/pocketmine/raklib/src/server/Session.php:		$this->isActive = true;
vendor/pocketmine/raklib/src/server/Session.php:		$this->lastUpdate = microtime(true);
vendor/pocketmine/raklib/src/server/Session.php:			$packet->decode();
vendor/pocketmine/raklib/src/server/Session.php:			if($packet->seqNumber < $this->windowStart or $packet->seqNumber > $this->windowEnd or isset($this->ACKQueue[$packet->seqNumber])){
vendor/pocketmine/raklib/src/server/Session.php:				$this->sessionManager->getLogger()->debug("Received duplicate or out-of-window packet from " . $this->address . " (sequence number $packet->seqNumber, window " . $this->windowStart . "-" . $this->windowEnd . ")");
vendor/pocketmine/raklib/src/server/Session.php:			unset($this->NACKQueue[$packet->seqNumber]);
vendor/pocketmine/raklib/src/server/Session.php:			$this->ACKQueue[$packet->seqNumber] = $packet->seqNumber;
vendor/pocketmine/raklib/src/server/Session.php:			if($this->highestSeqNumberThisTick < $packet->seqNumber){
vendor/pocketmine/raklib/src/server/Session.php:				$this->highestSeqNumberThisTick = $packet->seqNumber;
vendor/pocketmine/raklib/src/server/Session.php:			if($packet->seqNumber === $this->windowStart){
vendor/pocketmine/raklib/src/server/Session.php:				//this packet might complete a sequence of out-of-order packets, so we incrementally check the indexes
vendor/pocketmine/raklib/src/server/Session.php:				for(; isset($this->ACKQueue[$this->windowStart]); ++$this->windowStart){
vendor/pocketmine/raklib/src/server/Session.php:					++$this->windowEnd;
vendor/pocketmine/raklib/src/server/Session.php:			}elseif($packet->seqNumber > $this->windowStart){
vendor/pocketmine/raklib/src/server/Session.php:				//we got a gap - a later packet arrived before earlier ones did
vendor/pocketmine/raklib/src/server/Session.php:				for($i = $this->windowStart; $i < $packet->seqNumber; ++$i){
vendor/pocketmine/raklib/src/server/Session.php:					if(!isset($this->ACKQueue[$i])){
vendor/pocketmine/raklib/src/server/Session.php:						$this->NACKQueue[$i] = $i;
vendor/pocketmine/raklib/src/server/Session.php:			foreach($packet->packets as $pk){
vendor/pocketmine/raklib/src/server/Session.php:				$this->handleEncapsulatedPacket($pk);
vendor/pocketmine/raklib/src/server/Session.php:				$packet->decode();
vendor/pocketmine/raklib/src/server/Session.php:				foreach($packet->packets as $seq){
vendor/pocketmine/raklib/src/server/Session.php:					if(isset($this->recoveryQueue[$seq])){
vendor/pocketmine/raklib/src/server/Session.php:						foreach($this->recoveryQueue[$seq]->packets as $pk){
vendor/pocketmine/raklib/src/server/Session.php:							if($pk instanceof EncapsulatedPacket and $pk->needACK and $pk->messageIndex !== null){
vendor/pocketmine/raklib/src/server/Session.php:								unset($this->needACK[$pk->identifierACK][$pk->messageIndex]);
vendor/pocketmine/raklib/src/server/Session.php:						unset($this->recoveryQueue[$seq]);
vendor/pocketmine/raklib/src/server/Session.php:				$packet->decode();
vendor/pocketmine/raklib/src/server/Session.php:				foreach($packet->packets as $seq){
vendor/pocketmine/raklib/src/server/Session.php:					if(isset($this->recoveryQueue[$seq])){
vendor/pocketmine/raklib/src/server/Session.php:						$this->packetToSend[] = $this->recoveryQueue[$seq];
vendor/pocketmine/raklib/src/server/Session.php:						unset($this->recoveryQueue[$seq]);
vendor/pocketmine/raklib/src/server/Session.php:		$this->state = self::STATE_DISCONNECTING;
vendor/pocketmine/raklib/src/server/Session.php:		$this->disconnectionTime = microtime(true);
vendor/pocketmine/raklib/src/server/Session.php:		if($this->state !== self::STATE_DISCONNECTED){
vendor/pocketmine/raklib/src/server/Session.php:			$this->state = self::STATE_DISCONNECTED;
vendor/pocketmine/raklib/src/server/Session.php:			$this->queueConnectedPacket(new DisconnectionNotification(), PacketReliability::RELIABLE_ORDERED, 0, RakLib::PRIORITY_IMMEDIATE);
vendor/pocketmine/raklib/src/server/Session.php:			$this->sessionManager->getLogger()->debug("Closed session for $this->address");
vendor/pocketmine/raklib/src/server/Session.php:			$this->sessionManager->removeSessionInternal($this);
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:		$this->sessionManager = $manager;
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:				$pk->serverID = $this->sessionManager->getID();
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:				$pk->pingID = $packet->pingID;
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:				$pk->serverName = $this->sessionManager->getName();
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:				$this->sessionManager->sendPacket($pk, $address);
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:				$serverProtocol = $this->sessionManager->getProtocolVersion();
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:				if($packet->protocol !== $serverProtocol){
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$pk->protocolVersion = $serverProtocol;
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$pk->serverId = $this->sessionManager->getID();
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$this->sessionManager->sendPacket($pk, $address);
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$this->sessionManager->getLogger()->notice("Refused connection from $address due to incompatible RakNet protocol version (expected $serverProtocol, got $packet->protocol)");
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$pk->mtuSize = $packet->mtuSize + 28; //IP header size (20 bytes) + UDP header size (8 bytes)
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$pk->serverID = $this->sessionManager->getID();
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$this->sessionManager->sendPacket($pk, $address);
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:				if($packet->serverAddress->port === $this->sessionManager->getPort() or !$this->sessionManager->portChecking){
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					if($packet->mtuSize < Session::MIN_MTU_SIZE){
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:						$this->sessionManager->getLogger()->debug("Not creating session for $address due to bad MTU size $packet->mtuSize");
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$mtuSize = min($packet->mtuSize, $this->sessionManager->getMaxMtuSize()); //Max size, do not allow creating large buffers to fill server memory
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$pk->mtuSize = $mtuSize;
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$pk->serverID = $this->sessionManager->getID();
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$pk->clientAddress = $address;
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$this->sessionManager->sendPacket($pk, $address);
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$this->sessionManager->createSession($address, $packet->clientID, $mtuSize);
vendor/pocketmine/raklib/src/server/OfflineMessageHandler.php:					$this->sessionManager->getLogger()->debug("Not creating session for $address due to mismatched port, expected " . $this->sessionManager->getPort() . ", got " . $packet->serverAddress->port);
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:	 * @phpstan-var PhpSocket
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		$this->bindAddress = $bindAddress;
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		$socket = @socket_create($bindAddress->version === 4 ? AF_INET : AF_INET6, SOCK_DGRAM, SOL_UDP);
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		$this->socket = $socket;
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		if($bindAddress->version === 6){
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:			socket_set_option($this->socket, IPPROTO_IPV6, IPV6_V6ONLY, 1); //Don't map IPv4 to IPv6, the implementation can create another RakLib instance to handle IPv4
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		if(@socket_bind($this->socket, $bindAddress->ip, $bindAddress->port) === true){
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:			$this->setSendBuffer(1024 * 1024 * 8)->setRecvBuffer(1024 * 1024 * 8);
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:			$error = socket_last_error($this->socket);
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:			throw new \RuntimeException("Failed to bind to " . $bindAddress . ": " . trim(socket_strerror(socket_last_error($this->socket))));
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		socket_set_nonblock($this->socket);
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		return $this->bindAddress;
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:	 * @phpstan-return PhpSocket
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		return $this->socket;
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		socket_close($this->socket);
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		return socket_last_error($this->socket);
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		return @socket_recvfrom($this->socket, $buffer, 65535, 0, $source, $port);
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		return socket_sendto($this->socket, $buffer, strlen($buffer), 0, $dest, $port);
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		@socket_set_option($this->socket, SOL_SOCKET, SO_SNDBUF, $size);
vendor/pocketmine/raklib/src/server/UDPServerSocket.php:		@socket_set_option($this->socket, SOL_SOCKET, SO_RCVBUF, $size);
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->address = $address;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->serverId = mt_rand(0, PHP_INT_MAX);
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->maxMtuSize = $maxMtuSize;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->logger = $logger;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->loaderPath = $autoloaderPath;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->externalQueue = new \Threaded;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->internalQueue = new \Threaded;
vendor/pocketmine/raklib/src/server/RakLibServer.php:			$this->mainPath = \Phar::running(true);
vendor/pocketmine/raklib/src/server/RakLibServer.php:			$this->mainPath = $realCwd . DIRECTORY_SEPARATOR;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->protocolVersion = $overrideProtocolVersion ?? RakLib::DEFAULT_PROTOCOL_VERSION;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->mainThreadNotifier = $sleeper;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		return $this->shutdown === true;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->shutdown = true;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		return $this->serverId;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		return $this->protocolVersion;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		return $this->logger;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		return $this->externalQueue;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		return $this->internalQueue;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->internalQueue[] = $str;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		return $this->internalQueue->shift();
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->externalQueue[] = $str;
vendor/pocketmine/raklib/src/server/RakLibServer.php:		if($this->mainThreadNotifier !== null){
vendor/pocketmine/raklib/src/server/RakLibServer.php:			$this->mainThreadNotifier->wakeupSleeper();
vendor/pocketmine/raklib/src/server/RakLibServer.php:		return $this->externalQueue->shift();
vendor/pocketmine/raklib/src/server/RakLibServer.php:		if($this->shutdown !== true){
vendor/pocketmine/raklib/src/server/RakLibServer.php:				$this->logger->emergency("Fatal error: " . $error["message"] . " in " . $error["file"] . " on line " . $error["line"]);
vendor/pocketmine/raklib/src/server/RakLibServer.php:				$this->logger->emergency("RakLib shutdown unexpectedly");
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$errfile = $this->cleanPath($errfile);
vendor/pocketmine/raklib/src/server/RakLibServer.php:		$this->getLogger()->debug("An $errno error happened: \"$errstr\" in \"$errfile\" at line $errline");
vendor/pocketmine/raklib/src/server/RakLibServer.php:		foreach($this->getTrace(2) as $i => $line){
vendor/pocketmine/raklib/src/server/RakLibServer.php:			$this->getLogger()->debug($line);
vendor/pocketmine/raklib/src/server/RakLibServer.php:				$trace = $e->getTrace();
vendor/pocketmine/raklib/src/server/RakLibServer.php:					$params .= (is_object($value) ? get_class($value) . " " . (method_exists($value, "__toString") ? $value->__toString() : "object") : gettype($value) . " " . @strval($value)) . ", ";
vendor/pocketmine/raklib/src/server/RakLibServer.php:			$messages[] = "#$j " . (isset($trace[$i]["file"]) ? $this->cleanPath($trace[$i]["file"]) : "") . "(" . (isset($trace[$i]["line"]) ? $trace[$i]["line"] : "") . "): " . (isset($trace[$i]["class"]) ? $trace[$i]["class"] . (($trace[$i]["type"] === "dynamic" or $trace[$i]["type"] === "->") ? "->" : "::") : "") . $trace[$i]["function"] . "(" . substr($params, 0, -2) . ")";
vendor/pocketmine/raklib/src/server/RakLibServer.php:		return str_replace(["\\", ".php", "phar://", str_replace(["\\", "phar://"], ["/", ""], $this->mainPath)], ["/", "", "", ""], $path);
vendor/pocketmine/raklib/src/server/RakLibServer.php:			require $this->loaderPath;
vendor/pocketmine/raklib/src/server/RakLibServer.php:			error_reporting(-1);
vendor/pocketmine/raklib/src/server/RakLibServer.php:			$socket = new UDPServerSocket($this->address);
vendor/pocketmine/raklib/src/server/RakLibServer.php:			new SessionManager($this, $socket, $this->maxMtuSize);
vendor/pocketmine/raklib/src/server/RakLibServer.php:			$this->logger->logException($e);
vendor/pocketmine/raklib/src/utils/InternetAddress.php:		$this->ip = $address;
vendor/pocketmine/raklib/src/utils/InternetAddress.php:		$this->port = $port;
vendor/pocketmine/raklib/src/utils/InternetAddress.php:		$this->version = $version;
vendor/pocketmine/raklib/src/utils/InternetAddress.php:		return $this->ip;
vendor/pocketmine/raklib/src/utils/InternetAddress.php:		return $this->port;
vendor/pocketmine/raklib/src/utils/InternetAddress.php:		return $this->version;
vendor/pocketmine/raklib/src/utils/InternetAddress.php:		return $this->ip . " " . $this->port;
vendor/pocketmine/raklib/src/utils/InternetAddress.php:		return $this->__toString();
vendor/pocketmine/raklib/src/utils/InternetAddress.php:		return $this->ip === $address->ip and $this->port === $address->port and $this->version === $address->version;
vendor/pocketmine/raklib/src/RakLib.php:	 * Leaves everything as-is and halts, other Threads can be in a post-crash condition.
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:		$packet->reliability = ord($bytes[$offset++]);
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:		$packet->identifierACK = Binary::readInt(substr($bytes, $offset, 4)); //TODO: don't read this for non-ack-receipt reliabilities
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:		if(PacketReliability::isSequencedOrOrdered($packet->reliability)){
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			$packet->orderChannel = ord($bytes[$offset++]);
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:		$packet->buffer = substr($bytes, $offset, $length);
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			chr($this->reliability) .
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			Binary::writeInt(strlen($this->buffer)) .
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			Binary::writeInt($this->identifierACK ?? -1) . //TODO: don't write this for non-ack-receipt reliabilities
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			(PacketReliability::isSequencedOrOrdered($this->reliability) ? chr($this->orderChannel) : "") .
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			$this->buffer;
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:		$packet->reliability = $reliability = ($flags & self::RELIABILITY_FLAGS) >> self::RELIABILITY_SHIFT;
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:		$packet->hasSplit = $hasSplit = ($flags & self::SPLIT_FLAG) > 0;
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			$packet->messageIndex = Binary::readLTriad(substr($binary, $offset, 3));
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			$packet->sequenceIndex = Binary::readLTriad(substr($binary, $offset, 3));
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			$packet->orderIndex = Binary::readLTriad(substr($binary, $offset, 3));
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			$packet->orderChannel = ord($binary[$offset++]);
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			$packet->splitCount = Binary::readInt(substr($binary, $offset, 4));
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			$packet->splitID = Binary::readShort(substr($binary, $offset, 2));
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			$packet->splitIndex = Binary::readInt(substr($binary, $offset, 4));
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:		$packet->buffer = substr($binary, $offset, $length);
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			chr(($this->reliability << self::RELIABILITY_SHIFT) | ($this->hasSplit ? self::SPLIT_FLAG : 0)) .
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			Binary::writeShort(strlen($this->buffer) << 3) .
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			(PacketReliability::isReliable($this->reliability) ? Binary::writeLTriad($this->messageIndex) : "") .
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			(PacketReliability::isSequenced($this->reliability) ? Binary::writeLTriad($this->sequenceIndex) : "") .
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			(PacketReliability::isSequencedOrOrdered($this->reliability) ? Binary::writeLTriad($this->orderIndex) . chr($this->orderChannel) : "") .
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			($this->hasSplit ? Binary::writeInt($this->splitCount) . Binary::writeShort($this->splitID) . Binary::writeInt($this->splitIndex) : "")
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			. $this->buffer;
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			(PacketReliability::isReliable($this->reliability) ? 3 : 0) + //message index
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			(PacketReliability::isSequenced($this->reliability) ? 3 : 0) + //sequence index
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			(PacketReliability::isSequencedOrOrdered($this->reliability) ? 3 + 1 : 0) + //order index (3) + order channel (1)
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			($this->hasSplit ? 4 + 2 + 4 : 0) + //split count (4) + split ID (2) + split index (4)
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:			strlen($this->buffer);
vendor/pocketmine/raklib/src/protocol/EncapsulatedPacket.php:		return $this->toBinary();
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	// RESERVED TYPES - DO NOT CHANGE THESE
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - Remote system requires secure connections, pass a public key to RakPeerInterface::Connect()
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - We passed a public key to RakPeerInterface::Connect(), but the other system did not have security turned on
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - Wrong public key passed to RakPeerInterface::Connect()
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - Same as ID_ADVERTISE_SYSTEM, but intended for internal use rather than being passed to the user.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// and bytes 1-4 inclusive will contain a number in native order containing a number that identifies this message.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// and bytes 1-4 inclusive will contain a number in native order containing a number that identifies this message. This number
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	// USER TYPES - DO NOT CHANGE THESE
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - In a client/server environment, our connection request to the server has been accepted.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - Sent to the player when a connection request cannot be completed due to inability to connect.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - Sent a connect request to a system we are currently connected to.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - A remote system has successfully connected.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - The system we attempted to connect to is not accepting new connections.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - The system specified in Packet::systemAddress has disconnected from us.  For the client, this would mean the
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - Reliable packets cannot be delivered to the system specified in Packet::systemAddress.  The connection to that
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - We are banned from the system we attempted to connect to.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - The remote system is using a password and has refused our connection because we did not set the correct password.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - The sizeof(RakNetTime) bytes following this byte represent a value which is automatically modified by the difference
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - Pong from an unconnected system.  First byte is ID_UNCONNECTED_PONG, second sizeof(RakNet::TimeMS) bytes is the ping,
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakPeer - Inform a remote system of our IP/Port. On the recipient, all data past ID_ADVERTISE_SYSTEM is whatever was passed to
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	// RakPeer - Downloading a large message. Format is ID_DOWNLOAD_PROGRESS (MessageID), partCount (unsigned int),
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// ConnectionGraph2 plugin - In a client/server environment, a client other than ourselves has disconnected gracefully.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// ConnectionGraph2 plugin - In a client/server environment, a client other than ourselves has been forcefully dropped.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// ConnectionGraph2 plugin: Bytes 1-4 = count. for (count items) contains {SystemAddress, RakNetGUID, 2 byte ping}
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// FileListTransfer plugin - Setup data
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// FileListTransfer plugin - A file
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// DirectoryDeltaTransfer plugin - Request from a remote system for a download of a directory
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakNetTransport plugin - Transport provider message, used for remote console
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// ReplicaManager plugin - Create an object
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// ReplicaManager plugin - Changed scope of an object
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// ReplicaManager plugin - Serialized data of an object
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// ReplicaManager plugin - New connection, about to send all world objects
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// ReplicaManager plugin - Finished downloading all serialized objects
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakVoice plugin - Open a communication channel
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakVoice plugin - Communication channel accepted
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakVoice plugin - Close a communication channel
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakVoice plugin - Voice data
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// Autopatcher plugin - Get a list of files that have changed since a certain date
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// Autopatcher plugin - A list of files to create
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// Autopatcher plugin - A list of files to delete
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// Autopatcher plugin - A list of files to get patches for
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// Autopatcher plugin - A list of patches for a list of files
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// Autopatcher plugin - Returned to the user: An error from the database repository for the autopatcher.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// Autopatcher plugin - Returned to the user: The server does not allow downloading unmodified game files.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// Autopatcher plugin - Finished getting all files from the autopatcher
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// Autopatcher plugin - Returned to the user: You must restart the application to finish patching.
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// ReadyEvent plugin - Set the ready state for a particular system
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// ReadyEvent plugin - Unset the ready state for a particular system
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// ReadyEvent plugin - Request of ready event state - used for pulling data when newly connecting
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// Informs user of a new host GUID. Packet::Guid contains this new host RakNetGuid. The old host can be read out using BitStream->Read(RakNetGuid) starting on byte 1
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// SQLite3Plugin - execute
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// SQLite3Plugin - Remote database is unknown
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakNet::BitStream bs(packet->data, packet->length, false);
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// packet->systemAddress.ToString(false, ipAddressString);
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// rakPeerInterface->Connect(ipAddressString, sourceToDestPort, 0,0);
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakNet::BitStream bs(packet->data, packet->length, false); bs.IgnoreBytes(sizeof(RakNet::MessageID)); RakNet::RakString password; bs.Read(password);
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakNet::BitStream bs(packet->data, packet->length, false); bs.IgnoreBytes(sizeof(MessageID)); RakNet::RakString password; bs.Read(password);
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	/// RakNet::BitStream bs(packet->data, packet->length, false); bs.IgnoreBytes(sizeof(MessageID)); RakNet::RakString password; bs.Read(password);
vendor/pocketmine/raklib/src/protocol/MessageIdentifiers.php:	//-------------------------------------------------------------------------------------------------------------
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:		$this->systemAddresses[] = new InternetAddress("127.0.0.1", 0, 4);
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:		$this->putAddress($this->address);
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:		$this->putShort(0);
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:			$this->putAddress($this->systemAddresses[$i] ?? $dummy);
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:		$this->putLong($this->sendPingTime);
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:		$this->putLong($this->sendPongTime);
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:		$this->address = $this->getAddress();
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:		$this->getShort(); //TODO: check this
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:		$len = strlen($this->buffer);
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:			$this->systemAddresses[$i] = $this->offset + 16 < $len ? $this->getAddress() : $dummy; //HACK: avoids trying to read too many addresses on bad data
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:		$this->sendPingTime = $this->getLong();
vendor/pocketmine/raklib/src/protocol/ConnectionRequestAccepted.php:		$this->sendPongTime = $this->getLong();
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest2.php:		$this->writeMagic();
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest2.php:		$this->putAddress($this->serverAddress);
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest2.php:		$this->putShort($this->mtuSize);
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest2.php:		$this->putLong($this->clientID);
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest2.php:		$this->readMagic();
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest2.php:		$this->serverAddress = $this->getAddress();
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest2.php:		$this->mtuSize = $this->getShort();
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest2.php:		$this->clientID = $this->getLong();
vendor/pocketmine/raklib/src/protocol/ConnectedPong.php:		$this->putLong($this->sendPingTime);
vendor/pocketmine/raklib/src/protocol/ConnectedPong.php:		$this->putLong($this->sendPongTime);
vendor/pocketmine/raklib/src/protocol/ConnectedPong.php:		$this->sendPingTime = $this->getLong();
vendor/pocketmine/raklib/src/protocol/ConnectedPong.php:		$this->sendPongTime = $this->getLong();
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest1.php:		$this->writeMagic();
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest1.php:		$this->putByte($this->protocol);
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest1.php:		$this->buffer = str_pad($this->buffer, $this->mtuSize, "\x00");
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest1.php:		$this->readMagic();
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest1.php:		$this->protocol = $this->getByte();
vendor/pocketmine/raklib/src/protocol/OpenConnectionRequest1.php:		$this->mtuSize = strlen($this->buffer);
vendor/pocketmine/raklib/src/protocol/UnconnectedPong.php:		$this->putLong($this->pingID);
vendor/pocketmine/raklib/src/protocol/UnconnectedPong.php:		$this->putLong($this->serverID);
vendor/pocketmine/raklib/src/protocol/UnconnectedPong.php:		$this->writeMagic();
vendor/pocketmine/raklib/src/protocol/UnconnectedPong.php:		$this->putString($this->serverName);
vendor/pocketmine/raklib/src/protocol/UnconnectedPong.php:		$this->pingID = $this->getLong();
vendor/pocketmine/raklib/src/protocol/UnconnectedPong.php:		$this->serverID = $this->getLong();
vendor/pocketmine/raklib/src/protocol/UnconnectedPong.php:		$this->readMagic();
vendor/pocketmine/raklib/src/protocol/UnconnectedPong.php:		$this->serverName = $this->getString();
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply2.php:		$this->writeMagic();
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply2.php:		$this->putLong($this->serverID);
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply2.php:		$this->putAddress($this->clientAddress);
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply2.php:		$this->putShort($this->mtuSize);
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply2.php:		$this->putByte($this->serverSecurity ? 1 : 0);
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply2.php:		$this->readMagic();
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply2.php:		$this->serverID = $this->getLong();
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply2.php:		$this->clientAddress = $this->getAddress();
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply2.php:		$this->mtuSize = $this->getShort();
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply2.php:		$this->serverSecurity = $this->getByte() !== 0;
vendor/pocketmine/raklib/src/protocol/ConnectionRequest.php:		$this->putLong($this->clientID);
vendor/pocketmine/raklib/src/protocol/ConnectionRequest.php:		$this->putLong($this->sendPingTime);
vendor/pocketmine/raklib/src/protocol/ConnectionRequest.php:		$this->putByte($this->useSecurity ? 1 : 0);
vendor/pocketmine/raklib/src/protocol/ConnectionRequest.php:		$this->clientID = $this->getLong();
vendor/pocketmine/raklib/src/protocol/ConnectionRequest.php:		$this->sendPingTime = $this->getLong();
vendor/pocketmine/raklib/src/protocol/ConnectionRequest.php:		$this->useSecurity = $this->getByte() !== 0;
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply1.php:		$this->writeMagic();
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply1.php:		$this->putLong($this->serverID);
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply1.php:		$this->putByte($this->serverSecurity ? 1 : 0);
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply1.php:		$this->putShort($this->mtuSize);
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply1.php:		$this->readMagic();
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply1.php:		$this->serverID = $this->getLong();
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply1.php:		$this->serverSecurity = $this->getByte() !== 0;
vendor/pocketmine/raklib/src/protocol/OpenConnectionReply1.php:		$this->mtuSize = $this->getShort();
vendor/pocketmine/raklib/src/protocol/Datagram.php:		$this->putByte(self::BITFLAG_VALID | $this->headerFlags);
vendor/pocketmine/raklib/src/protocol/Datagram.php:		$this->putLTriad($this->seqNumber);
vendor/pocketmine/raklib/src/protocol/Datagram.php:		foreach($this->packets as $packet){
vendor/pocketmine/raklib/src/protocol/Datagram.php:			$this->put($packet instanceof EncapsulatedPacket ? $packet->toBinary() : $packet);
vendor/pocketmine/raklib/src/protocol/Datagram.php:		foreach($this->packets as $packet){
vendor/pocketmine/raklib/src/protocol/Datagram.php:			$length += $packet instanceof EncapsulatedPacket ? $packet->getTotalLength() : strlen($packet);
vendor/pocketmine/raklib/src/protocol/Datagram.php:		$this->headerFlags = $this->getByte();
vendor/pocketmine/raklib/src/protocol/Datagram.php:		$this->seqNumber = $this->getLTriad();
vendor/pocketmine/raklib/src/protocol/Datagram.php:		while(!$this->feof()){
vendor/pocketmine/raklib/src/protocol/Datagram.php:			$data = substr($this->buffer, $this->offset);
vendor/pocketmine/raklib/src/protocol/Datagram.php:			$this->offset += $offset;
vendor/pocketmine/raklib/src/protocol/Datagram.php:			if($packet->buffer === ''){
vendor/pocketmine/raklib/src/protocol/Datagram.php:			$this->packets[] = $packet;
vendor/pocketmine/raklib/src/protocol/Datagram.php:		$this->packets = [];
vendor/pocketmine/raklib/src/protocol/Datagram.php:		$this->seqNumber = null;
vendor/pocketmine/raklib/src/protocol/Packet.php:	public static $ID = -1;
vendor/pocketmine/raklib/src/protocol/Packet.php:		return $this->get($this->getShort());
vendor/pocketmine/raklib/src/protocol/Packet.php:		$version = $this->getByte();
vendor/pocketmine/raklib/src/protocol/Packet.php:			$addr = ((~$this->getByte()) & 0xff) . "." . ((~$this->getByte()) & 0xff) . "." . ((~$this->getByte()) & 0xff) . "." . ((~$this->getByte()) & 0xff);
vendor/pocketmine/raklib/src/protocol/Packet.php:			$port = $this->getShort();
vendor/pocketmine/raklib/src/protocol/Packet.php:			//http://man7.org/linux/man-pages/man7/ipv6.7.html
vendor/pocketmine/raklib/src/protocol/Packet.php:			Binary::readLShort($this->get(2)); //Family, AF_INET6
vendor/pocketmine/raklib/src/protocol/Packet.php:			$port = $this->getShort();
vendor/pocketmine/raklib/src/protocol/Packet.php:			$this->getInt(); //flow info
vendor/pocketmine/raklib/src/protocol/Packet.php:			$addr = inet_ntop($this->get(16));
vendor/pocketmine/raklib/src/protocol/Packet.php:			$this->getInt(); //scope ID
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->putShort(strlen($v));
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->put($v);
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->putByte($address->version);
vendor/pocketmine/raklib/src/protocol/Packet.php:		if($address->version === 4){
vendor/pocketmine/raklib/src/protocol/Packet.php:			$parts = explode(".", $address->ip);
vendor/pocketmine/raklib/src/protocol/Packet.php:				$this->putByte((~((int) $b)) & 0xff);
vendor/pocketmine/raklib/src/protocol/Packet.php:			$this->putShort($address->port);
vendor/pocketmine/raklib/src/protocol/Packet.php:		}elseif($address->version === 6){
vendor/pocketmine/raklib/src/protocol/Packet.php:			$this->put(Binary::writeLShort(AF_INET6));
vendor/pocketmine/raklib/src/protocol/Packet.php:			$this->putShort($address->port);
vendor/pocketmine/raklib/src/protocol/Packet.php:			$this->putInt(0);
vendor/pocketmine/raklib/src/protocol/Packet.php:			$rawIp = inet_pton($address->ip);
vendor/pocketmine/raklib/src/protocol/Packet.php:			$this->put($rawIp);
vendor/pocketmine/raklib/src/protocol/Packet.php:			$this->putInt(0);
vendor/pocketmine/raklib/src/protocol/Packet.php:			throw new \InvalidArgumentException("IP version $address->version is not supported");
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->reset();
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->encodeHeader();
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->encodePayload();
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->putByte(static::$ID);
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->offset = 0;
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->decodeHeader();
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->decodePayload();
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->getByte(); //PID
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->buffer = "";
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->offset = 0;
vendor/pocketmine/raklib/src/protocol/Packet.php:		$this->sendTime = null;
vendor/pocketmine/raklib/src/protocol/UnconnectedPing.php:		$this->putLong($this->pingID);
vendor/pocketmine/raklib/src/protocol/UnconnectedPing.php:		$this->writeMagic();
vendor/pocketmine/raklib/src/protocol/UnconnectedPing.php:		$this->pingID = $this->getLong();
vendor/pocketmine/raklib/src/protocol/UnconnectedPing.php:		$this->readMagic();
vendor/pocketmine/raklib/src/protocol/OfflineMessage.php:		$this->magic = $this->get(16);
vendor/pocketmine/raklib/src/protocol/OfflineMessage.php:		$this->put(RakLib::MAGIC);
vendor/pocketmine/raklib/src/protocol/OfflineMessage.php:		return $this->magic === RakLib::MAGIC;
vendor/pocketmine/raklib/src/protocol/ConnectedPing.php:		$this->putLong($this->sendPingTime);
vendor/pocketmine/raklib/src/protocol/ConnectedPing.php:		$this->sendPingTime = $this->getLong();
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:		$this->putAddress($this->address);
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:		foreach($this->systemAddresses as $address){
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:			$this->putAddress($address);
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:		$this->putLong($this->sendPingTime);
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:		$this->putLong($this->sendPongTime);
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:		$this->address = $this->getAddress();
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:		$stopOffset = strlen($this->buffer) - 16; //buffer length - sizeof(sendPingTime) - sizeof(sendPongTime)
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:			if($this->offset >= $stopOffset){
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:				$this->systemAddresses[$i] = clone $dummy;
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:				$this->systemAddresses[$i] = $this->getAddress();
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:		$this->sendPingTime = $this->getLong();
vendor/pocketmine/raklib/src/protocol/NewIncomingConnection.php:		$this->sendPongTime = $this->getLong();
vendor/pocketmine/raklib/src/protocol/IncompatibleProtocolVersion.php:		$this->putByte($this->protocolVersion);
vendor/pocketmine/raklib/src/protocol/IncompatibleProtocolVersion.php:		$this->writeMagic();
vendor/pocketmine/raklib/src/protocol/IncompatibleProtocolVersion.php:		$this->putLong($this->serverId);
vendor/pocketmine/raklib/src/protocol/IncompatibleProtocolVersion.php:		$this->protocolVersion = $this->getByte();
vendor/pocketmine/raklib/src/protocol/IncompatibleProtocolVersion.php:		$this->readMagic();
vendor/pocketmine/raklib/src/protocol/IncompatibleProtocolVersion.php:		$this->serverId = $this->getLong();
vendor/pocketmine/raklib/src/protocol/AdvertiseSystem.php:		$this->putString($this->serverName);
vendor/pocketmine/raklib/src/protocol/AdvertiseSystem.php:		$this->serverName = $this->getString();
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:		sort($this->packets, SORT_NUMERIC);
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:		$count = count($this->packets);
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:			$start = $this->packets[0];
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:			$last = $this->packets[0];
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:				$current = $this->packets[$pointer++];
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:				$diff = $current - $last;
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:		$this->putShort($records);
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:		$this->buffer .= $payload;
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:		$count = $this->getShort();
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:		$this->packets = [];
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:		for($i = 0; $i < $count and !$this->feof() and $cnt < 4096; ++$i){
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:			if($this->getByte() === self::RECORD_TYPE_RANGE){
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:				$start = $this->getLTriad();
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:				$end = $this->getLTriad();
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:				if(($end - $start) > 512){
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:					$this->packets[$cnt++] = $c;
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:				$this->packets[$cnt++] = $this->getLTriad();
vendor/pocketmine/raklib/src/protocol/AcknowledgePacket.php:		$this->packets = [];
vendor/pocketmine/raklib/LICENSE.md:The usage of this library with PocketMine-MP will allow the creation
vendor/pocketmine/raklib/LICENSE.md:of derivated non open-source works, without direct usage of RakLib.
vendor/pocketmine/raklib/LICENSE.md:Only PocketMine-MP and their plugins will be able to use the library
vendor/pocketmine/raklib/LICENSE.md:share and change all versions of a program--to make sure it remains free
vendor/pocketmine/raklib/LICENSE.md:software on general-purpose computers, but in those that do, we wish to
vendor/pocketmine/raklib/LICENSE.md:patents cannot be used to render the program non-free.
vendor/pocketmine/raklib/LICENSE.md:  "Copyright" also means copyright-like laws that apply to other kinds of
vendor/pocketmine/raklib/LICENSE.md:for making modifications to it.  "Object code" means any non-source
vendor/pocketmine/raklib/LICENSE.md:System Libraries, or general-purpose tools or generally available free
vendor/pocketmine/raklib/LICENSE.md:  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
vendor/pocketmine/raklib/LICENSE.md:non-permissive terms added in accord with section 7 apply to the code;
vendor/pocketmine/raklib/LICENSE.md:  6. Conveying Non-Source Forms.
vendor/pocketmine/raklib/LICENSE.md:machine-readable Corresponding Source under the terms of this License,
vendor/pocketmine/raklib/LICENSE.md:    e) Convey the object code using peer-to-peer transmission, provided
vendor/pocketmine/raklib/LICENSE.md:commercial, industrial or non-consumer uses, unless such uses represent
vendor/pocketmine/raklib/LICENSE.md:  All other non-permissive additional terms are considered "further
vendor/pocketmine/raklib/LICENSE.md:  Additional terms, permissive or non-permissive, may be stated in the
vendor/pocketmine/raklib/LICENSE.md:occurring solely as a consequence of using peer-to-peer transmission
vendor/pocketmine/raklib/LICENSE.md:(including a cross-claim or counterclaim in a lawsuit) alleging that
vendor/pocketmine/raklib/LICENSE.md:  Each contributor grants you a non-exclusive, worldwide, royalty-free
vendor/pocketmine/raklib/LICENSE.md:conditioned on the non-exercise of one or more of the rights that are
vendor/pocketmine/raklib/tests/phpstan/configs/php8-changes.neon:		-
vendor/pocketmine/raklib/tests/phpstan/configs/php8-changes.neon:		-
vendor/pocketmine/raklib/tests/phpstan/stubs/pthreads.stub: * @implements \Traversable<array-key, mixed>
vendor/pocketmine/raklib/.github/workflows/main.yml:          - php: 7.2.34
vendor/pocketmine/raklib/.github/workflows/main.yml:            pthreads-version: 46962cf9c2d30b6e1e1ea50ca36de3df5d6d4e58
vendor/pocketmine/raklib/.github/workflows/main.yml:            phpstan-config: php7
vendor/pocketmine/raklib/.github/workflows/main.yml:          - php: 7.3.25
vendor/pocketmine/raklib/.github/workflows/main.yml:            pthreads-version: 34d7e6b91ed92a625760fedd667e7cba2009e463
vendor/pocketmine/raklib/.github/workflows/main.yml:            phpstan-config: php7
vendor/pocketmine/raklib/.github/workflows/main.yml:          - php: 7.4.13
vendor/pocketmine/raklib/.github/workflows/main.yml:            pthreads-version: 34d7e6b91ed92a625760fedd667e7cba2009e463
vendor/pocketmine/raklib/.github/workflows/main.yml:            phpstan-config: php7
vendor/pocketmine/raklib/.github/workflows/main.yml:          - php: 8.0.1
vendor/pocketmine/raklib/.github/workflows/main.yml:            pthreads-version: bc16ee7b5a21faee9bd1743f830f7135b763fb56
vendor/pocketmine/raklib/.github/workflows/main.yml:            phpstan-config: php8
vendor/pocketmine/raklib/.github/workflows/main.yml:    runs-on: ubuntu-latest
vendor/pocketmine/raklib/.github/workflows/main.yml:      - uses: actions/checkout@v2
vendor/pocketmine/raklib/.github/workflows/main.yml:      - name: Restore PHP build cache
vendor/pocketmine/raklib/.github/workflows/main.yml:        id: php-build-cache
vendor/pocketmine/raklib/.github/workflows/main.yml:          key: php-build-${{ matrix.php }}-pthreads-${{ matrix.pthreads-version }}
vendor/pocketmine/raklib/.github/workflows/main.yml:      - name: Compile PHP
vendor/pocketmine/raklib/.github/workflows/main.yml:        if: steps.php-build-cache.outputs.cache-hit != 'true'
vendor/pocketmine/raklib/.github/workflows/main.yml:          git clone https://github.com/php-build/php-build.git
vendor/pocketmine/raklib/.github/workflows/main.yml:          cd php-build
vendor/pocketmine/raklib/.github/workflows/main.yml:          ./install-dependencies.sh
vendor/pocketmine/raklib/.github/workflows/main.yml:          echo '"pthreads",,"https://github.com/pmmp/pthreads.git",,,"extension",' >> share/php-build/extension/definition
vendor/pocketmine/raklib/.github/workflows/main.yml:          export CFLAGS="$CFLAGS -march=x86-64"
vendor/pocketmine/raklib/.github/workflows/main.yml:          export CXXFLAGS="$CXXFLAGS -march=x86-64"
vendor/pocketmine/raklib/.github/workflows/main.yml:          PHP_BUILD_INSTALL_EXTENSION='pthreads=@${{ matrix.pthreads-version }}' PHP_BUILD_ZTS_ENABLE=on ./bin/php-build "${{ matrix.php }}" "$GITHUB_WORKSPACE/php"
vendor/pocketmine/raklib/.github/workflows/main.yml:      - name: Prefix PHP to PATH
vendor/pocketmine/raklib/.github/workflows/main.yml:      - name: Cache Composer packages
vendor/pocketmine/raklib/.github/workflows/main.yml:        id: composer-cache
vendor/pocketmine/raklib/.github/workflows/main.yml:          key: "php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}"
vendor/pocketmine/raklib/.github/workflows/main.yml:          restore-keys: "php-${{ matrix.php }}-composer-"
vendor/pocketmine/raklib/.github/workflows/main.yml:      - name: Install dependencies
vendor/pocketmine/raklib/.github/workflows/main.yml:        run: composer install --prefer-dist --no-interaction
vendor/pocketmine/raklib/.github/workflows/main.yml:      - name: Run PHPStan
vendor/pocketmine/raklib/.github/workflows/main.yml:        run: ./vendor/bin/phpstan analyze --no-progress -c phpstan.${{ matrix.phpstan-config }}.neon
vendor/pocketmine/raklib/phpstan.php7.neon:	- phpstan.shared.neon
vendor/pocketmine/raklib/phpstan.php8.neon:	- phpstan.shared.neon
vendor/pocketmine/raklib/phpstan.php8.neon:	- tests/phpstan/configs/php8-changes.neon
vendor/pocketmine/raklib/phpstan.shared.neon:	- vendor/phpstan/phpstan-strict-rules/rules.neon
vendor/pocketmine/raklib/phpstan.shared.neon:		- src
vendor/pocketmine/raklib/phpstan.shared.neon:		- tests/phpstan/stubs/pthreads.stub
vendor/pocketmine/raklib/phpstan.shared.neon:		-
vendor/pocketmine/raklib/phpstan.shared.neon:		-
vendor/pocketmine/nbt/README.md:# PocketMine-NBT
vendor/pocketmine/nbt/composer.json:        "php-64bit": "*",
vendor/pocketmine/nbt/composer.json:        "ext-zlib": "*",
vendor/pocketmine/nbt/composer.json:    "require-dev": {
vendor/pocketmine/nbt/composer.json:        "irstea/phpunit-shim": "^7.5 || ^8.0",
vendor/pocketmine/nbt/composer.json:        "phpstan/extension-installer": "^1.0",
vendor/pocketmine/nbt/composer.json:        "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/pocketmine/nbt/composer.json:    "license": "LGPL-3.0",
vendor/pocketmine/nbt/composer.json:        "psr-4": {
vendor/pocketmine/nbt/composer.json:    "autoload-dev": {
vendor/pocketmine/nbt/composer.json:        "psr-4": {
vendor/pocketmine/nbt/src/tag/LongTag.php:		$this->value = $value;
vendor/pocketmine/nbt/src/tag/LongTag.php:		$this->value = $nbt->getLong();
vendor/pocketmine/nbt/src/tag/LongTag.php:		$nbt->putLong($this->value);
vendor/pocketmine/nbt/src/tag/LongTag.php:		return $this->value;
vendor/pocketmine/nbt/src/tag/ShortTag.php:		if($value < -0x8000 or $value > 0x7fff){
vendor/pocketmine/nbt/src/tag/ShortTag.php:		$this->value = $value;
vendor/pocketmine/nbt/src/tag/ShortTag.php:		$this->value = $nbt->getSignedShort();
vendor/pocketmine/nbt/src/tag/ShortTag.php:		$nbt->putShort($this->value);
vendor/pocketmine/nbt/src/tag/ShortTag.php:		return $this->value;
vendor/pocketmine/nbt/src/tag/ByteTag.php:		if($value < -128 or $value > 127){
vendor/pocketmine/nbt/src/tag/ByteTag.php:		$this->value = $value;
vendor/pocketmine/nbt/src/tag/ByteTag.php:		$this->value = $nbt->getSignedByte();
vendor/pocketmine/nbt/src/tag/ByteTag.php:		$nbt->putByte($this->value);
vendor/pocketmine/nbt/src/tag/ByteTag.php:		return $this->value;
vendor/pocketmine/nbt/src/tag/FloatTag.php:		$this->value = $value;
vendor/pocketmine/nbt/src/tag/FloatTag.php:		$this->value = $nbt->getFloat();
vendor/pocketmine/nbt/src/tag/FloatTag.php:		$nbt->putFloat($this->value);
vendor/pocketmine/nbt/src/tag/FloatTag.php:		return $this->value;
vendor/pocketmine/nbt/src/tag/IntArrayTag.php:		$this->value = $value;
vendor/pocketmine/nbt/src/tag/IntArrayTag.php:		$this->value = $nbt->getIntArray();
vendor/pocketmine/nbt/src/tag/IntArrayTag.php:		$nbt->putIntArray($this->value);
vendor/pocketmine/nbt/src/tag/IntArrayTag.php:		return str_repeat("  ", $indentation) . get_class($this) . ": " . ($this->__name !== "" ? "name='$this->__name', " : "") . "value=[" . implode(",", $this->value) . "]";
vendor/pocketmine/nbt/src/tag/IntArrayTag.php:		return $this->value;
vendor/pocketmine/nbt/src/tag/DoubleTag.php:		$this->value = $value;
vendor/pocketmine/nbt/src/tag/DoubleTag.php:		$this->value = $nbt->getDouble();
vendor/pocketmine/nbt/src/tag/DoubleTag.php:		$nbt->putDouble($this->value);
vendor/pocketmine/nbt/src/tag/DoubleTag.php:		return $this->value;
vendor/pocketmine/nbt/src/tag/ByteArrayTag.php:		$this->value = $value;
vendor/pocketmine/nbt/src/tag/ByteArrayTag.php:		$this->value = $nbt->get($nbt->getInt());
vendor/pocketmine/nbt/src/tag/ByteArrayTag.php:		$nbt->putInt(strlen($this->value));
vendor/pocketmine/nbt/src/tag/ByteArrayTag.php:		$nbt->put($this->value);
vendor/pocketmine/nbt/src/tag/ByteArrayTag.php:		return $this->value;
vendor/pocketmine/nbt/src/tag/NoDynamicFieldsTrait.php:	 * @phpstan-return never
vendor/pocketmine/nbt/src/tag/NoDynamicFieldsTrait.php:		throw $this->throw($name);
vendor/pocketmine/nbt/src/tag/NoDynamicFieldsTrait.php:	 * @phpstan-return never
vendor/pocketmine/nbt/src/tag/NoDynamicFieldsTrait.php:		throw $this->throw($name);
vendor/pocketmine/nbt/src/tag/NoDynamicFieldsTrait.php:	 * @phpstan-return never
vendor/pocketmine/nbt/src/tag/NoDynamicFieldsTrait.php:		throw $this->throw($name);
vendor/pocketmine/nbt/src/tag/NoDynamicFieldsTrait.php:	 * @phpstan-return never
vendor/pocketmine/nbt/src/tag/NoDynamicFieldsTrait.php:		throw $this->throw($name);
vendor/pocketmine/nbt/src/tag/CompoundTag.php: * @phpstan-implements \ArrayAccess<string, mixed>
vendor/pocketmine/nbt/src/tag/CompoundTag.php: * @phpstan-implements \Iterator<string, NamedTag>
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			$this->setTag($tag);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return count($this->value);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return count($this->value);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->value;
vendor/pocketmine/nbt/src/tag/CompoundTag.php:	 * @phpstan-template T of NamedTag
vendor/pocketmine/nbt/src/tag/CompoundTag.php:	 * @phpstan-param class-string<T> $expectedClass
vendor/pocketmine/nbt/src/tag/CompoundTag.php:	 * @phpstan-return T|null
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$tag = $this->value[$name] ?? null;
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->getTag($name, ListTag::class);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->getTag($name, CompoundTag::class);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			$existing = $this->value[$tag->__name] ?? null;
vendor/pocketmine/nbt/src/tag/CompoundTag.php:				throw new \RuntimeException("Cannot set tag at \"$tag->__name\": tried to overwrite " . get_class($existing) . " with " . get_class($tag));
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$this->value[$tag->__name] = $tag;
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			unset($this->value[$name]);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:	 * @phpstan-param class-string<NamedTag> $expectedClass
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return ($this->value[$name] ?? null) instanceof $expectedClass;
vendor/pocketmine/nbt/src/tag/CompoundTag.php:	 * @phpstan-param class-string<NamedTag> $expectedClass
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$tag = $this->getTag($name, $badTagDefault ? NamedTag::class : $expectedClass);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			return $tag->getValue();
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->getTagValue($name, ByteTag::class, $default, $badTagDefault);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->getTagValue($name, ShortTag::class, $default, $badTagDefault);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->getTagValue($name, IntTag::class, $default, $badTagDefault);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->getTagValue($name, LongTag::class, $default, $badTagDefault);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->getTagValue($name, FloatTag::class, $default, $badTagDefault);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->getTagValue($name, DoubleTag::class, $default, $badTagDefault);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->getTagValue($name, ByteArrayTag::class, $default, $badTagDefault);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->getTagValue($name, StringTag::class, $default, $badTagDefault);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return $this->getTagValue($name, IntArrayTag::class, $default, $badTagDefault);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$this->setTag(new ByteTag($name, $value), $force);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$this->setTag(new ShortTag($name, $value), $force);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$this->setTag(new IntTag($name, $value), $force);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$this->setTag(new LongTag($name, $value), $force);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$this->setTag(new FloatTag($name, $value), $force);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$this->setTag(new DoubleTag($name, $value), $force);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$this->setTag(new ByteArrayTag($name, $value), $force);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$this->setTag(new StringTag($name, $value), $force);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$this->setTag(new IntArrayTag($name, $value), $force);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return isset($this->value[$offset]);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		if(isset($this->value[$offset])){
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			if($this->value[$offset] instanceof \ArrayAccess){
vendor/pocketmine/nbt/src/tag/CompoundTag.php:				return $this->value[$offset];
vendor/pocketmine/nbt/src/tag/CompoundTag.php:				return $this->value[$offset]->getValue();
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			if($offset !== $value->getName()){
vendor/pocketmine/nbt/src/tag/CompoundTag.php:				throw new \UnexpectedValueException("Given tag has a name which does not match the offset given (offset: \"$offset\", tag name: \"" . $value->getName() . "\")");
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			$this->value[$offset] = $value;
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		unset($this->value[$offset]);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$this->value = [];
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$tracker->protectDepth(function() use($nbt, $tracker) : void{
vendor/pocketmine/nbt/src/tag/CompoundTag.php:				$tag = $nbt->readTag($tracker);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:					if(isset($this->value[$tag->__name])){
vendor/pocketmine/nbt/src/tag/CompoundTag.php:						throw new \UnexpectedValueException("Duplicate key \"$tag->__name\"");
vendor/pocketmine/nbt/src/tag/CompoundTag.php:					$this->value[$tag->__name] = $tag;
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		foreach($this->value as $tag){
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			$nbt->writeTag($tag);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$nbt->writeEnd();
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$str = str_repeat("  ", $indentation) . get_class($this) . ": " . ($this->__name !== "" ? "name='$this->__name', " : "") . "value={\n";
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		foreach($this->value as $tag){
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			$str .= $tag->toString($indentation + 1) . "\n";
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		foreach($this->value as $key => $tag){
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			$this->value[$key] = $tag->safeClone();
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		next($this->value);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		return key($this->value) !== null;
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$k = key($this->value);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		$current = current($this->value);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		reset($this->value);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:		if(!($that instanceof $this) or $this->count() !== $that->count()){
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			$other = $that->getTag($k);
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			if($other === null or !$v->equals($other)){
vendor/pocketmine/nbt/src/tag/CompoundTag.php:	 * This deep-clones all tags.
vendor/pocketmine/nbt/src/tag/CompoundTag.php:			$new->setTag(clone $namedTag);
vendor/pocketmine/nbt/src/tag/IntTag.php:		if($value < -0x80000000 or $value > 0x7fffffff){
vendor/pocketmine/nbt/src/tag/IntTag.php:		$this->value = $value;
vendor/pocketmine/nbt/src/tag/IntTag.php:		$this->value = $nbt->getInt();
vendor/pocketmine/nbt/src/tag/IntTag.php:		$nbt->putInt($this->value);
vendor/pocketmine/nbt/src/tag/IntTag.php:		return $this->value;
vendor/pocketmine/nbt/src/tag/NamedTag.php:		$this->__name = $name;
vendor/pocketmine/nbt/src/tag/NamedTag.php:		return $this->__name;
vendor/pocketmine/nbt/src/tag/NamedTag.php:		$this->__name = $name;
vendor/pocketmine/nbt/src/tag/NamedTag.php:		return $this->toString();
vendor/pocketmine/nbt/src/tag/NamedTag.php:		return str_repeat("  ", $indentation) . get_class($this) . ": " . ($this->__name !== "" ? "name='$this->__name', " : "") . "value='" . (string) $this->getValue() . "'";
vendor/pocketmine/nbt/src/tag/NamedTag.php:		if($this->cloning){
vendor/pocketmine/nbt/src/tag/NamedTag.php:		$this->cloning = true;
vendor/pocketmine/nbt/src/tag/NamedTag.php:		$this->cloning = false;
vendor/pocketmine/nbt/src/tag/NamedTag.php:		$retval->cloning = false;
vendor/pocketmine/nbt/src/tag/NamedTag.php:		return $this->__name === $that->__name and $this->equalsValue($that);
vendor/pocketmine/nbt/src/tag/NamedTag.php:		return $that instanceof $this and $this->getValue() === $that->getValue();
vendor/pocketmine/nbt/src/tag/ListTag.php: * @phpstan-implements \ArrayAccess<int, mixed>
vendor/pocketmine/nbt/src/tag/ListTag.php: * @phpstan-implements \Iterator<int, NamedTag>
vendor/pocketmine/nbt/src/tag/ListTag.php:	 * @phpstan-var \SplDoublyLinkedList<NamedTag>
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->tagType = $tagType;
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->value = new \SplDoublyLinkedList();
vendor/pocketmine/nbt/src/tag/ListTag.php:			$this->push($tag);
vendor/pocketmine/nbt/src/tag/ListTag.php:		foreach($this->value as $k => $v){
vendor/pocketmine/nbt/src/tag/ListTag.php:	 * Returns an array of tag values inserted into this list. ArrayAccess-implementing tags are returned as themselves
vendor/pocketmine/nbt/src/tag/ListTag.php:	 * @phpstan-return list<mixed>
vendor/pocketmine/nbt/src/tag/ListTag.php:		foreach($this->value as $tag){
vendor/pocketmine/nbt/src/tag/ListTag.php:				$result[] = $tag->getValue();
vendor/pocketmine/nbt/src/tag/ListTag.php:		return isset($this->value[$offset]);
vendor/pocketmine/nbt/src/tag/ListTag.php:		$value = $this->value[$offset] ?? null;
vendor/pocketmine/nbt/src/tag/ListTag.php:			return $value->getValue();
vendor/pocketmine/nbt/src/tag/ListTag.php:			$this->checkTagType($value);
vendor/pocketmine/nbt/src/tag/ListTag.php:			$this->value[$offset] = $value;
vendor/pocketmine/nbt/src/tag/ListTag.php:		unset($this->value[$offset]);
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->value->count();
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->value->count();
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->checkTagType($tag);
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->value->push($tag);
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->value->pop();
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->checkTagType($tag);
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->value->unshift($tag);
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->value->shift();
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->checkTagType($tag);
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->value->add($offset, $tag);
vendor/pocketmine/nbt/src/tag/ListTag.php:		unset($this->value[$offset]);
vendor/pocketmine/nbt/src/tag/ListTag.php:		if(!isset($this->value[$offset])){
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->value[$offset];
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->value->bottom();
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->value->top();
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->checkTagType($tag);
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->value[$offset] = $tag;
vendor/pocketmine/nbt/src/tag/ListTag.php:		return isset($this->value[$offset]);
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->value->isEmpty();
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->tagType;
vendor/pocketmine/nbt/src/tag/ListTag.php:	 * Sets the type of tag that can be added to this list. If TAG_End is used, the type will be auto-detected from the
vendor/pocketmine/nbt/src/tag/ListTag.php:		if(!$this->value->isEmpty()){
vendor/pocketmine/nbt/src/tag/ListTag.php:			throw new \LogicException("Cannot change tag type of non-empty ListTag");
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->tagType = $type;
vendor/pocketmine/nbt/src/tag/ListTag.php:	 * Type-checks the given NamedTag for addition to the list, updating the list tag type as appropriate.
vendor/pocketmine/nbt/src/tag/ListTag.php:		$type = $tag->getType();
vendor/pocketmine/nbt/src/tag/ListTag.php:		if($type !== $this->tagType){
vendor/pocketmine/nbt/src/tag/ListTag.php:			if($this->tagType === NBT::TAG_End){
vendor/pocketmine/nbt/src/tag/ListTag.php:				$this->tagType = $type;
vendor/pocketmine/nbt/src/tag/ListTag.php:				throw new \TypeError("Invalid tag of type " . get_class($tag) . " assigned to ListTag, expected " . get_class(NBT::createTag($this->tagType)));
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->value = new \SplDoublyLinkedList();
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->tagType = $nbt->getByte();
vendor/pocketmine/nbt/src/tag/ListTag.php:		$size = $nbt->getInt();
vendor/pocketmine/nbt/src/tag/ListTag.php:			if($this->tagType === NBT::TAG_End){
vendor/pocketmine/nbt/src/tag/ListTag.php:				throw new \UnexpectedValueException("Unexpected non-empty list of TAG_End");
vendor/pocketmine/nbt/src/tag/ListTag.php:			$tracker->protectDepth(function() use($nbt, $tracker, $size) : void{
vendor/pocketmine/nbt/src/tag/ListTag.php:				$tagBase = NBT::createTag($this->tagType);
vendor/pocketmine/nbt/src/tag/ListTag.php:					$tag->read($nbt, $tracker);
vendor/pocketmine/nbt/src/tag/ListTag.php:					$this->value->push($tag);
vendor/pocketmine/nbt/src/tag/ListTag.php:			$this->tagType = NBT::TAG_End; //Some older NBT implementations used TAG_Byte for empty lists.
vendor/pocketmine/nbt/src/tag/ListTag.php:		$nbt->putByte($this->tagType);
vendor/pocketmine/nbt/src/tag/ListTag.php:		$nbt->putInt($this->value->count());
vendor/pocketmine/nbt/src/tag/ListTag.php:		foreach($this->value as $tag){
vendor/pocketmine/nbt/src/tag/ListTag.php:			$tag->write($nbt);
vendor/pocketmine/nbt/src/tag/ListTag.php:		$str = str_repeat("  ", $indentation) . get_class($this) . ": " . ($this->__name !== "" ? "name='$this->__name', " : "") . "value={\n";
vendor/pocketmine/nbt/src/tag/ListTag.php:		foreach($this->value as $tag){
vendor/pocketmine/nbt/src/tag/ListTag.php:			$str .= $tag->toString($indentation + 1) . "\n";
vendor/pocketmine/nbt/src/tag/ListTag.php:		foreach($this->value as $tag){
vendor/pocketmine/nbt/src/tag/ListTag.php:			$new->push($tag->safeClone());
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->value = $new;
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->value->next();
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->value->valid();
vendor/pocketmine/nbt/src/tag/ListTag.php:		if(!$this->value->valid()){
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->value->current();
vendor/pocketmine/nbt/src/tag/ListTag.php:		if(!$this->value->valid()){
vendor/pocketmine/nbt/src/tag/ListTag.php:		return $this->value->key();
vendor/pocketmine/nbt/src/tag/ListTag.php:		$this->value->rewind();
vendor/pocketmine/nbt/src/tag/ListTag.php:		if(!($that instanceof $this) or $this->count() !== $that->count()){
vendor/pocketmine/nbt/src/tag/ListTag.php:			if(!$v->equalsValue($that->get($k))){ //ListTag members don't have names, don't bother checking it
vendor/pocketmine/nbt/src/tag/StringTag.php:		$this->value = $value;
vendor/pocketmine/nbt/src/tag/StringTag.php:		$this->value = $nbt->getString();
vendor/pocketmine/nbt/src/tag/StringTag.php:		$nbt->putString($this->value);
vendor/pocketmine/nbt/src/tag/StringTag.php:		return $this->value;
vendor/pocketmine/nbt/src/ReaderTracker.php:		$this->maxDepth = $maxDepth;
vendor/pocketmine/nbt/src/ReaderTracker.php:		if($this->maxDepth > 0 and ++$this->currentDepth > $this->maxDepth){
vendor/pocketmine/nbt/src/ReaderTracker.php:			throw new \UnexpectedValueException("Nesting level too deep: reached max depth of $this->maxDepth tags");
vendor/pocketmine/nbt/src/ReaderTracker.php:			--$this->currentDepth;
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		return Binary::readShort($this->get(2));
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		return Binary::readSignedShort($this->get(2));
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		$this->buffer .= Binary::writeShort($v);
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		return Binary::readInt($this->get(4));
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		$this->buffer .= Binary::writeInt($v);
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		return Binary::readLong($this->get(8));
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		$this->buffer .= Binary::writeLong($v);
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		return Binary::readFloat($this->get(4));
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		$this->buffer .= Binary::writeFloat($v);
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		return Binary::readDouble($this->get(8));
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		$this->buffer .= Binary::writeDouble($v);
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		$len = $this->getInt();
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		$unpacked = unpack("N*", $this->get($len * 4));
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		$this->putInt(count($array));
vendor/pocketmine/nbt/src/BigEndianNBTStream.php:		$this->put(pack("N*", ...$array));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		return Binary::readLShort($this->get(2));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		return Binary::readSignedLShort($this->get(2));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		$this->put(Binary::writeLShort($v));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		return Binary::readLInt($this->get(4));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		$this->put(Binary::writeLInt($v));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		return Binary::readLLong($this->get(8));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		$this->put(Binary::writeLLong($v));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		return Binary::readLFloat($this->get(4));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		$this->put(Binary::writeLFloat($v));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		return Binary::readLDouble($this->get(8));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		$this->put(Binary::writeLDouble($v));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		$len = $this->getInt();
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		$unpacked = unpack("V*", $this->get($len * 4));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		$this->putInt(count($array));
vendor/pocketmine/nbt/src/LittleEndianNBTStream.php:		$this->put(pack("V*", ...$array));
vendor/pocketmine/nbt/src/JsonNbtParser.php:	 * Parses JSON-formatted NBT into a CompoundTag and returns it. Used for parsing tags supplied with the /give command.
vendor/pocketmine/nbt/src/JsonNbtParser.php:		if(($b = $stream->get(1)) !== "{"){
vendor/pocketmine/nbt/src/JsonNbtParser.php:		if(!$stream->feof()){
vendor/pocketmine/nbt/src/JsonNbtParser.php:			throw new \UnexpectedValueException("Syntax error: unexpected trailing characters after end of tag: " . $stream->getRemaining());
vendor/pocketmine/nbt/src/JsonNbtParser.php:			while(!$stream->feof()){
vendor/pocketmine/nbt/src/JsonNbtParser.php:				$retval->push(self::readValue($stream));
vendor/pocketmine/nbt/src/JsonNbtParser.php:			while(!$stream->feof()){
vendor/pocketmine/nbt/src/JsonNbtParser.php:				$retval->setTag(self::readValue($stream, self::readKey($stream)));
vendor/pocketmine/nbt/src/JsonNbtParser.php:		while(!$stream->feof()){
vendor/pocketmine/nbt/src/JsonNbtParser.php:			$b = $stream->get(1);
vendor/pocketmine/nbt/src/JsonNbtParser.php:			$stream->setOffset($stream->getOffset() - 1);
vendor/pocketmine/nbt/src/JsonNbtParser.php:		if($stream->feof()){
vendor/pocketmine/nbt/src/JsonNbtParser.php:		$offset = $stream->getOffset();
vendor/pocketmine/nbt/src/JsonNbtParser.php:		$c = $stream->get(1);
vendor/pocketmine/nbt/src/JsonNbtParser.php:		$offset = $stream->getOffset();
vendor/pocketmine/nbt/src/JsonNbtParser.php:		while(!$stream->feof()){
vendor/pocketmine/nbt/src/JsonNbtParser.php:			$offset = $stream->getOffset();
vendor/pocketmine/nbt/src/JsonNbtParser.php:			$c = $stream->get(1);
vendor/pocketmine/nbt/src/JsonNbtParser.php:					$value .= $stream->get(1);
vendor/pocketmine/nbt/src/JsonNbtParser.php:					$stream->setOffset($stream->getOffset() - 1); //the caller needs to be able to read this character
vendor/pocketmine/nbt/src/JsonNbtParser.php:					if($foundEnd){ //unexpected non-whitespace character after end of value
vendor/pocketmine/nbt/src/JsonNbtParser.php:				}elseif($c === "["){ //start of list tag - TODO: arrays
vendor/pocketmine/nbt/src/JsonNbtParser.php:		$last = strtolower(substr($value, -1));
vendor/pocketmine/nbt/src/JsonNbtParser.php:		$part = substr($value, 0, -1);
vendor/pocketmine/nbt/src/JsonNbtParser.php:		$offset = $stream->getOffset();
vendor/pocketmine/nbt/src/JsonNbtParser.php:		while(!$stream->feof()){
vendor/pocketmine/nbt/src/JsonNbtParser.php:			$c = $stream->get(1);
vendor/pocketmine/nbt/src/JsonNbtParser.php:					$key .= $stream->get(1);
vendor/pocketmine/nbt/src/JsonNbtParser.php:					if($foundEnd){ //unexpected non-whitespace character after end of value
vendor/pocketmine/nbt/src/NBTStream.php:		$buflen = strlen($this->buffer);
vendor/pocketmine/nbt/src/NBTStream.php:			$str = substr($this->buffer, $this->offset);
vendor/pocketmine/nbt/src/NBTStream.php:			$this->offset = $buflen;
vendor/pocketmine/nbt/src/NBTStream.php:			$this->offset = $buflen - 1;
vendor/pocketmine/nbt/src/NBTStream.php:		$remaining = $buflen - $this->offset;
vendor/pocketmine/nbt/src/NBTStream.php:		return $len === 1 ? $this->buffer[$this->offset++] : substr($this->buffer, ($this->offset += $len) - $len, $len);
vendor/pocketmine/nbt/src/NBTStream.php:		$this->buffer .= $v;
vendor/pocketmine/nbt/src/NBTStream.php:		return !isset($this->buffer[$this->offset]);
vendor/pocketmine/nbt/src/NBTStream.php:		$this->offset = &$offset;
vendor/pocketmine/nbt/src/NBTStream.php:		$this->buffer = $buffer;
vendor/pocketmine/nbt/src/NBTStream.php:		$data = $this->readTag(new ReaderTracker($maxDepth));
vendor/pocketmine/nbt/src/NBTStream.php:		if($doMultiple and !$this->feof()){
vendor/pocketmine/nbt/src/NBTStream.php:				$tag = $this->readTag(new ReaderTracker($maxDepth));
vendor/pocketmine/nbt/src/NBTStream.php:			}while(!$this->feof());
vendor/pocketmine/nbt/src/NBTStream.php:		$this->buffer = "";
vendor/pocketmine/nbt/src/NBTStream.php:		return $this->read($decompressed);
vendor/pocketmine/nbt/src/NBTStream.php:		$this->offset = 0;
vendor/pocketmine/nbt/src/NBTStream.php:		$this->buffer = "";
vendor/pocketmine/nbt/src/NBTStream.php:			$this->writeTag($data);
vendor/pocketmine/nbt/src/NBTStream.php:			return $this->buffer;
vendor/pocketmine/nbt/src/NBTStream.php:				$this->writeTag($tag);
vendor/pocketmine/nbt/src/NBTStream.php:			return $this->buffer;
vendor/pocketmine/nbt/src/NBTStream.php:		if(($write = $this->write($data)) !== false){
vendor/pocketmine/nbt/src/NBTStream.php:		$tagType = $this->getByte();
vendor/pocketmine/nbt/src/NBTStream.php:		$tag->setName($this->getString());
vendor/pocketmine/nbt/src/NBTStream.php:		$tag->read($this, $tracker);
vendor/pocketmine/nbt/src/NBTStream.php:		$this->putByte($tag->getType());
vendor/pocketmine/nbt/src/NBTStream.php:		$this->putString($tag->getName());
vendor/pocketmine/nbt/src/NBTStream.php:		$tag->write($this);
vendor/pocketmine/nbt/src/NBTStream.php:		$this->putByte(NBT::TAG_End);
vendor/pocketmine/nbt/src/NBTStream.php:		return Binary::readByte($this->get(1));
vendor/pocketmine/nbt/src/NBTStream.php:		return Binary::readSignedByte($this->get(1));
vendor/pocketmine/nbt/src/NBTStream.php:		$this->buffer .= Binary::writeByte($v);
vendor/pocketmine/nbt/src/NBTStream.php:	 * @throws \UnexpectedValueException if a too-large string is found (length may be invalid)
vendor/pocketmine/nbt/src/NBTStream.php:		return $this->get(self::checkReadStringLength($this->getShort()));
vendor/pocketmine/nbt/src/NBTStream.php:		$this->putShort(self::checkWriteStringLength(strlen($v)));
vendor/pocketmine/nbt/src/NBTStream.php:		$this->put($v);
vendor/pocketmine/nbt/src/NBTStream.php:	 * @phpstan-return array<string, mixed>
vendor/pocketmine/nbt/src/NBTStream.php:				$data[$key] = $value->getValue();
vendor/pocketmine/nbt/src/NBTStream.php:	 * @phpstan-param callable(string $key, mixed $value) : ?NamedTag $guesser
vendor/pocketmine/nbt/src/NBTStream.php:						$node->push($vtag);
vendor/pocketmine/nbt/src/NBTStream.php:						$node->setTag($vtag);
vendor/pocketmine/nbt/src/NBTStream.php:	 * @phpstan-param (callable(string $key, mixed $value) : ?NamedTag)|null $guesser
vendor/pocketmine/nbt/src/NBTStream.php:				$tag->setTag($vtag);
vendor/pocketmine/nbt/src/NetworkLittleEndianNBTStream.php:		return Binary::readVarInt($this->buffer, $this->offset);
vendor/pocketmine/nbt/src/NetworkLittleEndianNBTStream.php:		$this->put(Binary::writeVarInt($v));
vendor/pocketmine/nbt/src/NetworkLittleEndianNBTStream.php:		return Binary::readVarLong($this->buffer, $this->offset);
vendor/pocketmine/nbt/src/NetworkLittleEndianNBTStream.php:		$this->put(Binary::writeVarLong($v));
vendor/pocketmine/nbt/src/NetworkLittleEndianNBTStream.php:		return $this->get(self::checkReadStringLength(Binary::readUnsignedVarInt($this->buffer, $this->offset)));
vendor/pocketmine/nbt/src/NetworkLittleEndianNBTStream.php:		$this->put(Binary::writeUnsignedVarInt(self::checkWriteStringLength(strlen($v))) . $v);
vendor/pocketmine/nbt/src/NetworkLittleEndianNBTStream.php:		$len = $this->getInt(); //varint
vendor/pocketmine/nbt/src/NetworkLittleEndianNBTStream.php:			$ret[] = $this->getInt(); //varint
vendor/pocketmine/nbt/src/NetworkLittleEndianNBTStream.php:		$this->putInt(count($array)); //varint
vendor/pocketmine/nbt/src/NetworkLittleEndianNBTStream.php:			$this->putInt($v); //varint
vendor/pocketmine/nbt/phpstan.neon.dist:	- tests/phpstan/configs/design-problems.neon
vendor/pocketmine/nbt/phpstan.neon.dist:	- tests/phpstan/configs/phpstan-bugs.neon
vendor/pocketmine/nbt/phpstan.neon.dist:		- src
vendor/pocketmine/nbt/tests/phpstan/configs/design-problems.neon:		-
vendor/pocketmine/nbt/tests/phpstan/configs/design-problems.neon:		-
vendor/pocketmine/nbt/tests/phpstan/configs/phpstan-bugs.neon:		-
vendor/pocketmine/nbt/tests/phpstan/configs/phpstan-bugs.neon:		-
vendor/pocketmine/nbt/tests/phpstan/configs/phpstan-bugs.neon:		-
vendor/pocketmine/nbt/tests/phpunit/NbtSerializerTest.php:		$root->setTag($current = new CompoundTag("child"));
vendor/pocketmine/nbt/tests/phpunit/NbtSerializerTest.php:			$current->setTag($current = new CompoundTag("child"));
vendor/pocketmine/nbt/tests/phpunit/NbtSerializerTest.php:			$current->setTag($list = new ListTag("childList"));
vendor/pocketmine/nbt/tests/phpunit/NbtSerializerTest.php:			$list->push($current = new CompoundTag(""));
vendor/pocketmine/nbt/tests/phpunit/NbtSerializerTest.php:		$data = $serializer->write(self::maxDepthProvider());
vendor/pocketmine/nbt/tests/phpunit/NbtSerializerTest.php:		$this->expectException(\UnexpectedValueException::class);
vendor/pocketmine/nbt/tests/phpunit/NbtSerializerTest.php:		$reader->read($data, false, $offset, 512);
vendor/pocketmine/nbt/tests/phpunit/tag/ByteArrayTagTest.php:		self::assertSame($value, $tag->getValue());
vendor/pocketmine/nbt/tests/phpunit/tag/FloatTagTest.php:		self::assertSame($value, $tag->getValue());
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:			$tag->setString("hello$i", "$i");
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:			self::assertRegExp('/hello[0-9]/', $name);
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		$this->expectException(\InvalidArgumentException::class);
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		$tag->setString("hello", "world");
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		$tag->setFloat("float", 5.5);
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		$tag->setTag(new ListTag("list"));
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		self::assertEquals($tag->getCount(), $tag2->getCount());
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:			self::assertNotSame($child, $tag->getTag($name));
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		$child->setTag($tag);
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		$tag->setTag($child);
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		$this->expectException(\RuntimeException::class);
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:			$tag->setString("hello$i", "hello$i");
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:				$tag->setTag(new CompoundTag("child$i", [
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		self::assertTrue($tag1->equals($tag2));
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		$tag2->getCompoundTag("child9")->setFloat("hello", 1.0);
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		self::assertNotTrue($tag1->equals($tag2));
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		$merged = $t1->merge($t2);
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		self::assertSame("replacement", $merged->getString("test1"));
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:		self::assertEquals(2, $merged->getInt("test2"));
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:			$t->setTag(new StringTag("$i", "$i"));
vendor/pocketmine/nbt/tests/phpunit/tag/CompoundTagTest.php:			self::assertTrue($t->hasTag("$i"));
vendor/pocketmine/nbt/tests/phpunit/tag/StringTagTest.php:		self::assertSame($value, $tag->getValue());
vendor/pocketmine/nbt/tests/phpunit/tag/StringTagTest.php:		$this->expectException(\InvalidArgumentException::class);
vendor/pocketmine/nbt/tests/phpunit/tag/IntTagTest.php:		self::assertSame($value, $tag->getValue());
vendor/pocketmine/nbt/tests/phpunit/tag/IntTagTest.php:		$this->expectException(\InvalidArgumentException::class);
vendor/pocketmine/nbt/tests/phpunit/tag/IntTagTest.php:		$this->expectException(\InvalidArgumentException::class);
vendor/pocketmine/nbt/tests/phpunit/tag/IntTagTest.php:		new IntTag("", -(2 ** 35));
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		self::assertEquals("jelly beans", $list->getName());
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		self::assertEquals(NBT::TAG_String, $list->getTagType());
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:	 * Lists of TAG_End will have their type auto-detected when something is inserted
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$list->push(new StringTag("", "works"));
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		self::assertEquals(NBT::TAG_String, $list->getTagType(), "Adding a tag to an empty list of TAG_End type should change its type");
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:	 * Lists with a pre-set type can't have other tag types added to them
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$this->expectException(\TypeError::class);
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$list->push(new StringTag("", "shouldn't work"));
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$list->setTagType(NBT::TAG_Compound);
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$list->push(new CompoundTag());
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$list->shift(); //empty the list
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$list->setTagType(NBT::TAG_Byte);
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$list->push(new ByteTag("", 0));
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:	 * Non-empty lists should not be able to have their types changed
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$this->expectException(\LogicException::class);
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$list->push(new StringTag("", "string"));
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$list->setTagType(NBT::TAG_Compound);
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:			$tag->push(new StringTag("", "hi"));
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		self::assertEquals($tag->getCount(), $tag2->getCount());
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:			self::assertNotSame($child, $tag->get($index));
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$child->push($tag);
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$tag->push($child);
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$this->expectException(\RuntimeException::class);
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:			self::assertSame($tag, $list->get($i));
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:	 * Non-NamedTag values cannot be assigned by array-access any more
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$this->expectException(\TypeError::class);
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		self::assertEquals("thinking", $list->get(0)->getValue());
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		self::assertEquals("harder", $list->get(1)->getValue());
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:	 * Non-NamedTag values cannot be assigned by array-access any more
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$this->expectException(\TypeError::class);
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:	 * Non-NamedTag values cannot be assigned by array-access any more
vendor/pocketmine/nbt/tests/phpunit/tag/ListTagTest.php:		$this->expectException(\TypeError::class);
vendor/pocketmine/nbt/tests/phpunit/tag/ByteTagTest.php:		$value = mt_rand(-128, 127);
vendor/pocketmine/nbt/tests/phpunit/tag/ByteTagTest.php:		self::assertSame($value, $tag->getValue());
vendor/pocketmine/nbt/tests/phpunit/tag/ByteTagTest.php:		$this->expectException(\InvalidArgumentException::class);
vendor/pocketmine/nbt/tests/phpunit/tag/ByteTagTest.php:		$this->expectException(\InvalidArgumentException::class);
vendor/pocketmine/nbt/tests/phpunit/tag/ByteTagTest.php:		new ByteTag("", -129);
vendor/pocketmine/nbt/tests/phpunit/tag/DoubleTagTest.php:		self::assertSame($value, $tag->getValue());
vendor/pocketmine/nbt/tests/phpunit/tag/ShortTagTest.php:		$value = mt_rand(-0x8000, 0x7fff);
vendor/pocketmine/nbt/tests/phpunit/tag/ShortTagTest.php:		self::assertSame($value, $tag->getValue());
vendor/pocketmine/nbt/tests/phpunit/tag/ShortTagTest.php:		$this->expectException(\InvalidArgumentException::class);
vendor/pocketmine/nbt/tests/phpunit/tag/ShortTagTest.php:		$this->expectException(\InvalidArgumentException::class);
vendor/pocketmine/nbt/tests/phpunit/tag/ShortTagTest.php:		new ShortTag("", -80000);
vendor/pocketmine/nbt/tests/phpunit/tag/IntArrayTagTest.php:		self::assertSame($value, $tag->getValue());
vendor/pocketmine/nbt/tests/phpunit/tag/LongTagTest.php:		self::assertSame($value, $tag->getValue());
vendor/pocketmine/nbt/tests/phpunit/CreateTagTest.php:		$consts = (new \ReflectionClass(NBT::class))->getConstants();
vendor/pocketmine/nbt/tests/phpunit/CreateTagTest.php:					self::assertEquals($value, $tag->getType());
vendor/pocketmine/nbt/tests/phpunit/JsonNbtParserTest.php:		$this->expectExceptionMessage("unexpected end of stream");
vendor/pocketmine/nbt/tests/phpunit/JsonNbtParserTest.php:		$this->expectExceptionMessage("unexpected end of stream");
vendor/pocketmine/nbt/tests/phpunit/JsonNbtParserTest.php:		$this->expectExceptionMessage("unexpected trailing characters");
vendor/pocketmine/nbt/tests/phpunit/JsonNbtParserTest.php:		$this->expectExceptionMessage("expected compound start");
vendor/pocketmine/nbt/tests/phpunit/JsonNbtParserTest.php:		$this->expectExceptionMessage("expected compound start");
vendor/pocketmine/nbt/tests/phpunit/JsonNbtParserTest.php:		self::assertTrue($tag->hasTag("TestList", ListTag::class));
vendor/pocketmine/nbt/tests/phpunit/JsonNbtParserTest.php:		self::assertCount(0, $tag->getListTag("TestList"));
vendor/pocketmine/nbt/tests/phpunit/JsonNbtParserTest.php:		$this->expectException(\TypeError::class); //TODO: throwing an engine level error on userdata is very bad ...
vendor/pocketmine/nbt/tests/phpunit/JsonNbtParserTest.php:		self::assertTrue($tag->hasTag("String With Spaces", IntTag::class));
vendor/pocketmine/nbt/tests/phpunit/JsonNbtParserTest.php:		self::assertSame("  TEST  minecraft:stone  ", $tag->getString("TestString"));
vendor/pocketmine/nbt/LICENSE:       of the Library that is interface-compatible with the Linked
vendor/pocketmine/nbt/.github/workflows/ci.yml:    runs-on: ubuntu-latest
vendor/pocketmine/nbt/.github/workflows/ci.yml:    - uses: actions/checkout@v2
vendor/pocketmine/nbt/.github/workflows/ci.yml:    - name: Setup PHP
vendor/pocketmine/nbt/.github/workflows/ci.yml:      uses: shivammathur/setup-php@2.9.0
vendor/pocketmine/nbt/.github/workflows/ci.yml:        php-version: ${{ matrix.php }}
vendor/pocketmine/nbt/.github/workflows/ci.yml:        ini-values: xdebug.max_nesting_level=3000
vendor/pocketmine/nbt/.github/workflows/ci.yml:    - name: Cache Composer packages
vendor/pocketmine/nbt/.github/workflows/ci.yml:      id: composer-cache
vendor/pocketmine/nbt/.github/workflows/ci.yml:        key: "php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}"
vendor/pocketmine/nbt/.github/workflows/ci.yml:        restore-keys: "php-${{ matrix.php }}-composer-"
vendor/pocketmine/nbt/.github/workflows/ci.yml:    - name: Install dependencies
vendor/pocketmine/nbt/.github/workflows/ci.yml:      run: composer install --prefer-dist --no-interaction
vendor/pocketmine/nbt/.github/workflows/ci.yml:    - name: Run PHPStan
vendor/pocketmine/nbt/.github/workflows/ci.yml:      run: ./vendor/bin/phpstan analyze --no-progress
vendor/pocketmine/nbt/.github/workflows/ci.yml:    - name: Run PHPUnit
vendor/pocketmine/nbt/.github/workflows/ci.yml:      run: ./vendor/bin/phpunit --bootstrap vendor/autoload.php --fail-on-warning tests/phpunit
vendor/pocketmine/math/README.md:PHP library containing math related code used in PocketMine-MP
vendor/pocketmine/math/composer.json:    "description": "PHP library containing math related code used in PocketMine-MP",
vendor/pocketmine/math/composer.json:    "license": "LGPL-3.0",
vendor/pocketmine/math/composer.json:        "php-64bit": "*"
vendor/pocketmine/math/composer.json:    "require-dev": {
vendor/pocketmine/math/composer.json:        "phpstan/extension-installer": "^1.0",
vendor/pocketmine/math/composer.json:        "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/pocketmine/math/composer.json:        "psr-4": {
vendor/pocketmine/math/src/Math.php:		return $n >= $i ? $i : $i - 1;
vendor/pocketmine/math/src/Math.php:		$discriminant = $b ** 2 - 4 * $a * $c;
vendor/pocketmine/math/src/Math.php:				(-$b + $sqrtDiscriminant) / (2 * $a),
vendor/pocketmine/math/src/Math.php:				(-$b - $sqrtDiscriminant) / (2 * $a)
vendor/pocketmine/math/src/Math.php:				-$b / (2 * $a)
vendor/pocketmine/math/src/Vector3.php:	 * This is intentionally not typehinted because things using this as an int-vector will crash and burn if everything
vendor/pocketmine/math/src/Vector3.php:	 * gets converted to floating-point numbers.
vendor/pocketmine/math/src/Vector3.php:	 * TODO: typehint this once int-vectors and float-vectors are separated
vendor/pocketmine/math/src/Vector3.php:		$this->x = $x;
vendor/pocketmine/math/src/Vector3.php:		$this->y = $y;
vendor/pocketmine/math/src/Vector3.php:		$this->z = $z;
vendor/pocketmine/math/src/Vector3.php:		return $this->x;
vendor/pocketmine/math/src/Vector3.php:		return $this->y;
vendor/pocketmine/math/src/Vector3.php:		return $this->z;
vendor/pocketmine/math/src/Vector3.php:		return (int) floor($this->x);
vendor/pocketmine/math/src/Vector3.php:		return (int) floor($this->y);
vendor/pocketmine/math/src/Vector3.php:		return (int) floor($this->z);
vendor/pocketmine/math/src/Vector3.php:			return new Vector3($this->x + $x->x, $this->y + $x->y, $this->z + $x->z);
vendor/pocketmine/math/src/Vector3.php:			return new Vector3($this->x + $x, $this->y + $y, $this->z + $z);
vendor/pocketmine/math/src/Vector3.php:			return $this->add(-$x->x, -$x->y, -$x->z);
vendor/pocketmine/math/src/Vector3.php:			return $this->add(-$x, -$y, -$z);
vendor/pocketmine/math/src/Vector3.php:		return new Vector3($this->x * $number, $this->y * $number, $this->z * $number);
vendor/pocketmine/math/src/Vector3.php:		return new Vector3($this->x / $number, $this->y / $number, $this->z / $number);
vendor/pocketmine/math/src/Vector3.php:		return new Vector3((int) ceil($this->x), (int) ceil($this->y), (int) ceil($this->z));
vendor/pocketmine/math/src/Vector3.php:		return new Vector3((int) floor($this->x), (int) floor($this->y), (int) floor($this->z));
vendor/pocketmine/math/src/Vector3.php:			new Vector3(round($this->x, $precision, $mode), round($this->y, $precision, $mode), round($this->z, $precision, $mode)) :
vendor/pocketmine/math/src/Vector3.php:			new Vector3((int) round($this->x, $precision, $mode), (int) round($this->y, $precision, $mode), (int) round($this->z, $precision, $mode));
vendor/pocketmine/math/src/Vector3.php:		return new Vector3(abs($this->x), abs($this->y), abs($this->z));
vendor/pocketmine/math/src/Vector3.php:				return new Vector3($this->x, $this->y - $step, $this->z);
vendor/pocketmine/math/src/Vector3.php:				return new Vector3($this->x, $this->y + $step, $this->z);
vendor/pocketmine/math/src/Vector3.php:				return new Vector3($this->x, $this->y, $this->z - $step);
vendor/pocketmine/math/src/Vector3.php:				return new Vector3($this->x, $this->y, $this->z + $step);
vendor/pocketmine/math/src/Vector3.php:				return new Vector3($this->x - $step, $this->y, $this->z);
vendor/pocketmine/math/src/Vector3.php:				return new Vector3($this->x + $step, $this->y, $this->z);
vendor/pocketmine/math/src/Vector3.php:		return $this->getSide(self::SIDE_DOWN, $step);
vendor/pocketmine/math/src/Vector3.php:		return $this->getSide(self::SIDE_UP, $step);
vendor/pocketmine/math/src/Vector3.php:		return $this->getSide(self::SIDE_NORTH, $step);
vendor/pocketmine/math/src/Vector3.php:		return $this->getSide(self::SIDE_SOUTH, $step);
vendor/pocketmine/math/src/Vector3.php:		return $this->getSide(self::SIDE_WEST, $step);
vendor/pocketmine/math/src/Vector3.php:		return $this->getSide(self::SIDE_EAST, $step);
vendor/pocketmine/math/src/Vector3.php:		return new Vector3($this->x, $this->y, $this->z);
vendor/pocketmine/math/src/Vector3.php:	 * @param int $side 0-5 one of the Vector3::SIDE_* constants
vendor/pocketmine/math/src/Vector3.php:		return sqrt($this->distanceSquared($pos));
vendor/pocketmine/math/src/Vector3.php:		return (($this->x - $pos->x) ** 2) + (($this->y - $pos->y) ** 2) + (($this->z - $pos->z) ** 2);
vendor/pocketmine/math/src/Vector3.php:			return $this->maxPlainDistance($x->x, $x->z);
vendor/pocketmine/math/src/Vector3.php:			return $this->maxPlainDistance($x->x, $x->y);
vendor/pocketmine/math/src/Vector3.php:			return max(abs($this->x - $x), abs($this->z - $z));
vendor/pocketmine/math/src/Vector3.php:		return sqrt($this->lengthSquared());
vendor/pocketmine/math/src/Vector3.php:		return $this->x * $this->x + $this->y * $this->y + $this->z * $this->z;
vendor/pocketmine/math/src/Vector3.php:		$len = $this->lengthSquared();
vendor/pocketmine/math/src/Vector3.php:			return $this->divide(sqrt($len));
vendor/pocketmine/math/src/Vector3.php:		return $this->x * $v->x + $this->y * $v->y + $this->z * $v->z;
vendor/pocketmine/math/src/Vector3.php:			$this->y * $v->z - $this->z * $v->y,
vendor/pocketmine/math/src/Vector3.php:			$this->z * $v->x - $this->x * $v->z,
vendor/pocketmine/math/src/Vector3.php:			$this->x * $v->y - $this->y * $v->x
vendor/pocketmine/math/src/Vector3.php:		return $this->x == $v->x and $this->y == $v->y and $this->z == $v->z;
vendor/pocketmine/math/src/Vector3.php:		$xDiff = $v->x - $this->x;
vendor/pocketmine/math/src/Vector3.php:		$yDiff = $v->y - $this->y;
vendor/pocketmine/math/src/Vector3.php:		$zDiff = $v->z - $this->z;
vendor/pocketmine/math/src/Vector3.php:		$f = ($x - $this->x) / $xDiff;
vendor/pocketmine/math/src/Vector3.php:			return new Vector3($x, $this->y + $yDiff * $f, $this->z + $zDiff * $f);
vendor/pocketmine/math/src/Vector3.php:		$xDiff = $v->x - $this->x;
vendor/pocketmine/math/src/Vector3.php:		$yDiff = $v->y - $this->y;
vendor/pocketmine/math/src/Vector3.php:		$zDiff = $v->z - $this->z;
vendor/pocketmine/math/src/Vector3.php:		$f = ($y - $this->y) / $yDiff;
vendor/pocketmine/math/src/Vector3.php:			return new Vector3($this->x + $xDiff * $f, $y, $this->z + $zDiff * $f);
vendor/pocketmine/math/src/Vector3.php:		$xDiff = $v->x - $this->x;
vendor/pocketmine/math/src/Vector3.php:		$yDiff = $v->y - $this->y;
vendor/pocketmine/math/src/Vector3.php:		$zDiff = $v->z - $this->z;
vendor/pocketmine/math/src/Vector3.php:		$f = ($z - $this->z) / $zDiff;
vendor/pocketmine/math/src/Vector3.php:			return new Vector3($this->x + $xDiff * $f, $this->y + $yDiff * $f, $z);
vendor/pocketmine/math/src/Vector3.php:		$this->x = $x;
vendor/pocketmine/math/src/Vector3.php:		$this->y = $y;
vendor/pocketmine/math/src/Vector3.php:		$this->z = $z;
vendor/pocketmine/math/src/Vector3.php:		return "Vector3(x=" . $this->x . ",y=" . $this->y . ",z=" . $this->z . ")";
vendor/pocketmine/math/src/VoxelRayTrace.php:	 * @phpstan-return \Generator<int, Vector3, void, void>
vendor/pocketmine/math/src/VoxelRayTrace.php:		return self::betweenPoints($start, $start->add($directionVector->multiply($maxDistance)));
vendor/pocketmine/math/src/VoxelRayTrace.php:	 * @phpstan-return \Generator<int, Vector3, void, void>
vendor/pocketmine/math/src/VoxelRayTrace.php:		$currentBlock = $start->floor();
vendor/pocketmine/math/src/VoxelRayTrace.php:		$directionVector = $end->subtract($start)->normalize();
vendor/pocketmine/math/src/VoxelRayTrace.php:		if($directionVector->lengthSquared() <= 0){
vendor/pocketmine/math/src/VoxelRayTrace.php:		$radius = $start->distance($end);
vendor/pocketmine/math/src/VoxelRayTrace.php:		$stepX = $directionVector->x <=> 0;
vendor/pocketmine/math/src/VoxelRayTrace.php:		$stepY = $directionVector->y <=> 0;
vendor/pocketmine/math/src/VoxelRayTrace.php:		$stepZ = $directionVector->z <=> 0;
vendor/pocketmine/math/src/VoxelRayTrace.php:		$tMaxX = self::rayTraceDistanceToBoundary($start->x, $directionVector->x);
vendor/pocketmine/math/src/VoxelRayTrace.php:		$tMaxY = self::rayTraceDistanceToBoundary($start->y, $directionVector->y);
vendor/pocketmine/math/src/VoxelRayTrace.php:		$tMaxZ = self::rayTraceDistanceToBoundary($start->z, $directionVector->z);
vendor/pocketmine/math/src/VoxelRayTrace.php:		$tDeltaX = $directionVector->x == 0 ? 0 : $stepX / $directionVector->x;
vendor/pocketmine/math/src/VoxelRayTrace.php:		$tDeltaY = $directionVector->y == 0 ? 0 : $stepY / $directionVector->y;
vendor/pocketmine/math/src/VoxelRayTrace.php:		$tDeltaZ = $directionVector->z == 0 ? 0 : $stepZ / $directionVector->z;
vendor/pocketmine/math/src/VoxelRayTrace.php:			// tMaxX stores the t-value at which we cross a cube boundary along the
vendor/pocketmine/math/src/VoxelRayTrace.php:				$currentBlock->x += $stepX;
vendor/pocketmine/math/src/VoxelRayTrace.php:				$currentBlock->y += $stepY;
vendor/pocketmine/math/src/VoxelRayTrace.php:				$currentBlock->z += $stepZ;
vendor/pocketmine/math/src/VoxelRayTrace.php:			$s = -$s;
vendor/pocketmine/math/src/VoxelRayTrace.php:			$ds = -$ds;
vendor/pocketmine/math/src/VoxelRayTrace.php:		return (1 - ($s - floor($s))) / $ds;
vendor/pocketmine/math/src/RayTraceResult.php:		$this->bb = $bb;
vendor/pocketmine/math/src/RayTraceResult.php:		$this->hitFace = $hitFace;
vendor/pocketmine/math/src/RayTraceResult.php:		$this->hitVector = $hitVector;
vendor/pocketmine/math/src/RayTraceResult.php:		return $this->bb;
vendor/pocketmine/math/src/RayTraceResult.php:		return $this->hitFace;
vendor/pocketmine/math/src/RayTraceResult.php:		return $this->hitVector;
vendor/pocketmine/math/src/Matrix.php: * @phpstan-implements \ArrayAccess<int, float[]>
vendor/pocketmine/math/src/Matrix.php:		return isset($this->matrix[(int) $offset]);
vendor/pocketmine/math/src/Matrix.php:		return $this->matrix[(int) $offset];
vendor/pocketmine/math/src/Matrix.php:		$this->matrix[(int) $offset] = $value;
vendor/pocketmine/math/src/Matrix.php:		unset($this->matrix[(int) $offset]);
vendor/pocketmine/math/src/Matrix.php:		$this->rows = max(1, (int) $rows);
vendor/pocketmine/math/src/Matrix.php:		$this->columns = max(1, (int) $columns);
vendor/pocketmine/math/src/Matrix.php:		$this->set($set);
vendor/pocketmine/math/src/Matrix.php:		for($r = 0; $r < $this->rows; ++$r){
vendor/pocketmine/math/src/Matrix.php:			$this->matrix[$r] = [];
vendor/pocketmine/math/src/Matrix.php:			for($c = 0; $c < $this->columns; ++$c){
vendor/pocketmine/math/src/Matrix.php:				$this->matrix[$r][$c] = $m[$r][$c] ?? 0;
vendor/pocketmine/math/src/Matrix.php:		return $this->rows;
vendor/pocketmine/math/src/Matrix.php:		return $this->columns;
vendor/pocketmine/math/src/Matrix.php:		if($row > $this->rows or $row < 0 or $column > $this->columns or $column < 0){
vendor/pocketmine/math/src/Matrix.php:		$this->matrix[(int) $row][(int) $column] = $value;
vendor/pocketmine/math/src/Matrix.php:		if($row > $this->rows or $row < 0 or $column > $this->columns or $column < 0){
vendor/pocketmine/math/src/Matrix.php:		return $this->matrix[(int) $row][(int) $column];
vendor/pocketmine/math/src/Matrix.php:		return $this->rows === $this->columns;
vendor/pocketmine/math/src/Matrix.php:		if($this->rows !== $matrix->getRows() or $this->columns !== $matrix->getColumns()){
vendor/pocketmine/math/src/Matrix.php:		$result = new Matrix($this->rows, $this->columns);
vendor/pocketmine/math/src/Matrix.php:		for($r = 0; $r < $this->rows; ++$r){
vendor/pocketmine/math/src/Matrix.php:			for($c = 0; $c < $this->columns; ++$c){
vendor/pocketmine/math/src/Matrix.php:				$element = $matrix->getElement($r, $c);
vendor/pocketmine/math/src/Matrix.php:				$result->setElement($r, $c, $this->matrix[$r][$c] + $element);
vendor/pocketmine/math/src/Matrix.php:		if($this->rows !== $matrix->getRows() or $this->columns !== $matrix->getColumns()){
vendor/pocketmine/math/src/Matrix.php:		for($r = 0; $r < $this->rows; ++$r){
vendor/pocketmine/math/src/Matrix.php:			for($c = 0; $c < $this->columns; ++$c){
vendor/pocketmine/math/src/Matrix.php:				$element = $matrix->getElement($r, $c);
vendor/pocketmine/math/src/Matrix.php:				$result->setElement($r, $c, $this->matrix[$r][$c] - $element);
vendor/pocketmine/math/src/Matrix.php:		for($r = 0; $r < $this->rows; ++$r){
vendor/pocketmine/math/src/Matrix.php:			for($c = 0; $c < $this->columns; ++$c){
vendor/pocketmine/math/src/Matrix.php:				$result->setElement($r, $c, $this->matrix[$r][$c] * $number);
vendor/pocketmine/math/src/Matrix.php:		for($r = 0; $r < $this->rows; ++$r){
vendor/pocketmine/math/src/Matrix.php:			for($c = 0; $c < $this->columns; ++$c){
vendor/pocketmine/math/src/Matrix.php:				$result->setElement($r, $c, $this->matrix[$r][$c] / $number);
vendor/pocketmine/math/src/Matrix.php:		$result = new Matrix($this->columns, $this->rows);
vendor/pocketmine/math/src/Matrix.php:		for($r = 0; $r < $this->rows; ++$r){
vendor/pocketmine/math/src/Matrix.php:			for($c = 0; $c < $this->columns; ++$c){
vendor/pocketmine/math/src/Matrix.php:				$result->setElement($c, $r, $this->matrix[$r][$c]);
vendor/pocketmine/math/src/Matrix.php:		if($this->columns !== $matrix->getRows()){
vendor/pocketmine/math/src/Matrix.php:		$c = $matrix->getColumns();
vendor/pocketmine/math/src/Matrix.php:		$result = new Matrix($this->rows, $c);
vendor/pocketmine/math/src/Matrix.php:		for($i = 0; $i < $this->rows; ++$i){
vendor/pocketmine/math/src/Matrix.php:				for($k = 0; $k < $this->columns; ++$k){
vendor/pocketmine/math/src/Matrix.php:					$element = $matrix->getElement($k, $j);
vendor/pocketmine/math/src/Matrix.php:					$sum += $this->matrix[$i][$k] * $element;
vendor/pocketmine/math/src/Matrix.php:				$result->setElement($i, $j, $sum);
vendor/pocketmine/math/src/Matrix.php:		if($this->isSquare() !== true){
vendor/pocketmine/math/src/Matrix.php:		switch($this->rows){
vendor/pocketmine/math/src/Matrix.php:				return $this->matrix[0][0];
vendor/pocketmine/math/src/Matrix.php:				return $this->matrix[0][0] * $this->matrix[1][1] - $this->matrix[0][1] * $this->matrix[1][0];
vendor/pocketmine/math/src/Matrix.php:				return $this->matrix[0][0] * $this->matrix[1][1] * $this->matrix[2][2] + $this->matrix[0][1] * $this->matrix[1][2] * $this->matrix[2][0] + $this->matrix[0][2] * $this->matrix[1][0] * $this->matrix[2][1] - $this->matrix[2][0] * $this->matrix[1][1] * $this->matrix[0][2] - $this->matrix[2][1] * $this->matrix[1][2] * $this->matrix[0][0] - $this->matrix[2][2] * $this->matrix[1][0] * $this->matrix[0][1];
vendor/pocketmine/math/src/Matrix.php:		for($r = 0; $r < $this->rows; ++$r){
vendor/pocketmine/math/src/Matrix.php:			$s .= implode(",", $this->matrix[$r]) . ";";
vendor/pocketmine/math/src/Matrix.php:		return "Matrix({$this->rows}x{$this->columns};" . substr($s, 0, -1) . ")";
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->setBounds($minX, $minY, $minZ, $maxX, $maxY, $maxZ);
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minX = $minX;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minY = $minY;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minZ = $minZ;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxX = $maxX;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxY = $maxY;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxZ = $maxZ;
vendor/pocketmine/math/src/AxisAlignedBB.php:		return $this->setBounds($bb->minX, $bb->minY, $bb->minZ, $bb->maxX, $bb->maxY, $bb->maxZ);
vendor/pocketmine/math/src/AxisAlignedBB.php:		$minX = $this->minX;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$minY = $this->minY;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$minZ = $this->minZ;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$maxX = $this->maxX;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$maxY = $this->maxY;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$maxZ = $this->maxZ;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minX -= $x;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minY -= $y;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minZ -= $z;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxX += $x;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxY += $y;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxZ += $z;
vendor/pocketmine/math/src/AxisAlignedBB.php:		return (clone $this)->expand($x, $y, $z);
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minX += $x;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minY += $y;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minZ += $z;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxX += $x;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxY += $y;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxZ += $z;
vendor/pocketmine/math/src/AxisAlignedBB.php:		return (clone $this)->offset($x, $y, $z);
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minX += $x;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minY += $y;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->minZ += $z;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxX -= $x;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxY -= $y;
vendor/pocketmine/math/src/AxisAlignedBB.php:		$this->maxZ -= $z;
vendor/pocketmine/math/src/AxisAlignedBB.php:		return (clone $this)->contract($x, $y, $z);
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($bb->maxY <= $this->minY or $bb->minY >= $this->maxY){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($bb->maxZ <= $this->minZ or $bb->minZ >= $this->maxZ){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($x > 0 and $bb->maxX <= $this->minX){
vendor/pocketmine/math/src/AxisAlignedBB.php:			$x1 = $this->minX - $bb->maxX;
vendor/pocketmine/math/src/AxisAlignedBB.php:		}elseif($x < 0 and $bb->minX >= $this->maxX){
vendor/pocketmine/math/src/AxisAlignedBB.php:			$x2 = $this->maxX - $bb->minX;
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($bb->maxX <= $this->minX or $bb->minX >= $this->maxX){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($bb->maxZ <= $this->minZ or $bb->minZ >= $this->maxZ){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($y > 0 and $bb->maxY <= $this->minY){
vendor/pocketmine/math/src/AxisAlignedBB.php:			$y1 = $this->minY - $bb->maxY;
vendor/pocketmine/math/src/AxisAlignedBB.php:		}elseif($y < 0 and $bb->minY >= $this->maxY){
vendor/pocketmine/math/src/AxisAlignedBB.php:			$y2 = $this->maxY - $bb->minY;
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($bb->maxX <= $this->minX or $bb->minX >= $this->maxX){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($bb->maxY <= $this->minY or $bb->minY >= $this->maxY){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($z > 0 and $bb->maxZ <= $this->minZ){
vendor/pocketmine/math/src/AxisAlignedBB.php:			$z1 = $this->minZ - $bb->maxZ;
vendor/pocketmine/math/src/AxisAlignedBB.php:		}elseif($z < 0 and $bb->minZ >= $this->maxZ){
vendor/pocketmine/math/src/AxisAlignedBB.php:			$z2 = $this->maxZ - $bb->minZ;
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($bb->maxX - $this->minX > $epsilon and $this->maxX - $bb->minX > $epsilon){
vendor/pocketmine/math/src/AxisAlignedBB.php:			if($bb->maxY - $this->minY > $epsilon and $this->maxY - $bb->minY > $epsilon){
vendor/pocketmine/math/src/AxisAlignedBB.php:				return $bb->maxZ - $this->minZ > $epsilon and $this->maxZ - $bb->minZ > $epsilon;
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($vector->x <= $this->minX or $vector->x >= $this->maxX){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($vector->y <= $this->minY or $vector->y >= $this->maxY){
vendor/pocketmine/math/src/AxisAlignedBB.php:		return $vector->z > $this->minZ and $vector->z < $this->maxZ;
vendor/pocketmine/math/src/AxisAlignedBB.php:		return ($this->maxX - $this->minX + $this->maxY - $this->minY + $this->maxZ - $this->minZ) / 3;
vendor/pocketmine/math/src/AxisAlignedBB.php:		return $vector->y >= $this->minY and $vector->y <= $this->maxY and $vector->z >= $this->minZ and $vector->z <= $this->maxZ;
vendor/pocketmine/math/src/AxisAlignedBB.php:		return $vector->x >= $this->minX and $vector->x <= $this->maxX and $vector->z >= $this->minZ and $vector->z <= $this->maxZ;
vendor/pocketmine/math/src/AxisAlignedBB.php:		return $vector->x >= $this->minX and $vector->x <= $this->maxX and $vector->y >= $this->minY and $vector->y <= $this->maxY;
vendor/pocketmine/math/src/AxisAlignedBB.php:	 * Performs a ray-trace and calculates the point on the AABB's edge nearest the start position that the ray-trace
vendor/pocketmine/math/src/AxisAlignedBB.php:		$v1 = $pos1->getIntermediateWithXValue($pos2, $this->minX);
vendor/pocketmine/math/src/AxisAlignedBB.php:		$v2 = $pos1->getIntermediateWithXValue($pos2, $this->maxX);
vendor/pocketmine/math/src/AxisAlignedBB.php:		$v3 = $pos1->getIntermediateWithYValue($pos2, $this->minY);
vendor/pocketmine/math/src/AxisAlignedBB.php:		$v4 = $pos1->getIntermediateWithYValue($pos2, $this->maxY);
vendor/pocketmine/math/src/AxisAlignedBB.php:		$v5 = $pos1->getIntermediateWithZValue($pos2, $this->minZ);
vendor/pocketmine/math/src/AxisAlignedBB.php:		$v6 = $pos1->getIntermediateWithZValue($pos2, $this->maxZ);
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($v1 !== null and !$this->isVectorInYZ($v1)){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($v2 !== null and !$this->isVectorInYZ($v2)){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($v3 !== null and !$this->isVectorInXZ($v3)){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($v4 !== null and !$this->isVectorInXZ($v4)){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($v5 !== null and !$this->isVectorInXY($v5)){
vendor/pocketmine/math/src/AxisAlignedBB.php:		if($v6 !== null and !$this->isVectorInXY($v6)){
vendor/pocketmine/math/src/AxisAlignedBB.php:			if($v !== null and ($d = $pos1->distanceSquared($v)) < $distance){
vendor/pocketmine/math/src/AxisAlignedBB.php:		$f = -1;
vendor/pocketmine/math/src/AxisAlignedBB.php:		return "AxisAlignedBB({$this->minX}, {$this->minY}, {$this->minZ}, {$this->maxX}, {$this->maxY}, {$this->maxZ})";
vendor/pocketmine/math/src/Vector2.php:		$this->x = $x;
vendor/pocketmine/math/src/Vector2.php:		$this->y = $y;
vendor/pocketmine/math/src/Vector2.php:		return $this->x;
vendor/pocketmine/math/src/Vector2.php:		return $this->y;
vendor/pocketmine/math/src/Vector2.php:		return (int) floor($this->x);
vendor/pocketmine/math/src/Vector2.php:		return (int) floor($this->y);
vendor/pocketmine/math/src/Vector2.php:			return $this->add($x->x, $x->y);
vendor/pocketmine/math/src/Vector2.php:			return new Vector2($this->x + $x, $this->y + $y);
vendor/pocketmine/math/src/Vector2.php:			return $this->add(-$x->x, -$x->y);
vendor/pocketmine/math/src/Vector2.php:			return $this->add(-$x, -$y);
vendor/pocketmine/math/src/Vector2.php:		return new Vector2((int) ceil($this->x), (int) ceil($this->y));
vendor/pocketmine/math/src/Vector2.php:		return new Vector2((int) floor($this->x), (int) floor($this->y));
vendor/pocketmine/math/src/Vector2.php:		return new Vector2(round($this->x), round($this->y));
vendor/pocketmine/math/src/Vector2.php:		return new Vector2(abs($this->x), abs($this->y));
vendor/pocketmine/math/src/Vector2.php:		return new Vector2($this->x * $number, $this->y * $number);
vendor/pocketmine/math/src/Vector2.php:		return new Vector2($this->x / $number, $this->y / $number);
vendor/pocketmine/math/src/Vector2.php:			return sqrt($this->distanceSquared($x->x, $x->y));
vendor/pocketmine/math/src/Vector2.php:			return sqrt($this->distanceSquared($x, $y));
vendor/pocketmine/math/src/Vector2.php:			return $this->distanceSquared($x->x, $x->y);
vendor/pocketmine/math/src/Vector2.php:			return (($this->x - $x) ** 2) + (($this->y - $y) ** 2);
vendor/pocketmine/math/src/Vector2.php:		return sqrt($this->lengthSquared());
vendor/pocketmine/math/src/Vector2.php:		return $this->x * $this->x + $this->y * $this->y;
vendor/pocketmine/math/src/Vector2.php:		$len = $this->lengthSquared();
vendor/pocketmine/math/src/Vector2.php:			return $this->divide(sqrt($len));
vendor/pocketmine/math/src/Vector2.php:		return $this->x * $v->x + $this->y * $v->y;
vendor/pocketmine/math/src/Vector2.php:		return "Vector2(x=" . $this->x . ",y=" . $this->y . ")";
vendor/pocketmine/math/phpstan.neon.dist:		- src
vendor/pocketmine/math/LICENSE:       of the Library that is interface-compatible with the Linked
vendor/pocketmine/math/.github/workflows/ci.yml:    runs-on: ubuntu-latest
vendor/pocketmine/math/.github/workflows/ci.yml:    - uses: actions/checkout@v2
vendor/pocketmine/math/.github/workflows/ci.yml:    - name: Setup PHP
vendor/pocketmine/math/.github/workflows/ci.yml:      uses: shivammathur/setup-php@2.9.0
vendor/pocketmine/math/.github/workflows/ci.yml:        php-version: ${{ matrix.php }}
vendor/pocketmine/math/.github/workflows/ci.yml:    - name: Cache Composer packages
vendor/pocketmine/math/.github/workflows/ci.yml:      id: composer-cache
vendor/pocketmine/math/.github/workflows/ci.yml:        key: "php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}"
vendor/pocketmine/math/.github/workflows/ci.yml:        restore-keys: "php-${{ matrix.php }}-composer-"
vendor/pocketmine/math/.github/workflows/ci.yml:    - name: Install dependencies
vendor/pocketmine/math/.github/workflows/ci.yml:      run: composer install --prefer-dist --no-interaction
vendor/pocketmine/math/.github/workflows/ci.yml:    - name: Run PHPStan
vendor/pocketmine/math/.github/workflows/ci.yml:      run: ./vendor/bin/phpstan analyze --no-progress
vendor/pocketmine/callback-validator/.editorconfig:charset = utf-8
vendor/pocketmine/callback-validator/README.md:This is a fork of [daverandom/callback-validator](https://github.com/DaveRandom/CallbackValidator) used by PocketMine-MP. There are no significant changes from the upstream repository apart from more test versions, updated dependencies, and tagged releases for packages to use.
vendor/pocketmine/callback-validator/README.md:Since the upstream version has no release, it affects the composer stability of packages that use it. This caused problems for packages depending on [`pocketmine/pocketmine-mp`](https://github.com/pmmp/PocketMine-MP) because they could not receive its latest versions.
vendor/pocketmine/callback-validator/README.md:    function (A $a, B $b, $c) {}, // false - return type does not match
vendor/pocketmine/callback-validator/README.md:    function ($a, $b, $c): ?string {}, // true - arguments are contravariant
vendor/pocketmine/callback-validator/README.md:    function (A $a, B $b): ?string {}, // true - extra args don't cause errors
vendor/pocketmine/callback-validator/README.md:    function (A $a, B $b, $c, $d): ?string {}, // false - Insufficient args cause an error
vendor/pocketmine/callback-validator/README.md:    function (A $a, B $b, $c): string {}, // true - return types are covariant
vendor/pocketmine/callback-validator/README.md:        if ($type->isSatisfiedBy($test)) {
vendor/pocketmine/callback-validator/README.md:- Lots more tests
vendor/pocketmine/callback-validator/README.md:- Explain (text explanation of why callback does not validate)
vendor/pocketmine/callback-validator/composer.json:  "name": "pocketmine/callback-validator",
vendor/pocketmine/callback-validator/composer.json:  "description": "Fork of daverandom/callback-validator - Tools for validating callback signatures",
vendor/pocketmine/callback-validator/composer.json:    "ext-reflection": "*"
vendor/pocketmine/callback-validator/composer.json:  "require-dev": {
vendor/pocketmine/callback-validator/composer.json:    "phpstan/extension-installer": "^1.0",
vendor/pocketmine/callback-validator/composer.json:    "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/pocketmine/callback-validator/composer.json:    "daverandom/callback-validator": "*"
vendor/pocketmine/callback-validator/composer.json:    "psr-4": {
vendor/pocketmine/callback-validator/composer.json:  "autoload-dev": {
vendor/pocketmine/callback-validator/composer.json:    "psr-4": {
vendor/pocketmine/callback-validator/src/ParameterType.php:     * Usually this isn't a good idea, it's not type-safe, do not use unless you understand what you are doing!
vendor/pocketmine/callback-validator/src/ParameterType.php:        $parameterName = $reflection->getName();
vendor/pocketmine/callback-validator/src/ParameterType.php:        if ($reflection->isPassedByReference()) {
vendor/pocketmine/callback-validator/src/ParameterType.php:        if ($reflection->isVariadic()) {
vendor/pocketmine/callback-validator/src/ParameterType.php:        if ($reflection->isOptional()) {
vendor/pocketmine/callback-validator/src/ParameterType.php:        $typeReflection = $reflection->getType();
vendor/pocketmine/callback-validator/src/ParameterType.php:            $typeName = $typeReflection->getName();
vendor/pocketmine/callback-validator/src/ParameterType.php:            if ($typeReflection->allowsNull()) {
vendor/pocketmine/callback-validator/src/ParameterType.php:        $this->parameterName = (string)$parameterName;
vendor/pocketmine/callback-validator/src/ParameterType.php:        $this->isOptional = (bool)($flags & self::OPTIONAL);
vendor/pocketmine/callback-validator/src/ParameterType.php:        $this->isVariadic = (bool)($flags & self::VARIADIC);
vendor/pocketmine/callback-validator/src/ParameterType.php:        if ($this->typeName !== null) {
vendor/pocketmine/callback-validator/src/ParameterType.php:            if ($this->isNullable) {
vendor/pocketmine/callback-validator/src/ParameterType.php:            $string .= $this->typeName . ' ';
vendor/pocketmine/callback-validator/src/ParameterType.php:        if ($this->isByReference) {
vendor/pocketmine/callback-validator/src/ParameterType.php:        if ($this->isVariadic) {
vendor/pocketmine/callback-validator/src/ParameterType.php:        return $string . '$' . $this->parameterName;
vendor/pocketmine/callback-validator/src/CallbackType.php:     * a callable type-hint or this behaviour will break!
vendor/pocketmine/callback-validator/src/CallbackType.php:        foreach ($reflection->getParameters() as $parameterReflection) {
vendor/pocketmine/callback-validator/src/CallbackType.php:        $this->returnType = $returnType;
vendor/pocketmine/callback-validator/src/CallbackType.php:        $this->parameters = $parameters;
vendor/pocketmine/callback-validator/src/CallbackType.php:        $byRef = $candidate->returnsReference();
vendor/pocketmine/callback-validator/src/CallbackType.php:        $returnType = $candidate->getReturnType();
vendor/pocketmine/callback-validator/src/CallbackType.php:            $typeName = $returnType->getName();
vendor/pocketmine/callback-validator/src/CallbackType.php:            $nullable = $returnType->allowsNull();
vendor/pocketmine/callback-validator/src/CallbackType.php:        if (!$this->returnType->isSatisfiedBy($typeName, $nullable, $byRef)) {
vendor/pocketmine/callback-validator/src/CallbackType.php:        foreach ($candidate->getParameters() as $position => $parameter) {
vendor/pocketmine/callback-validator/src/CallbackType.php:            $byRef = $parameter->isPassedByReference();
vendor/pocketmine/callback-validator/src/CallbackType.php:            if (($type = $parameter->getType()) instanceof \ReflectionNamedType) {
vendor/pocketmine/callback-validator/src/CallbackType.php:                $typeName = $type->getName();
vendor/pocketmine/callback-validator/src/CallbackType.php:                $nullable = $type->allowsNull();
vendor/pocketmine/callback-validator/src/CallbackType.php:            if (isset($this->parameters[$position])) {
vendor/pocketmine/callback-validator/src/CallbackType.php:                if (!$this->parameters[$position]->isSatisfiedBy($typeName, $nullable, $byRef)) {
vendor/pocketmine/callback-validator/src/CallbackType.php:                $last = $this->parameters[$position];
vendor/pocketmine/callback-validator/src/CallbackType.php:            if (!$parameter->isOptional() && !$parameter->isVariadic()) {
vendor/pocketmine/callback-validator/src/CallbackType.php:            if ($last !== null && $last->isVariadic && !$last->isSatisfiedBy($typeName, $nullable, $byRef)) {
vendor/pocketmine/callback-validator/src/CallbackType.php:        if ($this->returnType->isByReference) {
vendor/pocketmine/callback-validator/src/CallbackType.php:        $l = count($this->parameters) - 1;
vendor/pocketmine/callback-validator/src/CallbackType.php:            $string .= $this->parameters[$i];
vendor/pocketmine/callback-validator/src/CallbackType.php:            if ($o === 0 && !($this->parameters[$i + 1]->isOptional)) {
vendor/pocketmine/callback-validator/src/CallbackType.php:        if (isset($this->parameters[$l])) {
vendor/pocketmine/callback-validator/src/CallbackType.php:            $string .= $this->parameters[$i] . ' ';
vendor/pocketmine/callback-validator/src/CallbackType.php:        if ($this->returnType->typeName !== null) {
vendor/pocketmine/callback-validator/src/CallbackType.php:            $string .= ' : ' . $this->returnType;
vendor/pocketmine/callback-validator/src/MatchTester.php:     * Lookup table of all built-in types
vendor/pocketmine/callback-validator/src/MatchTester.php:        // If the super type is built-in, check whether casting rules can succeed
vendor/pocketmine/callback-validator/src/MatchTester.php:        // We now know the super type is not built-in and there's no string match, sub type must not be built-in
vendor/pocketmine/callback-validator/src/Type.php:        $this->typeName = $typeName !== null
vendor/pocketmine/callback-validator/src/Type.php:        $this->isNullable = (bool)($flags & self::NULLABLE);
vendor/pocketmine/callback-validator/src/Type.php:        $this->isByReference = (bool)($flags & self::REFERENCE);
vendor/pocketmine/callback-validator/src/Type.php:        $this->isWeak = (bool)($flags & self::WEAK);
vendor/pocketmine/callback-validator/src/Type.php:        $this->allowsCovariance = (bool)$allowsCovariance;
vendor/pocketmine/callback-validator/src/Type.php:        $this->allowsContravariance = (bool)$allowsContravariance;
vendor/pocketmine/callback-validator/src/Type.php:     * Whether the type will be satisfied by the specified type name, nullability and by-reference combination
vendor/pocketmine/callback-validator/src/Type.php:        // By-ref must always be the same
vendor/pocketmine/callback-validator/src/Type.php:        if ($byReference xor $this->isByReference) {
vendor/pocketmine/callback-validator/src/Type.php:        if ($typeName === $this->typeName && $nullable === $this->isNullable) {
vendor/pocketmine/callback-validator/src/Type.php:        if ($this->allowsCovariance
vendor/pocketmine/callback-validator/src/Type.php:            && MatchTester::isMatch($this->typeName, $this->isNullable, $typeName, $nullable, $this->isWeak)) {
vendor/pocketmine/callback-validator/src/Type.php:        if ($this->allowsContravariance
vendor/pocketmine/callback-validator/src/Type.php:            && MatchTester::isMatch($typeName, $nullable, $this->typeName, $this->isNullable, $this->isWeak)) {
vendor/pocketmine/callback-validator/src/Type.php:        return $this->isWeak
vendor/pocketmine/callback-validator/src/Type.php:            && $nullable === $this->isNullable
vendor/pocketmine/callback-validator/src/Type.php:	    && $this->typeName !== null
vendor/pocketmine/callback-validator/src/Type.php:	    && MatchTester::isWeakScalarMatch($typeName, $this->typeName);
vendor/pocketmine/callback-validator/src/ReturnType.php:     * Usually this isn't a good idea, it's not type-safe, do not use unless you understand what you are doing!
vendor/pocketmine/callback-validator/src/ReturnType.php:        if ($reflection->returnsReference()) {
vendor/pocketmine/callback-validator/src/ReturnType.php:        $typeReflection = $reflection->getReturnType();
vendor/pocketmine/callback-validator/src/ReturnType.php:            $typeName = $typeReflection->getName();
vendor/pocketmine/callback-validator/src/ReturnType.php:            if ($typeReflection->allowsNull()) {
vendor/pocketmine/callback-validator/src/ReturnType.php:        return $this->isNullable && $this->typeName !== null
vendor/pocketmine/callback-validator/src/ReturnType.php:            ? '?' . $this->typeName
vendor/pocketmine/callback-validator/src/ReturnType.php:            : (string)$this->typeName;
vendor/pocketmine/callback-validator/phpstan.neon.dist:		- src
vendor/pocketmine/callback-validator/phpunit.xml:<?xml version="1.0" encoding="UTF-8"?>
vendor/pocketmine/callback-validator/phpunit.xml:<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
vendor/pocketmine/callback-validator/.scrutinizer.yml:        - 'tests/*'
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, ClassImplementingIteratorAggregate::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, ClassImplementingIteratorAggregate::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, ClassImplementingIteratorAggregate::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, ClassImplementingIteratorAggregate::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, ClassImplementingIteratorAggregate::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, ClassImplementingIteratorAggregate::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, ClassImplementingIteratorAggregate::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, ClassImplementingIteratorAggregate::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::ARRAY, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::ARRAY, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::ARRAY, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::ARRAY, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::ARRAY, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::ARRAY, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::ARRAY, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::ARRAY, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, ClassImplementingNothing::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, ClassImplementingNothing::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, ClassImplementingNothing::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, ClassImplementingNothing::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, ClassImplementingNothing::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, ClassImplementingNothing::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, ClassImplementingNothing::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, ClassImplementingNothing::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, ClassImplementingIteratorAggregate::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, false, ClassImplementingToString::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, ClassImplementingToString::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, ClassImplementingToString::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, ClassImplementingToString::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, ClassImplementingToString::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, ClassImplementingToString::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, ClassImplementingToString::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, ClassImplementingNothing::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, ClassImplementingNothing::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, ClassImplementingNothing::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, ClassImplementingNothing::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, ClassImplementingNothing::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, ClassImplementingNothing::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, ClassImplementingNothing::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, ClassImplementingNothing::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, ClassImplementingIteratorAggregate::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, ClassImplementingInvoke::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, ClassImplementingInvoke::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, ClassImplementingInvoke::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, ClassImplementingInvoke::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, ClassImplementingInvoke::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, ClassImplementingInvoke::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, ClassImplementingInvoke::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, \Closure::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, \Closure::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, \Closure::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, \Closure::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, \Closure::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, \Closure::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, \Closure::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, \Closure::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, ClassImplementingNothing::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, ClassImplementingNothing::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, ClassImplementingNothing::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, ClassImplementingNothing::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, ClassImplementingNothing::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, ClassImplementingNothing::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, ClassImplementingNothing::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, ClassImplementingNothing::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::ARRAY, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::ARRAY, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::ARRAY, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::ARRAY, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::CALLABLE, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::CALLABLE, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::CALLABLE, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::CALLABLE, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::ITERABLE, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::ITERABLE, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::ITERABLE, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::ITERABLE, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, ClassImplementingNothing::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, ClassImplementingNothing::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, ClassImplementingNothing::class, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, ClassImplementingNothing::class, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::ARRAY, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::ARRAY, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::ARRAY, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::ARRAY, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::CALLABLE, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::CALLABLE, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::CALLABLE, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::CALLABLE, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::ITERABLE, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::ITERABLE, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::ITERABLE, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::ITERABLE, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, ClassImplementingNothing::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, ClassImplementingNothing::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, ClassImplementingNothing::class, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, ClassImplementingNothing::class, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::VOID, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::VOID, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::VOID, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::VOID, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::VOID, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::VOID, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::VOID, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::VOID, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::STRING, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::INT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::FLOAT, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::BOOL, false, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::STRING, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::INT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::FLOAT, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::BOOL, true, true));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::STRING, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::FLOAT, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::BOOL, false, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, false, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, false, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, false, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, false, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, false, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, false, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, false, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, false, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::STRING, true, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::INT, true, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::FLOAT, true, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertTrue(MatchTester::isMatch(BuiltInTypes::BOOL, true, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ARRAY, true, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::VOID, true, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::CALLABLE, true, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::STRING, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::INT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::FLOAT, true, false));
vendor/pocketmine/callback-validator/tests/MatchTesterTest.php:        $this->assertFalse(MatchTester::isMatch(BuiltInTypes::ITERABLE, true, BuiltInTypes::BOOL, true, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(null, 0, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(null, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isByReference);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsCovariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsContravariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(null, Type::NULLABLE, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(null, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isByReference);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsCovariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsContravariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(null, Type::REFERENCE, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(null, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isByReference);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsCovariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsContravariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(null, Type::WEAK, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(null, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isByReference);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsCovariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsContravariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(null, Type::NULLABLE | Type::REFERENCE | Type::WEAK, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(null, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isByReference);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsCovariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsContravariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(null, 0, true, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(null, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isByReference);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->allowsCovariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsContravariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(null, 0, false, true);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(null, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isByReference);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsCovariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->allowsContravariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(Type::class, 0, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(Type::class, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isByReference);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsCovariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsContravariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(1, 0, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame('1', $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isByReference);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsCovariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->allowsContravariance);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(Type::class, 0, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(Type::class, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isByReference);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isSatisfiedBy(Type::class, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isSatisfiedBy(Type::class, false, true));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(Type::class, Type::REFERENCE, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(Type::class, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isByReference);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isSatisfiedBy(Type::class, false, true));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isSatisfiedBy(Type::class, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(Type::class, 0, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(Type::class, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isSatisfiedBy(Type::class, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(Type::class, Type::NULLABLE, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(Type::class, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isSatisfiedBy(Type::class, true, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(Type::class, Type::NULLABLE, true, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(Type::class, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isSatisfiedBy(Type::class, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(Type::class, 0, true, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(Type::class, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isSatisfiedBy(Type::class, true, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(Type::class, Type::NULLABLE, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(Type::class, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isSatisfiedBy(Type::class, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(BuiltInTypes::STRING, 0, true, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(BuiltInTypes::STRING, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isSatisfiedBy(BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(BuiltInTypes::STRING, Type::WEAK, true, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(BuiltInTypes::STRING, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isSatisfiedBy(BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(Type::class, 0, false, true);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(Type::class, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isSatisfiedBy(Type::class, true, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(Type::class, Type::NULLABLE, false, true);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(Type::class, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isSatisfiedBy(Type::class, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(Type::class, 0, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(Type::class, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isNullable);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isSatisfiedBy(Type::class, true, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(BuiltInTypes::STRING, 0, false, true);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(BuiltInTypes::STRING, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isSatisfiedBy(BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(BuiltInTypes::STRING, Type::WEAK, false, true);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(BuiltInTypes::STRING, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isSatisfiedBy(BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(BuiltInTypes::STRING, 0, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(BuiltInTypes::STRING, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isSatisfiedBy(BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(BuiltInTypes::STRING, Type::WEAK, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(BuiltInTypes::STRING, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isSatisfiedBy(BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $type = $this->createTypeInstance(BuiltInTypes::STRING, Type::WEAK | Type::NULLABLE, false, false);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertSame(BuiltInTypes::STRING, $type->typeName);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertTrue($type->isWeak);
vendor/pocketmine/callback-validator/tests/TypeTest.php:        $this->assertFalse($type->isSatisfiedBy(BuiltInTypes::INT, false, false));
vendor/pocketmine/callback-validator/tests/Php71/BasePhp71Test.php:            $this->markTestSkipped('PHP >= 7.1.0');
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:    runs-on: ubuntu-latest
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:    - uses: actions/checkout@v2
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:    - name: Setup PHP
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:      uses: shivammathur/setup-php@2.9.0
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:        php-version: ${{ matrix.php }}
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:    - name: Cache Composer packages
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:      id: composer-cache
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:        key: "php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}"
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:        restore-keys: "php-${{ matrix.php }}-composer-"
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:    - name: Install dependencies
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:      run: composer install --prefer-dist --no-interaction
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:    - name: Run PHPStan
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:      run: ./vendor/bin/phpstan analyze --no-progress
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:    - name: Run PHPUnit
vendor/pocketmine/callback-validator/.github/workflows/ci.yml:      run: phpdbg -qrr vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover
vendor/pocketmine/binaryutils/README.md:# PocketMine-BinaryUtils
vendor/pocketmine/binaryutils/composer.json:	"license": "LGPL-3.0",
vendor/pocketmine/binaryutils/composer.json:		"php-64bit": "*"
vendor/pocketmine/binaryutils/composer.json:	"require-dev": {
vendor/pocketmine/binaryutils/composer.json:		"phpstan/extension-installer": "^1.0",
vendor/pocketmine/binaryutils/composer.json:		"phpstan/phpstan-strict-rules": "^0.12.4"
vendor/pocketmine/binaryutils/composer.json:		"psr-4": {
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer = $buffer;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->offset = $offset;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer = "";
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->offset = 0;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->offset = 0;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->offset = $offset;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer = $buffer;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->offset = $offset;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return $this->offset;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return $this->buffer;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$buflen = strlen($this->buffer);
vendor/pocketmine/binaryutils/src/BinaryStream.php:			$str = substr($this->buffer, $this->offset);
vendor/pocketmine/binaryutils/src/BinaryStream.php:			$this->offset = $buflen;
vendor/pocketmine/binaryutils/src/BinaryStream.php:			$this->offset = $buflen - 1;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$remaining = $buflen - $this->offset;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return $len === 1 ? $this->buffer[$this->offset++] : substr($this->buffer, ($this->offset += $len) - $len, $len);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$buflen = strlen($this->buffer);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		if($this->offset >= $buflen){
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$str = substr($this->buffer, $this->offset);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->offset = $buflen;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= $str;
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return $this->get(1) !== "\x00";
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= ($v ? "\x01" : "\x00");
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return ord($this->get(1));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= chr($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readShort($this->get(2));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readSignedShort($this->get(2));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeShort($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readLShort($this->get(2));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readSignedLShort($this->get(2));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeLShort($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readTriad($this->get(3));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeTriad($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readLTriad($this->get(3));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeLTriad($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readInt($this->get(4));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeInt($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readLInt($this->get(4));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeLInt($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readFloat($this->get(4));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readRoundedFloat($this->get(4), $accuracy);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeFloat($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readLFloat($this->get(4));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readRoundedLFloat($this->get(4), $accuracy);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeLFloat($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readDouble($this->get(8));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeDouble($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readLDouble($this->get(8));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeLDouble($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readLong($this->get(8));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeLong($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readLLong($this->get(8));
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeLLong($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:	 * Reads a 32-bit variable-length unsigned integer from the buffer and returns it.
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readUnsignedVarInt($this->buffer, $this->offset);
vendor/pocketmine/binaryutils/src/BinaryStream.php:	 * Writes a 32-bit variable-length unsigned integer to the end of the buffer.
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->put(Binary::writeUnsignedVarInt($v));
vendor/pocketmine/binaryutils/src/BinaryStream.php:	 * Reads a 32-bit zigzag-encoded variable-length integer from the buffer and returns it.
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readVarInt($this->buffer, $this->offset);
vendor/pocketmine/binaryutils/src/BinaryStream.php:	 * Writes a 32-bit zigzag-encoded variable-length integer to the end of the buffer.
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->put(Binary::writeVarInt($v));
vendor/pocketmine/binaryutils/src/BinaryStream.php:	 * Reads a 64-bit variable-length integer from the buffer and returns it.
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readUnsignedVarLong($this->buffer, $this->offset);
vendor/pocketmine/binaryutils/src/BinaryStream.php:	 * Writes a 64-bit variable-length integer to the end of the buffer.
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeUnsignedVarLong($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:	 * Reads a 64-bit zigzag-encoded variable-length integer from the buffer and returns it.
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return Binary::readVarLong($this->buffer, $this->offset);
vendor/pocketmine/binaryutils/src/BinaryStream.php:	 * Writes a 64-bit zigzag-encoded variable-length integer to the end of the buffer.
vendor/pocketmine/binaryutils/src/BinaryStream.php:		$this->buffer .= Binary::writeVarLong($v);
vendor/pocketmine/binaryutils/src/BinaryStream.php:		return !isset($this->buffer[$this->offset]);
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads an unsigned byte (0 - 255)
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a signed byte (-128 - 127)
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 16-bit unsigned big-endian number
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 16-bit signed big-endian number
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 16-bit signed/unsigned big-endian number
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 16-bit unsigned little-endian number
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 16-bit signed little-endian number
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 16-bit signed/unsigned little-endian number
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 3-byte big-endian number
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 3-byte big-endian number
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 3-byte little-endian number
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 3-byte little-endian number
vendor/pocketmine/binaryutils/src/Binary.php:		return substr(pack("V", $value), 0, -1);
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 4-byte signed integer
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 4-byte integer
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 4-byte signed little-endian integer
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 4-byte signed little-endian integer
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 4-byte floating-point number
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 4-byte floating-point number, rounded to the specified number of decimal places.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 4-byte floating-point number.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 4-byte little-endian floating-point number.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 4-byte little-endian floating-point number rounded to the specified number of decimal places.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 4-byte little-endian floating-point number.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Returns a printable floating-point number.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads an 8-byte floating-point number.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes an 8-byte floating-point number.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads an 8-byte little-endian floating-point number.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes an 8-byte floating-point little-endian number.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads an 8-byte integer.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes an 8-byte integer.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads an 8-byte little-endian integer.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes an 8-byte little-endian integer.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 32-bit zigzag-encoded variable-length integer.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 32-bit variable-length unsigned integer.
vendor/pocketmine/binaryutils/src/Binary.php:	 * @throws BinaryDataException if the var-int did not end after 5 bytes or there were not enough bytes
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 32-bit integer as a zigzag-encoded variable-length integer.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 32-bit unsigned integer as a variable-length integer.
vendor/pocketmine/binaryutils/src/Binary.php:			$value = (($value >> 7) & (PHP_INT_MAX >> 6)); //PHP really needs a logical right-shift operator
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 64-bit zigzag-encoded variable-length integer.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Reads a 64-bit unsigned variable-length integer.
vendor/pocketmine/binaryutils/src/Binary.php:	 * @throws BinaryDataException if the var-int did not end after 10 bytes or there were not enough bytes
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 64-bit integer as a zigzag-encoded variable-length long.
vendor/pocketmine/binaryutils/src/Binary.php:	 * Writes a 64-bit unsigned integer as a variable-length long.
vendor/pocketmine/binaryutils/src/Binary.php:			$value = (($value >> 7) & (PHP_INT_MAX >> 6)); //PHP really needs a logical right-shift operator
vendor/pocketmine/binaryutils/phpstan.neon.dist:		- src
vendor/pocketmine/binaryutils/phpstan.neon.dist:		-
vendor/pocketmine/binaryutils/LICENSE:       of the Library that is interface-compatible with the Linked
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:    runs-on: ubuntu-latest
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:    - uses: actions/checkout@v2
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:    - name: Setup PHP
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:      uses: shivammathur/setup-php@2.9.0
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:        php-version: ${{ matrix.php }}
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:    - name: Cache Composer packages
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:      id: composer-cache
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:        key: "php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}"
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:        restore-keys: "php-${{ matrix.php }}-composer-"
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:    - name: Install dependencies
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:      run: composer install --prefer-dist --no-interaction
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:    - name: Run PHPStan
vendor/pocketmine/binaryutils/.github/workflows/ci.yml:      run: ./vendor/bin/phpstan analyze --no-progress
vendor/pocketmine/snooze/README.md:Event-driven thread notification management library for code using the pthreads extension
vendor/pocketmine/snooze/README.md:		$this->notifier = $notifier;
vendor/pocketmine/snooze/README.md:		$this->buffer = new \Threaded();
vendor/pocketmine/snooze/README.md:			$this->buffer[] = $line;
vendor/pocketmine/snooze/README.md:			$this->notifier->wakeupSleeper();
vendor/pocketmine/snooze/README.md:		return $this->buffer->shift();
vendor/pocketmine/snooze/README.md:$sleeper->addNotifier($notifier, function() use($thread) : void{
vendor/pocketmine/snooze/README.md:	echo "Main thread got line: " . $thread->getLineFromBuffer();
vendor/pocketmine/snooze/README.md:$thread->start();
vendor/pocketmine/snooze/README.md:	$sleeper->sleepUntil($start + 0.05);
vendor/pocketmine/snooze/README.md:	$sleeper->sleepUntilNotification();
vendor/pocketmine/snooze/composer.json:        "php-64bit": "^7.2 || ^8.0",
vendor/pocketmine/snooze/composer.json:        "ext-pthreads": ">=3.1.7dev"
vendor/pocketmine/snooze/composer.json:    "require-dev": {
vendor/pocketmine/snooze/composer.json:        "phpstan/extension-installer": "^1.0",
vendor/pocketmine/snooze/composer.json:        "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/pocketmine/snooze/composer.json:    "license": "LGPL-3.0",
vendor/pocketmine/snooze/composer.json:        "psr-4": {
vendor/pocketmine/snooze/src/ThreadedSleeper.php:		$this->synchronized(function(int $timeout) : void{
vendor/pocketmine/snooze/src/ThreadedSleeper.php:			assert($this->notifCount >= 0, "notification count should be >= 0, got $this->notifCount");
vendor/pocketmine/snooze/src/ThreadedSleeper.php:			if($this->notifCount === 0){
vendor/pocketmine/snooze/src/ThreadedSleeper.php:				$this->wait($timeout);
vendor/pocketmine/snooze/src/ThreadedSleeper.php:		$this->synchronized(function() : void{
vendor/pocketmine/snooze/src/ThreadedSleeper.php:			++$this->notifCount;
vendor/pocketmine/snooze/src/ThreadedSleeper.php:			$this->notify();
vendor/pocketmine/snooze/src/ThreadedSleeper.php:		$this->synchronized(function() use ($notifCount) : void{
vendor/pocketmine/snooze/src/ThreadedSleeper.php:			$this->notifCount -= $notifCount;
vendor/pocketmine/snooze/src/ThreadedSleeper.php:			assert($this->notifCount >= 0, "notification count should be >= 0, got $this->notifCount");
vendor/pocketmine/snooze/src/ThreadedSleeper.php:		return $this->notifCount > 0;
vendor/pocketmine/snooze/src/NotifierEntry.php:	 * @phpstan-var callable() : void
vendor/pocketmine/snooze/src/NotifierEntry.php:	 * @phpstan-param callable() : void $callback
vendor/pocketmine/snooze/src/NotifierEntry.php:		$this->notifier = $notifier;
vendor/pocketmine/snooze/src/NotifierEntry.php:		$this->callback = $callback;
vendor/pocketmine/snooze/src/NotifierEntry.php:	public function getNotifier() : SleeperNotifier{ return $this->notifier; }
vendor/pocketmine/snooze/src/NotifierEntry.php:	 * @phpstan-return callable() : void
vendor/pocketmine/snooze/src/NotifierEntry.php:	public function getCallback() : callable{ return $this->callback; }
vendor/pocketmine/snooze/src/SleeperNotifier.php:		$this->threadedSleeper = $sleeper;
vendor/pocketmine/snooze/src/SleeperNotifier.php:		$this->sleeperId = $id;
vendor/pocketmine/snooze/src/SleeperNotifier.php:		return $this->sleeperId;
vendor/pocketmine/snooze/src/SleeperNotifier.php:		assert($this->threadedSleeper !== null);
vendor/pocketmine/snooze/src/SleeperNotifier.php:		$this->synchronized(function() : void{
vendor/pocketmine/snooze/src/SleeperNotifier.php:			if(!$this->notification){
vendor/pocketmine/snooze/src/SleeperNotifier.php:				$this->notification = true;
vendor/pocketmine/snooze/src/SleeperNotifier.php:				$this->threadedSleeper->wakeup();
vendor/pocketmine/snooze/src/SleeperNotifier.php:		return $this->notification;
vendor/pocketmine/snooze/src/SleeperNotifier.php:		$this->synchronized(function() : void{
vendor/pocketmine/snooze/src/SleeperNotifier.php:			$this->notification = false;
vendor/pocketmine/snooze/src/SleeperHandler.php:		$this->threadedSleeper = new ThreadedSleeper();
vendor/pocketmine/snooze/src/SleeperHandler.php:		return $this->threadedSleeper;
vendor/pocketmine/snooze/src/SleeperHandler.php:	 * @phpstan-param callable() : void $handler
vendor/pocketmine/snooze/src/SleeperHandler.php:		$id = $this->nextSleeperId++;
vendor/pocketmine/snooze/src/SleeperHandler.php:		$notifier->attachSleeper($this->threadedSleeper, $id);
vendor/pocketmine/snooze/src/SleeperHandler.php:		$this->notifiers[$id] = new NotifierEntry($notifier, $handler);
vendor/pocketmine/snooze/src/SleeperHandler.php:	 * Removes a notifier from the sleeper. Note that this does not prevent the notifier waking the sleeper up - it just
vendor/pocketmine/snooze/src/SleeperHandler.php:		unset($this->notifiers[$notifier->getSleeperId()]);
vendor/pocketmine/snooze/src/SleeperHandler.php:			$this->processNotifications();
vendor/pocketmine/snooze/src/SleeperHandler.php:			$sleepTime = (int) (($unixTime - microtime(true)) * 1000000);
vendor/pocketmine/snooze/src/SleeperHandler.php:				$this->threadedSleeper->sleep($sleepTime);
vendor/pocketmine/snooze/src/SleeperHandler.php:		$this->threadedSleeper->sleep(0);
vendor/pocketmine/snooze/src/SleeperHandler.php:		$this->processNotifications();
vendor/pocketmine/snooze/src/SleeperHandler.php:		while($this->threadedSleeper->hasNotifications()){
vendor/pocketmine/snooze/src/SleeperHandler.php:			foreach($this->notifiers as $id => $entry){
vendor/pocketmine/snooze/src/SleeperHandler.php:				$notifier = $entry->getNotifier();
vendor/pocketmine/snooze/src/SleeperHandler.php:				if($notifier->hasNotification()){
vendor/pocketmine/snooze/src/SleeperHandler.php:					$notifier->clearNotification();
vendor/pocketmine/snooze/src/SleeperHandler.php:					if(isset($this->notifiers[$id])){
vendor/pocketmine/snooze/src/SleeperHandler.php:						$entry->getCallback()();
vendor/pocketmine/snooze/src/SleeperHandler.php:			$this->threadedSleeper->clearNotifications($processed);
vendor/pocketmine/snooze/phpstan.neon.dist:		- src
vendor/pocketmine/snooze/phpstan.neon.dist:		- tests/phpstan/stubs/pthreads.stub
vendor/pocketmine/snooze/tests/phpstan/stubs/pthreads.stub: * @implements \Traversable<array-key, mixed>
vendor/pocketmine/snooze/LICENSE:       of the Library that is interface-compatible with the Linked
vendor/pocketmine/snooze/.github/workflows/main.yml:          - php: 7.2.34
vendor/pocketmine/snooze/.github/workflows/main.yml:            pthreads-version: 46962cf9c2d30b6e1e1ea50ca36de3df5d6d4e58
vendor/pocketmine/snooze/.github/workflows/main.yml:          - php: 7.3.25
vendor/pocketmine/snooze/.github/workflows/main.yml:            pthreads-version: 34d7e6b91ed92a625760fedd667e7cba2009e463
vendor/pocketmine/snooze/.github/workflows/main.yml:          - php: 7.4.13
vendor/pocketmine/snooze/.github/workflows/main.yml:            pthreads-version: 34d7e6b91ed92a625760fedd667e7cba2009e463
vendor/pocketmine/snooze/.github/workflows/main.yml:          - php: 8.0.1
vendor/pocketmine/snooze/.github/workflows/main.yml:            pthreads-version: bc16ee7b5a21faee9bd1743f830f7135b763fb56
vendor/pocketmine/snooze/.github/workflows/main.yml:    runs-on: ubuntu-latest
vendor/pocketmine/snooze/.github/workflows/main.yml:      - uses: actions/checkout@v2
vendor/pocketmine/snooze/.github/workflows/main.yml:      - name: Restore PHP build cache
vendor/pocketmine/snooze/.github/workflows/main.yml:        id: php-build-cache
vendor/pocketmine/snooze/.github/workflows/main.yml:          key: php-build-${{ matrix.php }}-pthreads-${{ matrix.pthreads-version }}
vendor/pocketmine/snooze/.github/workflows/main.yml:      - name: Compile PHP
vendor/pocketmine/snooze/.github/workflows/main.yml:        if: steps.php-build-cache.outputs.cache-hit != 'true'
vendor/pocketmine/snooze/.github/workflows/main.yml:          git clone https://github.com/php-build/php-build.git
vendor/pocketmine/snooze/.github/workflows/main.yml:          cd php-build
vendor/pocketmine/snooze/.github/workflows/main.yml:          ./install-dependencies.sh
vendor/pocketmine/snooze/.github/workflows/main.yml:          echo '"pthreads",,"https://github.com/pmmp/pthreads.git",,,"extension",' >> share/php-build/extension/definition
vendor/pocketmine/snooze/.github/workflows/main.yml:          export CFLAGS="$CFLAGS -march=x86-64"
vendor/pocketmine/snooze/.github/workflows/main.yml:          export CXXFLAGS="$CXXFLAGS -march=x86-64"
vendor/pocketmine/snooze/.github/workflows/main.yml:          PHP_BUILD_INSTALL_EXTENSION='pthreads=@${{ matrix.pthreads-version }}' PHP_BUILD_ZTS_ENABLE=on ./bin/php-build "${{ matrix.php }}" "$GITHUB_WORKSPACE/php"
vendor/pocketmine/snooze/.github/workflows/main.yml:      - name: Prefix PHP to PATH
vendor/pocketmine/snooze/.github/workflows/main.yml:      - name: Cache Composer packages
vendor/pocketmine/snooze/.github/workflows/main.yml:        id: composer-cache
vendor/pocketmine/snooze/.github/workflows/main.yml:          key: "php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}"
vendor/pocketmine/snooze/.github/workflows/main.yml:          restore-keys: "php-${{ matrix.php }}-composer-"
vendor/pocketmine/snooze/.github/workflows/main.yml:      - name: Install dependencies
vendor/pocketmine/snooze/.github/workflows/main.yml:        run: composer install --prefer-dist --no-interaction
vendor/pocketmine/snooze/.github/workflows/main.yml:      - name: Run PHPStan
vendor/pocketmine/snooze/.github/workflows/main.yml:        run: ./vendor/bin/phpstan analyze --no-progress
vendor/pocketmine/spl/README.md:	Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/composer.json:    "description": "Standard library files required by PocketMine-MP and related projects",
vendor/pocketmine/spl/composer.json:    "license": "LGPL-3.0",
vendor/pocketmine/spl/composer.json:    "require-dev": {
vendor/pocketmine/spl/src/UndefinedConstantException.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/src/UndefinedVariableException.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/src/UndefinedPropertyException.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/src/InvalidArgumentCountException.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/src/StringOutOfBoundsException.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/src/ArrayOutOfBoundsException.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/src/ClassCastException.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/src/InvalidKeyException.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/src/SplFixedByteArray.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/src/SplFixedByteArray.php: * @phpstan-extends \SplFixedArray<int|string>
vendor/pocketmine/spl/src/SplFixedByteArray.php:		$this->convert = (bool) $convert;
vendor/pocketmine/spl/src/SplFixedByteArray.php:		if($normalize and $this->convert){
vendor/pocketmine/spl/src/SplFixedByteArray.php:		if($this->convert){
vendor/pocketmine/spl/src/SplFixedByteArray.php:			for($i = 0; $i < $this->getSize(); ++$i){
vendor/pocketmine/spl/src/SplFixedByteArray.php:			for($i = 0; $i < $this->getSize(); ++$i){
vendor/pocketmine/spl/src/SplFixedByteArray.php:		return $this->toString();
vendor/pocketmine/spl/src/InvalidStateException.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/src/ThreadException.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/src/ClassNotFoundException.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/spl/phpstan.neon.dist:		- src
vendor/pocketmine/spl/LICENSE:       of the Library that is interface-compatible with the Linked
vendor/pocketmine/spl/.github/workflows/ci.yml:    runs-on: ubuntu-latest
vendor/pocketmine/spl/.github/workflows/ci.yml:    - uses: actions/checkout@v2
vendor/pocketmine/spl/.github/workflows/ci.yml:    - name: Setup PHP
vendor/pocketmine/spl/.github/workflows/ci.yml:      uses: shivammathur/setup-php@2.9.0
vendor/pocketmine/spl/.github/workflows/ci.yml:        php-version: ${{ matrix.php }}
vendor/pocketmine/spl/.github/workflows/ci.yml:    - name: Cache Composer packages
vendor/pocketmine/spl/.github/workflows/ci.yml:      id: composer-cache
vendor/pocketmine/spl/.github/workflows/ci.yml:        key: "php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}"
vendor/pocketmine/spl/.github/workflows/ci.yml:        restore-keys: "php-${{ matrix.php }}-composer-"
vendor/pocketmine/spl/.github/workflows/ci.yml:    - name: Install dependencies
vendor/pocketmine/spl/.github/workflows/ci.yml:      run: composer install --prefer-dist --no-interaction
vendor/pocketmine/spl/.github/workflows/ci.yml:    - name: Run PHPStan
vendor/pocketmine/spl/.github/workflows/ci.yml:      run: ./vendor/bin/phpstan analyze --no-progress
vendor/pocketmine/log-pthreads/README.md:This repository contains pthreads-specialized logging units implementing the interfaces provided by `pocketmine/log`.
vendor/pocketmine/log-pthreads/composer.json:    "name": "pocketmine/log-pthreads",
vendor/pocketmine/log-pthreads/composer.json:    "description": "Logging components specialized for pthreads used by PocketMine-MP and related projects",
vendor/pocketmine/log-pthreads/composer.json:    "license": "LGPL-3.0",
vendor/pocketmine/log-pthreads/composer.json:        "ext-pthreads": "~3.2.0",
vendor/pocketmine/log-pthreads/composer.json:    "require-dev": {
vendor/pocketmine/log-pthreads/composer.json:        "phpstan/extension-installer": "^1.0",
vendor/pocketmine/log-pthreads/composer.json:        "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/pocketmine/log-pthreads/src/ThreadedLogger.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/log-pthreads/src/ThreadedLoggerAttachment.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/log-pthreads/src/ThreadedLoggerAttachment.php:		$this->log($level, $message);
vendor/pocketmine/log-pthreads/src/AttachableThreadedLogger.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/log-pthreads/src/AttachableThreadedLogger.php:		$this->attachments = new \Volatile();
vendor/pocketmine/log-pthreads/src/AttachableThreadedLogger.php:		$this->attachments[] = $attachment;
vendor/pocketmine/log-pthreads/src/AttachableThreadedLogger.php:		foreach($this->attachments as $i => $a){
vendor/pocketmine/log-pthreads/src/AttachableThreadedLogger.php:				unset($this->attachments[$i]);
vendor/pocketmine/log-pthreads/src/AttachableThreadedLogger.php:		foreach($this->attachments as $i => $a){
vendor/pocketmine/log-pthreads/src/AttachableThreadedLogger.php:			unset($this->attachments[$i]);
vendor/pocketmine/log-pthreads/src/AttachableThreadedLogger.php:		return (array) $this->attachments;
vendor/pocketmine/log-pthreads/phpstan.neon.dist:		- src
vendor/pocketmine/log-pthreads/phpstan.neon.dist:		- tests/phpstan/stubs/pthreads.stub
vendor/pocketmine/log-pthreads/tests/phpstan/stubs/pthreads.stub: * @implements \Traversable<array-key, mixed>
vendor/pocketmine/log-pthreads/LICENSE:       of the Library that is interface-compatible with the Linked
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          - php: 7.2.34
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:            pthreads-version: 46962cf9c2d30b6e1e1ea50ca36de3df5d6d4e58
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          - php: 7.3.25
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:            pthreads-version: 34d7e6b91ed92a625760fedd667e7cba2009e463
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          - php: 7.4.13
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:            pthreads-version: 34d7e6b91ed92a625760fedd667e7cba2009e463
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          - php: 8.0.1
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:            pthreads-version: bc16ee7b5a21faee9bd1743f830f7135b763fb56
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:    runs-on: ubuntu-latest
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:      - uses: actions/checkout@v2
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:      - name: Restore PHP build cache
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:        id: php-build-cache
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          key: php-build-${{ matrix.php }}-pthreads-${{ matrix.pthreads-version }}
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:      - name: Compile PHP
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:        if: steps.php-build-cache.outputs.cache-hit != 'true'
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          git clone https://github.com/php-build/php-build.git
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          cd php-build
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          ./install-dependencies.sh
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          echo '"pthreads",,"https://github.com/pmmp/pthreads.git",,,"extension",' >> share/php-build/extension/definition
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          export CFLAGS="$CFLAGS -march=x86-64"
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          export CXXFLAGS="$CXXFLAGS -march=x86-64"
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          PHP_BUILD_INSTALL_EXTENSION='pthreads=@${{ matrix.pthreads-version }}' PHP_BUILD_ZTS_ENABLE=on ./bin/php-build "${{ matrix.php }}" "$GITHUB_WORKSPACE/php"
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:      - name: Prefix PHP to PATH
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:      - name: Cache Composer packages
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:        id: composer-cache
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          key: "php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}"
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:          restore-keys: "php-${{ matrix.php }}-composer-"
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:      - name: Install dependencies
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:        run: composer install --prefer-dist --no-interaction
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:      - name: Run PHPStan
vendor/pocketmine/log-pthreads/.github/workflows/main.yml:        run: ./vendor/bin/phpstan analyze --no-progress
vendor/pocketmine/classloader/README.md:Ad-hoc autoloading components used by PocketMine-MP
vendor/pocketmine/classloader/composer.json:    "description": "Ad-hoc autoloading components used by PocketMine-MP",
vendor/pocketmine/classloader/composer.json:    "license": "LGPL-3.0",
vendor/pocketmine/classloader/composer.json:        "ext-pthreads": "~3.2.0",
vendor/pocketmine/classloader/composer.json:        "ext-reflection": "*"
vendor/pocketmine/classloader/composer.json:    "require-dev": {
vendor/pocketmine/classloader/composer.json:        "phpstan/extension-installer": "^1.0",
vendor/pocketmine/classloader/composer.json:        "phpstan/phpstan-strict-rules": "^0.12.4"
vendor/pocketmine/classloader/src/BaseClassLoader.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/classloader/src/BaseClassLoader.php:		$this->parent = $parent;
vendor/pocketmine/classloader/src/BaseClassLoader.php:		$this->lookup = new \Threaded;
vendor/pocketmine/classloader/src/BaseClassLoader.php:		$this->classes = new \Threaded;
vendor/pocketmine/classloader/src/BaseClassLoader.php:		foreach($this->lookup as $p){
vendor/pocketmine/classloader/src/BaseClassLoader.php:			$this->lookup->synchronized(function(string $path) : void{
vendor/pocketmine/classloader/src/BaseClassLoader.php:				$entries = $this->getAndRemoveLookupEntries();
vendor/pocketmine/classloader/src/BaseClassLoader.php:				$this->lookup[] = $path;
vendor/pocketmine/classloader/src/BaseClassLoader.php:					$this->lookup[] = $entry;
vendor/pocketmine/classloader/src/BaseClassLoader.php:			$this->lookup[] = $path;
vendor/pocketmine/classloader/src/BaseClassLoader.php:		while($this->lookup->count() > 0){
vendor/pocketmine/classloader/src/BaseClassLoader.php:			$entries[] = $this->lookup->shift();
vendor/pocketmine/classloader/src/BaseClassLoader.php:		foreach($this->lookup as $i => $p){
vendor/pocketmine/classloader/src/BaseClassLoader.php:				unset($this->lookup[$i]);
vendor/pocketmine/classloader/src/BaseClassLoader.php:		foreach($this->classes as $class){
vendor/pocketmine/classloader/src/BaseClassLoader.php:		return $this->parent;
vendor/pocketmine/classloader/src/BaseClassLoader.php:			$this->loadClass($name);
vendor/pocketmine/classloader/src/BaseClassLoader.php:		$path = $this->findClass($name);
vendor/pocketmine/classloader/src/BaseClassLoader.php:			if(method_exists($name, "onClassLoaded") and (new ReflectionClass($name))->getMethod("onClassLoaded")->isStatic()){
vendor/pocketmine/classloader/src/BaseClassLoader.php:			$this->classes[] = $name;
vendor/pocketmine/classloader/src/BaseClassLoader.php:		foreach($this->lookup as $path){
vendor/pocketmine/classloader/src/ClassLoader.php: * Copyright (C) 2014-2018 PocketMine Team <https://github.com/PocketMine/PocketMine-SPL>
vendor/pocketmine/classloader/phpstan.neon.dist:		- src
vendor/pocketmine/classloader/LICENSE:       of the Library that is interface-compatible with the Linked
vendor/pocketmine/classloader/.github/workflows/main.yml:          - php: 7.2.34
vendor/pocketmine/classloader/.github/workflows/main.yml:            pthreads-version: 46962cf9c2d30b6e1e1ea50ca36de3df5d6d4e58
vendor/pocketmine/classloader/.github/workflows/main.yml:          - php: 7.3.25
vendor/pocketmine/classloader/.github/workflows/main.yml:            pthreads-version: 34d7e6b91ed92a625760fedd667e7cba2009e463
vendor/pocketmine/classloader/.github/workflows/main.yml:          - php: 7.4.13
vendor/pocketmine/classloader/.github/workflows/main.yml:            pthreads-version: 34d7e6b91ed92a625760fedd667e7cba2009e463
vendor/pocketmine/classloader/.github/workflows/main.yml:          - php: 8.0.1
vendor/pocketmine/classloader/.github/workflows/main.yml:            pthreads-version: bc16ee7b5a21faee9bd1743f830f7135b763fb56
vendor/pocketmine/classloader/.github/workflows/main.yml:    runs-on: ubuntu-latest
vendor/pocketmine/classloader/.github/workflows/main.yml:      - uses: actions/checkout@v2
vendor/pocketmine/classloader/.github/workflows/main.yml:      - name: Restore PHP build cache
vendor/pocketmine/classloader/.github/workflows/main.yml:        id: php-build-cache
vendor/pocketmine/classloader/.github/workflows/main.yml:          key: php-build-${{ matrix.php }}-pthreads-${{ matrix.pthreads-version }}
vendor/pocketmine/classloader/.github/workflows/main.yml:      - name: Compile PHP
vendor/pocketmine/classloader/.github/workflows/main.yml:        if: steps.php-build-cache.outputs.cache-hit != 'true'
vendor/pocketmine/classloader/.github/workflows/main.yml:          git clone https://github.com/php-build/php-build.git
vendor/pocketmine/classloader/.github/workflows/main.yml:          cd php-build
vendor/pocketmine/classloader/.github/workflows/main.yml:          ./install-dependencies.sh
vendor/pocketmine/classloader/.github/workflows/main.yml:          echo '"pthreads",,"https://github.com/pmmp/pthreads.git",,,"extension",' >> share/php-build/extension/definition
vendor/pocketmine/classloader/.github/workflows/main.yml:          export CFLAGS="$CFLAGS -march=x86-64"
vendor/pocketmine/classloader/.github/workflows/main.yml:          export CXXFLAGS="$CXXFLAGS -march=x86-64"
vendor/pocketmine/classloader/.github/workflows/main.yml:          PHP_BUILD_INSTALL_EXTENSION='pthreads=@${{ matrix.pthreads-version }}' PHP_BUILD_ZTS_ENABLE=on ./bin/php-build "${{ matrix.php }}" "$GITHUB_WORKSPACE/php"
vendor/pocketmine/classloader/.github/workflows/main.yml:      - name: Prefix PHP to PATH
vendor/pocketmine/classloader/.github/workflows/main.yml:      - name: Cache Composer packages
vendor/pocketmine/classloader/.github/workflows/main.yml:        id: composer-cache
vendor/pocketmine/classloader/.github/workflows/main.yml:          key: "php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}"
vendor/pocketmine/classloader/.github/workflows/main.yml:          restore-keys: "php-${{ matrix.php }}-composer-"
vendor/pocketmine/classloader/.github/workflows/main.yml:      - name: Install dependencies
vendor/pocketmine/classloader/.github/workflows/main.yml:        run: composer install --prefer-dist --no-interaction
vendor/pocketmine/classloader/.github/workflows/main.yml:      - name: Run PHPStan
vendor/pocketmine/classloader/.github/workflows/main.yml:        run: ./vendor/bin/phpstan analyze --no-progress
vendor/adhocore/json-comment/.editorconfig:; Sublime: https://github.com/sindresorhus/editorconfig-sublime
vendor/adhocore/json-comment/.editorconfig:; Phpstorm: https://plugins.jetbrains.com/plugin/7294-editorconfig
vendor/adhocore/json-comment/.editorconfig:charset = utf-8
vendor/adhocore/json-comment/README.md:## adhocore/json-comment
vendor/adhocore/json-comment/README.md:[![Latest Version](https://img.shields.io/github/release/adhocore/php-json-comment.svg?style=flat-square)](https://github.com/adhocore/php-json-comment/releases)
vendor/adhocore/json-comment/README.md:[![Travis Build](https://img.shields.io/travis/adhocore/php-json-comment/master.svg?style=flat-square)](https://travis-ci.org/adhocore/php-json-comment?branch=master)
vendor/adhocore/json-comment/README.md:[![Scrutinizer CI](https://img.shields.io/scrutinizer/g/adhocore/php-json-comment.svg?style=flat-square)](https://scrutinizer-ci.com/g/adhocore/php-json-comment/?branch=master)
vendor/adhocore/json-comment/README.md:[![Codecov branch](https://img.shields.io/codecov/c/github/adhocore/php-json-comment/master.svg?style=flat-square)](https://codecov.io/gh/adhocore/php-json-comment)
vendor/adhocore/json-comment/README.md:[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE)
vendor/adhocore/json-comment/README.md:- Lightweight JSON comment stripper library for PHP.
vendor/adhocore/json-comment/README.md:- Makes possible to have comment in any form of JSON data.
vendor/adhocore/json-comment/README.md:- Supported comments: single line `// comment` or multi line `/* comment */`.
vendor/adhocore/json-comment/README.md:composer require adhocore/json-comment
vendor/adhocore/json-comment/README.md:(new Comment)->strip($someJsonText);
vendor/adhocore/json-comment/README.md:(new Comment)->decode($someJsonText);
vendor/adhocore/json-comment/README.md:(new Comment)->decode($someJsonText, $assoc = true, $depth = 512, $options = JSON_BIGINT_AS_STRING);
vendor/adhocore/json-comment/composer.json:    "name": "adhocore/json-comment",
vendor/adhocore/json-comment/composer.json:        "json", "comment", "strip-comment"
vendor/adhocore/json-comment/composer.json:        "psr-4": {
vendor/adhocore/json-comment/composer.json:    "autoload-dev": {
vendor/adhocore/json-comment/composer.json:        "psr-4": {
vendor/adhocore/json-comment/composer.json:    "require-dev": {
vendor/adhocore/json-comment/composer.json:        "test:cov": "phpunit --coverage-text --coverage-clover coverage.xml --coverage-html vendor/cov"
vendor/adhocore/json-comment/src/Comment.php: * This file is part of the PHP-JSON-COMMENT package.
vendor/adhocore/json-comment/src/Comment.php:    protected $index   = -1;
vendor/adhocore/json-comment/src/Comment.php:        $this->reset();
vendor/adhocore/json-comment/src/Comment.php:        return $this->doStrip($json);
vendor/adhocore/json-comment/src/Comment.php:        $this->index   = -1;
vendor/adhocore/json-comment/src/Comment.php:        $this->inStr   = false;
vendor/adhocore/json-comment/src/Comment.php:        $this->comment = 0;
vendor/adhocore/json-comment/src/Comment.php:        while (isset($json[++$this->index])) {
vendor/adhocore/json-comment/src/Comment.php:            list($prev, $char, $next) = $this->getSegments($json);
vendor/adhocore/json-comment/src/Comment.php:            if ($this->inStringOrCommentEnd($prev, $char, $char . $next)) {
vendor/adhocore/json-comment/src/Comment.php:            $wasSingle = 1 === $this->comment;
vendor/adhocore/json-comment/src/Comment.php:            if ($this->hasCommentEnded($char, $char . $next) && $wasSingle) {
vendor/adhocore/json-comment/src/Comment.php:            $this->index += $char . $next === '*/' ? 1 : 0;
vendor/adhocore/json-comment/src/Comment.php:            isset($json[$this->index - 1]) ? $json[$this->index - 1] : '',
vendor/adhocore/json-comment/src/Comment.php:            $json[$this->index],
vendor/adhocore/json-comment/src/Comment.php:            isset($json[$this->index + 1]) ? $json[$this->index + 1] : '',
vendor/adhocore/json-comment/src/Comment.php:        return $this->inString($char, $prev) || $this->inCommentEnd($charnext);
vendor/adhocore/json-comment/src/Comment.php:        if (0 === $this->comment && $char === '"' && $prev !== '\\') {
vendor/adhocore/json-comment/src/Comment.php:            $this->inStr = !$this->inStr;
vendor/adhocore/json-comment/src/Comment.php:        return $this->inStr;
vendor/adhocore/json-comment/src/Comment.php:        if (!$this->inStr && 0 === $this->comment) {
vendor/adhocore/json-comment/src/Comment.php:            $this->comment = $charnext === '//' ? 1 : ($charnext === '/*' ? 2 : 0);
vendor/adhocore/json-comment/src/Comment.php:        return 0 === $this->comment;
vendor/adhocore/json-comment/src/Comment.php:        $singleEnded = $this->comment === 1 && $char == "\n";
vendor/adhocore/json-comment/src/Comment.php:        $multiEnded  = $this->comment === 2 && $charnext == '*/';
vendor/adhocore/json-comment/src/Comment.php:            $this->comment = 0;
vendor/adhocore/json-comment/src/Comment.php:        $decoded = \json_decode($this->strip($json), $assoc, $depth, $options);
vendor/adhocore/json-comment/src/Comment.php:        return $parser->decode($json, $assoc, $depth, $options);
vendor/adhocore/json-comment/CHANGELOG.md:## [0.1.0](https://github.com/adhocore/php-json-comment/releases/tag/0.1.0) (2020-01-03)
vendor/adhocore/json-comment/CHANGELOG.md:- Add and use composer test script, bump phpunit (Jitendra Adhikari) [_44f9bd6_](https://github.com/adhocore/php-json-comment/commit/44f9bd6)
vendor/adhocore/json-comment/CHANGELOG.md:- Rename to README.md (Jitendra Adhikari) [_171fa88_](https://github.com/adhocore/php-json-comment/commit/171fa88)
vendor/adhocore/json-comment/CHANGELOG.md:- **Travis**: Retire PHP pre 5.6, add PHP 7.3 (Jitendra Adhikari) [_db274d2_](https://github.com/adhocore/php-json-comment/commit/db274d2)
vendor/adhocore/json-comment/phpunit.xml.dist:<?xml version="1.0" encoding="UTF-8"?>
vendor/adhocore/json-comment/tests/CommentTest.php: * This file is part of the PHP-JSON-COMMENT package.
vendor/adhocore/json-comment/tests/CommentTest.php:        $this->assertSame($expect, (new Comment)->strip($json));
vendor/adhocore/json-comment/tests/CommentTest.php:        $actual = (new Comment)->decode($json, true);
vendor/adhocore/json-comment/tests/CommentTest.php:        $this->assertSame(JSON_ERROR_NONE, json_last_error());
vendor/adhocore/json-comment/tests/CommentTest.php:        $this->assertNotEmpty($actual);
vendor/adhocore/json-comment/tests/CommentTest.php:        $this->assertArrayHasKey('a', $actual);
vendor/adhocore/json-comment/tests/CommentTest.php:        $this->assertArrayHasKey('b', $actual);
vendor/adhocore/json-comment/tests/CommentTest.php:        (new Comment)->decode('{"a":1, /* comment */, "b":}', true);
vendor/adhocore/json-comment/tests/CommentTest.php:        $this->assertNotEmpty($parsed);
vendor/adhocore/json-comment/tests/CommentTest.php:        $this->assertInternalType('array', $parsed);
vendor/adhocore/json-comment/tests/CommentTest.php:        $this->assertArrayHasKey('a//b', $parsed);
vendor/adhocore/json-comment/tests/CommentTest.php:        $this->assertSame('/*value*/', $parsed['a//b']);
vendor/adhocore/json-comment/.travis.yml:  - 5.6
vendor/adhocore/json-comment/.travis.yml:  - 7.0
vendor/adhocore/json-comment/.travis.yml:  - 7.1
vendor/adhocore/json-comment/.travis.yml:  - 7.2
vendor/adhocore/json-comment/.travis.yml:  - 7.3
vendor/adhocore/json-comment/.travis.yml:  - nightly
vendor/adhocore/json-comment/.travis.yml:    - php: nightly
vendor/adhocore/json-comment/.travis.yml:  - composer install --prefer-dist
vendor/adhocore/json-comment/.travis.yml:  - composer test:cov
vendor/adhocore/json-comment/.travis.yml:  - bash <(curl -s https://codecov.io/bash)
